{"./":{"url":"./","title":"前言","keywords":"","body":"IDO 智能手环iOS SDK 1.1功能概述 IDOBluetooth、IDOBlueProtocol、IDOBlueUpdate适用于iOS设备并支持IDO公司的手环，实现蓝牙连接控制框架库。基于iOS系统的蓝牙框架，扩展了蓝牙扫描、连接、绑定、控制、设置、获取、监听、传输等功能。利用c编写的协议库实现结构体数据的转换和健康数据同步过程中逻辑处理，减少了蓝牙通信数据的错误，提高了蓝牙通信的速度和准确性。这个特性丰富的API易于使用。 1.2快速集成 1.2.1 使用 Cocoapods 集成 在Podfile文件中添加以下内容： source 'https://github.com/idoosmart/IDOSmartSpec.git' platform :ios, '8.0' target 'your_target_name' do pod 'IDOBluetooth' pod 'IDOBlueProtocol' pod 'IDOBlueUpdate' end 然后在项目根目录下执行 pod update 命令，集成第三方库。 CocoaPods的使用请参考：CocoaPods Guides 1.3初始化 SDK 打开项目设置，Target => Build Settings，修改 Other Linker Flags 添加 -Objc Objective-C工程需要添加一个空的Swift文件,生成Objective-C Bridging Header 依赖系统库CoreBluetooth.framework``libc++.tbd``libsqlite3.0.tbd 在项目的PrefixHeader.pch文件添加以下内容： #import #import #import Swift 项目添加以下内容 import IDOBlueUpdate import IDOBluetooth import IDOBlueProtocol 1.3.1 注册SDK 打开AppDelegate.m文件，在[AppDelegate application:didFinishLaunchingWithOptions:]方法中注册SDK： 接口说明 IDOBluetoothServices * _Nonnull registrationServices(void) @property (nonatomic,copy,nullable) IDOBluetoothServices *_Nonnull(^outputSdkLog)(BOOL isOutput); @property (nonatomic,copy,nullable) IDOBluetoothServices *_Nonnull(^outputProtocolLog)(BOOL isOutput); @property (nonatomic,copy,nullable) IDOBluetoothServices *_Nonnull(^rawDataLog)(BOOL isRecord); @property (nonatomic,copy,nullable) void(^startScanBule)(void(^ _Nullable getDeviceInfoBlock)(IDOGetDeviceInfoBluetoothModel * _Nullable model)); 参数说明 参数 说明 备注 outputSdkLog 输出sdk日志 debug模式下为YES outputProtocolLog 输出协议日志 debug模式下为YES rawDataLog 记录原始日志 根据项目需要添加 Objc: #ifdef DEBUG registrationServices().outputSdkLog(YES).outputProtocolLog(YES).startScanBule(^(IDOGetDeviceInfoBluetoothModel * _Nullable model) { //根据绑定状态执行自动扫描连接，初始化蓝牙管理中心 if(__IDO_BIND__)[IDOBluetoothManager startScan]; else [IDOBluetoothManager refreshDelegate]; }); #else registrationServices().outputSdkLog(NO).outputProtocolLog(NO).startScanBule(^(IDOGetDeviceInfoBluetoothModel * _Nullable model) { //根据绑定状态执行自动扫描连接，初始化蓝牙管理中心 if(__IDO_BIND__)[IDOBluetoothManager startScan]; else [IDOBluetoothManager refreshDelegate]; }); #endif Swift #if DEBUG registrationServices().outputSdkLog!(true).outputProtocolLog!(true).startScanBule!{ (model) in //根据绑定状态执行自动扫描连接，初始化蓝牙管理中心 if IDOBluetoothEngine.shareInstance()?.peripheralEngine.isBind == true { IDOBluetoothManager.startScan() }else { IDOBluetoothManager.refreshDelegate() } } #else registrationServices().outputSdkLog!(false).outputProtocolLog!(false).startScanBule!{ (model) in //根据绑定状态执行自动扫描连接，初始化蓝牙管理中心 if IDOBluetoothEngine.shareInstance()?.peripheralEngine.isBind == true { IDOBluetoothManager.startScan() }else { IDOBluetoothManager.refreshDelegate() } } #endif Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-11 18:13:34 "},"IDOBluetooth.html":{"url":"IDOBluetooth.html","title":"蓝牙管理库","keywords":"","body":"蓝牙管理库 2.1功能概述 当您应用一个未连接的绑定设备时，您需要创建一个视图控制器来实现SDK蓝牙代理。扫描外围设备，代理将返回设备集合，在列表中显示，选择需要连接的设备，连接成功后返回设备信息以及设备是否处于OTA模式，连接失败则会有一个错误回调。默认扫描信号过滤参数为80，自动扫描连接超时时间为20秒。蓝牙管理库（IDOBluetooth）是依赖蓝牙协议库（IDOBlueProtocol），所以在使用蓝牙管理库前，先导入蓝牙协议库。 2.2扫描连接流程图 2.3蓝牙初始化 Objc: [IDOBluetoothManager shareInstance].rssiNum = 100; [IDOBluetoothManager shareInstance].delegate = self; Swift: IDOBluetoothManager.shareInstance()?.rssiNum = 100; IDOBluetoothManager.shareInstance()?.delegate = self; 2.4参数说明 参数 说明 备注 timeout 自动扫描连接超时时长 默认20 rssiNum 设置扫描过滤信号 默认值80 isIntervalScan 是否启动超时间隔扫描 默认yes isReconnect 是否需要重连机制 默认yes autoScanInterval 设置扫描间隔时长 默认10秒 scanMode 蓝牙扫描设备模式 readonly state 蓝牙管理连接状态 readonly errorCode 蓝牙连接错误码 readonly manualConnectTotalTime 手动点击连接设备的总时长 readonly autoConnectTotalTime 自动扫描到成功连接设备的总时长 readonly 2.5基础方法 Objc: //开始扫描 [IDOBluetoothManager startScan]; //刷新蓝牙代理 [IDOBluetoothManager refreshDelegate]; //停止扫描 [IDOBluetoothManager stopScan]; //连接设备 [IDOBluetoothManager connectDeviceWithModel:model]; //断开当前外围设备的连接 [IDOBluetoothManager cancelCurrentPeripheralConnection]; Swift: //开始扫描 IDOBluetoothManager.startScan(); //刷新蓝牙代理 IDOBluetoothManager.refreshDelegate(); //停止扫描 IDOBluetoothManager.stopScan(); //连接设备 IDOBluetoothManager .connectDevice(with: model as? IDOPeripheralModel); //断开当前外围设备的连接 IDOBluetoothManager.cancelCurrentPeripheralConnection(); 2.6代理方法 Objc: - (BOOL)bluetoothManager:(IDOBluetoothManager *)manager centerManager:(CBCentralManager *)centerManager didConnectPeripheral:(CBPeripheral *)peripheral isOatMode:(BOOL)isOtaMode { //设备连接成功回调 return YES; } - (void)bluetoothManager:(IDOBluetoothManager *)manager allDevices:(NSArray *)allDevices otaDevices:(NSArray *)otaDevices { //扫描设备实时返回设备集合回调 } - (void)bluetoothManager:(IDOBluetoothManager *)manager didUpdateState:(IDO_BLUETOOTH_MANAGER_STATE)state { //扫描连接状态回调 } - (void)bluetoothManager:(IDOBluetoothManager *)manager connectPeripheralError:(NSError *)error { //扫描连接错误回调 } Swift: IDOBluetoothManagerDelegate func bluetoothManager(_ manager: IDOBluetoothManager!, connectPeripheralError error: Error!) { //扫描连接错误回调 }; func bluetoothManager(_ manager: IDOBluetoothManager!, didUpdate state: IDO_BLUETOOTH_MANAGER_STATE) { //扫描连接状态回调 }; func bluetoothManager(_ manager: IDOBluetoothManager!, allDevices: [IDOPeripheralModel]!, otaDevices: [IDOPeripheralModel]!) { //扫描设备实时返回设备集合回调 }; func bluetoothManager(_ manager: IDOBluetoothManager!, center centerManager: CBCentralManager!, didConnect peripheral: CBPeripheral!, isOatMode isOtaMode: Bool) -> Bool { //设备连接成功回调 return true; }; 2.7蓝牙通知 1.IDOBluetoothConnectStateNotifyName 蓝牙扫描连接状态监听通知名字，一般情况全局监听此通知，当蓝牙状态发生变化时抛出通知，修改对应的UI交互。 2.IDOBluetoothConnectErrorNotifyName 蓝牙扫描连接错误监听通知名字，一般情况全局监听此通知，当蓝牙发生错误时抛出通知，修改对应的UI交互。 3.IDOBluetoothOtaModeNotifyName 蓝牙连接手环为OTA模式监听通知名字，一般情况全局监听此通知，当蓝牙连接后发现当前手环为OTA模式时抛出通知，根据业务进行手环升级操作。 Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-19 17:59:40 "},"IDOBlueUpdate.html":{"url":"IDOBlueUpdate.html","title":"升级管理库","keywords":"","body":"蓝牙升级库 3.1功能概述 SDK升级功能只负责固件升级。不处理固件版本确定和固件下载。注意固件下载的完整性，在升级期间传入固件本地沙箱路径，监视升级进度和完成状态，以及错误代理回调。升级库的当前版本添加了nordic、realtk、apollo平台。升级管理库（IDOBlueUpdate）是依赖蓝牙协议库（IDOBlueProtocol），所以在使用升级管理库前，先导入蓝牙协议库。 3.2升级初始化 Objc: [IDOUpdateFirmwareManager shareInstance].delegate = self; [IDOUpdateFirmwareManager shareInstance].updateType = IDO_NORDIC_PLATFORM_TYPE; Swift: IDOUpdateFirmwareManager.shareInstance().delegate = self; IDOUpdateFirmwareManager.shareInstance().updateType = IDO_UPDATE_PLATFORM_TYPE.NORDIC_PLATFORM_TYPE; 3.3参数说明 参数 说明 备注 packagePath 固件包本地路径 本地沙盒路径 errorCode 升级错误码 readonly state 升级状态 readonly updateType 升级平台类型 支持nordic、realtk、apollo 3.4基础方法 Objc: //开始升级 [IDOUpdateFirmwareManager startUpdate]; Swift: //开始升级 IDOUpdateFirmwareManager.startUpdate(); 3.5代理方法 Objc: - (NSString *)currentPackagePathWithUpdateManager:(IDOUpdateFirmwareManager *)manager { // 固件包本地存放路径 return filePath; } - (void)updateManager:(IDOUpdateFirmwareManager *)manager state:(IDO_UPDATE_STATE)state { if (state == IDO_UPDATE_COMPLETED) { //升级完成 }else if state == IDO_UPDATE_DID_ENTER_OTA{ //进入ota模式 }else if state == IDO_UPDATE_STARTING { //升级中 } } - (void)updateManager:(IDOUpdateFirmwareManager *)manager updateError:(NSError *)error { // 升级失败 } - (void)updateManager:(IDOUpdateFirmwareManager *)manager progress:(float)progress message:(NSString *)message { // 升级进度 (0-1) } @optional - (IDO_UPDATE_DFU_FIRMWARE_TYPE)selectDfuFirmwareTypeWithUpdateManager:(IDOUpdateFirmwareManager * _Nullable)manager { // 升级nordic application类型 return IDO_DFU_FIRMWARE_APPLICATION_TYPE; // 升级nordic bootloader类型 return IDO_DFU_FIRMWARE_BOOTLOADER_TYPE; } - (IDO_REALTK_UPDATE_TYPE)selectRealtkTypeWithUpdateManager(IDOUpdateFirmwareManager *_Nullable)manager supportOtaMode:(BOOL)isOtaMode supportSilentMode:(BOOL)isSilentMode { // 升级realtk主控程序 return IDO_NORMAL_MODE_UPDATE_TYPE; // 升级realtk flash 文件 return IDO_SILENT_MODE_UPDATE_TYPE; } Swift: IDOUpdateManagerDelegate func currentPackagePath(withUpdate manager: IDOUpdateFirmwareManager?) -> String? { // 固件包本地存放路径 return filePath; } func update(_ manager: IDOUpdateFirmwareManager?, progress: Float, message: String?) { // 升级进度 (0-1) } func update(_ manager: IDOUpdateFirmwareManager?, state: IDO_UPDATE_STATE) { if state == IDO_UPDATE_STATE.COMPLETED { //升级完成 }else if state == IDO_UPDATE_STATE.DID_ENTER_OTA{ //进入ota模式 }else if state == IDO_UPDATE_STATE.STARTING { //升级中 } } func update(_ manager: IDOUpdateFirmwareManager?, updateError error: Error?) { // 升级失败 } func selectDfuFirmwareType(withUpdate manager: IDOUpdateFirmwareManager?) -> IDO_UPDATE_DFU_FIRMWARE_TYPE { // 升级nordic application类型 return IDO_UPDATE_DFU_FIRMWARE_TYPE.DFU_FIRMWARE_APPLICATION_TYPE; // 升级nordic bootloader类型 return IDO_UPDATE_DFU_FIRMWARE_TYPE.DFU_FIRMWARE_BOOTLOADER_TYPE; } func selectRealtkType(withUpdate manager: IDOUpdateFirmwareManager?, supportOtaMode isOtaMode: Bool, supportSilentMode isSilentMode: Bool) -> IDO_REALTK_UPDATE_TYPE { // 升级realtk主控程序 return IDO_REALTK_UPDATE_TYPE.NORMAL_MODE_UPDATE_TYPE; // 升级realtk flash 文件 return IDO_REALTK_UPDATE_TYPE.SILENT_MODE_UPDATE_TYPE; } Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-11 16:38:28 "},"IDODeviceBinding.html":{"url":"IDODeviceBinding.html","title":"设备绑定解绑","keywords":"","body":"设备绑定解绑 4.1功能概述 第一次连接设备时，需要执行绑定命令，根据绑定命令返回的状态类型，授权绑定和非授权绑定，授权绑定需要输入手环显示的验证码才能绑定成功，非授权绑定不需要确认可直接绑定。设备解绑有连接解绑和断开解绑，连接时解绑是App发送解绑命令实现双方解绑，同时会抹掉手环上的所有数据，断开时解绑是App单方修改绑定状态实现解绑，不会抹掉手环上的数据。 4.2绑定命令 Objc: IDOSetBindingInfoBluetoothModel * model = [[IDOSetBindingInfoBluetoothModel alloc]init]; [IDOFoundationCommand bindingCommand:model callback:^(IDO_BIND_STATUS status, int errorCode) { if (errorCode == 0) { if (status == IDO_BLUETOOTH_BIND_SUCCESS) { //绑定成功 IDOSetBindingInfoBluetoothModel * model = [IDOSetBindingInfoBluetoothModel currentModel]; if (model.authLength > 0) { //绑定类型错误，当前不支持 return; } }else if (status == IDO_BLUETOOTH_BINDED) { //已经绑定 }else if (status == IDO_BLUETOOTH_BIND_FAILED) { //绑定失败 }else if (status == IDO_BLUETOOTH_NEED_AUTH) { //需要授权绑定 }else if (status == IDO_BLUETOOTH_REFUSED_BINDED) { //拒绝绑定 } }else { //绑定失败 } }]; //如果需要授权绑定，执行下面的代码 IDOSetBindingInfoBluetoothModel * model = [IDOSetBindingInfoBluetoothModel currentModel]; //输入授权码 model.authCode = authCode; [IDOFoundationCommand setAuthCodeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //授权绑定成功 }else { //授权绑定失败 } }]; Swift: let model = IDOSetBindingInfoBluetoothModel.init(); IDOFoundationCommand.bindingCommand(model, callback: {(state,errorCode) in if errorCode == 0 { if state == IDO_BIND_STATUS.BLUETOOTH_BIND_SUCCESS { //绑定成功 let currentModel = IDOSetBindingInfoBluetoothModel.current(); if currentModel?.authLength > 0 { //绑定类型错误，当前不支持 return; } }else if state == IDO_BIND_STATUS.BLUETOOTH_BINDED { // 已经绑定 }else if state == IDO_BIND_STATUS.BLUETOOTH_BIND_FAILED { // 绑定失败 }else if state == IDO_BIND_STATUS.BLUETOOTH_NEED_AUTH { // 授权绑定 }else if state == IDO_BIND_STATUS.BLUETOOTH_REFUSED_BINDED { // 拒绝绑定 } }else { //绑定失败 } }); //如果需要授权绑定，执行下面的代码 let currentModel = IDOSetBindingInfoBluetoothModel.current(); currentModel?.authCode = authCode; IDOFoundationCommand.setAuthCode(currentModel, callback: {(errorCode) in if errorCode == 0 { //授权绑定成功 }else { //授权绑定失败 } }); 4.3解绑命令 普通解绑命令 Objc: //此方法需要在连接状态时，执行成功回调，属于双方解绑，并删除手环数据 [IDOFoundationCommand unbindingCommand:^(int errorCode) { if (errorCode == 0) { //解绑成功 }else { //解绑失败 } }]; Swift: //此方法需要在连接状态时，执行成功回调，属于双方解绑，并删除手环数据 IDOFoundationCommand.unbindingCommand { (errorCode) in if errorCode == 0 { //解绑成功 }else { //解绑失败 } }; 强制解绑命令 Objc: /* 此方法在连接状态时，执行成功回调，属于双方解绑，并删除手环数据； 在断开状态时，执行成功回调，App单方解绑，并不会删除手环数据； */ [IDOFoundationCommand mandatoryUnbindingCommand:^(int errorCode) { if (errorCode == 0) { //解绑成功 }else { //解绑失败 } }]; Swift: /* 此方法在连接状态时，执行成功回调，属于双方解绑，并删除手环数据； 在断开状态时，执行成功回调，App单方解绑，并不会删除手环数据； */ IDOFoundationCommand.mandatoryUnbindingCommand { (errorCode) in if errorCode == 0 { //解绑成功 }else { //解绑失败 } }; 4.4切换设备实现方法 Objc: //获取本地存储所有绑定过的设备 NSArray * allDevices = [IDOGetDeviceInfoBluetoothModel queryAllDeviceModels]; //选择需要切换连接的设备 self.needConnectDeviceMode = allDevices[index]; [IDOFoundationCommand switchDeviceCommand:^(int errorCode) { if (errorCode == 0) { //断开连接，启动扫描 [IDOBluetoothManager startScan]; }else { //切换失败 } }]; //执行蓝牙代理方法 - (BOOL)bluetoothManager:(IDOBluetoothManager *)manager centerManager:(CBCentralManager *)centerManager didConnectPeripheral:(CBPeripheral *)peripheral isOatMode:(BOOL)isOtaMode { //切换手环成功后要发起绑定 return YES; } - (void)bluetoothManager:(IDOBluetoothManager *)manager allDevices:(NSArray *)allDevices otaDevices:(NSArray *)otaDevices { for (IDOPeripheralModel * model in allDevices) { if ( [model.macAddr isEqualToString:self.needConnectDeviceMode.macAddr] ||[model.uuidStr isEqualToString:self.needConnectDeviceMode.uuidStr]) { //启动连接 [IDOBluetoothManager connectDeviceWithModel:model]; } } } Swift: //获取本地存储所有绑定过的设备 let allDevies = IDOGetDeviceInfoBluetoothModel.queryAllDeviceModels(); //选择需要切换连接的设备 self.needConnectDeviceMode = allDevies?[index]; IDOFoundationCommand .switchDeviceCommand { (errorCode) in if errorCode == 0 { //断开连接，启动扫描 IDOBluetoothManager.startScan(); }else { //切换失败 } }; //执行蓝牙代理方法 func bluetoothManager(_ manager: IDOBluetoothManager!, allDevices: [IDOPeripheralModel]!, otaDevices: [IDOPeripheralModel]!) { for model in allDevices { if model.macAddr == self.needConnectDeviceMode?.macAddr || model.uuidStr == self.needConnectDeviceMode?.uuidStr{ //启动连接 IDOBluetoothManager.connectDevice(with: model); } } }; func bluetoothManager(_ manager: IDOBluetoothManager!, center centerManager: CBCentralManager!, didConnect peripheral: CBPeripheral!, isOatMode isOtaMode: Bool) -> Bool { //切换手环成功后要发起绑定 return true; }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-18 16:22:31 "},"IDOErrorCode.html":{"url":"IDOErrorCode.html","title":"错误码说明","keywords":"","body":"错误码说明 5.1功能概述 errorCode错误码是全局命令回调的判断状态依据，当errorCode等于0为成功，其他值为失败。可以通过IDOErrorCodeToStr类中的方法获取错误码字符串，也可以通过说明文档对应code的解释。 5.2对应错误码表 错误码 字符串 备注 0 SUCCESS 成功 4 ERROR_NO_MEM 未知 5 ERROR_NOT_FIND 未找到方法 6 ERROR_NOT_SUPPORTED 不支持此功能 7 ERROR_INVALID_PARAM 无效参数 8 ERROR_INVALID_STATE 无效状态 9 ERROR_INVALID_LENGTH 无效数据长度 10 ERROR_INVALID_FLAGS 未知 11 ERROR_INVALID_DATA 无效数据 12 ERROR_DATA_SIZE 错误数据大小 13 ERROR_TIMEOUT 超时 14 ERROR_NULL 空数据 15 ERROR_FORBIDDEN 禁止错误 17 ERROR_BUSY 未知 18 ERROR_LOW_BATT 电量过低 19 ERROR_BLUETOOTH_DISCONNECT 蓝牙断线 20 ERROR_MODEL_DATA 模型数据错误 21 ERROR_CURRENT_OTA 当前OTA 22 ERROR_DEVICE_SYNCING 同步中 23 ERROR_AUTH_CODE 错误授权码 24 ERROR_SET_PAIRING_CANCEL 取消配对 25 ERROR_SET_PAIRING_UNKNOWN_TIMEOUT 配对未知超时 26 ERROR_SET_PAIRING_RECONNECT 配对重连失败 27 ERROR_SET_OTA_RECONNECT OTA重连失败 28 ERROR_TRAN_FILE_NO_EXIST 传输文件不存在传输文件路径错误 29 ERROR_TRAN_FILE_FAILED 传输文件失败 30 ERROR_ALARM_ID 闹钟ID错误 31 ERROR_PAIRING_TIMEOUT 配对超时 32 ERROR_FAST_CONFIG 快速配送错误 33 ERROR_MIGRATION_ING 数据迁移中 34 ERROR_BLUE_PAIRING 蓝牙配对中 35 ERROR_DEVICE_NO_BIND 设备未绑定 36 ERROR_TRAN_FILE_GPS_RUN GPS运行中 37 ERROR_SYNC_ITEM_TYPE 错误同步类项 38 ERROR_TRAN_FILE_ING 传输文件中 39 ERROR_METHOD_DEPRECATED 方法弃用 Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-19 16:15:23 "},"IDOSetUpFunction.html":{"url":"IDOSetUpFunction.html","title":"设置命令功能","keywords":"","body":"设置命令 6.1功能概述 设置命令是移动端通过命令发送数据到手环端，以手环端返回响应状态对应处理数据，当成功时存储设置数据，反则不作存储，根据状态码作提示，设置成功是的errorCode等于0 6.2主要命令功能 设置时间命令 设置闹钟命令 设置用户信息 设置寻找手机 设置抬腕命令 设置左右手穿戴 设置防丢失命令 设置显示模式 设置智能提醒 设置久坐提醒 设置天气预报 设置心率模式 设置心率区间 设置勿扰模式 设置单位命令 设置一键呼救 设置快捷方式 设置血压校准 设置运动快捷方式 设置运动排序 设置屏幕亮度 设置音乐开关 设置GPS信息 设置表盘ID 设置走动提醒 设置v3心率模式 设置血氧开关 设置睡眠开关 设置压力开关 设置菜单列表 设置生理周期提醒 设置生理周期 设置喝水提醒 设置呼吸训练 设置运动开关 6.3 Demo设置功能入口 Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-27 11:11:16 "},"set/IDOSetTimeFunction.html":{"url":"set/IDOSetTimeFunction.html","title":"设置时间命令","keywords":"","body":"设置时间命令 时间模型说明 IDOSetTimeInfoBluetoothModel 参数 说明 备注 year 年 int month 月 int day 日 int hour 时 int minute 分 int second 秒 int weekDay 星期 int timeZone 时区 1-24 timeStamp 时间戳 str 命令代码 Objc: //获取当前时间 IDOSetTimeInfoBluetoothModel * model = [IDOSetTimeInfoBluetoothModel currentModel]; //获取UTC时间 if(__IDO_FUNCTABLE__.funcTable28Model.utcTimeZone) { IDOSetTimeInfoBluetoothModel * model = [IDOSetTimeInfoBluetoothModel getCurrentUtcTimeModel]; } [IDOFoundationCommand setCurrentTimeCommand:model callback:^(int errorCode) { if(errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持此方法 }else { //设置错误 } }]; Swift: let model1:IDOSetTimeInfoBluetoothModel = IDOSetTimeInfoBluetoothModel.current(); if IDOBluetoothEngine.shareInstance().managerEngine.funcTableModel.funcTable28Model.utcTimeZone { let model:IDOSetTimeInfoBluetoothModel = IDOSetTimeInfoBluetoothModel.getCurrentUtcTime(); } IDOFoundationCommand.setCurrentTime(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 13:09:10 "},"set/IDOSetAlarmFunction.html":{"url":"set/IDOSetAlarmFunction.html","title":"设置闹钟命令","keywords":"","body":"设置闹钟命令 闹钟模型说明 IDOSetAlarmInfoBluetoothModel 参数 说明 备注 isOpen 闹钟开启状态 bool isSync 是否同步到手环 不需要赋值，闹钟设置成功后会自动赋值 isDelete 是否删除 默认YES type 类型 0:起床,1:睡眠,2:锻炼,3:吃药,4:约会,5:聚会,6:会议,7:自定义 hour 分 int minute 秒 int repeat 重复集合 [星期一,星期二,星期三,星期四,星期五,星期六,星期日] tsnoozeDuration 贪睡时长 int alarmId 闹钟ID int setTimeStamp 闹钟修改的时间戳 不需要赋值，闹钟设置成功后会自动赋值 IDOSetExtensionAlarmInfoBluetoothModel 参数 说明 备注 alarmVersion 闹钟版本号 int alarmCount 闹钟个数 int items 闹钟集合 在同步配置时初始化手环闹钟 命令代码 设置v2闹钟 Objc: //所有闹钟 NSArray * alarms = [IDOSetAlarmInfoBluetoothModel queryAllAlarms]; //未开启或删除的闹钟 NSArray * alarms = [IDOSetAlarmInfoBluetoothModel queryAllNoOpenAlarms]; [IDOFoundationCommand setAllAlarmsCommand:alarms callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let alarms = IDOSetAlarmInfoBluetoothModel.queryAllAlarms(); let alarms = IDOSetAlarmInfoBluetoothModel.queryAllNoOpenAlarms(); IDOFoundationCommand.setAllAlarms(alarms) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; 设置v3闹钟 Objc: IDOSetExtensionAlarmInfoBluetoothModel * alarmModel = [IDOSetExtensionAlarmInfoBluetoothModel currentModel]; [IDOFoundationCommand setV3AllAlarmsCommand:alarmModel callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetExtensionAlarmInfoBluetoothModel.current(); IDOFoundationCommand.setV3AllAlarms(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 12:37:58 "},"set/IDOSetUserInfoFunction.html":{"url":"set/IDOSetUserInfoFunction.html","title":"设置用户信息","keywords":"","body":"设置用户信息 用户模型说明 IDOSetUserInfoBuletoothModel 参数 说明 备注 year 年 int month 月 int day 日 int height 身高 单位:厘米 weight 体重 单位:千克 gender 性别 1:男,2:女 goalSleepDataHour 目标睡眠 (时) int goalSleepDataMinute 目标睡眠 (分) int goalStepData 目标步数 单位:步 goalCalorieData 目标卡路里 单位:大卡 goalDistanceData 目标距离 单位:米 goalWeightData 目标体重 单位:千克 goalType 目标类型 0:步数,1:卡路里,2:距离 isLogin 是否登陆 bool bindState 绑定状态 int 命令代码 设置用户信息 Objc: IDOSetUserInfoBuletoothModel * model = [IDOSetUserInfoBuletoothModel currentModel]; [IDOFoundationCommand setUserInfoCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetUserInfoBuletoothModel.current(); IDOFoundationCommand.setUserInfo(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; 设置v2运动目标 每设置一个目标类型就执行一次命令 Objc: IDOSetUserInfoBuletoothModel * model = [IDOSetUserInfoBuletoothModel currentModel]; model.goalStepData = 10000; model.goalCalorieData = 1000; model.goalDistanceData = 20000; [IDOFoundationCommand setTargetInfoCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetUserInfoBuletoothModel.current(); model?.goalStepData = 10000; model?.goalCalorieData = 1000; model?.goalDistanceData = 20000; IDOFoundationCommand.setUserInfo(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; 设置v3运动目标 Objc: IDOSetUserInfoBuletoothModel * model = [IDOSetUserInfoBuletoothModel currentModel]; model.goalCalorieData = 1000; model.goalDistanceData = 20000; [IDOFoundationCommand setCalorieAndDistanceGoalCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetUserInfoBuletoothModel.current(); model?.goalCalorieData = 1000; model?.goalDistanceData = 20000; IDOFoundationCommand.setCalorieAndDistanceGoal(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 14:11:02 "},"set/IDOSetFindPhoneFunction.html":{"url":"set/IDOSetFindPhoneFunction.html","title":"设置寻找手机","keywords":"","body":"设置寻找手机 寻找手机模型说明 IDOSetFindPhoneInfoBuletoothModel 参数 说明 备注 isOpen 寻找手机开关 bool 命令代码 Objc: IDOSetFindPhoneInfoBuletoothModel * model = [IDOSetFindPhoneInfoBuletoothModel currentModel]; [IDOFoundationCommand setFindPhoneCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetFindPhoneInfoBuletoothModel.current(); IDOFoundationCommand.setFindPhone(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 14:34:20 "},"set/IDOSetHandUpFunction.html":{"url":"set/IDOSetHandUpFunction.html","title":"设置抬腕命令","keywords":"","body":"设置抬腕命令 抬腕模型说明 IDOSetHandUpInfoBuletoothModel 参数 说明 备注 isOpen 开关 bool isHasTimeRange 是否有相隔时间 bool showSecond 显示时长 3～10 秒 startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int 命令代码 Objc: IDOSetHandUpInfoBuletoothModel * model = [IDOSetHandUpInfoBuletoothModel currentModel]; [IDOFoundationCommand setHandUpCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetHandUpInfoBuletoothModel.current(); IDOFoundationCommand.setHandUp(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 14:37:43 "},"set/IDOSetLeftRightFundation.html":{"url":"set/IDOSetLeftRightFundation.html","title":"设置左右手穿戴","keywords":"","body":"设置左右手穿戴 左右手穿戴模型说明 IDOSetLeftOrRightInfoBuletoothModel 参数 说明 备注 isRight 是否右手佩戴 bool 命令代码 Objc: IDOSetLeftOrRightInfoBuletoothModel * model = [IDOSetLeftOrRightInfoBuletoothModel currentModel]; [IDOFoundationCommand setLeftRightHandCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetLeftOrRightInfoBuletoothModel.current(); IDOFoundationCommand.setLeftRightHand(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 14:40:32 "},"set/IDOPreventLostFunction.html":{"url":"set/IDOPreventLostFunction.html","title":"设置防丢失命令","keywords":"","body":"设置防丢失命令 防丢模型说明 IDOSetPreventLostInfoBuletoothModel 参数 说明 备注 levelType 防丢失级别 0:不防丢,1:近距离防丢,2:中距离防丢,3:远距离防丢 命令代码 Objc: IDOSetPreventLostInfoBuletoothModel * model = [IDOSetPreventLostInfoBuletoothModel currentModel]; [IDOFoundationCommand setPreventLostCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetPreventLostInfoBuletoothModel.current(); IDOFoundationCommand.setPreventLost(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 14:46:46 "},"set/IDOSetDisplayFunction.html":{"url":"set/IDOSetDisplayFunction.html","title":"设置显示模式","keywords":"","body":"设置显示模式 显示模式模型说明 IDOSetDisplayModeInfoBluetoothModel 参数 说明 备注 modeType 显示模式 0:默认,1:横屏,2:竖屏,3:旋转180度 命令代码 Objc: IDOSetDisplayModeInfoBluetoothModel * model = [IDOSetDisplayModeInfoBluetoothModel currentModel]; [IDOFoundationCommand setDisplayModeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetDisplayModeInfoBluetoothModel.current(); IDOFoundationCommand.setDisplayMode(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 14:48:37 "},"set/IDOSetNoticeFunction.html":{"url":"set/IDOSetNoticeFunction.html","title":"设置智能提醒","keywords":"","body":"设置智能提醒 设置智能提醒先发起配对，再开启对应通知的开关 智能提醒模型说明 IDOSetPairingInfoBuletoothModel 参数 说明 备注 pairingTimeStr 配对时间戳 str isPairing 是否配对 bool IDOSetNoticeInfoBuletoothModel 参数 说明 备注 isPairing 是否配对 bool callDelay 来电延迟 目前设置必须大于等于3秒才有效 isOnChild 是否开启子开关 只对智能提醒有效,对来电提醒无效 isOnCall 来电提醒 bool isOnSms 短信提醒 bool isOnEmail 邮件提醒 bool isOnWeChat 微信提醒 bool isOnQq qq提醒 bool isOnWeibo 微博提醒 bool isOnFaceBook FaceBook提醒 bool isOnTwitter Twitter提醒 bool isOnWhatsapp Whatsapp提醒 bool isOnMessenger Messenger提醒 bool isOnInstagram Instagram提醒 bool isOnLinkedIn LinkedIn提醒 bool isOnCalendar Calendar提醒 bool isOnSkype Skype提醒 bool isOnAlarm Alarm提醒 bool isOnPokeman Pokeman提醒 bool isOnVkontakte Vkontakte提醒 bool isOnLine Line提醒 bool isOnViber Viber提醒 bool isOnKakaoTalk KakaoTalk提醒 bool isOnGmail Gmail提醒 bool isOnOutlook Outlook提醒 bool isOnSnapchat Snapchat提醒 bool isOnTelegram Telegram提醒 bool isOnChatwork Chatwork提醒 bool isOnSlack Slack提醒 bool isOnYahooMail Yahoo Mail提醒 bool isOnTumblr Tumblr提醒 bool isOnYoutube Youtube提醒 bool isOnYahooPinterest Yahoo Pinterest提醒 bool 命令代码 设置配对 建议不使用此命令方法，可作辅助命令使用，请使用配对和通知开关命令一体方法 Objc: [IDOFoundationCommand setBluetoothPairingCommandWithCallback:^(BOOL isNeedDisconnect, int stateCode) { //配对过程是否需要断线,配对过程状态 } pairingComplete:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: IDOFoundationCommand.setBluetoothPairingCommandWithCallback({ (isNeedDisconnect, stateCode) in //配对过程是否需要断线,配对过程状态 }) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6 { //设备不支持 }else { //设置失败 } }; 设置通知子开关 建议不使用此命令方法，可作辅助命令使用，请使用配对和通知开关命令一体方法 Objc: IDOSetNoticeInfoBuletoothModel * model = [IDOSetNoticeInfoBuletoothModel currentModel]; [IDOFoundationCommand setChildSwitchNoticeStateCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetNoticeInfoBuletoothModel.current(); IDOFoundationCommand.setChildSwitchNoticeState(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6 { //设备不支持 }else { //设置失败 } }; 设置配对和通知开关 如果设备没有配对，会发起配对，等配对成功后再执行设置子开关状态，需要配对耗时比较长 请监听回调。 Objc: IDOSetNoticeInfoBuletoothModel * model = [IDOSetNoticeInfoBuletoothModel currentModel]; [IDOFoundationCommand setSwitchNoticeCommand:model callback:^(BOOL isNeedDisconnect, int stateCode) { //配对过程是否需要断线,配对过程状态 } complete:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetNoticeInfoBuletoothModel.current(); IDOFoundationCommand.setSwitchNotice(model, callback: { (isNeedDisconnect, stateCode) in //配对过程是否需要断线,配对过程状态 }) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6 { //设备不支持 }else { //设置失败 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 16:29:32 "},"set/IDOSetLongSitFunction.html":{"url":"set/IDOSetLongSitFunction.html","title":"设置久坐提醒","keywords":"","body":"设置久坐提醒 久坐模型说明 IDOSetLongSitInfoBuletoothModel 参数 说明 备注 startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int interval 间隔 0-10分钟 isOpen 开关 bool selectWeeks 重复集合 [星期一,星期二,星期三,星期四,星期五,星期六,星期日] 命令代码 Objc: IDOSetLongSitInfoBuletoothModel * model = [IDOSetLongSitInfoBuletoothModel currentModel]; [IDOFoundationCommand setLongSitCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetLongSitInfoBuletoothModel.current(); IDOFoundationCommand.setLongSit(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 12:08:05 "},"set/IDOSetWeatherFunction.html":{"url":"set/IDOSetWeatherFunction.html","title":"设置天气预报","keywords":"","body":"设置天气预报 天气预报模型说明 IDOSetWeatherSwitchInfoBluetoothModel 参数 说明 备注 isOpen 开关 bool IDOSetWeatherDataInfoBluetoothModel 参数 说明 备注 timeStr 天气预报更新的时间戳 str timeStr 天气预报更新的时间戳 str todayType 当天天气类型 0:其他,1:晴,2:多云,3:阴,4:雨,5:暴雨,6:雷阵雨,7:雪,8:雨夹雪,9:台风,10:沙尘暴,11:夜间晴,12:夜间多云,13:热,14:冷,15:清风,16:大风,17:雾霭,18:阵雨,19:多云转晴 todayMaxTemp 当天最高温度 int todayMinTemp 当天最小温度 int humidity 湿度 int todayUvIntensity 紫外线强度 int todayAqi 空气污染指数 int future 后三天天的天气集合 格式:@{@\"type\":@(0),@\"maxTemp\":@(0),@\"minTemp\":@(0)} 命令代码 设置天气开关 Objc: IDOSetWeatherSwitchInfoBluetoothModel * model = [IDOSetWeatherSwitchInfoBluetoothModel currentModel]; [IDOFoundationCommand setWeatherCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetWeatherSwitchInfoBluetoothModel.current(); IDOFoundationCommand.setWeather(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; 设置天气数据 Objc: IDOSetWeatherDataInfoBluetoothModel * model = [IDOSetWeatherDataInfoBluetoothModel currentModel]; [IDOFoundationCommand setWeatherDataCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetWeatherDataInfoBluetoothModel.current(); IDOFoundationCommand.setWeatherData(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 16:47:16 "},"set/IDOSetHrModeFunction.html":{"url":"set/IDOSetHrModeFunction.html","title":"设置心率模式","keywords":"","body":"设置心率模式 心率模式模型说明 IDOSetHrModeInfoBluetoothModel 参数 说明 备注 modeType 心率模式 0:关闭心率监测功能,1:手动模式,2:自动模式,3:持续监测 isHasTimeRange 是否有相隔时间 bool startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int measurementInterval 测量间隔 单位:分钟 命令代码 Objc: IDOSetHrModeInfoBluetoothModel * model = [IDOSetHrModeInfoBluetoothModel currentModel]; [IDOFoundationCommand setHrModeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetHrModeInfoBluetoothModel.current(); IDOFoundationCommand.setHrMode(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 11:16:36 "},"set/IDOSetHrIntervalFunction.html":{"url":"set/IDOSetHrIntervalFunction.html","title":"设置心率区间","keywords":"","body":"设置心率区间 心率区间模型说明 IDOSetHrIntervalInfoBluetoothModel 参数 说明 备注 burnFat 燃烧脂肪 int aerobic 有氧运动 int limitValue 极限运动 int userMaxHr 最大心率 int warmUp 热身运动 int anaerobic 无氧运动 int minHr 最小心率 int maxHrRemind 最大心率提醒开关 bool minHrRemind 最小心率提醒开关 bool startHour 开始 (时) int startMinute 开始 (分) int stopHour 结束 (时) int stopMinute 结束 (分) int 命令代码 Objc: IDOSetHrIntervalInfoBluetoothModel * model = [IDOSetHrIntervalInfoBluetoothModel currentModel]; [IDOFoundationCommand setHrIntervalCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetHrIntervalInfoBluetoothModel.current(); IDOFoundationCommand.setHrInterval(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 17:46:22 "},"set/IDOSetNoDisturbFunction.html":{"url":"set/IDOSetNoDisturbFunction.html","title":"设置勿扰模式","keywords":"","body":"设置勿扰模式 勿扰模式模型说明 IDOSetNoDisturbModeInfoBluetoothModel 参数 说明 备注 isOpen 开关 bool startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int isHaveRangRepeat 是否有间隔重复提醒 bool repeat 重复集合 [星期一,星期二,星期三,星期四,星期五,星期六,星期日] 命令代码 Objc: IDOSetNoDisturbModeInfoBluetoothModel * model = [IDOSetNoDisturbModeInfoBluetoothModel currentModel]; [IDOFoundationCommand setNoDisturbModeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetNoDisturbModeInfoBluetoothModel.current(); IDOFoundationCommand.setNoDisturbMode(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 12:08:34 "},"set/IDOSetUnitFunction.html":{"url":"set/IDOSetUnitFunction.html","title":"设置单位命令","keywords":"","body":"设置单位命令 单位模型说明 IDOSetUnitInfoBluetoothModel 参数 说明 备注 distanceUnit 距离单位 0x00:无效,0x01:km,0x02:mi weightUnit 重量单位 0x00:无效,0x01:kg,0x02:lb,0x03:英石 tempUnit 温度单位 0x00:无效,0x01:°C,0x02:°F languageUnit 语言单位 无效:0,中文:1,英文:2,法语:3,德语:4,意大利语:5,西班牙语:6,日语:7, 波兰语:8,捷克语:9,罗马尼亚:10,立陶宛语:11,荷兰语:12,斯洛文尼亚:13, 匈牙利语:14,俄罗斯语:15,乌克兰语:16,斯洛伐克语:17,丹麦语:18, 克罗地亚:19,印尼语:20,韩语:21,印地语:22,葡萄牙语:23,土耳其:24, 泰国语:25,越南语:26,缅甸语:27,菲律宾语:28,繁体中文:29,希腊语:30 功能表判断 strideWalk 走路步伐 根据男性换算,默认值:72cm strideRun 跑步步伐 根据男性换算,默认值:90cm strideGps gps校准步长 0x00:无效,0x01:开,0x02:关 timeUnit 时间单位 0x00:无效,0x01:24小时制,0x02:12小时制 weekStart 周的开始日 星期日:0x01,星期一:0x00,星期六:0x03 命令代码 Objc: IDOSetUnitInfoBluetoothModel * model = [IDOSetUnitInfoBluetoothModel currentModel]; [IDOFoundationCommand setUnitCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetUnitInfoBluetoothModel.current(); IDOFoundationCommand.setUnit(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-25 12:00:59 "},"set/IDOSetOneKeySosFunction.html":{"url":"set/IDOSetOneKeySosFunction.html","title":"设置一键呼救","keywords":"","body":"设置一键呼救 一键呼救模型说明 IDOSetOneKeySosInfoBuletoothModel 参数 说明 备注 isOpen 开关 bool 命令代码 Objc: IDOSetOneKeySosInfoBuletoothModel * model = [IDOSetOneKeySosInfoBuletoothModel currentModel]; [IDOFoundationCommand setOneKeySosCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetOneKeySosInfoBuletoothModel.current(); IDOFoundationCommand.setOneKeySos(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 18:22:09 "},"set/IDOSetShortcutFunction.html":{"url":"set/IDOSetShortcutFunction.html","title":"设置快捷方式","keywords":"","body":"设置快捷方式 快捷方式模型说明 IDOSetShortcutInfoBluetoothModel 参数 说明 备注 shortcutType 快捷方式类型 0:无效,1:拍照,2:运动模式,3:勿扰模式 命令代码 Objc: IDOSetShortcutInfoBluetoothModel * model = [IDOSetShortcutInfoBluetoothModel currentModel]; [IDOFoundationCommand setShortcutCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetShortcutInfoBluetoothModel.current(); IDOFoundationCommand.setShortcut(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 18:34:43 "},"set/IDOSetBpFunction.html":{"url":"set/IDOSetBpFunction.html","title":"设置血压校准","keywords":"","body":"设置血压校准 血压校准模型说明 IDOSetBloodPressureInfoBluetoothModel 参数 说明 备注 diastolic 舒张压 int shrinkage 收缩压 int statusCode 返回校准状态 0x01:成功进入校准模式,正在校准 0x02:在运动模式,0x03:设备忙碌,0x04:无效的状态,0x06:校准失败,0x00:校准成功 flag 血压校准控制 0x01:血压校准开始,0x02:血压校准查询 命令代码 Objc: IDOSetBloodPressureInfoBluetoothModel * model = [IDOSetBloodPressureInfoBluetoothModel currentModel]; [IDOFoundationCommand setBpCalCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetBloodPressureInfoBluetoothModel.current(); IDOFoundationCommand.setBpCal(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 18:26:35 "},"set/IDOSetSportShortcutFunction.html":{"url":"set/IDOSetSportShortcutFunction.html","title":"设置运动快捷方式","keywords":"","body":"设置运动快捷方式 每次选择最多8个运动模式设置 运动快捷方式模型说明 IDOSetSportShortcutInfoBluetoothModel 参数 说明 备注 isWalk 走路 bool isRun 跑步 bool isByBike 骑自行车 bool isOnFoot 步行 bool isSwim 游泳 bool isMountainClimbing 羽毛球 bool isOther 其他 bool isFitness 健身 bool isSpinning 动感单车 bool isEllipsoid 橄榄球 bool isTreadmill 跑步机 bool isSitUp 仰卧起坐 bool isPushUp 俯卧撑 bool isDumbbell 哑铃 bool isWeightlifting 举重 bool isBodybuildingExercise 体操 bool isYoga 瑜伽 bool isRopeSkipping 跳绳 bool isTableTennis 乒乓球 bool isBasketball 篮球 bool isFootball 足球 bool isVolleyball 排球 bool isTennis 网球 bool isGolf 高尔夫 bool isBaseball 棒球 bool isSkiing 滑雪 bool isRollerSkating 滑旱冰 bool isDance 跳舞 bool 命令代码 Objc: IDOSetSportShortcutInfoBluetoothModel * model = [IDOSetSportShortcutInfoBluetoothModel currentModel]; [IDOFoundationCommand setSportModeSelectCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetSportShortcutInfoBluetoothModel.current(); IDOFoundationCommand.setSportModeSelect(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 18:50:41 "},"set/IDOSetSportSortFunction.html":{"url":"set/IDOSetSportSortFunction.html","title":"设置运动排序","keywords":"","body":"设置运动排序 运动排序模型说明 IDOSetSportSortingInfoBluetoothModel 参数 说明 备注 sportSortingItems 运动模式排序集合 最多8个或14个 IDOSetSportSortingItemModel 参数 说明 备注 index 排序索引 从1、2、3、4....,0:无效 type 运动模式 0:无,1:走路,2:跑步,3:骑行,4:徒步,5:游泳,6:爬山,7:羽毛球,8:其他,9:健身,10:动感单车,11:椭圆机,12:跑步机,13:仰卧起坐,14:俯卧撑,15:哑铃,16:举重,17:健身操,18:瑜伽,19:跳绳,20:乒乓球,21:篮球,22:足球,23:排球,24:网球,25:高尔夫球,26:棒球,27:滑雪,28:轮滑,29:跳舞,48:户外跑步,49:室内跑步,50:户外骑行,51:室内骑行,52:户外走路,53:室内走路,54:泳池游泳,55:开放水域游泳,56:椭圆机,57:划船机,58:高强度间歇训练法,75:板球运动 命令代码 Objc: IDOSetSportSortingInfoBluetoothModel * model = [IDOSetSportSortingInfoBluetoothModel currentModel]; [IDOFoundationCommand setSportModeSortCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetSportSortingInfoBluetoothModel.current(); IDOFoundationCommand.setSportModeSort(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-28 15:42:55 "},"set/IDOSetScreenBrightFunction.html":{"url":"set/IDOSetScreenBrightFunction.html","title":"设置屏幕亮度","keywords":"","body":"设置屏幕亮度 屏幕亮度模型说明 IDOSetScreenBrightnessInfoBluetoothModel 参数 说明 备注 levelValue 屏幕亮度级别 1-100 isManual 是否用户调节 bool mode 屏幕亮度级别 0x00关闭自动调整,0x01 使用环境光传感器,0x02,夜间自动调整亮度,0x03 夜间降亮度使用设置的时间 autoAdjustNight 夜间自动亮度调整 0x00,无效,由固件定义,0x01关闭,0x02,夜间自动调整亮度,0x03 夜间降亮度使用设置的时间 startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int nightLevel 夜间亮度 1-100 命令代码 Objc: IDOSetScreenBrightnessInfoBluetoothModel * model = [IDOSetScreenBrightnessInfoBluetoothModel currentModel]; [IDOFoundationCommand setScreenBrightnessCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetScreenBrightnessInfoBluetoothModel.current(); IDOFoundationCommand.setScreenBrightness(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 19:04:14 "},"set/IDOSetMusicFunction.html":{"url":"set/IDOSetMusicFunction.html","title":"设置音乐开关","keywords":"","body":"设置音乐开关 设置音乐控制需要先实现蓝牙配对 音乐开关模型说明 IDOSetPairingInfoBuletoothModel 参数 说明 备注 pairingTimeStr 配对时间戳 str isPairing 是否配对 bool IDOSetMusicOpenInfoBuletoothModel 参数 说明 备注 isOpen 开关 bool 命令代码 蓝牙配对 Objc: [IDOFoundationCommand setBluetoothPairingCommandWithCallback:^(BOOL isNeedDisconnect, int stateCode) { //配对过程是否需要断线,配对过程状态 } pairingComplete:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: IDOFoundationCommand.setBluetoothPairingCommandWithCallback({ (isNeedDisconnect, stateCode) in //配对过程是否需要断线,配对过程状态 }) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6 { //设备不支持 }else { //设置失败 } }; 音乐开关 Objc: IDOSetMusicOpenInfoBuletoothModel * model = [IDOSetMusicOpenInfoBuletoothModel currentModel]; [IDOFoundationCommand setOpenMusicCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetMusicOpenInfoBuletoothModel.current(); IDOFoundationCommand.setOpenMusic(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 19:06:16 "},"set/IDOSetGpsInfoFunction.html":{"url":"set/IDOSetGpsInfoFunction.html","title":"设置GPS信息","keywords":"","body":"设置GPS信息 GPS信息模型说明 IDOSetGpsConfigInfoBluetoothModel 参数 说明 备注 startMode 启动模式 0x01:冷启动,0x02:热启动 gsopOperationMode 操作模式 1:正常;2:低功耗;4:Balance,5:1PPS gsopCycleMs 定位周期 默认1000毫秒 gnsValue 定位星mode 1:GPS,2:GLONASS,3:1GPS+GLONASS year (UTC)年 int month (UTC)月 int day (UTC)日 int hour (UTC)时 int minute (UTC)分 int second (UTC)秒 int 命令代码 Objc: IDOSetGpsConfigInfoBluetoothModel * model = [IDOSetGpsConfigInfoBluetoothModel currentModel]; [IDOFoundationCommand setGpsInfoCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetGpsConfigInfoBluetoothModel.current(); IDOFoundationCommand.setGpsInfo(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 11:57:39 "},"set/IDOSetWatchDiaFunction.html":{"url":"set/IDOSetWatchDiaFunction.html","title":"设置表盘ID","keywords":"","body":"设置表盘ID 表盘ID模型说明 IDOSetWatchDiaInfoBluetoothModel 参数 说明 备注 dialId 表盘ID int 命令代码 Objc: IDOSetWatchDiaInfoBluetoothModel * model = [IDOSetWatchDiaInfoBluetoothModel currentModel]; [IDOFoundationCommand setWatchDiaCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetWatchDiaInfoBluetoothModel.current(); IDOFoundationCommand.setWatchDia(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 19:15:48 "},"set/IDOSetWalkRemindFunction.html":{"url":"set/IDOSetWalkRemindFunction.html","title":"设置走动提醒","keywords":"","body":"设置走动提醒 走动提醒模型说明 IDOSetWalkReminderBluetoothModel 参数 说明 备注 onOff 开关 bool goalStep 目标步数 int startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int repeat 重复集合 [星期一,星期二,星期三,星期四,星期五,星期六,星期日] 命令代码 Objc: IDOSetWalkReminderBluetoothModel * model = [IDOSetWalkReminderBluetoothModel currentModel]; [IDOFoundationCommand setWalkReminderCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetWalkReminderBluetoothModel.current(); IDOFoundationCommand.setWalkReminder(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 12:11:03 "},"set/IDOSetV3HrModeFunction.html":{"url":"set/IDOSetV3HrModeFunction.html","title":"设置v3心率模式","keywords":"","body":"设置V3心率模式 V3心率模式模型说明 IDOSetHrModeInfoBluetoothModel 参数 说明 备注 modeType 心率模式 0:关闭心率监测功能,1:手动模式,2:自动模式,3:持续监测 updateTime 更新时间戳 str isHasTimeRange 是否有相隔时间 bool startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int measurementInterval 测量间隔 单位:分钟 命令代码 Objc: IDOSetV3HeartRateModeBluetoothModel * model = [IDOSetV3HeartRateModeBluetoothModel currentModel]; [IDOFoundationCommand setV3HrModelCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetV3HeartRateModeBluetoothModel.current(); IDOFoundationCommand.setV3HrModel(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 11:57:51 "},"set/IDOSetSpo2Function.html":{"url":"set/IDOSetSpo2Function.html","title":"设置血氧开关","keywords":"","body":"设置血氧开关 血氧开关模型说明 IDOSetSpo2SwitchBluetoothModel 参数 说明 备注 onOff 开关 bool startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int measurementInterval 测量间隔 单位:分钟 命令代码 Objc: IDOSetSpo2SwitchBluetoothModel * model = [IDOSetSpo2SwitchBluetoothModel currentModel]; [IDOFoundationCommand setSpo2SwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetSpo2SwitchBluetoothModel.current(); IDOFoundationCommand.setSpo2Switch(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 11:49:41 "},"set/IDOSetSleepTimeFunction.html":{"url":"set/IDOSetSleepTimeFunction.html","title":"设置睡眠开关","keywords":"","body":"设置睡眠时间段 睡眠时间段模型说明 IDOSetSleepPeriodInfoBluetoothModel 参数 说明 备注 onOff 开关 bool startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int 命令代码 Objc: IDOSetSleepPeriodInfoBluetoothModel * model = [IDOSetSleepPeriodInfoBluetoothModel currentModel]; [IDOFoundationCommand setSleepPeriodCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetSleepPeriodInfoBluetoothModel.current(); IDOFoundationCommand.setSleepPeriod(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 11:53:10 "},"set/IDOSetPressureSwitchFunction.html":{"url":"set/IDOSetPressureSwitchFunction.html","title":"设置压力开关","keywords":"","body":"设置压力开关 压力开关模型说明 IDOSetPressureSwitchBluetoothModel 参数 说明 备注 onOff 开关 bool startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int 命令代码 Objc: IDOSetPressureSwitchBluetoothModel * model = [IDOSetPressureSwitchBluetoothModel currentModel]; [IDOFoundationCommand setPressureSwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetPressureSwitchBluetoothModel.current(); IDOFoundationCommand.setPressureSwitch(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 12:40:54 "},"set/IDOSetMenuListFunction.html":{"url":"set/IDOSetMenuListFunction.html","title":"设置菜单列表","keywords":"","body":"设置菜单列表 菜单列表模型说明 IDOGetMenuListInfoBluetoothModel 参数 说明 备注 minShowNum 菜单最小显示个数 不需要赋值 maxShowNum 菜单最大显示个数 不需要赋值 maxNum 支持最大个数 不需要赋值 itemList 菜单排序集合 0:无效,1:步数,2:心率,3:睡眠,4:拍照,5:闹钟,6:音乐,7:秒表,8:计时器, 9:运动模式,10:天气,11:呼吸锻炼,12:查找手机,13:压力,14:数据三环,15:时间界面 命令代码 Objc: IDOGetMenuListInfoBluetoothModel * model = [IDOGetMenuListInfoBluetoothModel currentModel]; [IDOFoundationCommand setMenuListCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOGetMenuListInfoBluetoothModel.current(); IDOFoundationCommand.setMenuList(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 15:08:59 "},"set/IDOSetMenstruationRemindFunction.html":{"url":"set/IDOSetMenstruationRemindFunction.html","title":"设置生理周期提醒","keywords":"","body":"设置生理周期提醒 生理周期提醒模型说明 IDOSetMenstruationRemindBluetoothModel 参数 说明 备注 startDay 开始日提醒 提前天数 ovulationDay 排卵日提醒 提前天数 hour 提醒时间(时) int minute 提醒时间(分) int 命令代码 Objc: IDOSetMenstruationRemindBluetoothModel * model = [IDOSetMenstruationRemindBluetoothModel currentModel]; [IDOFoundationCommand setMenstrualRemindCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetMenstruationRemindBluetoothModel.current(); IDOFoundationCommand.setMenstrualRemind(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 15:34:03 "},"set/IDOSetMenstruationFunction.html":{"url":"set/IDOSetMenstruationFunction.html","title":"设置生理周期","keywords":"","body":"设置生理周期 生理周期模型说明 IDOSetMenstruationInfoBluetoothModel 参数 说明 备注 onOff 开关 bool menstrualLength 经期长度 int menstrualCycle 经期周期 int lastMenstrualYear 最近经期年份 int lastMenstrualMonth 最近经期月份 int lastMenstrualDay 最近经期日期 int ovulationIntervalDay 排卵日的间隔 int ovulationBeforeDay 经期前一天 int ovulationAfterDay 经期后一天 int 命令代码 Objc: IDOSetMenstruationInfoBluetoothModel * model = [IDOSetMenstruationInfoBluetoothModel currentModel]; [IDOFoundationCommand setMenstrualCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetMenstruationInfoBluetoothModel.current(); IDOFoundationCommand.setMenstrual(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 15:48:57 "},"set/IDOSetDrinkWaterFunction.html":{"url":"set/IDOSetDrinkWaterFunction.html","title":"设置喝水提醒","keywords":"","body":"设置喝水提醒 喝水提醒模型说明 IDOSetDrinkReminderModeBluetoothModel 参数 说明 备注 onOff 开关 bool interval 提醒间隔 单位:分钟 startHour 开始时间(时) int startMinute 开始时间(分) int endHour 结束时间(时) int endMinute 结束时间(分) int repeat 重复集合 [星期一,星期二,星期三,星期四,星期五,星期六,星期日] 命令代码 Objc: IDOSetDrinkReminderModeBluetoothModel * model = [IDOSetDrinkReminderModeBluetoothModel currentModel]; [IDOFoundationCommand setDrinkReminderCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetDrinkReminderModeBluetoothModel.current(); IDOFoundationCommand.setDrinkReminder(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 17:02:33 "},"set/IDOSetBreatheFunction.html":{"url":"set/IDOSetBreatheFunction.html","title":"设置呼吸训练","keywords":"","body":"设置呼吸训练 呼吸训练模型说明 IDOSetBreatheTrainBluetoothModel 参数 说明 备注 frequency 每分钟呼吸次数 int 命令代码 Objc: IDOSetBreatheTrainBluetoothModel * model = [IDOSetBreatheTrainBluetoothModel currentModel]; [IDOFoundationCommand setBreatheTrainCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetBreatheTrainBluetoothModel.current(); IDOFoundationCommand.setBreatheTrain(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 17:09:45 "},"set/IDOSetActivitySwitchFunction.html":{"url":"set/IDOSetActivitySwitchFunction.html","title":"设置运动开关","keywords":"","body":"设置运动开关 运动开关模型说明 IDOSetActivitySwitchBluetoothModel 参数 说明 备注 sportTypeOnOff 自动识别运动类型开关 此参数遗弃 sportRunOnOff 自动识别跑步开关 bool sportBicycleOnOff 自动识别自行车开关 bool autoPauseOnOff 运动自动暂停开关 bool endRemindOnOff 结束提醒开关 bool 命令代码 Objc: IDOSetActivitySwitchBluetoothModel * model = [IDOSetActivitySwitchBluetoothModel currentModel]; [IDOFoundationCommand setActivitySwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetActivitySwitchBluetoothModel.current(); IDOFoundationCommand.setActivitySwitch(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-22 17:23:42 "},"IDOGetFunction.html":{"url":"IDOGetFunction.html","title":"获取命令功能","keywords":"","body":"获取命令 7.1功能概述 获取命令是移动端通过命令发送数据到手环端，以手环端返回响应状态和结构体数据对应处理解析数据并转换对应的模型，当成功时存储设置数据，反则不作存储，根据状态码作提示，获取成功是的errorCode等于0 7.2主要命令功能 获取Mac命令 获取设备信息 获取功能列表 获取实时数据 获取通知状态 获取活动数量 获取GPS状态 获取版本信息 获取OTA授权 获取运动类型 获取默认语言 获取错误日志 获取字库版本 获取电池信息 获取菜单列表 获取V3闹钟 获取V3心率模式 获取MTU 获取过热日志 7.3 Demo获取功能入口 Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-27 11:11:29 "},"get/IDOGetMacFunction.html":{"url":"get/IDOGetMacFunction.html","title":"获取Mac命令","keywords":"","body":"获取Mac地址 Mac地址模型说明 IDOGetMacAddrInfoBluetoothModel 参数 说明 备注 macAddr Mac地址 str 命令代码 Objc: [IDOFoundationCommand getMacAddrCommand:^(int errorCode, IDOGetMacAddrInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getMacAddrCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-25 11:13:31 "},"get/IDOGetDeviceInfoFunction.html":{"url":"get/IDOGetDeviceInfoFunction.html","title":"获取设备信息","keywords":"","body":"获取设备信息 设备信息模型说明 IDOGetDeviceInfoBluetoothModel 参数 说明 备注 mode 设备模式 int battStatus 电量状态 0x0:正常,0x01:正在充电,0x02:充满,0x03:电量低 battLevel 电量级别 0～100 rebootFlag 是否重启 int bindTimeStr 绑定时间戳 str bindState 绑定状态 int bindType 绑定类型 0x00默认(注意以前ID号定制),超时时间无效, 0x01(单击[按键在下面]), 0x02(为长按[按键在下面]), 0x03(屏幕点击 横向确认和取消,确认在左边), 0x04(屏幕点击 横向确认和取消,确认在右边)， 0x05(屏幕点击 竖向确认和取消,确认在上边)， 0x06(屏幕点击 竖向确认和取消,确认在下边), 0x07点击(右边一个按键) bindTimeout 绑定超时 最长为15秒,0表示不超时 platform 手环的平台 0:nordic,10:realtek 8762x,20:cypress psoc6,30:Apollo3 isSyncConfig 是否同步过配置 bool 命令代码 Objc: [IDOFoundationCommand getDeviceInfoCommand:^(int errorCode, IDOGetDeviceInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getDeviceInfoCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-25 11:25:29 "},"get/IDOGetFuncListFunction.html":{"url":"get/IDOGetFuncListFunction.html","title":"获取功能列表","keywords":"","body":"获取功能列表 功能表模型说明 当前功能列表有29个功能子表 全局功能表对象 Objc: //功能表宏 __IDO_FUNCTABLE__ Swift: //功能表对象 IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel IDOGetFuncTable1BluetoothModel 参数 说明 备注 ch 中文 bool eng 英文 bool french 法文 bool german 德文 bool italian 意大利文 bool spanish 西班牙文 bool japanese 日文 bool czech 捷克文 bool IDOGetFuncTable2BluetoothModel 参数 说明 备注 romanian 罗马尼亚文 bool lithuanian 立陶宛文 bool dutch 荷兰文 bool slovenian 斯洛文尼亚文 bool hungarian 匈牙利文 bool polish 波兰文 bool russian 俄罗斯文 bool ukrainian 乌克兰文 bool IDOGetFuncTable3BluetoothModel 参数 说明 备注 slovak 斯洛伐克文 bool danish 丹麦文 bool croatian 克罗地亚文 bool indonesian 印尼文 bool korean 韩文 bool hindi 印地文 bool portuguese 葡萄牙文 bool turkish 土耳其文 bool IDOGetFuncTable4BluetoothModel 参数 说明 备注 stepCalculation 步数 bool sleepMonitor 睡眠检测 bool singleSport 单次运动 bool realtimeData 实时数据 bool deviceUpdate 设备更新 bool heartRate 心率功能 bool ancs 通知中心 bool timeLine 时间线 bool IDOGetFuncTable5BluetoothModel 参数 说明 备注 takePhoto 拍照 bool music 音乐 bool hidPhoto 控制拍照 bool fiveHrInterval 5个心率区间 bool bindAuth 绑定授权 bool fastSync 快速同步 bool exFuncTable 通知中心 bool bindCodeAuth 绑定码授权 bool IDOGetFuncTable6BluetoothModel 参数 说明 备注 wakeUp 起床 bool sleep 睡觉 bool sport 锻炼 bool medicine 吃药 bool dating 约会 bool party 聚会 bool metting 会议 bool custom 自定义 bool IDOGetFuncTable7BluetoothModel 参数 说明 备注 calling 来电提醒 bool callingContact 来电联系人 bool callingNum 来电号码 bool IDOGetFuncTable8BluetoothModel 参数 说明 备注 message 短信 bool email 邮件 bool qq qq bool weixin 微信 bool sinaWeibo 新浪 bool facebook facebook bool twitter twitter bool IDOGetFuncTable9BluetoothModel 参数 说明 备注 whatsapp whatsapp bool messengre messengre bool instagram instagram bool linkedIn linkedIn bool calendar calendar bool skype skype bool alarmClock alarmClock bool IDOGetFuncTable10BluetoothModel 参数 说明 备注 vkontakte vkontakte bool line line bool viber viber bool kakaoTalk kakaoTalk bool gmail gmail bool outlook outlook bool snapchat snapchat bool telegram telegram bool IDOGetFuncTable11BluetoothModel 参数 说明 备注 sedentariness 久坐提醒 bool antilost 防丢提醒 bool onetouchCalling 一键呼叫 bool findPhone 寻找手机 bool findDevice 寻找手环 bool configDefault 默认模式 bool upHandGesture 手势 bool weather 天气预报 bool IDOGetFuncTable12BluetoothModel 参数 说明 备注 tipInfoContact 提示信息联系人 bool tipInfoNum 提示信息号码 bool tipInfoContent 提醒信息内容 bool IDOGetFuncTable13BluetoothModel 参数 说明 备注 staticHr 静态心率 bool doNotDisturb 防打扰 bool displayMode 显示模式 bool heartRateMonitor 心率监测 bool bilateralAntiLost 双向防丢 bool allAppNotice 所有通知提醒 bool noShowHrInterval 不显示心率区间 bool flipScreen 翻转屏幕 bool IDOGetFuncTable14BluetoothModel 参数 说明 备注 walk 走路 bool run 跑步 bool byBike 骑行 bool onFoot 徒步 bool swim 游泳 bool mountainClimbing 爬山 bool badminton 羽毛球 bool other 其他 bool IDOGetFuncTable15BluetoothModel 参数 说明 备注 fitness 健身 bool spinning 椭圆球 bool treadmill 跑步机 bool sitUp 仰卧起坐 bool pushUp 俯卧撑 bool dumbbell 哑铃 bool weightlifting 举重 bool IDOGetFuncTable16BluetoothModel 参数 说明 备注 bodybuildingExercise 健身操 bool yoga 瑜伽 bool ropeSkipping 跳绳 bool tableTennis 乒乓球 bool basketball 篮球 bool football 足球 bool volleyball 排球 bool tennis 网球 bool IDOGetFuncTable17BluetoothModel 参数 说明 备注 golf 高尔夫 bool baseball 棒球 bool skiing 滑雪 bool rollerSkating 轮滑 bool dance 跳舞 bool IDOGetFuncTable18BluetoothModel 参数 说明 备注 logIn 登陆 bool hidPhoto 手环自带相机拍照 bool watchDial 表盘 bool shortcut 快捷方式 bool unitSet 单位分开设置 bool bloodPressure 血压 bool wechatSport 微信运动 bool fineTimeControl 精细的时间段控制 bool IDOGetFuncTable19BluetoothModel 参数 说明 备注 gps gps bool sleepPeriod 睡眠时间段 bool screenBrightness 屏幕亮度调节 bool id107Dial id107l 表盘 bool dhNewAppNotice 未知属性，咨询固件 bool noitice128Byte 128字节通知 bool activityTimeSync 获取时间同步 bool v3Log v3 收集 bool IDOGetFuncTable20BluetoothModel 参数 说明 备注 menstruation 女性生理周期 bool calorieGoal 卡路里目标 bool distanceGoal 距离目标 bool spo2Data 血氧数据 bool pressureData 压力数据 bool getNoDisturb 获取勿扰模式 bool sportModeSort 运动模式排序 bool noticeByte 通知消息字节250 bool IDOGetFuncTable21BluetoothModel 参数 说明 备注 chatwork chatwork bool slack slack bool tumblr tumblr bool youtube youtube bool yahooPinterest yahoo pinterest bool yahooMail yahoo mail bool IDOGetFuncTable22BluetoothModel 参数 说明 备注 autoPair 连接后自动配对 bool noDisconnectPair 不断线配对 bool v3HrData v3 心率数据 bool v3SwimData v3 游泳数据 bool v3ActivityData v3 活动数据 bool v3GpsData v3 gps 数据 bool drinkWaterReminder 喝水提醒 bool IDOGetFuncTable23BluetoothModel 参数 说明 备注 level5HrInterval 5级心率区间 bool walkReminder 走动提醒 bool breatheTrain 呼吸训练 bool screenBrightness5Level 5级亮度调节 bool activitySwitch 运动模式开关 自动识别 bool disturbHaveRangRepeat 勿扰 支持可选时间范围和星期 bool nightAutoBrightness 夜间自动亮度 bool longMtu 传输长包 bool IDOGetFuncTable24BluetoothModel 参数 说明 备注 outdoorRun 户外跑步 bool indoorRun 室内跑步 bool outdoorCycle 户外骑行 bool indoorCycle 室内骑行 bool outdoorWalk 户外走路 bool indoorWalk 室内走路 bool poolSwim 泳池游泳 bool openWaterSwim 开放水域游泳 bool IDOGetFuncTable25BluetoothModel 参数 说明 备注 elliptical 椭圆机 bool rower 划船机 bool hiit 高强度间歇训练法 bool cricket 板球运动 bool IDOGetFuncTable26BluetoothModel 参数 说明 备注 factoryReset 支持恢复出厂设置,用于自动解绑 bool liftingWrisBacklight 抬腕亮背光 命令和抬手亮屏一样,就是app显示的名字不一样,不能和other.upHandGesture共存 bool multiActivityNoUseApp 多运动不能使用app bool multiDial 多表盘 bool mediumToHighActiveDuration 中高强度活动 bool defaultSportType 获取手环运动模式 bool downloadLanguage 可下载语言 bool flashLog 日志功能 bool IDOGetFuncTable27BluetoothModel 参数 说明 备注 thai 泰国文 bool vietnamese 越南文 bool burmese 缅甸文 bool filipino 菲律宾文 bool traditionalChinese 繁体中文 bool greek 希腊文 bool IDOGetFuncTable28BluetoothModel 参数 说明 备注 chargingTime 充电时间 bool menuList 菜单设置 bool photoWallpaper 背景照片 bool voiceTransmission 语音功能 bool utcTimeZone utc时间 bool choiceUse 新的4选2功能 bool heartRateInterval 支持心率区间设置 bool v3SportsType v3的运动类型设置和获取 bool IDOGetFuncTable29BluetoothModel 参数 说明 备注 v3SyncAlarm v3的闹钟的同步 bool ubloxModel 支持ublox模块 bool 命令代码 Objc: [IDOFoundationCommand getFuncTableCommand:^(int errorCode, IDOGetDeviceFuncBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getFuncTableCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-25 16:34:29 "},"get/IDOGetLiveDataFunction.html":{"url":"get/IDOGetLiveDataFunction.html","title":"获取实时数据","keywords":"","body":"获取实时数据 实时数据模型说明 IDOGetLiveDataBluetoothModel 参数 说明 备注 step 步数 int calories 卡路里 int distances 距离 int activeTime 活动时长 int heartRate 心率 int 命令代码 Objc: [IDOFoundationCommand getLiveDataCommand:^(int errorCode, IDOGetLiveDataBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getLiveDataCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-25 16:51:30 "},"get/IDOGetNoticeFunction.html":{"url":"get/IDOGetNoticeFunction.html","title":"获取通知状态","keywords":"","body":"获取通知状态 通知状态模型说明 IDOSetNoticeInfoBuletoothModel 参数 说明 备注 isPairing 是否配对 bool callDelay 来电延迟 目前设置必须大于等于3秒才有效 isOnChild 是否开启子开关 只对智能提醒有效,对来电提醒无效 isOnCall 来电提醒 bool isOnSms 短信提醒 bool isOnEmail 邮件提醒 bool isOnWeChat 微信提醒 bool isOnQq qq提醒 bool isOnWeibo 微博提醒 bool isOnFaceBook FaceBook提醒 bool isOnTwitter Twitter提醒 bool isOnWhatsapp Whatsapp提醒 bool isOnMessenger Messenger提醒 bool isOnInstagram Instagram提醒 bool isOnLinkedIn LinkedIn提醒 bool isOnCalendar Calendar提醒 bool isOnSkype Skype提醒 bool isOnAlarm Alarm提醒 bool isOnPokeman Pokeman提醒 bool isOnVkontakte Vkontakte提醒 bool isOnLine Line提醒 bool isOnViber Viber提醒 bool isOnKakaoTalk KakaoTalk提醒 bool isOnGmail Gmail提醒 bool isOnOutlook Outlook提醒 bool isOnSnapchat Snapchat提醒 bool isOnTelegram Telegram提醒 bool isOnChatwork Chatwork提醒 bool isOnSlack Slack提醒 bool isOnYahooMail Yahoo Mail提醒 bool isOnTumblr Tumblr提醒 bool isOnYoutube Youtube提醒 bool isOnYahooPinterest Yahoo Pinterest提醒 bool 命令代码 Objc: [IDOFoundationCommand getNoticeStatusCommand:^(int errorCode, IDOSetNoticeInfoBuletoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getNoticeStatusCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-25 16:58:22 "},"get/IDOGetActivityCountFunction.html":{"url":"get/IDOGetActivityCountFunction.html","title":"获取活动数量","keywords":"","body":"获取活动数量 活动数量模型说明 IDOGetActivityCountBluetoothModel 参数 说明 备注 activityCount 活动个数 int activityPacketCount 活动包个数 int gpsCount GPS个数 int gpsPacketCount GPS包个数 int 命令代码 Objc: [IDOFoundationCommand getActivityCountCommand:^(int errorCode, IDOGetActivityCountBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getActivityCountCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-25 17:19:38 "},"get/IDOGetGpsStateFunction.html":{"url":"get/IDOGetGpsStateFunction.html","title":"获取GPS状态","keywords":"","body":"获取GPS状态 GPS状态模型说明 IDOGetGpsStatusBluetoothModel 参数 说明 备注 gpsRunStatus GPS 运行状态 0:没有运行,1:正在搜星,2:为正在跟踪 isAgpsVaild AGPS 是否有效 有效期剩余小时,非0为有效 命令代码 Objc: [IDOFoundationCommand getGpsStatusCommand:^(int errorCode, IDOGetGpsStatusBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getGpsStatusCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-26 10:06:01 "},"get/IDOGetVersionFunction.html":{"url":"get/IDOGetVersionFunction.html","title":"获取版本信息","keywords":"","body":"获取版本信息 版本信息模型说明 IDOGetVersionInfoBluetoothModel 参数 说明 备注 sdkVersion SDK版本 数值为x10,11表示1.1的版本 hrAlgorithmVersion 心率算法版本 数值为x10,11表示1.1的版本 sleepAlgorithmVersion 睡眠算法版本 数值为x10,11表示1.1的版本 stepAlgorithmVersion 计步算法版本 数值为x10,11表示1.1的版本 gestureRecognitionVersion 手势识别算法 数值为x10,11表示1.1的版本 pcbVersion PCB版本 数值为x10,11表示1.1的版本 命令代码 Objc: [IDOFoundationCommand getVersionInfoCommand:^(int errorCode, IDOGetVersionInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getVersionInfoCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-26 10:12:35 "},"get/IDOGetOtaAuthFuncion.html":{"url":"get/IDOGetOtaAuthFuncion.html","title":"获取OTA授权","keywords":"","body":"获取OTA授权 授权状态说明 参数 说明 备注 stateCode 授权状态 0x00:校验成功,0x01:ID号校验失败,0x02:版本号校验失败,0x03:电量不足,0x04:其他错误 命令代码 Objc: [IDOFoundationCommand getOtaAuthInfoCommand:^(int errorCode, int stateCode) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getOtaAuthInfoCommand { (errorCode, stateCode) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-26 11:18:33 "},"get/IDOGetDefaultSportsFunction.html":{"url":"get/IDOGetDefaultSportsFunction.html","title":"获取运动类型","keywords":"","body":"获取默认运动类型 运动类型模型说明 IDOGetDefaultSportTypeBluetoothModel 参数 说明 备注 sportTypeCount 默认运动类型的个数 int minShowNum 最小支持的数量 int maxShowNum 最大支持的数量 int isSupportSort 是否支持默认排序 bool sportTypes 运动类型值集合 0:无,1:走路,2:跑步,3:骑行,4:徒步,5:游泳,6:爬山,7:羽毛球,8:其他,9:健身,10:动感单车,11:椭圆机,12:跑步机,13:仰卧起坐,14:俯卧撑,15:哑铃,16:举重,17:健身操,18:瑜伽,19:跳绳,20:乒乓球,21:篮球,22:足球,23:排球,24:网球,25:高尔夫球,26:棒球,27:滑雪,28:轮滑,29:跳舞,48:户外跑步,49:室内跑步,50:户外骑行,51:室内骑行,52:户外走路,53:室内走路,54:泳池游泳,55:开放水域游泳,56:椭圆机,57:划船机,58:高强度间歇训练法,75:板球运动 命令代码 Objc: [IDOFoundationCommand getDefaultSportTypeCommand:^(int errorCode, IDOGetDefaultSportTypeBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getDefaultSportTypeCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-28 15:43:38 "},"get/IDOGetLanguageFunction.html":{"url":"get/IDOGetLanguageFunction.html","title":"获取默认语言","keywords":"","body":"获取默认语言 默认语言模型说明 IDOGetDownLanguageBluetoothModel 参数 说明 备注 useLang 当前使用的语言 int defaultLang 默认语言 int fixedLangCount 固定存储语言个数 int maxStorageLang 最大存储语言个数 int languageValues 语言集合 无效:0,中文:1,英文:2,法语:3,德语:4,意大利语:5,西班牙语:6,日语:7, 波兰语:8,捷克语:9,罗马尼亚:10,立陶宛语:11,荷兰语:12,斯洛文尼亚:13, 匈牙利语:14,俄罗斯语:15,乌克兰语:16,斯洛伐克语:17,丹麦语:18, 克罗地亚:19,印尼语:20,韩语:21,印地语:22,葡萄牙语:23,土耳其:24, 泰国语:25,越南语:26,缅甸语:27,菲律宾语:28,繁体中文:29,希腊语:30 命令代码 Objc: [IDOFoundationCommand getDefaultLanguageCommand:^(int errorCode, IDOGetDownLanguageBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getDefaultLanguageCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-26 12:03:34 "},"get/IDOGetErrorLogFunction.html":{"url":"get/IDOGetErrorLogFunction.html","title":"获取错误日志","keywords":"","body":"获取错误日志 错误日志模型说明 IDOGetErrorLogBluetoothModel 参数 说明 备注 type 操作类型 0x00:查询,0x01:清除记录 resetFlag 复位标记 0x0:正常,0x01:硬错误(Hard Faul),0x02:看门狗服务,0x03:断言复位,0x04:掉电服务,0x05:其他异常,此参数不需要赋值 hwError 硬件错误码 0x00:正常,0x01:加速度错误,0x02:心率错误,0x03:TP错误,0x04:flash错误,此参数不需要赋值 命令代码 Objc: IDOGetErrorLogBluetoothModel * model = [[IDOGetErrorLogBluetoothModel alloc]init]; model.type = 0x00; [IDOFoundationCommand getErrorLogRecordCommand:model callback:^(int errorCode, IDOGetErrorLogBluetoothModel * _Nullable model) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: let model = IDOGetErrorLogBluetoothModel.init(); model.type = 0x00; IDOFoundationCommand.getErrorLogRecord(model) { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-26 14:24:48 "},"get/IDOGetFlashBinFunction.html":{"url":"get/IDOGetFlashBinFunction.html","title":"获取字库版本","keywords":"","body":"获取字库版本 字库版本模型说明 IDOGetFlashBinInfoBluetoothModel 参数 说明 备注 status 状态 0x00正常,0x01:字库无效,校验错误,0x02:版本不匹配 flashVersion 字库版本 int matchVersion 匹配版本号,固件需要的字库版本号 int checkCode 字库校验码 int 命令代码 Objc: [IDOFoundationCommand getFlashBinInfoCommand:^(int errorCode, IDOGetFlashBinInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getFlashBinInfoCommand{ (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-26 16:05:00 "},"get/IDOGetBatteryFunction.html":{"url":"get/IDOGetBatteryFunction.html","title":"获取电池信息","keywords":"","body":"获取电池信息 电池信息模型说明 IDOGetDeviceBattInfoBluetoothModel 参数 说明 备注 voltage 电压,毫伏 int status 状态 0:未充电,1:正在充电,2:充满 level 电量等级 0-100 lastChargingYear 上次充电时间(年) int lastChargingMonth 上次充电时间(月) int lastChargingDay 上次充电时间(日) int lastChargingHour 上次充电时间(时) int lastChargingMinute 上次充电时间(分) int lastChargingSecond 上次充电时间(秒) int 命令代码 Objc: [IDOFoundationCommand getBatteryInfoCommand:^(int errorCode, IDOGetDeviceBattInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getBatteryInfoCommand{ (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-26 16:03:50 "},"get/IDOGetMenuListFunction.html":{"url":"get/IDOGetMenuListFunction.html","title":"获取菜单列表","keywords":"","body":"获取菜单列表 菜单列表模型说明 IDOGetMenuListInfoBluetoothModel 参数 说明 备注 minShowNum 菜单最小显示个数 int maxShowNum 菜单最大显示个数 int maxNum 支持最大个数 int itemList 菜单排序集合 0:无效,1:步数,2:心率,3:睡眠,4:拍照,5:闹钟,6:音乐,7:秒表,8:计时器, 9:运动模式,10:天气,11:呼吸锻炼,12:查找手机,13:压力,14:数据三环,15:时间界面 命令代码 Objc: [IDOFoundationCommand getMenuListInfoCommand:^(int errorCode, IDOGetMenuListInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getMenuListInfoCommand{ (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-26 16:10:58 "},"get/IDOGetV3AlarmFunction.html":{"url":"get/IDOGetV3AlarmFunction.html","title":"获取V3闹钟","keywords":"","body":"获取V3闹钟 V3闹钟表模型说明 IDOSetAlarmInfoBluetoothModel 参数 说明 备注 isOpen 闹钟开启状态 bool isSync 是否同步到手环 不需要赋值，闹钟设置成功后会自动赋值 isDelete 是否删除 默认YES type 类型 0:起床,1:睡眠,2:锻炼,3:吃药,4:约会,5:聚会,6:会议,7:自定义 hour 分 int minute 秒 int repeat 重复集合 [星期一,星期二,星期三,星期四,星期五,星期六,星期日] tsnoozeDuration 贪睡时长 int alarmId 闹钟ID int setTimeStamp 闹钟修改的时间戳 不需要赋值，闹钟设置成功后会自动赋值 IDOSetExtensionAlarmInfoBluetoothModel 参数 说明 备注 alarmVersion 闹钟版本号 int alarmCount 闹钟个数 int items 闹钟集合 在同步配置时初始化手环闹钟 命令代码 Objc: [IDOFoundationCommand getV3AlarmsInfoCommand:^(int errorCode, IDOSetExtensionAlarmInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getV3AlarmsInfoCommand{ (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-26 16:40:32 "},"get/IDOGetV3HrFunction.html":{"url":"get/IDOGetV3HrFunction.html","title":"获取V3心率模式","keywords":"","body":"获取V3心率模式 V3心率模式模型说明 IDOSetV3HeartRateModeBluetoothModel 参数 说明 备注 modeType 心率模式 0:关闭心率监测功能,1:手动模式,2:自动模式,3:持续监测 updateTime 更新时间戳 str isHasTimeRange 是否有相隔时间 bool startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int measurementInterval 测量间隔 单位:分钟 命令代码 Objc: [IDOFoundationCommand getV3HrModeInfoCommand:^(int errorCode, IDOSetV3HeartRateModeBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getV3HrModeInfoCommand{ (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-26 17:31:26 "},"get/IDOGetMtuFunction.html":{"url":"get/IDOGetMtuFunction.html","title":"获取MTU","keywords":"","body":"获取MTU MTU模型说明 IDOGetMtuBlueInfoModel 参数 说明 备注 sendMtu 蓝牙数据发送最大长度 默认:20 receiveMtu 蓝牙数据接收最大长度 默认:20 命令代码 Objc: [IDOFoundationCommand getMtuInfoCommand:^(int errorCode, IDOGetMtuBlueInfoModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getMtuInfoCommand{ (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-26 17:48:15 "},"get/IDOGetOverHeatLogFunction.html":{"url":"get/IDOGetOverHeatLogFunction.html","title":"获取过热日志","keywords":"","body":"获取过热日志 过热日志模型说明 IDOGetOverHeatLogModel 参数 说明 备注 verionNum 该报文的版本号 int devRunTime 设备运行总时间 单位:秒 ppgRunTime ppg传感器工作时间 单位:秒 chargingTimes 充电次数 单位:次 errFlag 发生异常的原因集合 0:电压下降过快,1:ppg传感器通讯失败,2:ppg传感器返回数据异常 year 年 int month 月 int day 日 int hour 时 int minute 分 int second 秒 int 命令代码 Objc: [IDOFoundationCommand getOverHeatLogInfoCommand:^(int errorCode, IDOGetOverHeatLogModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getOverHeatLogInfoCommand{ (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-27 10:17:34 "},"IDOControlFunction.html":{"url":"IDOControlFunction.html","title":"控制命令功能","keywords":"","body":"控制命令 8.1功能概述 控制命令是移动端通过命令发送数据到手环端，以手环端返回响应状态，根据状态码作提示，命令发送成功是的errorCode等于0 8.2主要命令功能 常用控制命令 语言控制命令 监听控制命令 8.3 Demo控制功能入口 Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-28 16:47:28 "},"control/IDOCommonlyFunction.html":{"url":"control/IDOCommonlyFunction.html","title":"常用控制命令","keywords":"","body":"常用控制命令 未用SDK中的IDOBluetooth的库，而使用您的的蓝牙管理器，在扫描连接成功时，通过此方法判断当前连接的设备是否在OTA模式： Objc: [IDOBlueDataResponse isOtaModeWithPeripheral:Peripheral]; Swift: IDOBlueDataResponse.isOtaMode(with: Peripheral); 设备进入OTA模式通知 Objc: [IDOFoundationCommand didOta]; Swift: IDOFoundationCommand.didOta(); 设备未进入OTA模式通知 Objc: [IDOFoundationCommand disOta]; Swift: IDOFoundationCommand.disOta(); 断开发送通知 Objc: [IDOFoundationCommand disConnect]; Swift: IDOFoundationCommand.disConnect(); 连接失败通知 Objc: [IDOFoundationCommand connectionFailed]; Swift: IDOFoundationCommand.connectionFailed(); 删除手环日志 参数描述 参数 说明 备注 type 操作类型 0x01:删除过热日志 Objc: [IDOFoundationCommand clearLogCommandWithType:type callback:^(int errorCode,int state) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.clearLogCommand(withType: type) { (errorCode,state) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 开启音乐控制 Objc: [IDOFoundationCommand musicStartCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.musicStart { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } 关闭音乐控制 Objc: [IDOFoundationCommand musicStopCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.musicStop{ (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } 相机开始 Objc: [IDOFoundationCommand cameraStartCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.cameraStart{ (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } 相机结束 Objc: [IDOFoundationCommand cameraStopCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.cameraStop{ (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } 设备配置复位 Objc: [IDOFoundationCommand setDefaultConfigCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.setDefaultConfig{ (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } 控制设备重启 Objc: [IDOFoundationCommand setAppRebootCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.setAppReboot{ (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } 设备进入ota升级模式 Objc: [IDOFoundationCommand setOtaCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.setOta{ (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-28 16:01:57 "},"control/IDOVoiceFunction.html":{"url":"control/IDOVoiceFunction.html","title":"语言控制命令","keywords":"","body":"语音控制命令 语音控制开启指定活动 发起运动参数 参数 说明 备注 sportType 运动类型 0:无,1:走路,2:跑步,3:骑行,4:徒步,5:游泳,6:爬山,7:羽毛球,8:其他,9:健身,10:动感单车,11:椭圆机,12:跑步机,13:仰卧起坐,14:俯卧撑,15:哑铃,16:举重,17:健身操,18:瑜伽,19:跳绳,20:乒乓球,21:篮球,22:足球,23:排球,24:网球,25:高尔夫球,26:棒球,27:滑雪,28:轮滑,29:跳舞,48:户外跑步,49:室内跑步,50:户外骑行,51:室内骑行,52:户外走路,53:室内走路,54:泳池游泳,55:开放水域游泳,56:椭圆机,57:划船机,58:高强度间歇训练法,75:板球运动 Objc: [IDOFoundationCommand voiceControlActivityWithType:sportType callback:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControlActivity(withType: sportType) { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 语音控制开启实时心率 开启实时心率参数 参数 说明 备注 isOpen 是否开启 bool Objc: [IDOFoundationCommand voiceControlRealTimeHrWithSwitch:isOpen callback:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControlRealTimeHr(withSwitch: isOpen) { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 语音控制勿扰模式 勿扰模式参数 参数 说明 备注 isOpen 是否开启 bool Objc: [IDOFoundationCommand voiceControlNoDisturbWithSwitch:isOpen callback:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControlNoDisturb(withSwitch: isOpen) { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 语音控制抬腕亮屏 抬腕亮屏参数 参数 说明 备注 isOpen 是否开启 bool Objc: [IDOFoundationCommand voiceControlWristBrightScreenWithSwitch:isOpen callback:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControlWristBrightScreen(withSwitch: isOpen) { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 语音控制音乐 控制音乐参数 参数 说明 备注 controlType 控制类型 1:上一曲,2:下一曲,3:增加音量,4:减少音量,5:播放音乐,6:暂停音乐 Objc: [IDOFoundationCommand voiceControlMusicWithType:controlType callback:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControlMusic(withType: controlType) { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 语音控制屏幕亮度 屏幕亮度参数 参数 说明 备注 brightLevel 屏幕亮度 0-100 Objc: [IDOFoundationCommand voiceControlBrightScreenWithLevel:brightLevel callback:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControlBrightScreen(withLevel: brightLevel) { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 语音控制跳转秒表界面 Objc: [IDOFoundationCommand voiceControlToStopWatchCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControl(toStopWatch: {(errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }); 语音控制跳转倒计时界面 Objc: [IDOFoundationCommand voiceControlToCountDownCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControl(toCountDown: {(errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }); 语音控制跳转心率检测界面 Objc: [IDOFoundationCommand voiceControlToHeartRateCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControl(toHeartRate: {(errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }); 语音控制跳转压力检测界面 Objc: [IDOFoundationCommand voiceControlToPressureCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControl(toPressure: {(errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }); 语音控制跳转呼吸训练界面 Objc: [IDOFoundationCommand voiceControlToBreathingCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControl(toBreathing: {(errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }); 语音控制跳转睡眠记录界面 Objc: [IDOFoundationCommand voiceControlToSleepRecordCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControl(toSleepRecord: {(errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }); 语音控制跳转运动记录界面 Objc: [IDOFoundationCommand voiceControlToSportRecordCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControl(toSportRecord: {(errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }); 语音控制跳转天气界面 Objc: [IDOFoundationCommand voiceControlToWeatherCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControl(toWeather: {(errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }); 语音控制寻找手机 Objc: [IDOFoundationCommand voiceControlToFindPhoneCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControl(toFindPhone: {(errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }); 语音控制灭屏 Objc: [IDOFoundationCommand voiceControlToBlackScreenCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControl(toBlackScreen: {(errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }); 语音控制跳转重启界面 Objc: [IDOFoundationCommand voiceControlToRebootCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControl(toReboot: {(errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }); 语音控制跳转信息界面 Objc: [IDOFoundationCommand voiceControlToNotifyCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.voiceControl(toNotify: {(errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }); Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-28 16:02:08 "},"control/IDOListenFunction.html":{"url":"control/IDOListenFunction.html","title":"监听控制命令","keywords":"","body":"监听控制命令 监听拍照方法结合控制拍照命令使用，前者是手环发起控制，后者是App发起控制。 监听拍照开始 Objc: [IDOFoundationCommand listenPhotoStartCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.listenPhotoStart { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 监听拍照结束 Objc: [IDOFoundationCommand listenPhotoEndCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.listenPhotoEnd { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 监听单次拍照 Objc: [IDOFoundationCommand listenPhotoSingleShotCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.listenPhotoSingleShot { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 监听寻找手机方法结合设置寻找手机命令使用，前者是手环发起控制，后者是App发起设置。 监听开始寻找手机 Objc: [IDOFoundationCommand listenFindPhoneStartCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.listenFindPhoneStart { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 监听停止寻找手机 Objc: [IDOFoundationCommand listenFindPhoneStopCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.listenFindPhoneStop { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 获取手环语音数据通过Alexa语音服务转换语义命令执行对应的语音控制命令 手环发送语音数据 Objc: [IDOFoundationCommand listenVoiceFileDataCommand:^(int state, int errorCode) { if (errorCode == 0) { if (state == 1) { //开始 }else if(state == 2) { //停止 } }else { //语音错误 } } complete:^(NSString * _Nullable filePath) { // 语音处理完成，并返回语音本地路径，pcm格式语音 }]; Swift: IDOFoundationCommand.listenVoiceFileDataCommand({ (state, errorCode) in if errorCode == 0 { if state == 1 { //开始 }else if state == 2 { //停止 } }else { //语音错误 } }) { (filePath) in // 语音处理完成，并返回语音本地路径，pcm格式语音 }; 监听手环状态改变 IDOControlDataUpdateModel 参数 说明 备注 unbindState 解绑状态 0:无效,1:手环已经解绑 hrModeState 心率模式状态 0:无效,2:心率模式改变 alarmState 闹钟状态 0:无效,1:闹钟修改 overHeat 固件过热异常告警 0:无效,1:过热警告 Objc: [IDOFoundationCommand listenStateChangeCommand:^(int errorCode,IDOControlDataUpdateModel *_Nullable model) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.listenStateChange { (errorCode,model) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-27 17:42:58 "},"IDOSyncDataFunction.html":{"url":"IDOSyncDataFunction.html","title":"同步功能","keywords":"","body":"数据同步 9.1功能概述 同步设备数据是一个非常重要的功能。同步过程建议不要执行其他命令，即使执行命令也是无效的。同步配置在连接设备的第一次成功绑定之后执行，设备恢复出厂设置也需要执行同步配置。 在同步过程中会返回进度，并且在每个项同步后返回完成状态。根据同步状态判断同步是否完成，同步过程中会记录同步日志并存储。 9.2同步初始化 Objc: initSyncManager().wantToSyncType = IDO_WANT_TO_SYNC_CONFIG_ITEM_TYPE | IDO_WANT_TO_SYNC_HEALTH_ITEM_TYPE | IDO_WANT_TO_SYNC_ACTIVITY_ITEM_TYPE | IDO_WANT_TO_SYNC_GPS_ITEM_TYPE; Swift: initSyncManager().wantToSyncType = IDO_WANT_TO_SYNC_ITEM_TYPE.CONFIG_ITEM_TYPE | IDO_WANT_TO_SYNC_ITEM_TYPE.HEALTH_ITEM_TYPE |IDO_WANT_TO_SYNC_ITEM_TYPE.ACTIVITY_ITEM_TYPE | IDO_WANT_TO_SYNC_ITEM_TYPE.GPS_ITEM_TYPE; 9.3参数说明 参数 说明 备注 isSyncHealthRun 当前连接设备是否正在同步 readonly,bool isSyncConfigRun 当前连接设备是否在同步配置信息 readonly,bool isNeedSyncConfig 当前连接设备是否需要同步配置 readonly,bool wantToSyncType 设置需要同步的选项 同步配置、同步健康、同步活动、同步GPS isSave 同步的数据是否存入SDK数据库中 默认YES itemSyncTimeout 每一项同步超时时长 默认60秒 9.4基础方法 Objc: //开始同步 [IDOSyncManager startSync]; //结束同步 [IDOSyncManager stopSync]; Swift: //开始同步 IDOSyncManager.startSync(); //结束同步 IDOSyncManager.stopSync(); 9.5执行回调方法 Objc: initSyncManager().addSyncComplete(^(IDO_SYNC_COMPLETE_STATUS stateCode) { //同步完成状态 }).addSyncProgess(^(IDO_CURRENT_SYNC_TYPE type, float progress) { //同步项，同步进度（0-1） }).addSyncFailed(^(int errorCode) { //同步失败 }).addSyncSwim(^(NSString * jsonStr){ //同步游泳数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }).addSyncHeartRate(^(NSString * jsonStr){ //同步心率数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }).addSyncBloodOxygen(^(NSString * jsonStr){ //同步血氧数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }).addSyncBp(^(NSString * jsonStr){ //同步血压数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }).addSyncSleep(^(NSString * jsonStr){ //同步睡眠数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }).addSyncGps(^(NSString * jsonStr){ //同步GPS数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }).addSyncSport(^(NSString * jsonStr){ //同步步数数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }).addSyncPressure(^(NSString * jsonStr){ //同步压力数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }).addSyncActivity(^(NSString * jsonStr){ //同步活动数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }).addSyncConfig(^(NSString * logStr){ //同步配置完成一项配置同步回调一项日志 }).addSyncConfigInitData(^NSArray * (IDO_SYNC_CONFIG_DATA_TYPE type){ //根据返回的同步项，结合业务需求对应返回初始化的数据模型 return [NSArray array]; }).mandatorySyncConfig(YES); // 绑定需要执行同步配置，后续重连无需执行同步配置 Swift: initSyncManager().addSyncComplete!{(stateCode)in //同步完成状态 }.addSyncProgess!{(type,progress)in //同步项，同步进度（0-1） }.addSyncFailed!{(errorCode)in //同步失败 }.addSyncSwim!{(jsonStr)in //同步游泳数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }.addSyncHeartRate!{(jsonStr)in //同步心率数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }.addSyncBloodOxygen!{(jsonStr)in //同步血氧数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }.addSyncBp!{(jsonStr)in //同步血压数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }.addSyncSleep!{(jsonStr)in //同步睡眠数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }.addSyncGps!{(jsonStr)in //同步GPS数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }.addSyncSport!{(jsonStr)in //同步步数数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }.addSyncPressure!{(jsonStr)in //同步压力数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }.addSyncActivity!{(jsonStr)in //同步活动数据，json数据可以业务层作存储， //如果业务层存储数据，建议设置SDK不存储 }.addSyncConfig!{(logStr)in //同步配置完成一项配置同步回调一项日志 }.addSyncConfigInitData!{(type)in //根据返回的同步项，结合业务需求对应返回初始化的数据模型 return []; }.mandatorySyncConfig!(true);// 绑定需要执行同步配置，后续重连无需执行同步配置 Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-05-28 18:37:09 "}}