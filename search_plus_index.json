{"./":{"url":"./","title":"IDO Standardization Documentation","keywords":"","body":"{IDO Standardization Documentation} IDO SDK Bridge Specification IDO Standardized Flutter Interface Specification IDO Basic Event Field Specification Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"IDOSDK.html":{"url":"IDOSDK.html","title":"IDO SDK Bridge Documentation","keywords":"","body":"IDO SDK File Local Import pubspec.yaml protocol_lib: path: protocol_alexa: path: flutter_bluetooth: path: SDK Initialization void main() async{ await registerProtocolSDK(); await registerBluetoothSDK(); await registerProtocolAlexa(); await bridgeConnect(); } /// Register protocol library registerProtocolSDK() async { /// writeToFile: logging to file /// outputToConsole: logging to console await IDOProtocolLibManager.initLog(writeToFile: true, outputToConsole: true); /// Register for listening to update message icon for iOS libManager.messageIcon.registerListenUpdate(); /// Listen to device notification libManager.listenDeviceNotification((event) { print('listenDeviceNotification: ${event.toMap().toString()}'); }); } /// Register Bluetooth library registerBluetoothSDK() async { await bluetoothManager.register(); /// Get the version number final version = bluetoothManager.getSdkVersion(); } /// Register Alexa /// Note: IDOProtocolAlexa depends on the protocol library and should be registered after the protocol library registration registerProtocolAlexa() async { final clientId = \"amzn1.application-oa2-client.xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"; await IDOProtocolAlexa.registerAlexa(clientId: clientId); } /// Bridge connection between Bluetooth and protocol library bridgeConnect() async { // Handle Bluetooth return data bluetoothManager.receiveData().listen((event) { if (event.data != null) { libManager.receiveDataFromBle(event.data!, event.macAddress, event.spp ?? false ? 1 : 0); } }); /// Listen to changes in the protocol library status libManager.listenStatusNotification((status) async { if (status == IDOStatusNotification.protocolConnectCompleted) { /// Protocol library device connection and initialization completed } else if (status == IDOStatusNotification.fastSyncCompleted) { /// Fast configuration completed /// Save device information and pair with Bluetooth on Android bluetoothManager.setPair(); } else if (status == IDOStatusNotification.deviceInfoUpdateCompleted) { /// Device information update completed } else if (status == IDOStatusNotification.unbindOnBindStateError) { /// Binding state error, unbind and delete the current device } else if (status == IDOStatusNotification.fastSyncFailed) { /// Fast configuration failed, menu retrieval failed /// Save device information and pair with Bluetooth on Android, continue fast configuration until successful on the next synchronization bluetoothManager.setPair(); } }); // Write data to the Bluetooth device IDOBluetoothWriteType rs = IDOBluetoothWriteType.withoutResponse; libManager.registerWriteDataToBle((event) async { rs = await bluetoothManager.writeData(event.data, type: event.type); if (rs == IDOBluetoothWriteType.withoutResponse && Platform.isIOS) { /// Send data without response libManager.writeDataComplete(); } }); // Bluetooth write state callback bluetoothManager.writeState().listen((event) { if (event.state ?? false) { if (Platform.isAndroid || event.type == IDOBluetoothWriteType.withResponse) { /// Write completed libManager.writeDataComplete(); } } }); // Listen to connection state bluetoothManager.deviceState().listen((value) async { if (value.errorState == IDOBluetoothDeviceConnectErrorType.pairFail) { // Pairing exception, prompt to ignore the device } if ((value.state == IDOBluetoothDeviceStateType.connected && (value.macAddress != null && value.macAddress!.isNotEmpty))) { // Device connected successfully /// Get OTA enumeration type final isTlwOta = bluetoothManager.currentDevice?.isTlwOta ?? false final isOta = bluetoothManager.currentDevice?.isOta ?? false final otaType = isTlwOta ? IDOOtaType.telink : isOta ? IDOOtaType.nordic : IDOOtaType.none; /// Get device name final devicenName = bluetoothManager.currentDevice?.name; /// Get device UUID (iOS only) final uuid = bluetoothManager.currentDevice?.uuid; /// Connect the device using the protocol library libManager.markConnectedDevice( macAddress: value.macAddress!, otaType: otaType, isBinded: deviceList != null, deviceName: devicenName, uuid: uuid); } else if (value.state == IDOBluetoothDeviceStateType.disconnected) { // Device disconnected await libManager.markDisconnectedDevice( macAddress: value.macAddress, uuid: value.uuid); } }); /// Listen to Bluetooth state bluetoothManager.bluetoothState().listen((event) async { /// Get device MAC address final macAddress = bluetoothManager.currentDevice?.macAddress; /// Get device UUID (iOS only) final uuid = bluetoothManager.currentDevice?.uuid; if (event.state == IDOBluetoothStateType.poweredOff) { /// Bluetooth turned off await libManager.markDisconnectedDevice(macAddress: macAddress,uuid: uuid); } }); } Alexa Interface Usage /// Example of using Alexa useAlexa() { // Switch Language (optional, default is English) IDOProtocolAlexa.changeLanguage(AlexaLanguageType.usa); // Set Delegate IDOProtocolAlexa().delegate = ; // Add Listener IDOProtocolAlexa().listenLoginStateChanged((state) { // Login state changed }); // Authorize Alexa // productId is the product ID registered in Alexa backend // func is the callback function that returns the userCode and url IDOProtocolAlexa().authorizeRequest( productId: 'productId', func: (userCode, url) { // userCode is the verification code for Alexa login // url is the official Alexa login URL to be opened in a WebView // Add code to open WebView and load the URL here }).then((rs) { if (rs == LoginResponse.successful) { print('Login successful'); } else { print('Login failed $rs'); } }); // Cancel login request IDOProtocolAlexa().stopLogin(); // Logout Alexa IDOProtocolAlexa().logout(); } Bluetooth Library Interface Usage useBluetooth() { /// Current connected device /// last connected device final device = bluetoothManager.currentDevice; /// Start scanning /// macAddress (Android): search by macAddress /// Returns the specified search device, or null if not specified bluetoothManager.startScan(); /// Stop scanning bluetoothManager.stopScan(); /// Search results /// deviceName: search only devices with deviceName /// deviceID: search only devices with deviceID bluetoothManager.scanResult(deviceNames, deviceIDs, macAddresses, uuids).listen((event) { }); /// Monitor device state bluetoothManager.deviceState().listen((event) { }); /// Monitor Bluetooth state bluetoothManager.bluetoothState().listen((event) { }); /// Connect to device selected from scan list bluetoothManager.connect(device); /// Use this to reconnect the device bluetoothManager.needAutoConnect(true); bluetoothManager.autoConnect(device); /// Cancel connection bluetoothManager.cancelConnect(); /// Get Bluetooth state final bluetoothState = await getBluetoothState(); /// Get device connection state final deviceState = await getDeviceState(); /// bt pairing (Android) bluetoothManager.setBtPair(device); /// unpair (Android) bluetoothManager.cancelPair(); /// Send data /// data: data to be sent /// device: device to send data to /// type: 0 for BLE data, 1 for SPP data bluetoothManager.writeData(data, device, type).listen; /// Send data status bluetoothManager.writeState(device).listen; /// Received data bluetoothManager.receiveData(device).listen; /// Connect to SPP (Android) bluetoothManager.connectSPP(btMacAddress); /// Disconnect SPP (Android) bluetoothManager.disconnectSPP(btMacAddress); /// Initiate Nordic DFU upgrade bluetoothManager.startNordicDFU(config); /// Monitor DFU progress, called externally /// progress: progress /// state: 'Completed' for upgrade completed /// error: error message if not null bluetoothManager.dfuProgress().listen((event) { if (event['progress'] != null && event['progress'] is int) { // Progress final progress = event['progress'] as int; } else if (event['state'] != null && event['state'] is String && event['state'] == 'Completed') { // Upgrade completed } else if (event['error'] != null && event['error'] is String) { // Upgrade error final error = event['error'] as String; } }); /// Log path bluetoothManager.logPath(); } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-10-24 15:50:47 "},"IDOFlutter.html":{"url":"IDOFlutter.html","title":"IDO Standardized Flutter Interface Documentation","keywords":"","body":"{IDO Standardized Flutter Interface Specification} Flutter API: 1. Send Basic Events 1.1 Function Overview: An app can use this interface to send specified events to the device, including setting instructions, getting instructions, notifying instructions, controlling instructions, etc., to achieve basic interaction between the app and the device. 1.2 API ID: Stream send({required CmdEvtType evt, String? json = '{}'}); 1.3 API Parameter Description: @Param:evt Basic event number @Param:json Content of the basic event item in JSON string format For information on event numbers and corresponding event item content, refer to => IDO Basic Event Field Description 2. Bluetooth Response Data Entry 2.1 Function Overview: The Bluetooth library parses the received byte data through this interface, and then returns the results as a JSON string format to the app through the registered function callback. 2.2 API ID: void receiveDataFromBle(Uint8List data, String? macAddress, int type); 2.3 API Parameter Description: @Param:data Byte data @Param:macAddress Device MAC address @Param:type Channel type, 0: BLE 1: SPP 3. Initialize C Library 3.1 Function Overview: Initialize the C library, including creating timers for the C library, registering parsing functions, creating sending queues, etc., and call it when creating instances. 3.2 API ID: Future initClib(); 3.3 API Parameter Description: None 4. Set C Library Log Mode 4.1 Function Overview: Set the log level of the C library. DEBUG is the debugging mode, and RELEASE is the online version with optimized log output. 4.2 API ID: void setClibRunMode({required bool isDebug}); 4.3 API Parameter Description: @Param:isDebug Log mode, true: debugging mode, false: release version 4.Registration protocol library（new） 4.1 Function Overview: Register the protocol library, built-in initialization C library, complete the timer creation of the C library, the registration of the parsing function, and the creation of the send queue. Need to register before using libManager. 4.2 API ID: static Future register({ bool outputToConsole = false, bool outputToConsoleClib = false, bool isReleaseClib = true} 4.3 API Parameter Description: @Param:outputToConsole log printed to console @Param:outputToConsoleClib C library log is printed to the console @Param:isReleaseClib c library running mode (release only prints important logs) 5. Register Bluetooth Data Sending Function 5.1 Function Overview: After the app calls the basic event sending interface send(evt,json), the C library will report the converted byte data through the registered Bluetooth sending function. 5.2 API ID: void registerWriteDataToBle(void Function(CmdRequest data) func); 5.3 API Parameter Description: @Param:func Bluetooth sending function 6. Bluetooth Data Sending Complete 6.1 Function Overview: Called when the C library completes the Bluetooth data sending through the Bluetooth sending function. 6.2 API ID: void writeDataComplete(); 6.3 API Parameter Description: None 7. Mark Device as Connected (called when Bluetooth is connected) 7.1 Function Overview: Mark the device as connected when connection is established. 7.2 API ID: Future markConnectedDeviceSafe({required String uniqueId,required IDOOtaType otaType,required bool isBinded,String? deviceName = ''}); 7.3 API Parameter Description: @Param:uniqueId (Android: MAC address of the connected device), iOS: (MAC address or UUID of the connected device) @Param:otaMode Set OTA mode @Param:isBinded Binding status @Param:deviceName Device name 8. Mark Device as Disconnected (called when Bluetooth is disconnected) 8.1 Function Overview: Mark the device as disconnected when disconnected. 8.2 API ID: Future markDisconnectedDevice({String? macAddress, String? uuid}); 8.3 API Parameter Description: @Param:macAddress MAC address of the disconnected device @Param:uuid 9. Clear all pending tasks 9.1 Function Overview: Clear all executed tasks. 9.2 API ID: void dispose(); 9.3 API Parameter Description: None 11. File Transfer Tool Entry 11.1 Function Overview: Provides the ability to transfer files. 11.2 API ID: IDOFileTransfer get transFile; 11.3 API Parameter Description: Refer to file transfer tool interface description => IDO File Transfer Interface Description 12. Query if the connection is established 12.1 Function Overview: Used internally by the SDK. 12.2 API ID: bool get isConnected; 12.3 API Parameter Description: @Param:isConnected Connection flag, false: not connected, true: connected////TODO 13. Query if in the process of connecting 13.1 Function Overview: Changing devices will be restricted, and it is not possible to switch devices while connecting. 13.2 API ID: bool get isConnecting; 13.3 API Parameter Description: @Param:isConnecting Connecting flag, false: not in the process of connecting, true: connecting. 14. Query if in the process of binding 14.1 Function Overview: Changing devices will be restricted, and it is not possible to switch devices while binding. 14.2 API ID: bool get isBinding; 14.3 API Parameter Description: @Param:isBinding Binding flag, false: not in the process of binding, true: binding. 15. Query if it is in fast configuration mode 15.1 Function Overview: During fast configuration, external commands will directly return failure. 15.2 API ID: bool get isFastSynchronizing; 15.3 API Parameter Description: @Param: isFastSynchronizing Flag for fast configuration, false: not in fast configuration mode, true: in fast configuration mode. 16. Query OTA type 16.1 Function Overview: None 16.2 API ID: IDOOtaType get otaType; 16.3 API Parameter Description: @Param: otaType OTA status, including: enum IDOOtaType { none = 0, /// No upgrade telink = 1, /// Telink device OTA nordic = 2, /// Nordic device OTA } 17. Query the MAC address of the connected device 17.1 Function Overview: None 17.2 API ID: String get macAddress; 17.3 API Parameter Description: @Param: macAddress MAC address of the current device, string. When it is not marked as connected, it will always return \"UNKNOWN\" 18. Function table entry 18.1 Function Overview: Provides the ability to query, refresh, and clear the function table. 18.2 API ID: IDOFunctionTable get funTable; 18.3 API Parameter Description: Jump to the function table interface description => IDO Function Table Interface Description 19. Data synchronization entry 19.1 Function Overview: Provides the ability to query data synchronization status, start data synchronization, and end data synchronization. 19.2 API ID: IDOSyncData get syncData; 19.3 API Parameter Description: Jump to the data synchronization interface description => IDO Data Synchronization Interface Description 20. Device information entry 20.1 Function Overview: Provides the ability to externally synchronize and obtain device information. 20.2 API ID: IDODeviceInfo get deviceInfo; 20.3 API Parameter Description: Jump to the device information interface description => IDO Device Information Interface Description 21. Device binding entry 21.1 Function Overview: Provides the ability to query binding status, initiate binding and unbinding, and listen to binding mode. 21.2 API ID: IDODeviceBind get deviceBind; 21.3 API Parameter Description: Jump to the device binding interface description => IDO Device Binding Interface Description 22. Message icon entry 22.1 Function Overview: Provides the ability to set country code, cache server address, APP Key, language member interface, and query and update icon status, APP package name, get & delete local sandbox cache, and send application icon. 22.2 API ID: IDOMessageIcon get messageIcon; 22.3 API Parameter Description: Jump to the message icon interface description => IDO Message Icon Interface Description 23. Data exchange entry 23.1 Function Overview: Provides the ability to initiate data exchanges, listen for BLE device replies, and BLE device initiated data exchanges. 23.2 API ID: IDOExchangeData get exchangeData; 23.3 API Parameter Description: Jump to the data exchange interface description => IDO Data Exchange Interface Description 24. Device log entry 24.1 Function Overview: Provides the ability to query if it supports obtaining firmware logs, query the log directory address, start and cancel getting logs. 24.2 API ID: IDODeviceLog get deviceLog; 24.3 API Parameter Description: Jump to the device log interface description => IDO Device Log Interface Description 25. Other tools interface 25.1 Function Overview: Provides the ability to query if it supports obtaining firmware logs, query the log directory address, start and cancel getting logs.////TODO 25.2 API ID: IDOTool get tools; 25.3 API Parameter Description: Jump to the tool interface description => IDO Tool Interface Description 26. Call notice & message entry 26.1 Function Overview: Provides the ability to notify the device of incoming calls and messages (v2). 26.2 API ID: IDOCallNotice get callNotice; 26.3 API Parameter Description: Jump to the call notice and message notice interface description => IDO Call Notice and Message Notice Interface Description 27. Protocol library cache entry 27.1 Function Overview: Provides the ability to query log, alexa, device cache root directory, export log, load device function table, and connect to device list information. 27.2 API ID: IDOCache get cache; 27.3 API Parameter Description: Jump to the protocol library cache interface description => IDO Protocol Library Cache Interface Description 28. Initialize Log 28.1 Overview: Provides the ability to set log print, file writing permission, and log level. 28.2 API ID: static Future initLog( {bool outputToConsole = true}) async { return _IDOProtocolLibManager.initLog( writeToFile: true, outputToConsole: outputToConsole, logLevel: LoggerLevel.verbose); } 28.3 API Parameter: @param: outputToConsole bool, whether to print to the console, true: print, false: do not print. 29. Listen to Protocol Library Status Notifications 29.1 Overview: Provides the ability to listen to status notifications and monitor protocol library status. 29.2 API ID: StreamSubscription listenStatusNotification( void Function(IDOStatusNotification status) func); 29.3 API Parameter: @return: Callback status, including: enum IDOStatusNotification { protocolConnectCompleted = 0, /// Protocol library completed Bluetooth library bridging, and the cached data is initialized at this time functionTableUpdateCompleted = 1, /// Function table retrieval completed deviceInfoUpdateCompleted = 2, /// Device information retrieval completed deviceInfoFwVersionCompleted = 3, /// Trip version retrieval completed unbindOnAuthCodeError = 4, /// Binding authorization code exception, device forced unbinding unbindOnBindStateError = 5, /// Binding state exception, unbinding is required (triggered when the local binding state is inconsistent with the device information) fastSyncCompleted = 6, /// Fast configuration completed fastSyncFailed = 7, /// Fast configuration failed, the business layer needs to trigger fast configuration again deviceInfoBtAddressUpdateCompleted = 8, /// BT MacAddress retrieval completed macAddressError = 9, /// This error is reported when the macAddress obtained from fast configuration is inconsistent with MarkConnectedDevice syncHealthDataIng = 10,/// Synchronizing health data syncHealthDataCompleted = 11 /// Synchronization of health data completed } 30. Listen to Device Notifications/Control Events 30.1 Overview: Provides the ability to listen to notifications, control events, quick messages, and firmware error codes of watches/wristbands. 30.2 API ID: StreamSubscription listenDeviceNotification( void Function(IDODeviceNotificationModel model) func); 30.3 API Parameter: @return: IDODeviceNotificationModel go to Device Notification/Control Event Documentation => IDODevice Notification/Control Event Model Instructions 31. Check Alexa Login Status 31.1 Overview: N/A. 31.2 API ID: bool get isLogin; 31.3 API Parameter: @return: Login status flag, bool type, false: not logged in, true: logged in. 32. Check Alexa Current Language 32.1 Overview: N/A. 32.2 API ID: AlexaLanguageType get currentLanguage; 32.3 API Parameter: @return: Return the current country and language of Alexa, including: enum AlexaLanguageType { german('de-DE') = 0, /// German australia('en-AU') = 1, /// English Australia canadaEn('en-CA') = 2, /// English Canada unitedKingdom('en-GB') = 3, /// English United Kingdom india('en-IN') = 4, /// English India usa('en-US') = 5, /// English USA spainEs('es-ES') = 6, /// Spanish Spain mexico('es-MX') = 7, /// Spanish Mexico spainUs('es-US') = 8, /// Spanish USA frenchCanada('fr-CA') = 9, /// French Canada frenchFrench('fr-FR') = 10, /// French France hindiIndia('hi-IN') = 11, /// Hindi India italianItaly('it-IT') = 12, /// Italian japan('ja-JP') = 13, /// Japanese portugal('pt-BR') = 14; /// Portuguese } 33. Specify Alexa Delegate ////TODO 33.1 Overview: Provides the ability to specify an Alexa delegate.////TODO Function and purpose to be supplemented 33.2 API ID: set delegate(IDOAlexaDelegate delegate) 33.3 API Parameter: ////TODO 34. Register Alexa 34.1 Overview: Provides the ability to register Alexa and initialize Alexa log permissions. 34.2 API ID: static Future registerAlexa( {required String clientId, bool outputToConsole = true}) async { await _IDOProtocolAlexa.initLog( outputToConsole: outputToConsole); await _IDOProtocolAlexa.registerAlexa(clientId: clientId); } 34.3 API Parameter: @param: clientId ID generated by Alexa backend. @param: outputToConsole bool, whether to print Alexa logs to the console, true: print, false: do not print. 35. Switch Alexa Language 35.1 Overview: Provides the ability to notify the Alexa server to switch the current language. 35.2 API ID: static Future changeLanguage(AlexaLanguageType type) 35.3 API Parameter: @param: type Language type to be set, including: enum AlexaLanguageType { german('de-DE') = 0, /// German australia('en-AU') = 1, /// English Australia canadaEn('en-CA') = 2, /// English Canada unitedKingdom('en-GB') = 3, /// English United Kingdom india('en-IN') = 4, /// English India usa('en-US') = 5, /// English USA spainEs('es-ES') = 6, /// Spanish Spain mexico('es-MX') = 7, /// Spanish Mexico spainUs('es-US') = 8, /// Spanish USA frenchCanada('fr-CA') = 9, /// French Canada frenchFrench('fr-FR') = 10, /// French France hindiIndia('hi-IN') = 11, /// Hindi India italianItaly('it-IT') = 12, /// Italian japan('ja-JP') = 13, /// Japanese portugal('pt-BR') = 14; /// Portuguese } 36. Alexa CBL Authorization 36.1 Overview: N/A. 36.2 API ID: Future authorizeRequest( {required String productId, required CallbackPairCode func}); 36.3 API Parameter: @param: productId Product ID registered with Alexa backend. @param: func Callback function, callback the URL and User Code required for Alexa authentication. @return: LoginResponse, including: enum LoginResponse { successful = 0, /// Success failed = 1, /// Failed timeout = 2, /// Timeout } 37.Stop Alexa Login 37.1 Summary: Provides the ability to end the current login operation. 37.2 API ID: void stopLogin(); 37.3 API Parameter Description: None. 38.Logout Alexa 38.1 Summary: None. 38.2 API ID: void logout(); 38.3 API Parameter Description: None. 39.Register Listen Alexa Login State 39.1 Summary: Provides the ability to register and listen for the login state of Alexa. 39.2 API ID: StreamSubscription listenLoginStateChanged( void Function(LoginState state) func); 39.3 API Parameter Description: @return: Callback login state, including: enum LoginState { logging = 0, /// Logging in logined = 1, /// Logged in logout = 2, /// Not logged in } 40.Register Listen Alexa Voice State 40.1 Summary: Provides the ability to register and listen for the voice state of the wristband/watch. 40.2 API ID: StreamSubscription listenVoiceStateChanged( void Function(VoiceState state) func); 40.3 API Parameter Description: @return: Callback voice state, including: enum VoiceState { none = 0, /// No state ready = 1, /// Ready starting = 2, /// Starting finished = 3, /// Finished } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-10-24 15:50:47 "},"doc/IDOProtocolIntroduction.html":{"url":"doc/IDOProtocolIntroduction.html","title":"IDO Basic Event Field Description","keywords":"","body":"{IDO Basic Event Field Description} 1. Function Overview Basic Event Process: The APP sends basic events to the device through the Flutter interface libManager.send(evt, json). The event number and corresponding event items are packaged into byte data by the C library. Then, the byte data is sent to the device by the Bluetooth library. After receiving the response byte data from the device, the Bluetooth library parses the byte data through the Flutter interface receiveDataFromBle(data, macaddress, type). Finally, the APP receives the response content in the form of JSON, realizing the interaction between the APP and the device. In order to assist APP development, this document introduces the event numbers and event item contents of the basic events. 2. Basic Events V2 Set Instruction Events V2 Get Instruction Events V3 Long Packet Instruction Events OTA Instruction Events APP Notification/Control Events Device Notification/Control Events Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOTranFileIntroduction.html":{"url":"doc/IDOTranFileIntroduction.html","title":"IDO File Transfer Interface Description","keywords":"","body":"{IDO File Transfer Interface Specification} 1. Function Overview Provides the ability to transfer single/multiple files, including firmware packages, image gallery packages, font packages, language packages, BT upgrade packages, dials, address books, AGPS, GPS, message icons, sports icons, EPO upgrade packages, notification sound files, blood pressure calibration files. Provides the ability to retrieve file transfer progress, transfer status, and current file transfer type. 2. Interface Abilities 1. Query Transfer Status: 1.1 Function Summary: None 1.2 API ID: bool get isTransmitting; 1.3 API Parameter Description: @Param:isTransmitting Transferred flag, false: idle, true: transferring 2. Query Current Transferring File Type: 2.1 Function Summary: None 2.2 API ID: FileTransType? get transFileType; 2.3 API Parameter Description: @Param:transFileType File type ////TODO 3. Listen to the Currently Uploading File Type: 3.1 Function Summary: Callback for file start transferring, completion, and failure. 3.2 API ID: StreamSubscription listenTransFileTypeChanged(void Function(FileTransType? fileType) func); 3.3 API Parameter Description: @Param:fileType The file type currently being uploaded, null means no file being uploaded. ////TODO 4. Transfer Single File: 4.1 Function Summary: Provides the ability to transfer files, retrieve file transfer status, progress, error codes, and cancel the transfer of a single file. 4.2 API ID: Stream transferSingle( {required BaseFileModel fileItem, required CallbackFileTransStatusSingle funcStatus, required CallbackFileTransProgressSingle funcProgress, CallbackFileTransErrorCode? funError, bool cancelPrevTranTask}); 4.3 API Parameter Description: 4.3.1 @Param:fileItem File configuration information, including: class BaseFileModel{ final FileTransType fileType; /// File type final String filePath; /// File absolute path final String fileName; /// File name int? fileSize; /// File size int? originalFileSize; /// Original file size (before compression), only used for dials temporarily } 4.3.2 @Param:funcStatus Transfer status, including: typedef CallbackFileTransStatusSingle = void Function(FileTransStatus status); enum FileTransStatus { none = 0, invalid = 1, /// Invalid type notExists = 2, /// File does not exist busy = 3, /// Transfer task in progress config = 4, /// Configuration beforeOpt = 5, /// Pre-transfer operation trans = 6, /// Transferring finished = 7, /// Transfer completed onFastSynchronizing = 8, /// Fast configuration in progress, file transfer not supported error = 9, /// Transfer failed } 4.3.3 @Param:funcProgress Transfer progress. 4.3.4 @Param:funError Transfer error codes, including: typedef CallbackFileTransErrorCode = void Function( int index, int errorCode, int errorCodeFromDevice, int finishingTime); @Param:index Current index of the file being transferred. @Param:errorCode Error code returned by the C library. @Param:errorCodeFromDevice Error code returned by the firmware. When errorCode is 24 or 25, errorCodeFromDevice equals errorCode. @Param:finishingTime Estimated time for firmware to finish organizing, only returned when errorCode is 24 or 25, otherwise 0. 4.3.5 @Param:cancelPrevTranTask Cancel existing upload task. Default is false. 5. Transfer Multiple Files: 5.1 Function Summary: Provides the ability to transfer multiple files, retrieve file transfer status, progress, error codes, and cancel the transfer of a single file. 5.2 API ID: Stream> transferMultiple( {required List fileItems, required CallbackFileTransStatusMultiple funcStatus, required CallbackFileTransProgressMultiple funcProgress, CallbackFileTransErrorCode? funError, bool cancelPrevTranTask}); 5.3 API Parameter Description: 5.3.1 @Param:fileItem File configuration information, including: class BaseFileModel{ final FileTransType fileType; /// File type final String filePath; /// File absolute path final String fileName; /// File name int? fileSize; /// File size int? originalFileSize; /// Original file size (before compression), only used for dials temporarily } 5.3.2 @Param:funcStatus Transfer status, including: typedef CallbackFileTransStatusMultiple = void Function(int index, FileTransStatus status); enum FileTransStatus { none = 0, invalid = 1, /// Invalid type notExists = 2, /// File does not exist busy = 3, /// Transfer task in progress config = 4, /// Configuration beforeOpt = 5, /// Pre-transfer operation trans = 6, /// Transferring finished = 7, /// Transfer completed onFastSynchronizing = 8, /// Fast configuration in progress, file transfer not supported error = 9, /// Transfer failed } 5.3.3 @Param:funcProgress Transfer progress, including: typedef CallbackFileTransProgressMultiple = void Function(int currentIndex, int totalCount, double currentProgress, double totalProgress); @Param:currentIndex Current index of the file being transferred (0 ~ totalCount-1). @Param:totalCount Total number of files to be transferred (>= 1). @Param:currentProgress Current progress of the current file being transferred (0.0 ~ 1.0). @Param:totalProgress Overall progress (0.0 ~ 1.0). 5.3.4 @Param:funError Transfer error codes, including: typedef CallbackFileTransErrorCode = void Function( int index, int errorCode, int errorCodeFromDevice, int finishingTime); @Param:index Current index of the file being transferred. @Param:errorCode Error code returned by the C library. @Param:errorCodeFromDevice Error code returned by the firmware. When errorCode is 24 or 25, errorCodeFromDevice equals errorCode. @Param:finishingTime Estimated time for firmware to finish organizing, only returned when errorCode is 24 or 25, otherwise 0. 5.3.5 @Param:cancelPrevTranTask Cancel existing upload task. Default is false. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOFunctionTableIntroduction.html":{"url":"doc/IDOFunctionTableIntroduction.html","title":"IDO Function Table Interface Description","keywords":"","body":"{IDO Function Table Interface Specification} 1. Overview Provides the ability to query the status of the function table, refresh the function table, and clear the function table. 2. Interface Abilities 1. Refresh Function Table: 1.1 Summary: Get the device function table and refresh the local function table. 1.2 API ID: Future refreshFuncTable(); 1.3 API Parameters: @return Function table, null if failed to fetch. 2. Clear Function Table: 2.1 Summary: None. 2.2 API ID: void cleanDataOnMemory() { _ft = null; } 2.3 API Parameters: None 3. Export Function Table: 3.1 Summary: Export the function table information to a text file in the storage root directory , with the name func_table.json 3.2 API ID: Future exportFuncTableFile(); 3.3 API Parameters: @return Absolute path of the func_table.json file, null if export fails. 4. Query Status of a Function Table: 4.1 Summary: Query the status of a specific function table, false for off, true for on. 4.2 API ID: class BaseFunctionTable { ... } 4.3 API Parameters: @return Function table status, bool type, false for off, true for on. Translate Chinese in the text to English, do not change the structure of other parts. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOSyncHealthDataIntroduction.html":{"url":"doc/IDOSyncHealthDataIntroduction.html","title":"IDO Data Synchronization Interface Description","keywords":"","body":"{IDO Data Synchronization Interface Description} 1. Overview Provides the ability to query data synchronization status, start data synchronization, and end data synchronization. 2. Interface Capabilities 1. Query Data Synchronization Status: 1.1 Summary: None. 1.2 API ID: SyncStatus get syncStatus; 1.3 API Parameter Description: @param syncStatus Data synchronization status, including enum SyncStatus { init = 0, /// Initialization syncing = 1, /// Synchronizing finished = 2, /// Synchronization completed canceled = 3, /// Synchronization canceled stopped = 4, /// Synchronization stopped timeout = 5, /// Synchronization timed out error = 6 /// Synchronization error } 2. Start Data Synchronization: 2.1 Summary: None. 2.2 API ID: Stream startSync({ required CallbackSyncProgress funcProgress, required CallbackSyncData funcData, required CallbackSyncCompleted funcCompleted }); 2.3 API Parameter Description: 2.3.1 @param funcProgress Data synchronization progress, percentage 0~100. 2.3.2 @param funcData Synchronized data content callback, including: typedef CallbackSyncData = void Function(SyncDataType type,String jsonStr,int errorCode); @param:type The data type of the callback, including: enum SyncDataType { nullType, // 0 stepCount, // 1 Step Count heartRate, // 2 Heart Rate sleep, // 3 Sleep bloodPressure, // 4 Blood Pressure bloodOxygen, // 5 Blood Oxygen pressure, // 6 Pressure noise, // 7 Noise piven, // 8 Skin Temperature respirationRate, // 9 Respiration Rate bodyPower, // 10 Body Power HRV, // 11 HRV activity, // 12 Multiple Sports GPS, // 13 GPS swim, // 14 Swimming v2StepCount, // 15 V2 Step Count v2Sleep, // 16 V2 Sleep v2HeartRate, // 17 V2 Heart Rate v2BloodPressure, // 18 V2 Blood Pressure v2GPS, // 19 V2 GPS v2Activity // 20 V2 Multiple Sports } @param:jsonStr Synchronized data content of the callback. @param:errorCode Error code of the callback, 0 indicates normal parsing of data. Note: The synchronized data content corresponding to the data types can be found in => IDO Health Data Synchronization Content Description 2.3.3 @param funcCompleted Callback for completion of data synchronization with error code, 3. End Data Synchronization: 3.1 Summary: None. 3.2 API ID: void stopSync(); 3.3 API Parameter Description: None. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-10-10 16:13:55 "},"doc/IDOV3HealthSyncEvtIntroduction.html":{"url":"doc/IDOV3HealthSyncEvtIntroduction.html","title":"IDO Health Data Sync Content Description","keywords":"","body":"{IDO Synchronization of Health Data Content Description} Data Types and Corresponding Functions: Data Type Function 1 Sync Exercise 2 Sync Heart Rate 3 Sync Sleep 4 Sync Blood Pressure 5 Sync Blood Oxygen 6 Sync Pressure 7 Sync Environmental Volume (Noise) 8 Sync Body Temperature 9 Sync Respiratory Rate Data 10 Sync Body Power Data 11 Sync HRV Data 12 Sync Multiple Sports and Sports Courses 13 Sync GPS 14 Sync Swimming 15 V2 Exercise 16 V2 Sleep 17 V2 Heart Rate 18 V2 Blood Pressure 19 V2 GPS 20 V2 Multiple Sports Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSpo2.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSpo2.html","title":"Sync SpO2","keywords":"","body":"Blood Oxygen Synchronization JSON fields received by the app: Field Name Data Type Field Description year int Data date: year month int Data date: month day int Data date: day start_time int Start time in seconds, offset from 0:00 data_type int 0: Invalid, 1: Single value, 2: Maximum and minimum valuereserve items array Collection of offset and value Field Name Data Type Field Description offset int Default offset in secondsIf the function table getSpo2OffChangeV3 is configured, the data offset is in minutes value int Blood oxygen average value Example: { \"year\": 2022, \"month\": 12, \"day\": 26, \"start_time\": 0, \"data_type\": 1, \"items\": [ { \"offset\": 30, \"value\": 30 }, { \"offset\": 30, \"value\": 30 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-14 12:28:01 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncHR.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncHR.html","title":"Sync Heart Rate","keywords":"","body":"Sync Heart Rate JSON fields received by the app: Field Name Data Type Description year int Data date: year month int Data date: month day int Data date: day start_time int Start time in seconds, offset from 0:00 data_type int (reserve) 0 for invalid, 1 for single value, 2 for maximum and minimum values silent_hr int Resting heart rate five_min_max_data int (reserve) Maximum heart rate in a five-minute interval five_min_min_data int (reserve) Minimum heart rate in a five-minute interval five_min_avg_data int (reserve) Average heart rate in a five-minute interval five_min_data int [] (reserve) All heart rate values in a five-minute interval hr_data_count int Number of heart rate data points for high and low heart rates Returns 0 if v3SupportSyncOverHighLowHeartData is not enabled. hr_interval array Five heart rate intervals: warm-up zone, maximum heart rate zone, fat burning zone, aerobic endurance zone, anaerobic endurance zoneArray of threshold and minute items array Heart rate data points:offset and heart_rateVal hr_data array High and low heart rate data: hour, minute, type, and heart_rateReturns 0 if v3SupportSyncOverHighLowHeartData is not enabled. Field Name Data Type Description offset int Offset in seconds heart_rateVal int Heart rate value Field Name Data Type Description threshold int Threshold minute int Minute Field Name Data Type Description hour int Hour of the high and low heart rate dataReturns 0 if v3SupportSyncOverHighLowHeartData is not enabled. minute int Minute of the high and low heart rate dataReturns 0 if v3SupportSyncOverHighLowHeartData is not enabled. type int Type of heart rate value0: Heart rate value for low heart rate1: Heart rate value for high heart rateReturns 0 if v3SupportSyncOverHighLowHeartData is not enabled. heart_rate int Heart rate value in beats per minuteReturns 0 if v3SupportSyncOverHighLowHeartData is not enabled. Example: { \"year\": 2022, \"month\": 12, \"day\": 26, \"start_time\": 0, \"data_type\": 0, \"silent_hr\": 85, \"hr_data_count\": 2, \"hr_interval\": [ { \"threshold\": 80, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 } ], \"items\": [ { \"offset\": 80, \"heart_rateVal\": 5 }, { \"offset\": 83, \"heart_rateVal\": 5 } ], \"hr_data\": [ { \"hour\": 11, \"minute\": 25, \"type\": 1, \"heart_rate\": 120 }, { \"hour\": 11, \"minute\": 25, \"type\": 0, \"heart_rate\": 70 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-10 14:26:19 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncPressure.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncPressure.html","title":"Sync Pressure","keywords":"","body":"Sync Stress JSON fields received by the App: Field Name Field Type Field Description year int Data date (year) month int Data date (month) day int Data date (day) start_time int Start time in seconds from 00:00 data_type int 0: Invalid, 1: Single value, 2: Maximum and minimum values items array Array of stress data details with offset and value Field Name Field Type Field Description offset int Offset in minutes value int Stress value Example: { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"data_type\":1, \"items\":[ { \"offset\":30, \"value\":30 }, { \"offset\":30, \"value\":30 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncActivity.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncActivity.html","title":"Sync Multiple Sports and Sports Courses","keywords":"","body":"Synchronize multiple exercise and running courses JSON fields received by the app: Field Name Field Type Field Description version int Protocol versionThe default version number for this message is 0.setSyncV3ActivityAddParam function table opens with version=16,syncRealTimeV3 function table opens with version=32 data_length int Data lengthThis value is 0 if the setSyncV3ActivityAddParam (version=16) or syncRealTimeV3 (version=32) function table is enabled packet_count int Number of packetsThis value is 0 if the setSyncV3ActivityAddParam (version=16) or syncRealTimeV3 (version=32) function table is enabled year int Data date: year month int Data date: month day int Data date: day hour int Data date: hour minute int Data date: minute second int Data date: second type int Enum for type of exercise connect_app int Whether the bracelet is connected to the app and what kind of report is generated by the app1 for connected, 0 for not connected sport_start_type int 0: Invalid, 1: Exercise initiated by the app, 2: Exercise initiated by the watch hr_data_interval_minute int Heart rate data interval in minutes step int Number of steps durations int Duration of exercise in secondsEnd Time Description: function table syncHealthSyncV3ActivityEndTimeUseUtcMode without open, Movement over time = start time + movement time function table syncHealthSyncV3ActivityEndTimeUseUtcMode after opening, Movement over time through the field end_month & end_day & end_hour & end_minute & end_year & end_sec calories int Calories burned distance int Distance covered avg_hr_value int Average heart rate max_hr_value int Maximum heart rate min_hr_value Int Minimum heart rate. Returns 0 if V3_sync_v3_activity_add_param or syncRealTimeV3 function table is not enabled avg_step_frequency int Average step frequency in steps per minute max_step_frequency int Maximum step frequency in steps per minute avg_step_stride int Average step stride max_step_stride int Maximum step stride avg_speed int Average speed in km/h (multiplied by 100 in firmware) max_speed int Maximum speed in km/h (multiplied by 100 in firmware) avg_pace_speed int Average pace in seconds per kilometerReturns 0 if setSyncV3ActivityAddParam or syncRealTimeV3 function table is not enabled max_pace_speed int Maximum pace per kilometerReturns 0 if setSyncV3ActivityAddParam or syncRealTimeV3 function table is not enabled avg_km_speed int Average kilometer pace in seconds per kilometer max_km_speed int Maximum kilometer pace warm_up_mins int Accumulated warm-up exercise duration in minutes fat_burning_mins int Accumulated fat burning exercise duration in minutes aerobic_exercise_mins int Accumulated aerobic exercise duration in minutes anaerobic_exercise_mins int Accumulated anaerobic exercise duration in minutes extreme_exercise_mins int Accumulated extreme exercise duration in minutes warm_up_sec int Accumulated warm-up exercise duration in seconds fat_burning_sec int Accumulated fat burning exercise duration in seconds aerobic_exercise_sec int Accumulated aerobic exercise duration in seconds anaerobic_exercise_sec int Accumulated anaerobic exercise duration in seconds extreme_exercise_sec Int Accumulated extreme exercise duration in seconds vo2max Int Maximum oxygen consumption in milliliters per kilogram per minuteRange: 0-80 (not multiplied by 100) grade Int Oxygen consumption level 1: Low 2: Amateur 3: General 4: Average 5: Good 6: Excellent 7: Professional Valid only if setSupportSportPlan or getOxygenDataSupportGradeV3 function table is enabled, otherwise 0 indicating unsupported oxygen consumption level recovery_time_year int Recovery time: year recovery_time_mon int Recovery time: month recovery_time_day int Recovery time: day recovery_time_hour int Recovery time: hour recovery_time_min int Recovery time: minute recovery_time_s int Recovery time: second training_effect int Training effectUnit: None Range: 1.0 - 5.0 (multiplied by 10 for transmission)Returns 0 if setSyncV3ActivityAddParam or syncRealTimeV3 function table is not enabled mi_speed_count int Number of mile pace hr_item_count int Number of heart rate activity_data_item_count int Number of customized data fields, recorded every minute km_speed_count int Number of kilometer pace, maximum 100 mi_speed_count int Number of mile pace pace_count int Number of real-time paceReturns 0 when setSyncV3ActivityAddParam or syncRealTimeV3 is not enabled in the functionality table frequency_count int Number of steps per minute paddle_number_count int Number of paddle strokesReturns 0 when V3_sync_v3_activity_add_param or v3_support_activity_sync_real_time is not enabled in the functionality table paddle_frequency_count int Number of paddle frequencyReturns 0 when setSyncV3ActivityAddParam or syncRealTimeV3 is not enabled in the functionality table tread_frequency_count int Number of tread frequencyReturns 0 when setSyncV3ActivityAddParam or syncRealTimeV3 is not enabled in the functionality table real_speed_count int Number of real-time speedReturns 0 when syncRealTimeV3 functionality is not enabled end_month int Month of the end time of the activityIf the activity is paused after the sport is finished, resulting in a difference between the end time of the activity and the end time of the app, the end time of the activity is returned by the firmware. Return 0 if the protocol is not supported. The app determines whether the month is 0 to determine whether to use the following fields as the end time of the activityReturns 0 when setSyncV3ActivityAddParam or syncRealTimeV3 is not enabled in the functionality tablesyncHealthSyncV3ActivityEndTimeUseUtcMode open effective function table end_day int Day of the end time of the activityReturns 0 when setSyncV3ActivityAddParam or syncRealTimeV3 is not enabled in the functionality tablesyncHealthSyncV3ActivityEndTimeUseUtcMode open effective function table end_hour int Hour of the end time of the activityReturns 0 when setSyncV3ActivityAddParam or syncRealTimeV3 is not enabled in the functionality tablesyncHealthSyncV3ActivityEndTimeUseUtcMode open effective function table end_minute int Minute of the end time of the activityReturns 0 when setSyncV3ActivityAddParam or syncRealTimeV3 is not enabled in the functionality tablesyncHealthSyncV3ActivityEndTimeUseUtcMode open effective function table end_year int Year of the end time of the activitysyncHealthSyncV3ActivityEndTimeUseUtcMode open effective function table end_sec int Second of the end time of the activitysyncHealthSyncV3ActivityEndTimeUseUtcMode open effective function table training_offset int Training course date offset starting from zeroReturns 0 when setSupportSportPlan functionality is not enabled act_type int Plan type:1: Running Plan 3km2: Running Plan 5km3: Running Plan 10km4: Half Marathon Training (Phase 2)5: Marathon Training (Phase 2)64: Easy Run for 6 minutes65: Easy Run for 10 minutes66: Easy Run for 15 minutes67: Walk-Run Combination - Beginner68: Walk-Run Combination - Intermediate69: Walk-Run Combination - Advanced70: Post-Run StretchingReturns 0 when setSupportSportPlan functionality is not enabled in_class_calories int Calorie burned during the class, unit: kcal completion_rate int Action completion rate 0-100 hr_completion_rate int Heart rate control rate 0-100 smart_competitor int 0: Invalid 1: Non-intelligent companion running activity 2: Intelligent companion running activityEffective when the functionality table supportSmartCompetitor is enabled ai_image_id int AI image IDEffective when the functionality table supportSmartCompetitor is enabled user_image_id int User image IDEffective when the functionality table supportSmartCompetitor is enabled bg_image_id int Background image IDEffective when the functionality table supportSmartCompetitor is enabled smart_competitor_pace int Intelligent companion running paceEffective when the functionality table supportSmartCompetitor is enabled warm_up_performance int Warm-up performance 0-100Effective when both setSupportSportPlan and supportWarmUpBeforeRunning are enabled gps_status int GPS status0: Invalid 1: Enabled 2: Not enabled (Display Distance when not enabled, 3D Distance when enabled)Effective when both setSupportSportPlan and version=0x30 are enabled in the functionality table distance3d int 3D distance, unit: metersEffective when supportSyncActivityData3dDistanceSpeed, setSupportSportPlan, and version=0x30 are enabled avg_3d_speed int Average 3D speed, unit: km/hMultiply the received value by 100 and divide by 100 for transmissionEffective when supportSyncActivityData3dDistanceSpeed, setSupportSportPlan, and version=0x30 are enabled avg_vertical_speed int Average vertical speed, unit: m/hMultiply the received value by 10 and divide by 10 for transmissionEffective when supportSyncActivityData3dDistanceSpeed, setSupportSportPlan, and version=0x30 are enabled avg_slope int Average slope, unit: degrees-90 to 90Effective when supportSyncActivityDataAvgSlope, setSupportSportPlan, and version=0x30 are enabled max_altitude int Maximum altitude, unit: meters-500 to 9000Effective when getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan, and version=0x30 are enabled mix_altitude int Minimum altitude, unit: meters-500 to 9000Effective when getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan, and version=0x30 are enabled cumulative_altitude_rise int Cumulative altitude rise, unit: metersEffective when getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan, and version=0x30 are enabled cumulative_altitude_loss int Cumulative altitude loss, unit: metersEffective when getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan, and version=0x30 are enabled altitude_count int Number of altitude detailsEffective when getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan, and version=0x30 are enabled avg_altitude int Average altitude, unit: meters-500 to 9000Effective when getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan, and version=0x30 are enabled act_count int Number of action details hr_data_vlaue int [] Heart rate data details frequency_items int [] Step frequency data details items_mi_speed int [] Mile pace data details pace_speed_items int [] Real-time pace data detailsReturns 0 when setSyncV3ActivityAddParam or syncRealTimeV3 is not enabled in the functionality table paddle_number_items int [] Paddle stroke data detailsReturns 0 when setSyncV3ActivityAddParam or syncRealTimeV3 is not enabled in the functionality table paddle_frequency_items int [] Paddle frequency data detailsReturns 0 when setSyncV3ActivityAddParam or syncRealTimeV3 is not enabled in the functionality table tread_frequency_items int [] Tread frequency data detailsReturns 0 when setSyncV3ActivityAddParam or syncRealTimeV3 is not enabled in the functionality table act_items int [] Action data detailsReturns 0 when setSupportSportPlan functionality is not enabled item_real_speed_temp int [] Real-time speed data detailsReturns 0 when setSupportSportPlan functionality is enabledReturns 0 when syncRealTimeV3 functionality is not enabled altitude_item int [] Altitude data, unit: meters, range -500~9000Effective when getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan, and version=0x30 are enabled items List Customized field data details, including steps, calories, and distance items_km_speed List Kilometer pace data details, including seconds Field Name Field Type Field Description steps int Step count calories int Calories distance int DistanceUint:meter Field Name Field Type Field Description second int Kilometer paceUint:second Example: { \"act_type\" : 0, \"action_temp\" : null, \"activity_data_item_count\" : 0, \"aerobic_exercise_mins\" : 0, \"aerobic_exercise_sec\" : 0, \"anaerobic_exercise_mins\" : 0, \"anaerobic_exercise_sec\" : 0, \"avg_hr_value\" : 0, \"avg_km_speed\" : 0, \"avg_pace_speed\" : 0, \"avg_speed\" : 0, \"avg_step_frequency\" : 0, \"avg_step_stride\" : 0, \"calories\" : 0, \"completion_rate\" : 0, \"connect_app\" : 0, \"data_length\" : 0, \"day\" : 0, \"distance\" : 0, \"durations\" : 0, \"end_day\" : 0, \"end_hour\" : 0, \"end_minute\" : 0, \"end_month\" : 0, \"extreme_exercise_mins\" : 0, \"extreme_exercise_sec\" : 0, \"fat_burning_mins\" : 0, \"fat_burning_sec\" : 0, \"frequency_count\" : 0, \"frequency_items\" : null, \"grade\" : 0, \"hour\" : 0, \"hr_completion_rate\" : 0, \"hr_data_interval_minute\" : 0, \"hr_data_vlaue\" : null, \"hr_item_count\" : 0, \"in_class_calories\" : 0, \"item_real_speed_temp\" : null, \"items\" : null, \"items_km_speed\" : null, \"items_mi_speed\" : null, \"km_speed_count\" : 0, \"max_hr_value\" : 0, \"max_km_speed\" : 0, \"max_pace_speed\" : 0, \"max_speed\" : 0, \"max_step_frequency\" : 0, \"max_step_stride\" : 0, \"mi_speed_count\" : 0, \"min_hr_value\" : 0, \"minute\" : 0, \"month\" : 0, \"pace_count\" : 0, \"pace_speed_items\" : null, \"packet_count\" : 0, \"paddle_frequency_count\" : 0, \"paddle_frequency_items\" : null, \"paddle_number_count\" : 0, \"paddle_number_items\" : null, \"real_speed_count\" : 0, \"recovery_time_day\" : 0, \"recovery_time_hour\" : 0, \"recovery_time_min\" : 0, \"recovery_time_mon\" : 0, \"recovery_time_s\" : 0, \"recovery_time_year\" : 0, \"second\" : 0, \"sport_start_type\" : 0, \"step\" : 0, \"training_effect\" : 0, \"training_offset\" : 0, \"tread_frequency_count\" : 0, \"tread_frequency_items\" : null, \"type\" : 0, \"vO2max\" : 0, \"version\" : 0, \"warm_up_mins\" : 0, \"warm_up_sec\" : 0, \"year\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-12-21 12:18:24 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncGPS.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncGPS.html","title":"Sync GPS","keywords":"","body":"Sync GPS JSON fields received by the app: Field Name Data Type Description year int Data date: year month int Data date: month day int Data date: day hour int Data time: hour minute int Data time: minute second int Data time: second data_interval int Data interval stringItems char[] Array of GPS details Example: { \"data_interval\" : 2, \"day\" : 12, \"hour\" : 10, \"minute\" : 32, \"month\" : 10, \"second\" : 56, \"stringItems\" : [ \"11358.563600E,2241.361300N\", \"11358.563800E,2241.361500N\", \"11358.563800E,2241.361600N\", \"11358.563700E,2241.361600N\", \"11358.563800E,2241.361700N\", \"11358.563800E,2241.361800N\", \"11358.563800E,2241.361900N\", \"11358.563900E,2241.362100N\", \"11358.564000E,2241.362100N\", \"11358.564000E,2241.362000N\", \"11358.564200E,2241.361900N\", \"11358.564400E,2241.361800N\", \"11358.564500E,2241.361800N\", \"11358.564500E,2241.361800N\", \"11358.564500E,2241.361700N\", \"11358.564500E,2241.361700N\", \"11358.564400E,2241.361600N\", \"11358.564200E,2241.361600N\", \"11358.564100E,2241.361600N\", \"11358.563900E,2241.361600N\", \"11358.563900E,2241.361600N\", \"11358.563800E,2241.361600N\", \"11358.563800E,2241.361600N\", \"11358.563900E,2241.361500N\", \"11358.563900E,2241.361500N\", \"11358.563900E,2241.361600N\", \"11358.563900E,2241.361600N\", \"11358.563800E,2241.361600N\", \"11358.563800E,2241.361600N\", \"11358.563800E,2241.361600N\", \"11358.563800E,2241.361600N\", \"11358.563800E,2241.361600N\", \"11358.563800E,2241.361500N\", \"11358.563800E,2241.361500N\", \"11358.563800E,2241.361500N\", \"11358.563800E,2241.361500N\", \"11358.563800E,2241.361500N\", \"11358.563800E,2241.361500N\", \"11358.563700E,2241.361500N\", \"11358.563700E,2241.361500N\", \"11358.563700E,2241.361500N\", \"11358.563700E,2241.361300N\" ], \"year\" : 2023 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-20 15:26:32 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSwim.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSwim.html","title":"Sync Swimming","keywords":"","body":"Synchronized Swimming JSON fields received by the App: Field Name Field Type Field Description year int Data date: year month int Data date: month day int Data date: day hour int Data date: hour minute int Data date: minute second int Data date: second version int Protocol version number type int Type: 0 invalid, 1 indoor swimming, 2 open water swimming calories int Calories burnedUint:Kcal distance int Distance in metersUint:meter confirm_distance int User-confirmed distanceUint:meter duration int DurationUint:seconds trips int Number of swimming laps average_swolf int Average swolf total_strokes_number int Total number of strokes swimming_posture int Main swimming posture0: medley 1: freestyle 2: Breaststroke 3: Backstroke 4: butterfly pool_distance int Pool distanceUint:meter avg_speed int Average speedThe time it takes to swim 100 meters Unit: seconds Valid for version=1, otherwise the field is 0 avg_frequency int Average stroke frequencyUint:Times/minValid for version=1, otherwise the field is 0 items array Swimming data details, containing swolf, strokesNumber, duration, swimmingPosture, distance, frequency, speed, stop_time, difference_time Field Name Field Type Field Description swolf int Stroke efficiency swimming_posture int Swimming posture0: medley 1: freestyle 2: Breaststroke 3: Backstroke 4: butterfly strokes_number int Stroke count duration int Time in secondsUnit: seconds distance int DistanceUnit: meter frequency int Stroke frequencyUint:Times/minValid for version=1, otherwise the field is 0 speed int The time it takes to swim 100 meters Unit: secondsValid for version=1, otherwise the field is 0 stop_time int End timeUnit: secondsValid for version=1, otherwise the field is 0 difference_time int Rest time between two lapsUnit: secondsValid for version=1, otherwise the field is 0 Example: { } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-14 10:51:48 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSleep.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSleep.html","title":"Sync Sleep","keywords":"","body":"Sleep Synchronization JSON fields received by the app: Field Name Data Type Field Description data_type int 1: Scientific sleep (with REM and breathing scores) 2: nap 4: normal sleep 6: nap and does not support scientific sleep fall_asleep_year int Year of falling asleep fall_asleep_month int Month of falling asleep fall_asleep_day int Day of falling asleep fall_asleep_hour int Hour of falling asleep fall_asleep_minte int Minute of falling asleep get_up_year int Year of getting up get_up_month int Month of getting up get_up_day int Day of getting up get_up_hour int Hour of getting up get_up_minte int Minute of getting up total_sleep_time_mins int Total sleep duration in minutes wake_mins int Total time awake in minutes light_mins int Total duration of light sleep in minutes rem_mins int Total duration of REM sleep in minutes deep_mins int Total duration of deep sleep in minutes wake_count int Number of times awake during sleep light_count int Number of times in light sleep during sleep rem_count int Number of times in REM sleep during sleep deep_count int Number of times in deep sleep during sleep awrr_status int Breathing status during sleep sleep_score int Sleep score breath_quality int Breath quality (0-100) without a unit sleep_avg_hr_value int Average heart rate during sleep stages sleep_avg_spo2_value int Average blood oxygen level during sleep stages sleep_avg_respir_rate_value int Average respiratory rate during sleep stages item_count int Number of sleep details items array Sleep details, a collection of stage and duration Field Name Data Type Field Description stage int Stage: 1: Awake, 2: Light sleep, 3: Deep sleep, 4: REM duration int Duration in seconds Example: { \"awrr_status\" : 0, \"breath_quality\" : 0, \"data_type\" : 1, \"deep_count\" : 0, \"deep_mins\" : 0, \"fall_asleep_day\" : 0, \"fall_asleep_hour\" : 0, \"fall_asleep_minte\" : 0, \"fall_asleep_month\" : 0, \"fall_asleep_year\" : 0, \"get_up_day\" : 0, \"get_up_hour\" : 0, \"get_up_minte\" : 0, \"get_up_month\" : 0, \"get_up_year\" : 0, \"item_count\" : 0, \"items\" : null, \"light_count\" : 0, \"light_mins\" : 0, \"rem_count\" : 0, \"rem_mins\" : 0, \"sleep_score\" : 0, \"total_sleep_time_mins\" : 0, \"wake_count\" : 0, \"wake_mins\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-14 15:43:13 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSport.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSport.html","title":"Sync Sports","keywords":"","body":"Sync Exercise JSON fields received by the App: Field Name Field Type Field Description version int Protocol version0: No wear flag data16: Wear flag data is available, firmware configuration requires v3SupportWearFlag year int Data date (year) month int Data date (month) day int Data date (day) start_time int Start time in minutes, offset from 00:00 per_minute int Interval in minutes for each data entry (default: 15 minutes)Customization: Added support for interval duration of 1 minuteIf the interval is 1 minute, the app needs to check supportPerMinuteOne in order to determine if the firmware supports one-minute sync type total_step int Total number of steps total_rest_activity_calories int Total activity and rest calories total_distances int Total distance (miles) = Firmware distance (in meters) multiplied by 0.00062 total_active_time int Total active time in minutes total_activity_calories int Total activity calories walk_goal_time int Actual walking duration configured in firmware (in hours) item_count int Number of exercise data entries wear_flag_array int [] Array of 24 wear minutes for each hour of the dayReturns 0 when v3SupportSyncOverHighLowHeartData is not enabled in the firmware items array Exercise data entries, consisting of mode, step_count, active_time, activity_calories, distance, and rest_activity_calories Field Name Field Type Field Description mode int Mode: 00 for quiet, 01 for light, 10 for moderate, 11 for intense step_count int Number of steps active_time int Active duration in minutes, with a maximum determined by the per_minute parameter (currently set at 15 minutes) activity_calories int Activity calories distance int Distance in meters rest_activity_calories int Activity and rest calories Example: { \"day\" : 26, \"item_count\" : 47, \"items\" : [ { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 } ], \"month\" : 12, \"per_minute\" : 15, \"start_time\" : 0, \"total_active_time\" : 0, \"total_activity_calories\" : 0, \"total_distances\" : 0, \"total_rest_activity_calories\" : 0, \"total_step\" : 0, \"version\" : 0, \"walk_goal_time\" : 0, \"wear_flag_array\" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], \"year\" : 2022 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-14 14:14:53 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncNoise.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncNoise.html","title":"Sync Ambient Volume (Noise)","keywords":"","body":"Sync Environment Volume (Noise) JSON fields received by the App: Field Name Field Type Field Description year int Data date (year) month int Data date (month) day int Data date (day) hour int Data date (hour) minute int Data date (minute) second int Data date (second) version int Protocol version (0) start_time int Sync start time in seconds interval_mode int Interval between two data points in seconds avg_noise int Average noise value max_noise int Maximum noise value min_noise int Minimum noise value noise_count int Number of noise detail items items array Array of noise detail items with offset and value Field Name Field Type Field Description offset int Offset of the data value int Noise value Example: { \"year\":2022, \"month\":12, \"day\":26, \"hour\":11, \"minute\":58, \"second\":30, \"version\":0, \"start_time\":0, \"interval_mode\":30, \"avg_noise\":50, \"max_noise\":60, \"min_noise\":40, \"noise_count\":2, \"items\":[ { \"offset\":30, \"value\":50 }, { \"offset\":30, \"value\":50 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-14 12:05:15 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncTemperature.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncTemperature.html","title":"Sync Body Temperature","keywords":"","body":"Synchronized Temperature JSON fields received by the App: Field Name Field Type Field Description year int Data date: year month int Data date: month day int Data date: day hour int Data date: hour minute int Data date: minute start_time int Start time of synchronization in seconds interval_mode int Automatic temperature data storage interval Unit second Reserved avg_temperature int Average temperature max_temperature int Maximum temperature min_temperature int Minimum temperature temperature_count int Number of temperature details items array Temperature details, containing offset and value Field Name Field Type Field Description offset int Data offset value int Temperature value Example: { \"avg_temperature\": 0, \"day\": 0, \"hour\": 0, \"interval_mode\": 0, \"items\": null, \"max_temperature\": 0, \"min_temperature\": 0, \"minute\": 0, \"month\": 0, \"start_time\": 0, \"temperature_count\": 0, \"year\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-14 10:55:36 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncBP.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncBP.html","title":"Sync Blood Pressure","keywords":"","body":"Sync Blood Pressure Data JSON fields received by the app: Field Name Data Type Description year int Data date: year month int Data date: month day int Data date: day start_time int Start time in seconds from 0:00 sleep_avg_bp int Average blood pressure during sleep max_bp int Maximum blood pressure item_count int Number of blood pressure details items array Blood pressure details: offset, sys_blood, dias_blood Field Name Data Type Description offset int Data offset in minutes (blood pressure data is offset by minutes) sys_blood int Systolic blood pressure dias_blood int Diastolic blood pressure Example: { \"year\": 2022, \"month\": 12, \"day\": 26, \"start_time\": 0, \"sleep_avg_bp\": 0, \"max_bp\": 0, \"item_count\": 3, \"items\": [ { \"offset\": 5, \"sys_blood\": 120, \"dias_blood\": 70 }, { \"offset\": 5, \"sys_blood\": 120, \"dias_blood\": 70 }, { \"offset\": 5, \"sys_blood\": 120, \"dias_blood\": 70 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-14 11:39:48 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncRespirRate.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncRespirRate.html","title":"Sync Respiratory Rate Data","keywords":"","body":"Sync Respiratory Rate Data JSON fields received by the App: Field Name Field Type Field Description year int Data date (year) month int Data date (month) day int Data date (day) item_count int Number of respiratory rate details items array Array of respiratory rate details with start time and respid Field Name Field Type Field Description start_time int Start time in seconds from 00:00 respid int Respiratory rate value Example: { \"year\":2022, \"month\":12, \"day\":26, \"item_count\":3, \"items\":[ { \"start_time\":0, \"respid\":80 }, { \"start_time\":100, \"respid\":80 }, { \"start_time\":100, \"respid\":80 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-14 12:05:37 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncBodyPower.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncBodyPower.html","title":"Sync Body Power Data","keywords":"","body":"Sync Body Battery Data JSON fields received by the app: Field Name Data Type Description year int Data date: year month int Data date: month day int Data date: day start_time int Start time in seconds from 0:00 data_type int Reserved items array Body battery details: offset, type, value, diff_value Field Name Data Type Description offset int Default offset in seconds type int Label type: 0: Not worn 1: Exercise (during workout mode) 2: Relax 3: Stress 4: Activity 5: Exercise (during daily use) value int Actual value, with decimals. The firmware should multiply the actual value by 100. diff_value int Difference relative to the previous value. Zero is the baseline. Positive values indicate recovery, negative values indicate consumption. Example: { \"year\": 2022, \"month\": 12, \"day\": 26, \"start_time\": 0, \"data_type\": 0, \"items\": [ { \"offset\": 5, \"type\": 0, \"value\": 80, \"diff_value\": 0 }, { \"offset\": 5, \"type\": 0, \"value\": 81, \"diff_value\": 1 }, { \"offset\": 5, \"type\": 0, \"value\": 79, \"diff_value\": -2 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-14 11:38:43 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncHRV.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncHRV.html","title":"Sync HRV Data","keywords":"","body":"Sync HRV Data JSON fields received by the App: Field Name Field Type Field Description year int Data date (year) month int Data date (month) day int Data date (day) start_time int Start time in seconds from 00:00 items array Array of HRV data details, with min_offsetand hrv_value Field Name Field Type Field Description min_offset int Default offset in minutes hrv_value int HRV data Example: { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"items\":[ { \"min_offset\":5, \"hrv_value\":0 }, { \"min_offset\":5, \"hrv_value\":0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-14 11:44:16 "},"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncSport.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncSport.html","title":"Sync V2 Sports","keywords":"","body":"Sync Exercise Data JSON Fields Received by the App: Field Name Field Type Field Description year int Data date - Year month int Data date - Month day int Data date - Day total_step int Total steps for the day total_cal int Total calories burned for the day total_distances int Total distance covered for the day total_active_time int Total active time for the day (in minutes) minute_offset int Start time offset of the data from 00:00 (in minutes) per_minute int Interval between data points (in minutes) keyword int Reserved field items Array Exercise details: sport_count, active_time, calories, and distance for each exercise Field Name Field Type Field Description sport_count int Step count active_time int Exercise duration (in minutes) calories int Calories burnt distance int Distance covered (in meters) Example: { \"year\": 2022, \"month\": 12, \"day\": 23, \"total_step\": 20, \"total_cal\": 200, \"total_distances\": 500, \"total_active_time\": 6, \"minute_offset\": 0, \"per_minute\": 15, \"keyword\": 0, \"items\": [ { \"sport_count\": 2, \"active_time\": 2, \"calories\": 50, \"distance\": 100 }, { \"sport_count\": 8, \"active_time\": 2, \"calories\": 50, \"distance\": 200 }, { \"sport_count\": 10, \"active_time\": 2, \"calories\": 100, \"distance\": 200 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncSleep.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncSleep.html","title":"Sync V2 Sleep","keywords":"","body":"Sync Sleep Data JSON Fields Received by the App: Field Name Field Type Field Description year int Data date - Year month int Data date - Month day int Data date - Day end_time_hour int Sleep end time - Hour end_time_minute int Sleep end time - Minute total_minute int Total sleep time in minutes light_sleep_count int Number of light sleep phases deep_sleep_count int Number of deep sleep phases wake_count int Number of wake-up events light_sleep_minute int Total duration of light sleep in minutes deep_sleep_minute int Total duration of deep sleep in minutes sleep_score int Sleep score items Array Sleep details: durations and sleep_status for each phase Field Name Field Type Field Description durations int Duration of sleep phase in minutes sleep_status int Sleep status:1: Awake2: Light Sleep3: Deep Sleep4: REM Sleep Example: { \"year\": 2022, \"month\": 12, \"day\": 23, \"end_time_hour\": 20, \"end_time_minute\": 0, \"total_minute\": 30, \"light_sleep_count\": 3, \"deep_sleep_count\": 1, \"wake_count\": 1, \"light_sleep_minute\": 22, \"deep_sleep_minute\": 8, \"sleep_score\": 75, \"items\": [ { \"durations\": 5, \"sleep_status\": 1 }, { \"durations\": 10, \"sleep_status\": 2 }, { \"durations\": 10, \"sleep_status\": 2 }, { \"durations\": 2, \"sleep_status\": 2 }, { \"durations\": 8, \"sleep_status\": 3 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncHR.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncHR.html","title":"Sync V2 Heart Rate","keywords":"","body":"Sync Heart Rate Data JSON Fields Received by the App: Field Name Field Type Field Description year int Data date - Year month int Data date - Month day int Data date - Day start_time int Offset from 0:00 for the data in minutes silent_heart_rate int Resting heart rate burn_fat_threshold int Heart rate threshold for fat burning aerobic_threshold int Heart rate threshold for aerobic exercise limit_threshold int Heart rate threshold for maximum exercise burn_fat_mins int Duration of fat burning heart rate, in minutes aerobic_mins int Duration of aerobic exercise, in minutes limit_mins int Duration of maximum exercise, in minutes warm_up_threshold int Heart rate threshold for warm up exercise warm_up_mins int Duration of warm up exercise, in minutes anaerobic_threshold int Heart rate threshold for anaerobic exercise anaerobic_mins int Duration of anaerobic exercise, in minutes items Array Heart rate details: offset_minute and heart_rate_value Field Name Field Type Field Description offset_minute int Offset of the data in minutes, used for time alignment heart_rate_value int Heart rate value Example: { \"year\": 2022, \"month\": 12, \"day\": 23, \"start_time\": 0, \"silent_heart_rate\": 80, \"burn_fat_threshold\": 0, \"aerobic_threshold\": 0, \"limit_threshold\": 0, \"burn_fat_mins\": 0, \"aerobic_mins\": 0, \"limit_mins\": 0, \"warm_up_threshold\": 0, \"warm_up_mins\": 0, \"anaerobic_threshold\": 0, \"anaerobic_mins\": 0, \"items\": [ { \"offset_minute\": 5, \"heart_rate_value\": 90 }, { \"offset_minute\": 5, \"heart_rate_value\": 80 }, { \"offset_minute\": 5, \"heart_rate_value\": 85 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncBP.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncBP.html","title":"Sync V2 Blood Pressure","keywords":"","body":"Synchronize Blood Pressure Data JSON Fields Sent by the App: Field Name Field Type Field Description year int Year month int Month day int Day sleep_avg_bp int Average sleep blood pressure max_bp int Maximum blood pressure minute_offset int Minute offset from midnight items array Blood pressure details JSON Fields Received by the App: Field Name Field Type Field Description offset int Offset of the data in minutes from midnight dias_blood int Diastolic blood pressure (low pressure) sys_blood int Systolic blood pressure (high pressure) Example: { \"year\": 2022, \"month\": 12, \"day\": 26, \"sleep_avg_bp\": 86, \"max_bp\": 90, \"minute_offset\": 15, \"items\": [ { \"offset\": 5, \"dias_blood\": 70, \"sys_blood\": 90 }, { \"offset\": 5, \"dias_blood\": 69, \"sys_blood\": 87 }, { \"offset\": 5, \"dias_blood\": 76, \"sys_blood\": 88 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncGPS.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncGPS.html","title":"Sync V2 GPS","keywords":"","body":"Sync GPS Data JSON Fields Received by the App: Field Name Field Type Field Description year int Year month int Month day int Day hour int Hour minute int Minute second int Second data_interval int Data interval in seconds items char [] GPS coordinate string Example: { \"year\": 2022, \"month\": 12, \"day\": 26, \"hour\": 10, \"minute\": 22, \"second\": 36, \"data_interval\": 5, \"items\": \"\" } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncActivity.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncActivity.html","title":"Sync V2 Multiple Sports","keywords":"","body":"Synchronize Activity (Multi-Sport) Data JSON Fields Received by the App: Field Name Field Type Field Description year int Year month int Month day int Day hour int Hour minute int Minute second int Second data_length int Data length hr_data_interval_minute int Heart rate data interval hr_item_count int Number of heart rate readings packet_count int Packet count type int Sport type step int Steps/Count durations int Duration calories int Calories distance int Distance avg_hr_value int Average heart rate max_hr_value int Maximum heart rate burn_fat_mins int Fat-burning time aerobic_mins int Aerobic exercise time limit_mins int Limit exercise time range1 int Warm-up exercise accumulated time (in minutes) range2 int Fat-burning exercise accumulated time (in minutes) range3 int Aerobic exercise accumulated time (in minutes) range4 int Anaerobic exercise accumulated time (in minutes) range5 int Limit exercise accumulated time (in minutes) hr_data_vlaue int [] Heart rate data detailsMaximum of 68,535 values Example: { \"year\": 2022, \"month\": 12, \"day\": 26, \"hour\": 10, \"minute\": 38, \"second\": 20, \"data_length\": 10, \"hr_data_interval_minute\": 5, \"hr_item_count\": 10, \"packet_count\": 1, \"type\": 1, \"step\": 200, \"durations\": 10, \"calories\": 50, \"distance\": 200, \"avg_hr_value\": 85, \"max_hr_value\": 90, \"burn_fat_mins\": 0, \"aerobic_mins\": 0, \"limit_mins\": 0, \"range1\": 0, \"range2\": 0, \"range3\": 0, \"range4\": 0, \"range5\": 0, \"hr_data_vlaue\": [ 85, 87, 90, 93, 91, 80, 90, 81, 83, 86 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDODeviceInfoIntroduction.html":{"url":"doc/IDODeviceInfoIntroduction.html","title":"IDO Device Information Interface Description","keywords":"","body":"{IDO Device Information API Documentation} 1. Overview Provides the ability to query device-related information such as device mode, battery status, battery level, reboot flag, binding status, binding type, and platform. 2. API Capabilities 1. Query Device Mode: 1.1 Summary: None 1.2 API ID: int get deviceMode => _device?.mode ?? 0; 1.3 API Parameter Description: @return: deviceMode - Device mode (0: sport mode, 1: sleep mode) 2. Query Battery Status: 2.1 Summary: None 2.2 API ID: int get battStatus => _device?.battStatus ?? 0; 2.3 API Parameter Description: @return: battStatus - Battery status (0: normal, 1: charging, 2: full, 3: low battery) 3. Query Battery Level: 3.1 Summary: None 3.2 API ID: int get battLevel => _device?.energe ?? 0; 3.3 API Parameter Description: @return: battLevel - Battery level (0 to 100) 4. Query Reboot Flag: 4.1 Summary: None 4.2 API ID: int get rebootFlag => _device?.reboot ?? 0; 4.3 API Parameter Description: @return: rebootFlag - Reboot flag (0: not rebooted, 1: rebooted) 5. Query Binding Status: 5.1 Summary: None 5.2 API ID: int get bindState => _device?.pairFlag ?? 0; 5.3 API Parameter Description: @return: bindState - Binding status (0: not bound, 1: bound) 6. Query Binding Type: 6.1 Summary: None 6.2 API ID: int get bindType => _device?.bindConfirmMethod ?? 0; 6.3 API Parameter Description: @return: bindType - Binding type, including: Binding type 0: Default 1: Click 2: Long press 3: Screen click - horizontal confirmation and cancel, confirmation on the left 4: Screen click - horizontal confirmation and cancel, confirmation on the right 5: Screen click - vertical confirmation and cancel, confirmation on the top 6: Screen click - vertical confirmation and cancel, confirmation on the bottom 7: Click (one button on the right) 7. Query Binding Timeout: 7.1 Summary: None 7.2 API ID: int get bindTimeout => _device?.bindConfirmTimeout ?? 0; 7.3 API Parameter Description: @return: bindTimeout - Binding timeout (maximum 15 seconds, 0 means no timeout) 8. Query Device Platform: 8.1 Summary: None 8.2 API ID: int get platform => _device?.platform ?? 0; 8.3 API Parameter Description: @return: platform - Device platform, including: 0: Nordic 10: Realtek 8762x 20: Cypress PSoC6 30: Apollo3 40: Goodix 50: Nordic + Dialog 60: Dialog + 5340 + no NAND flash 70: Goodix + Foryoukang 80: 5340 90: Juxin 99: Siche ////TODO 平台英文是否规范 9. Query Device Shape: 9.1 Summary: None 9.2 API ID: int get deviceShapeType => _device?.shape ?? 0; 9.3 API Parameter Description: @return: deviceShapeType - Device shape type (0: invalid, 1: circular, 2: square, 3: elliptical) 10. Query Device Type: 10.1 Summary: None 10.2 API ID: int get deviceType => _device?.devType ?? 0; 10.3 API Parameter Description: @return: deviceType - Device type (0: invalid, 1: wristband, 2: watch) 11. Query Device Custom Dial Main Version: 11.1 Summary: None 11.2 API ID: int get dialMainVersion => _device?.userDefinedDialMainVersion ?? 0; 11.3 API Parameter Description: @return: dialMainVersion - Custom dial main version (starts from 1, 0 means the corresponding custom dial function is not supported) 12. Query Whether to Display '✓' UI During Device Binding: 12.1 Summary: None 12.2 API ID: int get showBindChoiceUi => _device?.showBindChoiceUi ?? 0; 12.3 API Parameter Description: @return: showBindChoiceUi - Whether to display the checkmark UI during firmware binding (0: not required, 1: required) 13. Query Device ID: 13.1 Summary: None 13.2 API ID: int get deviceId => _device?.deivceId ?? 0; 13.3 API Parameter Description: @return: deviceId - Device ID 14. Query Device Firmware Version (Major Version): 14.1 Summary: None 14.2 API ID: int get firmwareVersion => _device?.firmwareVersion ?? 0; 14.3 API Parameter Description: @return: firmwareVersion - Device firmware major version 15. Query Device SN (Serial Number): 15.1 Summary: None 15.2 API ID: String? get sn => _device?.snString(); 15.3 API Parameter Description: @return: sn - Device firmware SN (serial number) 16. Query Device BT Name: 16.1 Summary: None 16.2 API ID: String? get btName => _device?.btNameString(); 16.3 API Parameter Description: @return: btName - Device BT name 17. Query Device Firmware Version (Third Level): 17.1 Summary: None 17.2 API ID: int get fwVersion1 => _fw?.firmwareVersion1 ?? 0; int get fwVersion2 => _fw?.firmwareVersion2 ?? 0; int get fwVersion3 => _fw?.firmwareVersion3 ?? 0; 17.3 API Parameter Description: @return: fwVersion1, fwVersion2, fwVersion3 - Third-level version number of the device firmware (in the format of fwVersion1.fwVersion2.fwVersion3) 18. Query Whether the Device BT Version has an Effect: 18.1 Summary: None 18.2 API ID: int get fwBtFlag => _fw?.btFlag ?? 0; 18.3 API Parameter Description: @return: fwBtFlag - BT version effectiveness flag (0: ineffective, 1: indicates that the firmware has a corresponding BT firmware) 19. Query Device BT Firmware Version (Third Level): 19.1 Summary: None 19.2 API ID: int get fwBtVersion1 => _fw?.btVersion1 ?? 0; int get fwBtVersion2 => _fw?.btVersion2 ?? 0; int get fwBtVersion3 => _fw?.btVersion3 ?? 0; 19.3 API Parameter Description: @return: fwBtVersion1, fwBtVersion2, fwBtVersion3 - Third-level version number of the device BT firmware (in the format of fwBtVersion1.fwBtVersion2.fwBtVersion3) 20. Query Matched Version Number for Device BT: 20.1 Summary: None 20.2 API ID: int get fwBtMatchVersion1 => _fw?.btMatchVersion1 ?? 0; int get fwBtMatchVersion2 => _fw?.btMatchVersion2 ?? 0; int get fwBtMatchVersion3 => _fw?.btMatchVersion3 ?? 0; 20.3 API Parameter Description: @return: fwBtMatchVersion1, fwBtMatchVersion2, fwBtMatchVersion3 - Matched version number for device BT (in the format of fwBtMatchVersion1.fwBtMatchVersion2.fwBtMatchVersion3) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDODeviceBindIntroduction.html":{"url":"doc/IDODeviceBindIntroduction.html","title":"IDO Device Binding Interface Description","keywords":"","body":"{IDO Device Binding Interface Description} 1. Function Overview Provides the ability to check binding status, initiate binding and unbinding, and listen for binding mode. 2. Interface Capability 1. Check Binding Status: 1.1 Function Summary: None 1.2 API ID: Future get isBinded; 1.3 API Parameter Description: @return: isBinded - Binding status flag, bool type, false: not bound, true: bound. 2. Check if Currently in Binding Mode: 2.1 Function Summary: In binding mode, switching devices will be restricted. 2.2 API ID: bool get isBinding; 2.3 API Parameter Description: @return: isBinding - Flag indicating whether in binding mode, bool type, false: not in binding mode, true: in binding mode. 3. Initiate Binding: 3.1 Function Summary: Initiates the binding process. After successful binding, the device information and function table information of the device are returned via a callback. ////TODO 3.2 API ID: /// Initiate binding /// osVersion: System version (take the major version number) Stream startBind( {required int osVersion, required BindValueCallback deviceInfo, required BindValueCallback functionTable}); 3.3 API Parameter Description: @param: osVersion - System version, take the major version number. @param: deviceInfo - Callback for device information after binding is initiated. @param: functionTable - Callback for function table information of the device after binding is initiated. ////TODO 4. Initiate Unbinding: 4.1 Function Summary: Initiates the unbinding process for the specified MAC address. The device can be forcefully unbound. 4.2 API ID: Future unbind({required String macAddress, bool isForceRemove = false}); 4.3 API Parameter Description: @param: macAddress - MAC address. @param: isForceRemove - Whether to forcefully unbind the device, even if the device does not respond. Set to true to forcefully unbind and remove the device. Default is false. 5. Initiate Authorization Code Binding: 5.1 Function Summary: None 5.2 API ID: Stream setAuthCode(String code, int osVersion); 5.3 API Parameter Description: @param: code - Pairing code. @param: osVersion - System version (take the major version number). 6. Register Update Mode Monitoring Callback: 6.1 Function Summary: Registers a callback method for monitoring the current update mode. ////TODO 6.2 API ID: StreamSubscription listenUpdateSetModeNotification( void Function(int mode) func); 6.3 API Parameter Description: @param: func - Callback method. The mode includes: 0 None Binding, 1 Already Binding, 2 Firmware Upgrade Mode, 3 Reconnection, 4 Realtek Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOMessageIconIntroduction.html":{"url":"doc/IDOMessageIconIntroduction.html","title":"IDO Message Icon Interface Description","keywords":"","body":"IDO Icon API Documentation 1. Function Overview Provides the ability to set the country code, cache server address, app key, language unit, query icon update status, app package names, and retrieve/delete local sandbox cache, and deliver app icons. 2. API Capabilities 1. Country Code (IOS) 1.1 Function Overview: Provides the country code member, only used for IOS. 1.2 API ID: String? ios_countryCode; 1.3 API Parameter Description: @param: ios_countryCode - Country code, e.g., 'US' for the United States, 'CN' for China. 2. Cache Server Address (IOS) 2.1 Function Overview: Provides the cache server address member, only used for IOS. 2.2 API ID: String? ios_baseUrlPath; 2.3 API Parameter Description: @param: ios_baseUrlPath - Cache server address, e.g., 'https://cn-user.idoocloud.com/api/ios/lookup/get'. If not assigned, the Apple interface will be used (slower response). 3. App Key (IOS) 3.1 Function Overview: Provides the app key member, only valid when using the cache server, only used for IOS. 3.2 API ID: String? ios_appKey; 3.3 API Parameter Description: @param: ios_appKey - The app key assigned by the backend. Each app has its own unique app key. Please consult the backend developer for details, e.g., '800a6444f9c0433c8e88741b6ddf1443'. 4. Language Unit (IOS) 4.1 Function Overview: Provides the language unit member, only used for IOS. 4.2 API ID: int? ios_languageUnit; 4.3 API Parameter Description: @param: ios_languageUnit - The language unit. If not specified, the default language unit is English. Jump to language unit content description => IDO Language Unit Content Description 5. Query Icon Update Status (IOS) 5.1 Function Overview: Provides the ability to query the current update status. 5.2 API ID: Future get updating; 5.3 API Parameter Description: @return: updating - Update flag, Future boolean type. false: idle, true: updating icons and names. 6. Query Default Notification App Package Names (IOS) 6.1 Function Overview: Provides the ability to query the package names of default notification apps supported by the device, only used for IOS. 6.2 API ID: List? ios_defaultPackNames(); 6.3 API Parameter Description: @return: List of strings, the package name collection, include: class IDOAppIconInfoModel { int? version; /// Version number int? iconWidth; /// Icon width int? iconHeight; /// Icon height int? colorFormat; /// Color format int? blockSize; /// Compression block size int? totalNum; /// Total number List? items; /// Package name details collection }; class IDOAppIconItemModel extends IDOAppInfo { int? itemId; /// Unique item ID assigned to each package name, starting from 0 int? msgCount; /// Number of received messages String? iconCloudPath; /// Icon cloud address int? state; /// Icon update status: 0 - no update needed, 1 - icon update needed, 2 - app name update needed, 3 - both icon and app name update needed String? iconLocalPathBig;/// Icon local address of the large size icon in the sandbox (displayed in the app list) String? countryCode; /// Country code bool? isDownloadAppInfo; /// Whether the app information has been downloaded bool? isUpdateAppName; /// Whether the app name has been updated bool? isUpdateAppIcon; /// Whether the app icon has been updated bool? isDefault; /// Whether it is a default app } 7. Query Cached App Information (IOS) 7.1 Function Overview: Provides the ability to query the cached version number, icon information (size, color format, quantity, compression block size), and package name details, only used for IOS. 7.2 API ID: Future getCacheInfoModel(); 7.3 API Parameter Description: @return: Cached app information, including: class IDOAppIconInfoModel { int? version; /// Version number int? iconWidth; /// Icon width int? iconHeight; /// Icon height int? colorFormat; /// Color format int? blockSize; /// Compression block size int? totalNum; /// Total number List? items; /// Package name details collection }; class IDOAppIconItemModel extends IDOAppInfo { int? itemId; /// Unique item ID assigned to each package name, starting from 0 int? msgCount; /// Number of received messages String? iconCloudPath; /// Icon cloud address int? state; /// Icon update status: 0 - no update needed, 1 - icon update needed, 2 - app name update needed, 3 - both icon and app name update needed String? iconLocalPathBig;/// Icon local address of the large size icon in the sandbox (displayed in the app list) String? countryCode; /// Country code bool? isDownloadAppInfo; /// Whether the app information has been downloaded bool? isUpdateAppName; /// Whether the app name has been updated bool? isUpdateAppIcon; /// Whether the app icon has been updated bool? isDefault; /// Whether it is a default app } 8. Query Icon Image Directory Path (IOS) 8.1 Function Overview: Provides the ability to query the directory path where the icon images are stored, only used for IOS. 8.2 API ID: Future ios_getIconDirPath(); 8.3 API Parameter Description: @return: Icon image directory path, string type. 9. Reset App Icon Information (IOS) 9.1 Function Overview: Provides the ability to delete locally cached images in the sandbox, only used for IOS. 9.2 API ID: Future resetIconInfoData({required String macAddress, bool deleteIcon = true}); 9.3 API Parameter Description: @param:mac of need to delete cache @param:is delete icon picture file, true:yes,false:no,default yes @return: Deletion result, false: failed, true: successful. 10. Register Listener for Update Messages Icon (IOS) 10.1 Function Overview: Provides the ability to register a listener for update messages icon, only used for IOS. Register once globally. 10.2 API ID: void ios_registerListenUpdate(); 10.3 API Parameter Description: No parameters. 11.android已安装所有app信息集合： 11.1 功能概括: 提供查询android已安装所有app信息集合的能力，只有Android使用。 ios需要执行获取默认的APP包名列表信息，因为event_type是固件分配的(force强制更新应用名称) 11.2 API ID: Future> firstGetAllAppInfo({bool force = false}); 11.3 API参数说明: @param:force,强制更新Android 消息图标和名字 @param:消息应用图标内容，包括： 11.android has installed all app information collection: 11.1 Function Summary: Provides the ability to query the information collection of all installed apps on android, which is only used by Android. ios needs to perform to get the default APP package name list information, because event_type is firmware assigned (force to update the app name) 11.2 API ID: Future> firstGetAllAppInfo({bool force = false}); 11.3 API parameters: @param:force to update the Android message icon and name @param: Message app icon content, including: class IDOAppIconInfoModel { int? version; /// Version number int? iconWidth; /// Icon width int? iconHeight; /// Icon height int? colorFormat; /// Color format int? blockSize; /// Compression block size int? totalNum; /// Total number List? items; /// Package name details collection }; class IDOAppIconItemModel extends IDOAppInfo { int? itemId; /// Unique item ID assigned to each package name, starting from 0 int? msgCount; /// Number of received messages String? iconCloudPath; /// Icon cloud address int? state; /// Icon update status: 0 - no update needed, 1 - icon update needed, 2 - app name update needed, 3 - both icon and app name update needed String? iconLocalPathBig;/// Icon local address of the large size icon in the sandbox (displayed in the app list) String? countryCode; /// Country code bool? isDownloadAppInfo; /// Whether the app information has been downloaded bool? isUpdateAppName; /// Whether the app name has been updated bool? isUpdateAppIcon; /// Whether the app icon has been updated bool? isDefault; /// Whether it is a default app } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-10-25 17:15:03 "},"doc/IDOLanguageUnit.html":{"url":"doc/IDOLanguageUnit.html","title":"IDO Language Unit Content Description","keywords":"","body":"|# {IDO Language Units Content Description} Language unit CODE and corresponding function table: CODE Language Function code 0x00(0) Invalid - 0x01(1) Chinese languageCh 0x02(2) English languageEnglish 0x03(3) French languageFrench 0x04(4) German languageGerman 0x05(5) Italian languageItalian 0x06(6) Spanish languageSpanish 0x07(7) Japanese languageJapanese 0x08(8) Polish languagePolish 0x09(9) Czech languageCzech 0x0A(10) Romanian languageRomanian 0x0B(11) Lithuanian languageLithuanian 0x0C(12) Dutch languageDutch 0x0D(13) Slovenian languageSlovenian 0x0E(14) Hungarian languageHungarian 0x0F(15) Russian languageRussian 0x10(16) Ukrainian languageUkrainian 0x11(17) Slovak languageSlovak 0x12(18) Danish languageDanish 0x13(19) Croatian languageCroatian 0x14(20) Indonesian languageIndonesian 0x15(21) Korean languageKorean 0x16(22) Hindi languageHindi 0x17(23) Portuguese languagePortuguese 0x18(24) Turkish languageTurkish 0x19(25) Thai languageThai 0x1A(26) Vietnamese languageVietnamese 0x1B(27) Burmese languageBurmese 0x1C(28) Filipino languageFilipino 0x1D(29) Traditional Chinese languageTraditionalChinese 0x1E(30) Greek languageGreek 0x1F(31) Arabic languageArabic 0x20(32) Swedish languageSweden 0x21(33) Finnish languageFinland 0x22(34) Persian languagePersia 0x23(35) Norwegian languageNorwegian Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataIconIntroduction.html":{"url":"doc/IDOExchangeDataIconIntroduction.html","title":"IDO Data Exchange Interface Description","keywords":"","body":"{IDO Data Exchange Interface Specification} 1. Functional Overview Provides the ability to initiate data exchanges, listen for BLE device replies, and BLE device initiated data exchanges. 2. Interface Capabilities 1. Query Support for V3 Activity Data Exchange: 1.1 Function Overview: None. 1.2 API ID: bool get supportV3ActivityExchange; 1.3 API Parameter Explanation: @return: bool Supported function list, false: not supported, true: supported. 2. Query Data Exchange Status: 2.1 Function Overview: None. 2.2 API ID: ExchangeStatus? get status; 2.3 API Parameter Explanation: @param: ExchangeStatus Data exchange status, including: enum ExchangeStatus { init = 0, /// Initialization appStart = 1, /// App initiates start appStartReply = 2, /// App initiates start BLE reply appEnd = 3, /// App initiates end appEndReply = 4, /// App initiates end BLE reply appPause = 5, /// App initiates pause appPauseReply = 6, /// App initiates pause BLE reply appRestore = 7, /// App initiates restore appRestoreReply = 8, /// App initiates restore BLE reply appIng = 9, /// App initiates exchange appIngReply = 10, /// App initiates exchange BLE reply getActivity = 11, /// Get last activity data getActivityReply = 12, /// Get last activity data BLE reply getHr = 13, /// Get one-minute heart rate getHrReply = 14, /// Get one-minute heart rate BLE reply getActivityGps = 15, /// Get activity GPS getActivityGpsReply = 16, /// Get activity GPS BLE reply appStartPlan = 17, /// App starts exercise plan appStartPlanReply = 18, /// App starts exercise plan BLE reply appPausePlan = 19, /// App pauses exercise plan appPausePlanReply = 20, /// App pauses exercise plan BLE reply appRestorePlan = 21, /// App restores exercise plan appRestorePlanReply = 22, /// App restores exercise plan BLE reply appEndPlan = 23, /// App ends exercise plan appEndPlanReply = 24, /// App ends exercise plan BLE reply appSwitchAction = 25, /// App switches action appSwitchActionReply= 26, /// App ends exercise plan BLE reply appBlePause = 27, /// App-initiated exercise BLE pause appBlePauseReply = 28, /// App-initiated exercise BLE pause app reply appBleRestore = 29, /// App-initiated exercise BLE restore appBleRestoreReply = 30, /// App-initiated exercise BLE restore app reply appBleEnd = 31, /// App-initiated exercise BLE end appBleEndReply = 32, /// App-initiated exercise BLE end app reply bleStart = 33, /// BLE-initiated exercise BLE start bleStartReply = 34, /// BLE-initiated exercise BLE start app reply bleEnd = 35, /// BLE-initiated exercise BLE end bleEndReply = 36, /// BLE-initiated exercise BLE end app reply blePause = 37, /// BLE-initiated exercise BLE pause blePauseReply = 38, /// BLE-initiated exercise BLE pause app reply bleRestore = 39, /// BLE-initiated exercise BLE restore bleRestoreReply = 40, /// BLE-initiated exercise BLE restore app reply bleIng = 41, /// BLE-initiated exercise BLE exchange bleIngReply = 42, /// BLE-initiated exercise BLE exchange app reply bleStartPlan = 43, /// BLE starts exercise plan blePausePlan = 44, /// BLE pauses exercise plan bleRestorePlan = 45, /// BLE restores exercise plan bleEndPlan = 46, /// BLE ends exercise plan bleSwitchAction = 47, /// BLE switches action bleOperatePlanReply = 48, /// BLE operates exercise plan app reply } 3. APP Executes Data Exchange: 3.1 Function Overview: Provides the ability to initiate exercise start, end, pause, resume, exchange exercise data during exercise, and execute exercise plans. 3.2 API ID: void appExec({required IDOBaseExchangeModel model}); 3.3 API Parameter Explanation: @param: Execution type, including: IDOAppStartExchangeModel // Execute initiate exercise start IDOAppEndExchangeModel // Execute initiate exercise end IDOAppIngExchangeModel // Execute exchange exercise data IDOAppPauseExchangeModel // Execute exchange exercise data pause IDOAppRestoreExchangeModel // Execute exchange exercise data resume IDOAppIngV3ExchangeModel // Execute V3 exchange exercise data IDOAppOperatePlanExchangeModel // Execute operate exercise plan => Go to APP Initiated Data Exchange Model Explanation 4. APP Executes Data Exchange Reply: 4.1 Function Overview: Provides the ability for the app to reply to device requests when the device initiates exercise/exercise data exchange. 4.2 API ID: void appReplyExec({required IDOBaseExchangeModel model}); 4.3 API Parameter Explanation: @param: Execution type, including: IDOBleStartReplyExchangeModel // App replies to BLE device's request to start exercise data exchange IDOBleIngReplyExchangeModel // App replies to BLE device during exercise data exchange IDOBleEndReplyExchangeModel // App replies to BLE device's request to end exercise data exchange IDOBlePauseReplyExchangeModel // App replies to BLE device's request to pause exercise data exchange IDOBleRestoreReplyExchangeModel // App replies to BLE device's request to resume exercise data exchange IDOBleOperatePlanReplyExchangeModel // App replies to BLE device's request to operate exercise plan IDOAppBlePauseReplyExchangeModel // App replies to BLE device's request to pause exercise data exchange IDOAppBleRestoreReplyExchangeModel // App replies to BLE device's request to resume exercise data exchange IDOAppBleEndReplyExchangeModel // App replies to BLE device's request to end exercise data exchange => App Reply Model for BLE Device Initiated Exercise Exchange 5. Get multiple sports data after multiple sports interaction: 5.1 Function Summary: None. 5.2 API ID: Stream getLastActivityData(); 5.3 API Parameters: @return: IDOAppActivityDataV3ExchangeModel, which includes the following members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? year; /// Year int? month; /// Month int? version; /// Protocol library version int? hrInterval; /// Heart rate interval in minutes int? step; /// Steps int? durations; /// Duration int? calories; /// Calories int? distance; /// Distance int? burnFatMins; /// Duration of fat burning heart rate in minutes int? aerobicMins; /// Duration of aerobic exercise in minutes int? limitMins; /// Duration of extreme exercise in minutes int? warmUp; /// Warm-up exercise int? fatBurning; /// Fat burning int? aerobicExercise; /// Aerobic exercise int? anaerobicExercise; /// Anaerobic exercise int? extremeExercise; /// Extreme exercise int? warmUpTime; /// Accumulated time for warm-up exercise in seconds int? fatBurningTime; /// Accumulated time for fat burning in seconds int? aerobicExerciseTime; /// Accumulated time for aerobic exercise in seconds int? anaerobicExerciseTime;/// Accumulated time for anaerobic exercise in seconds int? extremeExerciseTime; /// Accumulated time for extreme exercise in seconds int? avgSpeed; /// Average speed in km/h int? maxSpeed; /// Maximum speed in km/h int? avgStepStride; /// Average step stride int? maxStepStride; /// Maximum step stride int? kmSpeed; /// Average km pace int? fastKmSpeed; /// Fastest km pace int? avgStepFrequency; /// Average step frequency int? maxStepFrequency; /// Maximum step frequency int? avgHrValue; /// Average heart rate int? maxHrValue; /// Maximum heart rate int? recoverTime; /// Recovery time in hours. After receiving this data, subtract 1 every hour. int? vo2max; /// Maximum oxygen uptake in ml/kg/min int? trainingEffect; /// Training effect. Range: 1.0 - 5.0 (multiply by 10 for transmission) int? grade; /// Oxygen uptake level: 1: Low, 2: Amateur, 3: General, 4: Average, 5: Good, 6: Excellent, 7: Professional int? stepsFrequencyCount; /// Number of step frequency details int? miSpeedCount; /// Number of mile paces (maximum 100) int? realSpeedCount; /// Number of real-time speeds int? paceSpeedCount; /// Number of real-time paces int? kmSpeedCount; /// Number of km paces details (maximum 100) int? actionDataCount; /// Number of action training List? kmSpeeds; /// Time spent per km in seconds, pace collection List? stepsFrequency; /// Step frequency collection (steps per minute) List? itemsMiSpeed; /// Mile pace array List? itemRealSpeed; /// Real-time speed array in km/h List? paceSpeedItems; /// Real-time pace array /// Action completion content /// type: Action type, 1: Fast walking, 2: Jogging, 3: Medium-speed running, 4: Fast running /// heart_con_value: Heart rate control for each action /// time: Completion time of the action in seconds /// goal_time: Goal time for the action List>? actionData; 6. Get heart rate data after multiple sports interaction: 6.1 Function Summary: None. 6.2 API ID: Stream getActivityHrData(); 6.3 API Parameters: @return: IDOAppHrDataExchangeModel for one-minute heart rate data, which includes the following members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? version; /// Protocol version int? heartRateHistoryLen;/// Length of heart rate data array (maximum 60) int? interval; /// Heart rate interval in seconds List? heartRates; /// Heart rate data array, storing one minute of heart rate data with one entry per second 7. Listen to device-initiated data exchange: 7.1 Function Summary: Allows listening to the device-initiated data exchange and the app will execute the data exchange response. 7.2 API ID: Stream appListenBleExec(); 7.3 API Parameters: @return: BleNoticeModel types, including: IDOBleStartExchangeModel // BLE device initiates sports data exchange start IDOBleIngExchangeModel // BLE device is in the process of sports data exchange IDOBleEndExchangeModel // BLE device initiates sports data exchange end IDOBlePauseExchangeModel // BLE device pauses sports data exchange IDOBleRestoreExchangeModel // BLE device resumes sports data exchange IDOBleOperatePlanExchangeModel // BLE device operates sports plan IDOAppBlePauseExchangeModel // BLE device notifies pause of sports data exchange IDOAppBleRestoreExchangeModel // BLE device notifies resume of sports data exchange IDOAppBleEndExchangeModel // BLE device notifies end of sports data exchange => Go to BLE Data Exchange Model Documentation 8. APP listens to the device's response after the app initiates data exchange: 8.1 Function Overview: Provides the ability to listen to the device's response after the app initiates data exchange. 8.2 API ID: Stream appListenAppExec(); 8.3 API Parameter Description: @return: The type of response to listen for, including: IDOAppStartReplyExchangeModel // Reply from the BLE device when the app initiates a workout IDOAppEndReplyExchangeModel // Reply from the BLE device when the app ends a workout IDOAppIngReplyExchangeModel // Reply from the BLE device during ongoing data exchange with the app IDOAppPauseReplyExchangeModel // Reply from the BLE device when the app pauses data exchange during a workout IDOAppRestoreReplyExchangeModel // Reply from the BLE device when the app resumes data exchange during a workout IDOAppIngV3ReplyExchangeModel // Reply from the BLE device during ongoing V3 data exchange with the app IDOAppOperatePlanReplyExchangeModel // Reply from the BLE device when the app operates a workout plan => Go to the model description for BLE response to app-initiated data exchange 9. APP listens to the response of V2 data exchange: 9.1 Function Overview: Provides the ability to listen to the device's response after the app initiates V2 data exchange. 9.2 API ID: Stream v2_exchangeData(); 9.3 API Parameter Description: @return: The returned model IDOV2ExchangeModel contains the following members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Type of sport int? operate; /// 1: Request app to enable GPS, 2: Initiate workout request int? targetValue; /// 0: No target, 1: Repetition count (unit: times), 2: Distance (unit: meters), 3: Calories (unit: kcal), 4: Duration (unit: minutes), 5: Step count (unit: steps) int? targetType; /// Target value int? forceStart; /// Whether to force start: 0 - No, 1 - Yes int? retCode; /// 0: Success; 1: Failed to enter workout mode due to device; 2: Low battery; 3: Band is charging; 4: Using Alexa; 5: On a call int? calories; /// Calories burned (unit: kcal) int? distance; /// Distance covered (unit: meters) int? durations; /// Workout duration (unit: seconds) int? step; /// Step count (unit: steps) int? avgHr; /// Average heart rate int? maxHr; /// Maximum heart rate int? curHr; /// Current heart rate int? hrSerial; /// Heart rate serial number int? burnFatMins; /// Duration of fat burning (unit: minutes) int? aerobicMins; /// Duration of aerobic activity (unit: minutes) int? limitMins; /// Duration of limit activity (unit: minutes) bool? isSave; /// Whether to save the data int? status; /// 0: All data is valid, 1: Invalid distance, 2: Weak GPS signal int? interval; /// Heart rate interval List? hrValues = [];/// Heart rate data collection 10. APP Listening for V3 Motion Data Exchange Response 10.1 Summary of Functionality: Provides the ability to listen for the response from BLE devices after the app performs V3 motion data exchange. 10.2 API ID: Stream v3_exchangeData(); 10.3 API Parameter Description: @return: Returns the model IDOV3ExchangeModel for listening, which includes the following members: int? year; /// Training course year int? month; /// Training course month int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? planType; /// Plan type 1: 3km running plan, 2: 5km running plan, 3: 10km running plan, 4: Half Marathon Training (Phase 2), 5: Marathon Training (Phase 2) int? actionType; /// Action type 1: brisk walking, 2: jogging, 3: medium paced running, 4: fast running, 5: end course exercise (waiting for user's free exercise) 6: free exercise after course (this field is effective when operate is 5) int? version; /// Data version int? operate; /// 1: request app to turn on GPS, 2: initiate exercise request int? targetValue; /// 0: no target, 1: repetition count (unit: times), 2: distance (unit: meters), 3: calories (unit: kcal), 4: duration (unit: minutes), 5: step count (unit: steps) int? targetType; /// Target value int? forceStart; /// Whether to forcefully start 0: not forceful, 1: forceful int? retCode; /// 0: success; 1: failed to put the device in exercise mode; 2: low device battery; 3: bracelet is charging; 4: using Alexa; 5: in a call int? calories; /// Calories (unit: kcal) int? distance; /// Distance (unit: meters) int? durations; /// Duration (unit: seconds) int? step; /// Step count (unit: steps) int? swimPosture; /// 0: mixed style; 1: freestyle; 2: breaststroke; 3: backstroke; 4: butterfly; int? status; /// Status returned by the bracelet: Start: 1, Pause: 2, End: 3, 0: invalid status int? signalFlag; /// Signal strength: 0: weak signal, 1: strong signal bool? isSave; /// Whether to save the data int? realTimeSpeed; /// Real-time speed calculated and displayed by the app (unit: km/h, 100 times, with a record every 15 seconds) int? realTimePace; /// Real-time pace calculated and displayed by the app (unit: seconds) int? interval; /// Heart rate interval int? hrCount; /// Number of heart rate data int? burnFatMins; /// Duration of fat burning exercise (unit: minutes) int? aerobicMins; /// Duration of aerobic exercise (unit: minutes) int? limitMins; /// Duration of limit exercise (unit: minutes) List? hrValues = []; /// Heart rate data collection int? warmUpSecond; /// Warm-up exercise duration (in seconds) int? anaeroicSecond; /// Anaerobic exercise duration (in seconds) int? fatBurnSecond; /// Fat burning exercise duration (in seconds) int? aerobicSecond; /// Aerobic exercise duration (in seconds) int? limitSecond; /// Limit exercise duration (in seconds) int? avgHr; /// Average heart rate int? maxHr; /// Maximum heart rate int? curHr; /// Current heart rate int? warmUpValue; /// Warm-up exercise value int? fatBurnValue; /// Fat burning exercise value int? aerobicValue; /// Aerobic exercise value int? limitValue; /// Limit exercise value int? anaerobicValue; /// Anaerobic exercise value int? avgSpeed; /// Average speed (km/h) int? maxSpeed; /// Maximum speed (km/h) int? avgStepFrequency; /// Average step frequency int? maxStepFrequency; /// Maximum step frequency int? avgStepStride; /// Average step stride int? maxStepStride; /// Maximum step stride int? kmSpeed; /// Average kilometer pace int? fastKmSpeed; /// Fastest kilometer pace int? kmSpeedCount; /// Number of kilometer paces List? kmSpeeds = []; /// Kilometer pace collection int? mileCount; /// Number of mile paces List? mileSpeeds = []; /// Mile pace collection int? stepsFrequencyCount; /// Number of step frequencies List? stepsFrequencys = [];/// Step frequency collection int? trainingEffect; /// Training effect; Unit: None; Range: 1.0 ~ 5.0 (*10 times) int? anaerobicTrainingEffect; /// Anaerobic training effect; Unit: None; Range: 1.0 ~ 5.0 (*10 times) int? vo2Max; /// Maximum oxygen uptake; Unit: milliliters/kilogram/minute; Range: 0-80 int? actionDataCount; /// Number of action training int? inClassCalories; /// Calories burned during class; Unit: kcal int? completionRate; /// Action completion rate 0-100 int? hrCompletionRate; /// Heart rate control rate 0-100 int? recoverTime; /// Recovery time: Unit: hours (decrease by one hour after the app receives this data) int? avgWeekActivityTime; /// Average weekly exercise time last month; Unit: minutes int? grade; /// VO2 level 1: Low level 2: Amateur level 3: Average level 4: Medium level 5: Good level 6: Excellent level 7: Professional level /// Action completion details /// type: Action type 1 brisk walking; 2 jogging; 3 medium paced running; 4 fast running /// heart_con_value: Heart rate control for each action /// time: Action completion time (unit: seconds) /// goal_time: Goal time for the action List>? actionData = []; int? trainingOffset; /// Course training date offset starting from 0 int? countHour; /// Exercise countdown hours int? countMinute; /// Exercise countdown minutes int? countSecond; /// Exercise countdown seconds int? time; /// Action goal time (unit: seconds) int? lowHeart; /// Low heart rate range int? heightHeart; /// High heart rate range int? paceSpeedCount; /// Real-time pace count List? paceSpeeds = [];/// Real-time pace array (recorded every 5 seconds) int? realSpeedCount; /// Real-time speed count List? realSpeeds = [];/// Real-time speed array (recorded every 5 seconds) int? intervalSecond; /// GPS coordinate point time interval int? gpsCount; /// Number of GPS coordinates /// GPS data details [{'latitude':0,'longitude':0}] List>? gpsData = []; 11. APP Getting GPS Data for Multiple Exercise Interactions: 11.1 Summary of Functionality: None. 11.2 API ID: Stream getActivityGpsData(); 11.3 API Parameter Description: @return: GPS data model, which includes the following members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? version; /// Protocol version number int? intervalSecond; /// Coordinate point time interval in seconds int? gpsCount; /// Number of coordinate points /// GPS data details [{'latitude':0,'longitude':0}] List>? gpsData; Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-27 09:59:13 "},"doc/IDOExchangeDataModal/IDOExchangeDataAppSendModel.html":{"url":"doc/IDOExchangeDataModal/IDOExchangeDataAppSendModel.html","title":"App Initiated Data Exchange Model Description","keywords":"","body":"{APP Data Exchange Model Specification} 1. Model for APP Start Exchange of Sports Data: 1.1 Model ID class IDOAppStartExchangeModel extends IDOBaseExchangeModel 1.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? targetType; /// Target type int? targetValue; /// Target value int? forceStart; /// Whether to force start. 0: No, 1: Yes int? vo2max; /// Maximum oxygen uptake. Unit: ml/kg/min int? recoverTime; /// Recovery time. Unit: hours int? avgWeekActivityTime; /// Average weekly activity time of last month. Unit: minutes =>Skip to jsonDatadescription (for internal development use) 2. Model for APP End Exchange of Sports Data: 2.1 Model ID class IDOAppEndExchangeModel extends IDOBaseExchangeModel 2.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? duration; /// Duration (in seconds) int? calories; /// Calories. Unit: kcal int? distance; /// Distance. Unit: meters int? isSave; /// 0: Do not save, 1: Save =>Skip to jsonDatadescription (for internal development use) 3. Model for APP During Exchange of Sports Data: 3.1 Model ID class IDOAppIngExchangeModel extends IDOBaseExchangeModel 3.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? duration; /// Duration in seconds int? calories; /// Calories. Unit: kcal int? distance; /// Distance. Unit: 0.01km int? status; /// 0: All valid, 1: Distance invalid, 2: Weak GPS signal =>Skip to jsonDatadescription (for internal development use) 4. Model for APP Pause Exchange of Sports Data: 4.1 Model ID class IDOAppPauseExchangeModel extends IDOBaseExchangeModel 4.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? pauseHour; /// Pause hour int? pauseMinute; /// Pause minute int? pauseSecond; /// Pause second =>Skip to jsonDatadescription (for internal development use) 5. Model for APP Restore Exchange of Sports Data: 5.1 Model ID class IDOAppRestoreExchangeModel extends IDOBaseExchangeModel 5.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type =>Skip to jsonDatadescription (for internal development use) 6. Model for APP Execution of V3 Exchange of Sports Data: 6.1 Model ID class IDOAppIngV3ReplyExchangeModel extends IDOBaseExchangeModel 6.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? version; /// Protocol version int? signal; /// 0: Weak signal, 2: Strong signal int? distance; /// App distance int? speed; /// Real-time pace calculated and displayed by the app. Unit: km/h, multiplied by 100 int? duration; /// Duration int? calories; /// Calories =>Skip to jsonDatadescription (for internal development use) 7. Model for APP Operation of Sports Plan: 7.1 Model ID class IDOAppOperatePlanExchangeModel extends IDOBaseExchangeModel 7.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? operate; /// 1: Start sport, 2: Pause sport, 3: Resume sport, 4: End sport, 5: Switch action int? trainingOffset;/// Training course date offset. Starting from 0. int? planType; /// Plan type. 1: Running plan 3km, 2: Running plan 5km, 3: Running plan 10km, 4: Half marathon training (Phase 2), 5: Marathon training (Phase 2) =>Skip to jsonDatadescription (for internal development use) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-23 14:32:35 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchStart.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchStart.html","title":"APP sends start of sport data exchange","keywords":"","body":"App Sends Command to Start Exercise Data Exchange JSON Field Sent by App: Field Name Field Type Field Description day int Start time: day hour int Start time: hour minute int Start time: minute second int Start time: second sport_type int Type of exercise target_type int Exercise goal0: No goal1: Repetitions (unit: times)2: Distance (unit: meters)3: Calories (unit: kcal)4: Duration (unit: minutes)5: Steps (unit: steps) target_value int Goal value force_start int Force start1: Force start enabled0: Force start disabled (user only) vo2max int Maximal oxygen consumptionUnit: ml/kg/min (app stores the received data) recover_time int Recovery timeUnit: hours (app will decrement by one every hour) avg_week_activity_time int Average weekly activity time of last monthUnit: minutes Example: { \"day\": 26, \"hour\": 10, \"minute\": 43, \"second\": 10, \"sport_type\": 10, \"target_type\": 1, \"target_value\": 1, \"force_start\": 0, \"vo2max\": 10, \"recover_time\": 1, \"avg_week_activity_time\": 1 } JSON Field Received by App: Field Name Field Type Field Description ret_code int ret_code0: Success1: Failed to enter exercise mode on the device2: Device low battery3: Charging4: Restricted by Alexa Example: { \"ret_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchEnd.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchEnd.html","title":"APP sends end of sport data exchange","keywords":"","body":"APP Sends Data Exchange Completion for Exercise JSON Field Sent by App: Field Name Field Type Field Description day int Start time: day hour int Start time: hour minute int Start time: minute second int Start time: second duration int Duration in seconds calories int Calories in kilocalories distance int Distance in 0.01 km sport_type int Sport type is_save int 0: Not saved, 1: Saved Example: { \"day\": 26, \"hour\": 10, \"minute\": 50, \"second\": 50, \"duration\": 10, \"calories\": 10, \"distance\": 10, \"sport_type\": 1, \"is_save\": 0 } JSON Field Received by App: Field Name Field Type Field Description err_code int err_code0: Success1: Failed: Device not in exercise mode2: Device stopped exercise (exercise already ended) step int Step count / Repetitions calories int Calories in kilocalories distance int Distance in 0.01 km avg_hr_value int Average heart rate max_hr_value int Maximum heart rate burn_fat_mins int Duration of fat burning exercise in minutes aerobic_mins int Duration of aerobic exercise in minutes limit_mins int Duration of limit exercise in minutes Example: { \"err_code\": 0, \"step\": 200, \"calories\": 20, \"distance\": 50, \"avg_hr_value\": 80, \"max_hr_value\": 90, \"burn_fat_mins\": 0, \"aerobic_mins\": 0, \"limit_mins\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchData.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchData.html","title":"Process of sport data exchange in APP","keywords":"","body":"Process of Exchanging Exercise Data with the App JSON Field Sent by App: Field Name Field Type Field Description day int Start time: day hour int Start time: hour minute int Start time: minute second int Start time: second duration int Duration in seconds calories int Calories in kilocalories distance int Distance in 0.01 km status int 0: All valid1: Invalid distance2: Weak GPS signal Example: { \"day\": 26, \"hour\": 10, \"minute\": 46, \"second\": 30, \"duration\": 80, \"calories\": 300, \"distance\": 500, \"status\": 0 } JSON Field Received by App: Field Name Field Type Field Description status int 1: Success2: Failed: Device not in exercise mode step int Step/Count calories int Calories in kilocalories distance int Distance in 0.01 km cur_hr_value int Heart rate data: Current heart rate interval_second int Heart rate interval in seconds hr_value_serial int Serial number hr_value int[] Heart rate value data Example: { \"status\": 1, \"step\": 200, \"calories\": 200, \"distance\": 50, \"cur_hr_value\": 80, \"interval_second\": 5, \"hr_value_serial\": 0, \"hr_value\": [ 85, 86, 90, 79, 88, 92 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchPause.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchPause.html","title":"APP sends pause of sport data exchange","keywords":"","body":"App Sends Command to Pause Exercise Data Exchange JSON Field Sent by App: Field Name Field Type Field Description day int Start time: day hour int Start time: hour minute int Start time: minute second int Start time: second sport_hour int Duration: hours sport_minute int Duration: minutes sport_second int Duration: seconds Example: { \"day\": 26, \"hour\": 10, \"minute\": 54, \"second\": 50, \"sport_hour\": 10, \"sport_minute\": 54, \"sport_second\": 50 } JSON Field Received by App: Field Name Field Type Field Description err_code int err_code0: Success1: Failed to enter exercise mode successfully Example: { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchRestore.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchRestore.html","title":"APP sends resume of sport data exchange","keywords":"","body":"App Sends Command to Resume Exercise Data Exchange JSON Field Sent by App: Field Name Field Type Field Description day int Resume time: day hour int Resume time: hour minute int Resume time: minute second int Resume time: second Example: { \"day\": 26, \"hour\": 10, \"minute\": 55, \"second\": 53 } JSON Field Received by App: Field Name Field Type Field Description err_code int err_code0: Success1: Failed to enter exercise mode successfully Example: { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOV3ActivityDataExchange.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOV3ActivityDataExchange.html","title":"V3 multi-sport data interaction","keywords":"","body":"V3 Sports Data Exchange Function: syncV3ActivityExchangeData 【syncExchangeDataReplyAddRealTimeSpeedPaceV3，setSupportSportPlan，setSupportExchangeSetGpsCoordinates】 Flutter Example: /// app initiates the V3 data exchange process event number exchangeAppV3Ing( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_activity_data_exchange), /// app initiates the V3 data exchange process libManager.send(evt: CmdEvtType.exchangeAppV3Ing, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description version int Protocol version number. Default: 016: biggerfive custom project (requires firmware to enable V3_support_v3_exchange_data_reply_add_real_time_speed_pace)32: Added running plan data (requires firmware to enable v3_support_sports_plan) type int Sports type signal_flag int 0: Weak signal1: Strong signal distance int Distance recorded by the app. Unit:meterWhen the app signal strength is strong, BLE calculates the distance using the app's data. When the app signal is weak, BLE does not use the app's data, and the app displays the data from the bracelet. real_time_speed int Real-time speed calculated and displayed by the app, in km/h, multiplied by 100Uint:Km/hreserve duration int DurationUint:secondreserve calories int Calories burnedUint:Kcalreserve gps_info_count int Number of gps coordinatesMax 30When opening the function table setSupportExchangeSetGpsCoordinates support gps map Gps coordinates，collection of latitude & longitudeMax 30 setWhen opening the function table setSupportExchangeSetGpsCoordinates support 字段名 字段类型 字段说明 latitude int Latitude The number need x10^6 Positive numbers are north latitude and negative numbers are south latitude longitude int Longitude The number need x10^6 Positive number is east longitude, negative number is west longitude 示例： Example: { \"version\":0, \"type\":31, \"signal_flag\":0, \"distance\":0, \"real_time_speed\":0, \"duration\":0, \"calories\":0, \"gps_info_count\" : 2, \"gps\" : [ { \"latitude\" :22543100, \"longitude\" :114057800 }, { \"latitude\" :23129100, \"longitude\" :113264400 } ] } JSON Fields Received by the App: Field Name Field Type Field Description version int Protocol version number0: Basic version16: biggerfive custom project (requires firmware to enable V3_support_v3_exchange_data_reply_add_real_time_speed_pace)32: Added running plan data (requires firmware to enable v3_support_sports_plan) type int Sports type. Valid when act_type is 0 day int Data date (day) hour int Data time (hour) minute int Data time (minute) second int Data time (second) heart_rate int Heart rate dataUint::bpm distance int Distance. The unit is determined by the unit settings real_time_speed int Real-time speed in km/h, multiplied by 100 km_speed int Real-time kilometer pace, in seconds per kilometer real_time_calories int Dynamic calorie count steps int Number of steps swim_posture int Main swimming posture status int Status0: Invalid1: Start2: Manually paused3: End4: Auto paused duration int Duration in seconds real_time_speed_pace int Real-time pace in seconds5-second moving average. The 5th second uses the data from 1st to 5th second, and the 6th second uses the data from 2nd to 6th second. No pace or speed is displayed for the 1st to 4th seconds.Requires the firmware to enable syncExchangeDataReplyAddRealTimeSpeedPaceV3. Returns 0 if the feature is not enabled te int Aerobic training effect level. No unit. Range: 0-50. Transmitted by scaling up by 10Requires the firmware to enable syncExchangeDataReplyAddRealTimeSpeedPaceV3. Returns 0 if the feature is not enabled tean int Anaerobic training effect level. No unit. Range: 0-50. Transmitted by scaling up by 10Requires the firmware to enable syncExchangeDataReplyAddRealTimeSpeedPaceV3. Returns 0 if the feature is not enabled action_type int Action type1: Fast walking2: Jogging3: Medium-speed running4: Sprinting5: End of exercise (also waiting for user to start free exercise)6: Free exercise after the end of the workout (this field is effective when operate is 5)Cumulative exercise time = training time within the session + time after the session endsRequires the firmware to enable setSupportSportPlan. Returns 0 if the feature is not enabled count_hour int When action_type is 1-5, this field is the countdown time (note: time decreases)When action_type is 6, this field is the time after the session ends (note: time increases)Requires the firmware to enable setSupportSportPlan. Returns 0 if the feature is not enabled count_minute int When action_type is 1-5, this field is the countdown time (note: time decreases)When action_type is 6, this field is the time after the session ends (note: time increases)Requires the firmware to enable setSupportSportPlan. Returns 0 if the feature is not enabled count_second int When action_type is 1-5, this field is the countdown time (note: time decreases)When action_type is 6, this field is the time after the session ends (note: time increases)Requires the firmware to enable setSupportSportPlan. Returns 0 if the feature is not enabled Example: { \"version\": 0, \"type\": 0, \"day\": 0, \"hour\": 0, \"minute\": 0, \"second\": 0, \"heart_rate\": 0, \"distance\": 0, \"real_time_speed\": 0, \"km_speed\": 0, \"real_time_calories\": 0, \"steps\": 0, \"swim_posture\": 0, \"status\": 0, \"duration\": 0, \"real_time_speed_pace\": 0, \"te\": 0, \"tean\": 0, \"action_type\": 0, \"count_hour\": 0, \"count_minute\": 0, \"count_second\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-24 15:13:51 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOV3SetCutoverSport.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOV3SetCutoverSport.html","title":"V3 APP notifies device to switch sport process","keywords":"","body":"V3APP Notifies Device to Switch Exercise Process Flutter Example: /// Exercise plan operation event number in the app exchangeAppPlan( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_app_to_ble_sport_cutover), /// Exercise plan operation in the app libManager.send(evt: CmdEvtType.exchangeAppPlan, json: jsonEncode(json)); JSON fields sent by the app: Field Name Field Type Field Description operate int Operation1: Start Exercise 2: Pause Exercise 3: Resume Exercise 4: End Exercise 5: Switch Action type int Plan type1: Running Plan 3km2: Running Plan 5km3: Running Plan 10km4: Half Marathon Training (Phase 2)5: Marathon Training (Phase 2)6: Post-Run Stretching7: 6-minute Easy Run 8: 10-minute Easy Run 9: 15-minute Easy Run 10: Walk-Run Combination (Beginner) 11: Walk-Run Combination (Advanced) 12: Walk-Run Combination (Intensive) training_offset int Training course date offset starting from zero hour int Start, Pause, Resume, End time determined by operateTime: Hour minute int Time: Minute second int Time: Second Example: { \"operate\": 1, \"type\": 1, \"action_type\": 1, \"year\": 2022, \"month\": 12, \"day\": 26, \"time\": 200, \"low_heart\": 80, \"high_heart\": 110, \"cur_day\": 1, \"hour\": 0, \"minute\": 0, \"second\": 0 } JSON fields received by the app: Field Name Field Type Field Description err_code int 0: Success, other values indicate failure operate int Operation1: Start Exercise2: Pause Exercise 3: Resume Exercise4: End Exercise 5: Switch Action type int Plan type1: Running Plan 3km2: Running Plan 5km3: Running Plan 10km4: Half Marathon Training (Phase 2)5: Marathon Training (Phase 2) action_type int Action type1: Fast Walking2: Slow Jogging3: Medium Speed Running4: Fast Running5: End Course Exercise (also waits for user's Free Exercise) (This field is effective when operate is 5) Example: { \"err_code\": 0, \"operate\": 1, \"type\": 1, \"action_type\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOExchangeDataBleNoticeAppReplyModel.html":{"url":"doc/IDOExchangeDataModal/IDOExchangeDataBleNoticeAppReplyModel.html","title":"App Reply to BLE Initiated Exchange Motion Model Description","keywords":"","body":"{App Reply Exchange Model for BLE Device Initiating Movement} 1. Model ID for App Reply to BLE Device Sending Exchange Movement Data Initiation: 1.1 Model ID class IDOBleStartReplyExchangeModel extends IDOBaseExchangeModel 1.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport Type int? operate; /// 1: Request app to enable GPS 2: Initiating movement request int? retCode; /// 0: Success, non-zero: Failure =>Skip to jsonDatadescription (for internal development use) 2. Model for App Reply to BLE Device during Exchange of Movement Data: 2.1 Model ID class IDOBleIngReplyExchangeModel extends IDOBaseExchangeModel 2.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport Type int? distance; /// Distance in 0.01 km unit =>Skip to jsonDatadescription (for internal development use) 3. Model for App Reply to BLE Device sending Exchange Movement Data End: 3.1 Model ID class IDOBleEndReplyExchangeModel extends IDOBaseExchangeModel 3.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport Type int? retCode; /// 0: Success, non-zero: Failure =>Skip to jsonDatadescription (for internal development use) 4. Model for App Reply to BLE Device Sending Exchange Movement Data Pause: 4.1 Model ID class IDOBlePauseReplyExchangeModel extends IDOBaseExchangeModel 4.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport Type int? retCode; /// 0: Success, non-zero: Failure =>Skip to jsonDatadescription (for internal development use) 5. Model for App Reply to BLE Device Sending Exchange Movement Data Restore: 5.1 Model ID class IDOBleRestoreReplyExchangeModel extends IDOBaseExchangeModel 5.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport Type int? retCode; /// 0: Success, non-zero: Failure =>Skip to jsonDatadescription (for internal development use) 6. Model for App Reply to BLE Device Operating Movement Plan: 6.1 Model ID class IDOBleOperatePlanReplyExchangeModel extends IDOBaseExchangeModel 6.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport Type int? operate; /// 1: Start movement 2: Pause movement 3: Resume movement 4: End movement 5: Switch action int? planType; /// Plan type 1: 3km running plan 2: 5km running plan 3: 10km running plan 4: Half marathon training (Phase 2) 5: Marathon training (Phase 2) int? actionType;/// Action type 1: Fast walking 2: Slow running 3: Medium speed running 4: Fast running 5: End course movement (waiting for user's free movement) 6: Free movement after course ends (this field works when operate is 5) int? errorCode;/// 0 for success, non-zero for failure =>Skip to jsonDatadescription (for internal development use) 7. Model for App Reply to BLE Device Notifying Exchange Movement Data Pause (Movement initiated by the app): 7.1 Model ID class IDOAppBlePauseReplyExchangeModel extends IDOBaseExchangeModel 7.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport Type int? errorCode; /// 0: Success 1: Failure to enter movement mode =>Skip to jsonDatadescription (for internal development use) 8. Model for App Reply to BLE Device Notifying Exchange Movement Data Restore (Movement initiated by the app): 8.1 Model ID class IDOAppBleRestoreReplyExchangeModel extends IDOBaseExchangeModel 8.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport Type int? errorCode; /// 0: Success 1: Failure to enter movement mode =>Skip to jsonDatadescription (for internal development use) 9. Model for App Reply to BLE Device Notifying Exchange Movement Data End (Movement initiated by the app): 9.1 Model ID class IDOAppBleEndReplyExchangeModel extends IDOBaseExchangeModel 9.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport Type int? errorCode; /// 0: Success 1: Failure to enter movement mode int? duration; /// Duration in seconds int? calories; /// Calories in kilocalories int? distance; /// Distance in 0.01 km unit =>Skip to jsonDatadescription (for internal development use) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-23 14:40:03 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchStartFromDevice.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchStartFromDevice.html","title":"Device sends start of sport data exchange","keywords":"","body":"Device Sends Command to Start Exercise Data Exchange JSON Field Received by App: Field Name Field Type Field Description day int Start time: day hour int Start time: hour minute int Start time: minute second int Start time: second type int Type of exercise operate int 1: Request app to enable GPS2: Initiate exercise request Example: { \"day\": 26, \"hour\": 11, \"minute\": 2, \"second\": 50, \"type\": 1, \"operate\": 2 } JSON Field Sent by App: Field Name Field Type Field Description ret_code int 0: Success; 1: Failed operate int 1: Request app to enable GPS2: Initiate exercise request Example: { \"ret_code\": 0, \"operate\": 2 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDataFromDevice.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDataFromDevice.html","title":"During sport data exchange in device","keywords":"","body":"Process of Exchanging Exercise Data with the Device JSON Field Received by App: Field Name Field Type Field Description day int Start time: day hour int Start time: hour minute int Start time: minute second int Start time: second distance int Distance in 0.01 km Example: { \"day\": 26, \"hour\": 11, \"minute\": 3, \"second\": 15, \"distance\": 10 } JSON Field Sent by App: Field Name Field Type Field Description distance int Distance in 0.01 km.The app needs to check if the distance is reasonable (based on GPS signal strength and common sense). Example: { \"distance\": 10 } Textual content in Chinese should be translated into English, while the structure should remain unchanged. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchEndFromDevice.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchEndFromDevice.html","title":"Device sends end of sport data exchange","keywords":"","body":"Device Sends Command to Exchange Exercise Data Completion JSON Field Received by App: Field Name Field Type Field Description day int End time: day hour int End time: hour minute int End time: minute second int End time: second Example: { \"day\": 26, \"hour\": 11, \"minute\": 3, \"second\": 15 } JSON Field Sent by App: Field Name Field Type Field Description ret_code int 0: Success1: Failed: Device not in exercise mode Example: { \"ret_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchPauseFromDevice.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchPauseFromDevice.html","title":"Device sends pause of sport data exchange","keywords":"","body":"Device Sends Command to Pause Exercise Data Exchange JSON Field Received by App: Field Name Field Type Field Description day int Pause time: day hour int Pause time: hour minute int Pause time: minute second int Pause time: second Example: { \"day\": 26, \"hour\": 11, \"minute\": 3, \"second\": 15 } JSON Field Sent by App: Field Name Field Type Field Description ret_code int ret_code0: Success1: Failed to enter exercise mode successfully Example: { \"ret_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchRestoreFromDevice.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchRestoreFromDevice.html","title":"Device sends resume of sport data exchange","keywords":"","body":"Device Sends Command to Resume Exercise Data Exchange JSON Field Received by App: Field Name Field Type Field Description day int Resume time: day hour int Resume time: hour minute int Resume time: minute second int Resume time: second Example: { \"day\": 26, \"hour\": 11, \"minute\": 3, \"second\": 15 } JSON Field Sent by App: Field Name Field Type Field Description ret_code int ret_code0: Success1: Failed to enter exercise mode successfully Example: { \"ret_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOV3CutoverSportFromDevice.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOV3CutoverSportFromDevice.html","title":"Device notifies APP to switch sport process","keywords":"","body":"V3 Device Notifies App of Exercise Process Switching function table:setSupportSportPlan 【setWatchCapacitySizeDisplay】 JSON Fields Sent by the App: Field Name Field Type Field Description operate int Operation1: Start exercise2: Pause exercise3: Resume exercise4: End exercise5: Switch action type int Plan type1: 3km running plan2: 5km running plan3: 10km running plan4: Half marathon training (Phase 2)5: Marathon training (Phase 2) action_type int Action type1: Fast walk2: Jog3: Moderate run4: Fast run5: End course exercise (waiting for user's free exercise) (This field is effective when operate is 5) err_code int 0: Success, non-zero: Failure Example: { \"operate\": 1, \"type\": 1, \"action_type\": 1, \"err_code\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description operate int 1: Start exercise2: Pause exercise3: Resume exercise4: End exercise5: Switch action type int Plan type1: 3km running plan2: 5km running plan3: 10km running plan4: Half marathon training (Phase 2)5: Marathon training (Phase 2) action_type int Action type1: Fast walk2: Jog3: Moderate run4: Fast run5: End course exercise (waiting for user's free exercise); 6: Free exercise after course ends (This field is effective when operate is 5) year int Year of the training course date (training day's date) month int Month of the training course date (training day's date) day int Day of the training course date (training day's date) time int Action target time in seconds low_heart int Lower value of heart rate range high_heart int Upper value of heart rate range cur_day int Start/pause/resume/end time, determined by the operate valueTime: day hour int Time: hour minute int Time: minute second int Time: second Example: { \"operate\": 1, \"type\": 1, \"action_type\": 1, \"year\": 2022, \"month\": 12, \"day\": 26, \"time\": 200, \"low_heart\": 80, \"high_heart\": 110, \"cur_day\": 1, \"hour\": 0, \"minute\": 0, \"second\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 16:42:35 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDeviceNoticePause.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDeviceNoticePause.html","title":"Device notifies APP to pause data exchange","keywords":"","body":"App Notifies the Device About the Data Exchange Pause JSON Field Received by App: Field Name Field Type Field Description day int Resume time: day hour int Resume time: hour minute int Resume time: minute second int Resume time: second Example: { \"day\": 26, \"hour\": 10, \"minute\": 56, \"second\": 15 } JSON Field Sent by App: Field Name Field Type Field Description err_code int err_code0: Success1: Failed: Not in exercise mode Example: { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDeviceNoticeRestore.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDeviceNoticeRestore.html","title":"Device notifies APP to resume data exchange","keywords":"","body":"App Notifies the Device About the Data Exchange Resumption JSON Field Received by App: Field Name Field Type Field Description day int Resume time: day hour int Resume time: hour minute int Resume time: minute second int Resume time: second Example: { \"day\": 26, \"hour\": 10, \"minute\": 55, \"second\": 53 } JSON Field Sent by App: Field Name Field Type Field Description err_code int err_code0: Success1: Failed: Not in exercise mode Example: { \"err_code\": 0 } Textual content in Chinese should be translated into English, while the structure should remain unchanged. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDeviceNoticeEnd.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDeviceNoticeEnd.html","title":"Device notifies APP of data exchange end","keywords":"","body":"App Notifies the Device About the Data Exchange Completion JSON Field Received by App: Field Name Field Type Field Description day int Start time: day hour int Start time: hour minute int Start time: minute second int Start time: second duration int Duration in seconds calories int Calories in kilocalories distance int Distance in 0.01 km sport_type int Type of sport avg_hr_value int Average heart rate value max_hr_value int Maximum heart rate value burn_fat_mins int Duration of fat burning in minutes aerobic_mins int Duration of aerobic exercise in minutes limit_mins int Duration of high-intensity exercise in minutes is_save int 0: Do not save, 1: Save Example: { \"day\": 26, \"hour\": 10, \"minute\": 50, \"second\": 50, \"duration\": 10, \"calories\": 10, \"distance\": 10, \"sport_type\": 1, \"avg_hr_value\": 80, \"max_hr_value\": 90, \"burn_fat_mins\": 0, \"aerobic_mins\": 0, \"limit_mins\": 0, \"is_save\": 0 } JSON Field Sent by App: Field Name Field Type Field Description err_code int err_code0: Success1: Failed: Not in exercise mode duration int Duration in seconds calories int Calories in kilocalories distance int Distance in 0.01 km Example: { \"err_code\": 0, \"duration\": 10, \"calories\": 50, \"distance\": 50 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOExchangeDataBleNoticeModel.html":{"url":"doc/IDOExchangeDataModal/IDOExchangeDataBleNoticeModel.html","title":"BLE Initiated Data Exchange Model Description","keywords":"","body":"{BLE Data Exchange Model Specification} 1. BLE Device Sends Start of Data Exchange for Exercise Model: 1.1 Model ID class IDOBleIngExchangeModel extends IDOBaseExchangeModel 1.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Exercise Type int? operate; /// 1: Request app to enable GPS, 2: Initiates exercise request =>Skip to jsonDatadescription (for internal development use) 2. BLE Device Data Exchange in Progress for Exercise Model: 2.1 Model ID class IDOBleIngExchangeModel extends IDOBaseExchangeModel 2.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Exercise Type int? distance; /// Distance in 0.01km units =>Skip to jsonDatadescription (for internal development use) 3. BLE Device Sends End of Data Exchange for Exercise Model: 3.1 Model ID class IDOBleEndExchangeModel extends IDOBaseExchangeModel 3.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Exercise Type =>Skip to jsonDatadescription (for internal development use) 4. BLE Device Sends Pause Data Exchange for Exercise Model: 4.1 Model ID class IDOBlePauseExchangeModel extends IDOBaseExchangeModel 4.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Exercise Type =>Skip to jsonDatadescription (for internal development use) 5. BLE Device Sends Resume Data Exchange for Exercise Model: 5.1 Model ID class IDOBleRestoreExchangeModel extends IDOBaseExchangeModel 5.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Exercise Type =>Skip to jsonDatadescription (for internal development use) 6. BLE Device Operates Exercise Plan Model: 6.1 Model ID class IDOBleOperatePlanExchangeModel extends IDOBaseExchangeModel 6.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Exercise Type int? operate; /// 1: Start exercise, 2: Pause exercise, 3: Resume exercise, 4: End exercise, 5: Switch action int? planType; /// Plan type 1: 3km running plan, 2: 5km running plan, 3: 10km running plan, 4: Half marathon training (Phase 2), 5: Marathon training (Phase 2) int? actionType; /// Action type 1: Fast walking; 2: Slow jogging; 3: Moderate running; 4: Fast running; 5: End of course exercise (waiting for user to choose free exercise); 6: Free exercise after course ends (this field is applicable when operate is 5) int? errorCode; /// 0 means success, non-zero means failure int? trainingYear; /// Training course year int? trainingMonth;/// Training course month int? trainingDay; /// Training course day int? time; /// Action target time in seconds int? lowHeart; /// Lower range of heart rate int? highHeart; /// Upper range of heart rate =>Skip to jsonDatadescription (for internal development use) 7. BLE Device Notifies Pause of Data Exchange for Exercise Model (Exercise initiated by App): 7.1 Model ID class IDOAppBlePauseExchangeModel extends IDOBaseExchangeModel 7.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Exercise Type =>Skip to jsonDatadescription (for internal development use) 8. BLE Device Notifies Resume of Data Exchange for Exercise Model (Exercise initiated by App): 8.1 Model ID class IDOAppBleRestoreExchangeModel extends IDOBaseExchangeModel 8.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Exercise Type =>Skip to jsonDatadescription (for internal development use) 9. BLE Device Notifies End of Data Exchange for Exercise Model (Exercise initiated by App): 9.1 Model ID class IDOAppBleRestoreExchangeModel extends IDOBaseExchangeModel 9.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Exercise Type int? duration; /// Duration in seconds int? calories; /// Calories in kcal int? distance; /// Distance in 0.01km units int? avgHr; /// Average heart rate int? maxHr; /// Maximum heart rate int? burnFatMins; /// Fat burning duration in minutes int? aerobicMins; /// Aerobic exercise duration in minutes int? limitMins; /// Maximum exercise duration in minutes int? isSave; /// 0: Do not save, 1: Save =>Skip to jsonDatadescription (for internal development use) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-23 14:43:16 "},"doc/IDOExchangeDataModal/IDOExchangeDataAppSendReplyModel.html":{"url":"doc/IDOExchangeDataModal/IDOExchangeDataAppSendReplyModel.html","title":"BLE Response to APP Initiated Data Exchange Model Description","keywords":"","body":"Explanation of the Model for BLE Device Responding to APP's Data Exchange Request 1. Model for BLE Device Reply to APP's Start Data Exchange Request: 1.1 Model ID class IDOAppStartReplyExchangeModel extends IDOBaseExchangeModel 1.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? retCode; /// 0: Success 1: Device failed to enter exercise mode /// 2: Low battery level of device failed 3: Bracelet is charging /// 4: Using Alexa 5: In call =>Skip to jsonDatadescription (for internal development use) 2. Model for BLE Device Reply to APP's End Data Exchange Request: 2.1 Model ID class IDOAppEndReplyExchangeModel extends IDOBaseExchangeModel 2.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? errorCode; /// 0: Success; 1: Device failed to end exercise int? calories; /// Calories, in kilocalories int? distance; /// Distance in meters int? step; /// Number of steps int? avgHr; /// Average heart rate int? maxHr; /// Maximum heart rate int? burnFatMins; /// Duration of fat burning exercise in minutes int? aerobicMins; /// Duration of aerobic exercise in minutes int? limitMins; /// Duration of limit exercise in minutes =>Skip to jsonDatadescription (for internal development use) 3. Model for BLE Device Reply to APP During Data Exchange Process: 3.1 Model ID class IDOAppIngReplyExchangeModel extends IDOBaseExchangeModel 3.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? calories; /// Calories in kilocalories int? distance; /// Distance in kilometers int? status; /// 0: All data valid 1: Distance invalid 2: Weak GPS signal int? step; /// Number of steps int? currentHr; /// Current heart rate int? interval; /// Heart rate interval in seconds int? hrSerial; /// Serial number List? hrJson; /// Heart rate data in JSON format =>Skip to jsonDatadescription (for internal development use) 4. Model for BLE Device Reply to APP's Pause Data Exchange Request: 4.1 Model ID class IDOAppPauseReplyExchangeModel extends IDOBaseExchangeModel 4.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? errCode; /// Pause error code 0: Success, non-zero: Failed =>Skip to jsonDatadescription (for internal development use) 5. Model for BLE Device Reply to APP's Resume Data Exchange Request: 5.1 Model ID class IDOAppRestoreReplyExchangeModel extends IDOBaseExchangeModel 5.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? errCode; /// Resume error code 0: Success, non-zero: Failed =>Skip to jsonDatadescription (for internal development use) 6. Model for BLE Device Reply to APP for V3 Data Exchange: 6.1 Model ID class IDOAppIngV3ReplyExchangeModel extends IDOBaseExchangeModel 6.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? version; /// Protocol version int? heartRate; /// Heart rate data int? distance; /// Distance in user-defined unit int? duration; /// Duration in seconds int? realTimeCalories; /// Dynamic calories int? realTimeSpeed; /// Real-time speed, unit: km/h, scaled by 100 int? kmSpeed; /// Real-time pace per kilometer, unit: seconds/km int? steps; /// Number of steps int? swimPosture; /// Main swimming posture int? status; /// Status 0: Invalid 1: Start 2: Manually pause 3: End 4: Auto pause int? realTimeSpeedPace; /// Real-time pace, unit: seconds, 5 seconds using sliding average, /// 5th second using data from 1-5s, 6th second using data from 2-6s int? trainingEffect; /// Aerobic training effect level Unit: None Range: 0-50, scaled by 10 int? anaerobicTrainingEffect;/// Anaerobic training effect level Unit: None Range: 0-50, scaled by 10 /// Action type /// 1: Fast walking /// 2: Jogging /// 3: Moderate running /// 4: Fast running /// 5: End course exercise (waiting for user to perform free exercise) /// 6: Free exercise after course ends (this field is effective when operate=5) /// Sport accumulation time = Training time within the course + Timing after the course ends int? actionType; /// Requires firmware to enable function /// When action_type = 1-5, this field is the countdown time of exercise (decreasing time) /// When action_type = 6, this field is the timing after the course ends (increasing time) int? countHour; /// Requires firmware to enable function /// When action_type = 1-5, this field is the countdown time of exercise (decreasing time) /// When action_type = 6, this field is the timing after the course ends (increasing time) int? countMinute; /// Requires firmware to enable function /// When action_type = 1-5, this field is the countdown time of exercise (decreasing time) /// When action_type = 6, this field is the timing after the course ends (increasing time) int? countSecond; =>Skip to jsonDatadescription (for internal development use) 7. Model for BLE Device Reply to APP's Operation on Exercise Plan: 7.1 Model ID class IDOAppOperatePlanReplyExchangeModel extends IDOBaseExchangeModel 7.2 Model Members: int? day; /// Date int? hour; /// Hour int? minute; /// Minute int? second; /// Second int? sportType; /// Sport type int? planType; /// Plan type: 1: 3km running plan, 2: 5km running plan, /// 3: 10km running plan, 4: Half marathon training (Phase II), /// 5: Marathon training (Phase II) int? operate; /// 1: Start exercise, 2: Pause exercise, 3: Resume exercise, 4: End exercise, 5: Switch action int? actionType; /// Action type: 1: Fast walking, 2: Jogging, 3: Moderate running, /// 4: Fast running, 5: End course exercise (waiting for user to perform free exercise), /// 6: Free exercise after course ends (this field is effective when operate=5) int? errorCode; /// 0 for success, non-zero for failure =>Skip to jsonDatadescription (for internal development use) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-23 14:36:58 "},"doc/IDODeviceLogIconIntroduction.html":{"url":"doc/IDODeviceLogIconIntroduction.html","title":"IDO Device Log Interface Description","keywords":"","body":"{IDO Device Log Interface Description} 1. Function Overview Provides the ability to query whether obtaining firmware logs is supported, query log directory addresses, start and cancel log retrieval. 2. Interface Abilities 1. Query if Obtaining Firmware Logs is Supported: 1.1 Function Summary: None. 1.2 API ID: bool get getLogIng; 1.3 API Parameter Explanation: @return: bool Supported feature flag, false: Not supported, true: Supported. ////TODO? 2. Query All Log Directory Addresses: 2.1 Function Summary: None. 2.2 API ID: Future get logDirPath; 2.3 API Parameter Explanation: @return: String Directory addresses of all logs. Each log directory contains files named with timestamps. The names of all log directories are: Flash Log Directory -> Flash Battery Log Directory -> Battery Heat Log Directory -> Heat Old Reboot Log Directory -> Reboot 3. Start Log Retrieval: 3.1 Function Summary: None. 3.2 API ID: Stream startGet(List types); 3.3 API Parameter Explanation: @return: bool Supported feature flag, false: Not supported, true: Supported. @param: types List of logs to retrieve. Log types include: enum IDOLogType { init = 0, reboot = 1, // Old reboot logs general = 2, // General logs reset = 3, // Reset logs hardware = 4, // Hardware logs algorithm = 5, // Algorithm logs restart = 6, // New reboot logs battery = 7, // Battery logs heat = 8 // Heat logs } 4. Cancel Log Retrieval: 4.1 Function Summary: None. 4.2 API ID: void cancel(); 4.3 API Parameter Explanation: None. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOCLibToolFunctionIconIntroduction.html":{"url":"doc/IDOCLibToolFunctionIconIntroduction.html","title":"IDO Tool Interface Description","keywords":"","body":"7. Smooth GPS Data Set: 7.1 Function Overview: This API takes in multiple sets of GPS coordinates and provides the ability to smooth the GPS data set. 7.2 API ID: String gpsSmoothData({required String json}) 7.3 API Parameter Description: @param: json GPS coordinate data in JSON format. The JSON should contain the following keys: lat: an array of latitude values with length 'len' and data type 'double' lon: an array of longitude values with length 'len' and data type 'double' len: the number of latitude and longitude pairs in the arrays @return: Returns a JSON formatted string with the smoothed GPS coordinate data. The JSON contains the following keys: lat: an array of latitude values with length 'len' and data type 'double' lon: an array of longitude values with length 'len' and data type 'double' len: the number of latitude and longitude pairs in the arrays 8. Get Log Root Path: 8.1 Function Overview: No functionality description provided. 8.2 API ID: Future logPath() async { final pathSDK = await LocalStorage.pathSDKStatic(); return Future.value('$pathSDK/logs'); } 8.3 API Parameter Description: @return: Returns the root path of the log directory as a string. 9. Get Alexa Root Path: 9.1 Function Overview: No functionality description provided. 9.2 API ID: Future alexaPath() async { final pathSDK = await LocalStorage.pathSDKStatic(); return Future.value('$pathSDK/alexa'); } 9.3 API Parameter Description: @return: Returns the root path of the Alexa directory as a string. 10. Get Alexa Test Path: 10.1 Function Overview: No functionality description provided. 10.2 API ID: Future alexaTestPath() async { final dirDocument = await getApplicationDocumentsDirectory(); return Future.value('${dirDocument.path}/alexa_test_pkg'); } 10.3 API Parameter Description: @return: Returns the path of the Alexa test directory as a string. 11. Get Current Device Cache Path: 11.1 Function Overview: No functionality description provided. 11.2 API ID: Future currentDevicePath() async { return storage?.pathRoot(); } 11.3 API Parameter Description: @return: Returns the root path of the current device's cache directory as a string. 12. Export Logs: 12.1 Function Overview: No functionality description provided. 12.2 API ID: Future exportLog() async { final pathSDK = await LocalStorage.pathSDKStatic(); return await compute(_doZip, pathSDK); } 12.3 API Parameter Description: @return: Returns the absolute path of the compressed log zip file as a string. 13. Load Specific Device Function Table: 13.1 Function Overview: No functionality description provided. 13.2 API ID: Future loadFuncTable( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); return storage?.loadFunctionTableWith(macAddress: macAddr); } 13.3 API Parameter Description: @param: macAddress - The MAC address of the device as a string. @return: Returns a JSON formatted string if successful, or null if unsuccessful. 14. Load Specific Device Function Table: ////TODO 14.1 Function Overview: No functionality description provided. 14.2 API ID: Future loadFuncTable( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); return storage?.loadFunctionTableWith(macAddress: macAddr); } 14.3 API Parameter Description: @param: macAddress - The MAC address of the device as a string. @return: Returns a JSON formatted string if successful, or null if unsuccessful. ////TODO 15. Load Specific Device Function Table: ////TODO 15.1 Function Overview: No functionality description provided. 15.2 API ID: Future loadFuncTableByDisk( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); final ft = await storage?.loadFunctionTableWith(macAddress: macAddr); logger?.d('loadFuncTableByDisk rs:$ft'); if (ft == null) return null; return BaseFunctionTable()..initFunTableModel(ft); } 15.3 API Parameter Description: @param: macAddress - The MAC address of the device as a string. @return: . Translate the Chinese characters in the text to English, do not modify the other structures. 16. Load specified device binding status: ////TODO 16.1 Function Overview: None. 16.2 API ID: Future loadBindStatus({required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); final rs = await storage?.loadBindStatus(macAddress: macAddr); return Future(() => rs ?? false); } 16.3 API Parameter Description: @param: macAddress - Device MAC address, string. @return: Binding status corresponding to the input MAC address, bool type, true: bound, false: unbound. 17. Query information of the last connected device: ////TODO 17.1 Function Overview: Provides the ability to query information of the last connected device, including OTA mode, device name, UUID (IOS), BT/MAC address, and last update time. 17.2 API ID: Future lastConnectDevice() async { final list = await storage?.loadDeviceExtListByDisk(); return Future(() => list?.first); } 17.3 API Parameter Description: @return: Information of the last connected device, including: ////TODO final String macAddress; // MAC address String? macAddressFull; // ? bool otaMode = false; // OTA mode? String uuid; // UUID (IOS) String deviceName; // Device name int updateTime; // Last update time in milliseconds String? macAddressBt; // BT address String formatTime(int millisecondsSince) { return DateTime.fromMicrosecondsSinceEpoch(millisecondsSince).toString(); } 18. Query the list of connected devices: ////TODO 18.1 Function Overview: Provides the ability to query the list of connected devices, including OTA mode, device name, UUID (IOS), BT/MAC address, and last update time. 18.2 API ID: Future?> loadDeviceExtListByDisk( {bool sortDesc = true}) async { return storage?.loadDeviceExtListByDisk(sortDesc: sortDesc); } 18.3 API Parameter Description: @return: Device information list of the connected devices. Each device information in the list includes: ////TODO final String macAddress; // MAC address String? macAddressFull; // ? bool otaMode = false; // OTA mode? String uuid; // UUID (IOS) String deviceName; // Device name int updateTime; // Last update time in milliseconds String? macAddressBt; // BT address String formatTime(int millisecondsSince) { return DateTime.fromMicrosecondsSinceEpoch(millisecondsSince).toString(); } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOV2NoticeIntroduction.html":{"url":"doc/IDOV2NoticeIntroduction.html","title":"IDO Incoming Call and Message Notification Interface Description","keywords":"","body":"{IDO Call Reminder and Message Reminder Interface Specifications} 1. Function Overview Provides the capability to notify devices of incoming calls and message reminders (v2). 2. Interface Capabilities 1. V2 Call Reminder: 1.1 Function Summary: Provides the ability to send incoming call reminders to the firmware, including contact name and phone number. Implemented on some devices. 1.2 API ID: int setV2CallEvt({ required String contactText, required String phoneNumber, }) 1.3 API Parameter Description: @param: contactText: Contact name, string, maximum of 63 bytes. @param: phoneNumber: Phone number, string, maximum of 31 bytes. @return: 0 for success. 2. V2 Message Reminder: 2.1 Function Summary: Provides the ability to send message reminders to the firmware, including message content, contact name, and phone number. Implemented on some devices. 2.2 API ID: int setV2NoticeEvt({ required int type, required String contactText, required String phoneNumber, required String dataText, }) 2.3 API Parameter Description: @param: type: Message type, navigate to IDO message application types @param: contactText: Contact name, string, maximum of 63 bytes. @param: phoneNumber: Phone number, string, maximum of 31 bytes. @param: dataText: Message content, string, maximum of 249 bytes. @return: 0 for success. 3. V2 Call Answered: 3.1 Function Summary: Provides the ability to send a call reminder status as \"call answered\" to the firmware, notifying the device to stop reminding the user. Implemented on some devices. 3.2 API ID: int stopV2CallEvt() 3.3 API Parameter Description: @return: 0 for success. 4. V2 Call Rejected: 4.1 Function Summary: Provides the ability to send a call reminder status as \"call rejected\" to the firmware, notifying the device to stop reminding the user. Implemented on some devices. 4.2 API ID: int missedV2MissedCallEvt() 4.3 API Parameter Description: @return: 0 for success. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-07 11:01:05 "},"doc/IDOCacheIconIntroduction.html":{"url":"doc/IDOCacheIconIntroduction.html","title":"IDO Protocol Library Cache Interface Description","keywords":"","body":"IDO Protocol Library Cache Interface Description 1. Functionality Overview Provides the capability to query logs, Alexa, device cache root directory, export logs, load device function tables, and retrieve information about connected devices. 2. Interface Capabilities 1. Get Log Root Path: 1.1 Functionality: None. 1.2 API ID: Future logPath() async { final pathSDK = await LocalStorage.pathSDKStatic(); return Future.value('$pathSDK/logs'); } 1.3 API Parameter Description: @return: Log root path as a string. 2. Get Alexa Root Path: 2.1 Functionality: None. 2.2 API ID: Future alexaPath() async { final pathSDK = await LocalStorage.pathSDKStatic(); return Future.value('$pathSDK/alexa'); } 2.3 API Parameter Description: @return: Alexa root path as a string. 3. Get Alexa Test Path: 3.1 Functionality: None. 3.2 API ID: Future alexaTestPath() async { final dirDocument = await getApplicationDocumentsDirectory(); return Future.value('${dirDocument.path}/alexa_test_pkg'); } 3.3 API Parameter Description: @return: Alexa test path as a string. 4. Get Current Device Cache Root Path: 4.1 Functionality: None. 4.2 API ID: Future currentDevicePath() async { return storage?.pathRoot(); } 4.3 API Parameter Description: @return: Current device cache root path as a string. 5. Export Logs: 5.1 Functionality: None. 5.2 API ID: Future exportLog() async { final pathSDK = await LocalStorage.pathSDKStatic(); return await compute(_doZip, pathSDK); } 5.3 API Parameter Description: @return: Absolute path to the compressed log zip file, as a string. 6. Load specified device function table: 6.1 Functionality: None. 6.2 API ID: Future loadFuncTable( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); return storage?.loadFunctionTableWith(macAddress: macAddr); } 6.3 API Parameter Description: @param: macAddress (String) - MAC address of the device. @return: Returns a JSON-formatted string if successful, otherwise returns null. 7. Load specified device function table: ////TODO 7.1 Functionality: None. 7.2 API ID: Future loadFuncTable( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); return storage?.loadFunctionTableWith(macAddress: macAddr); } 7.3 API Parameter Description: @param: macAddress (String) - MAC address of the device. @return: Returns a JSON-formatted string if successful, otherwise returns null. ////TODO 8. Load specified device function table: ////TODO 8.1 Functionality: None. 8.2 API ID: Future loadFuncTableByDisk( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); final ft = await storage?.loadFunctionTableWith(macAddress: macAddr); logger?.d('loadFuncTableByDisk rs:$ft'); if (ft == null) return null; return BaseFunctionTable()..initFunTableModel(ft); } 8.3 API Parameter Description: @param: macAddress (String) - MAC address of the device. @return: . 9. Load specified device function table: ////TODO 9.1 Functionality: None. 9.2 API ID: Future loadFuncTableJsonByDisk( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); final ft = await storage?.loadFunctionTableWith(macAddress: macAddr); logger?.d('loadFuncTableByDisk rs:$ft'); if (ft == null) return null; return jsonEncode(ft.toJson()); } 9.3 API Parameter Description: @param: macAddress (String) - MAC address of the device. @return: . 10. Load specified device binding status: ////TODO 10.1 Functionality: None. 10.2 API ID: Future loadBindStatus({required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); final rs = await storage?.loadBindStatus(macAddress: macAddr); return Future(() => rs ?? false); } 10.3 API Parameter Description: @param: macAddress (String) - MAC address of the device. @return: The binding status of the specified MAC address. It returns a boolean value, true - bound, false - not bound. 11. Query information of the last connected device: ////TODO 11.1 Functionality: Provides the capability to query information about the last connected device, including OTA mode, device name, UUID (iOS), BT/MAC address, and last update time. 11.2 API ID: Future lastConnectDevice() async { final list = await storage?.loadDeviceExtListByDisk(); return Future(() => list?.first); } 11.3 API Parameter Description: @return: Information of the last connected device, including: ////TODO final String macAddress; // MAC address String? macAddressFull; // ? bool otaMode = false; // OTA mode? String uuid; // UUID (iOS) String deviceName; // Device name int updateTime; // Last update time in milliseconds String? macAddressBt; // BT address String formatTime(int millisecondsSince) { return DateTime.fromMicrosecondsSinceEpoch(millisecondsSince).toString(); } 12. Get list of connected devices: ////TODO 12.1 Functionality: Provides the capability to retrieve a list of connected devices, including OTA mode, device name, UUID (iOS), BT/MAC address, and last update time. 12.2 API ID: Future?> loadDeviceExtListByDisk( {bool sortDesc = true}) async { return storage?.loadDeviceExtListByDisk(sortDesc: sortDesc); } 12.3 API Parameter Description: @return: List of connected devices. Each device information in the list includes: ////TODO final String macAddress; // MAC address String? macAddressFull; // ? bool otaMode = false; // OTA mode? String uuid; // UUID (iOS) String deviceName; // Device name int updateTime; // Last update time in milliseconds String? macAddressBt; // BT address String formatTime(int millisecondsSince) { return DateTime.fromMicrosecondsSinceEpoch(millisecondsSince).toString(); } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDODeviceControlEvtIntroduction.html":{"url":"doc/IDODeviceControlEvtIntroduction.html","title":"IDO Device Notification/Control Event Description","keywords":"","body":"{IDO Device Notification / Control Event Model Description} 1. Function Overview Provides the ability to explain the members of the notification/control event model requested by the firmware. 2. Interface Capabilities 1. Data Update Request Type: 1.1 Function Summary: None. 1.2 API ID: final int? dataType; 1.3 API Parameter Description: @return: Data update request types, including: Decimal Value Description 0 Invalid 1 Bracelet has been unbound 2 Heart rate mode changed 3 Blood oxygen data generated and changed 4 Pressure data generated and changed 5 Alexa recognition process exited 6 Firmware initiates factory reset, notifying app with a popup reminder 7 App needs to enter the camera interface (TIT01 customization) 8 SOS event notification (205 Turkey customization) 9 Firmware has modified the alarm set in Alexa, and app needs to send the corresponding notification bit to the firmware. App sends a command to retrieve the V3 alarm clock 10 Firmware has deleted a schedule reminder, and app needs to update the corresponding list data 11 Firmware has modified the substyle of the corresponding watch face, notifying app to retrieve (command_id is 0x33, key is 0x5000) 12 Firmware notifies iOS to update notification icon and name 13 Firmware notifies app that the icon has been updated, and app needs to retrieve the updated icon status 14 Firmware requests weather update, app receives and sends weather data 15 Steps increase by 2000 steps each time, device requests app to synchronize data, app calls synchronization interface 16 Sleep detection finished, requests app to synchronize sleep data, app calls synchronization interface 17 Firmware modifies three-ring data, notifies app to update three-ring data 18 Charging completed, firmware sends a reminder, app displays device fully charged in the notification bar 19 After exercise ends, manual heart rate measurement, manual blood oxygen measurement, manual pressure measurement, device automatically requests synchronization. First check the connection status, if not connected, do not execute this synchronization. After meeting the conditions for the next automatic synchronization, check again and initiate synchronization request 20 Firmware modifies heart rate notification status type, pressure notification status type, blood oxygen notification status type, physiological cycle notification status type, health guidance notification status type, reminder notification status type, notifies app to update heart rate, pressure, blood oxygen, physiological cycle, health guidance, and reminder notification status type 21 Firmware completes pressure value calculation, notifies app to retrieve pressure value 22 Firmware notifies app, pressure calibration failed (firmware exits measurement interface / detection failed / detection timeout / not wearing) 23 Reserved 24 Firmware notifies app that BT Bluetooth is connected 25 Firmware notifies app that BT Bluetooth is disconnected 26 Firmware indicates the start of a BT call 27 Firmware indicates the end of a BT call 28 For new firmware version, sends a notification command every 4 minutes and 30 seconds to fix the issue of iOS showing offline 29 Notifies app that exercise has started (applies to intercepting watch face transmission with 26) 30 Notifies app that exercise has ended (applies to intercepting watch face transmission with 27) 31 Firmware restarts and sends a notification to app (app needs to retrieve firmware version information upon receiving the notification) 32 When the device is idle (not using Alexa), it needs to report a notification to app (interval is 1 hour) 33 Firmware completes space organization and notifies app to continue transmitting watch face files 34 Firmware notifies app to stop finding bracelet instruction (corresponding to 6.3 finding bracelet) 35 Firmware enters power-saving mode and notifies app 36 Firmware exits power-saving mode and notifies app 37 Firmware notifies app to send GPS hot start parameter settings (deprecated) 38 Firmware completes transmission of raw data and notifies app to retrieve feature vector information 39 Firmware notifies app, blood pressure calibration failed (firmware exits measurement interface / detection failed / detection timeout / not wearing) 40 Firmware completes transmission of raw data without feature vector information, notifies app that data collection has ended 41 Notification for completion of syncing V3 health data single item (used internally on Android) 42 Firmware completes organization of GPS data space and notifies app to transmit GPS file 43 Firmware fails to upgrade EPO.dat file, notifies app to resend the file 44 Firmware successfully upgrades EPO.dat file 45 Firmware fails to upgrade GPS, notifies app to retry transmission 46 Firmware successfully upgrades GPS 47 When starting exercise, firmware encounters GPS anomaly, notifies app 48 Firmware updates information of Runfan peripheral, notifies app to retrieve 49 Firmware notifies user to cancel BLE and watch pairing, app handles pop-up window 50 Firmware notifies app that BT pairing is completed 51 Firmware sets exercise sorting, notifies app to retrieve exercise sorting information 52 Firmware changes all-day step goal parameter, notifies app to retrieve all-day step goal (0208) 53 Firmware notifies app that it has entered blood pressure calibration interface 54 Firmware updates automatic recognition switch status, notifies app to retrieve exercise automatic recognition switch status (02EA) 55 Switches the firmware fast mode to the slow mode 56 Switches the firmware slow mode to fast mode 57 The firmware updates the mtu and the APP sends the mtu to obtain the local record of the mtu update (the local record cannot be updated if the mtu size is greater than 20Bytes) 58 Firmware battery changes. APP delivers the battery information 59 is currently in DFU mode (Sche platform) 60 Switch firmware unit and notify APP to obtain unit (0222) 61 Firmware modification menu list (shortcut list), notify APP to obtain (02A8) 62 firmware changes the local language, notifies the APP to get (0222) 2. Notification Type: 2.1 Function Summary: None. 2.2 API ID: final int? notifyType; 2.3 API Parameter Description: @return: notifyType notification request type, including: Value Description Bit 1 Alarm has been modified bit0 2 Firmware overheat exception alert bit1 4 Brightness parameter modified (02 b0) bit2 8 Wrist lift parameter modified (02 b1) bit3 16 Do Not Disturb mode retrieval (02 30) bit4 32 Mobile phone volume sent down (03 0xE3) (deleted), app volume modified, sent directly bit5 3. Message ID: 3.1 Function Overview: None. 3.2 API ID: final int? msgId; 3.3 API Parameter Description: @return: msgId, each message corresponds to an ID. 4. Custom SMS: 4.1 Function Overview: None. 4.2 API ID: final int? msgNotice; 4.3 API Parameter Description: @return: Custom message, including: Value Description 0 None 1 Custom SMS 1 (in a meeting, contact me later) 2 Custom SMS 2 3 Custom SMS 3 4 Custom SMS 4 5 Custom SMS 5 .. .. (continue to 10) 10 Custom SMS 10 5. Error State Index: 5.1 Function Overview: None. 5.2 API ID: final int? errorIndex; 5.3 API Parameter Description: @return: Error status, including: Value Error Type Note 0 No error 1 ACC Firmware error (1-100) 2 PPG 3 TP 4 FLASH 5 Overheating (PPG) 6 Air pressure 7 GPS 8 Magnetic field 100 Watchdog reset Reset log code (100-200) 101 Power-on reset 102 Software reset 103 OTA reset 104 User reset 105 Low-power shutdown 6. Control Events and Corresponding Event Return Values: 6.1 Function Overview: None. 6.2 API ID: final int? controlEvt; final String? controlJson; 6.3 API Parameter Description: @return: controlEvt BLE device control event number, controlJson event return value, including: Event Type Event Number (controlEvt) Event Return Value (controlJson) Device controls app music start 551 - Device controls app music pause 552 - Device controls app music stop 553 - Device controls app previous track 554 - Device controls app next track 555 - Device controls app single photo 556 - Device controls app burst photo 557 - Device controls app volume increase 558 - Device controls app volume decrease 559 - Device controls app open camera 560 - Device controls app close camera 561 - Device controls app answer call 562 - Device controls app reject call 563 - Device controls app music volume percentage 565 Jump to Description Device controls app find phone start 570 - Device controls app find phone end 571 - Device notifies app anti-loss start 572 - Device notifies app one-key call start 574 Jump to Description Device notifies app sensor data 575 - Device notifies app operation type 576 Jump to Description Device notifies app data update 577 - Device requests version check 578 Jump to Description Device requests OTA 579 Jump to Description Device notifies app SMS information 580 Jump to Description Device controls app camera 581 Jump to Description Device notifies firmware speaker volume modification 591 Jump to Description ////TODO Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-24 14:58:58 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlVolumePercentage.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlVolumePercentage.html","title":"Device control app music volume percentage","keywords":"","body":"Device Control App Music Volume Percentage JSON Field Received by App: Field Name Field Type Field Description volume_percentage int Volume percentage (0-100) Example: { \"volume_percentage\":22 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlOnekeySoSStart.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlOnekeySoSStart.html","title":"Device notify app one key SOS start","keywords":"","body":"Device Notification to Start One-Click Call in App JSON fields received by the App: Field Name Type Description status int Status: 0 for start, 1 for end timeout int Timeout duration in seconds Example: { \"status\": 0, \"timeout\": 30 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlOperate.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlOperate.html","title":"Device notify app operation type","keywords":"","body":"Device Notification to App for Operation Type JSON fields received by the App: Field Name Type Description timeout int Timeout duration in seconds type int Operation type: 1 for short press, 2 for long press, 3 for tap, 4 for double tap Example: { \"timeout\": 30, \"type\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlRequestCheckUpdate.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlRequestCheckUpdate.html","title":"Device request version check","keywords":"","body":"Device Requests Version Check JSON fields received by the App: Field Name Type Description JSON fields sent by the App: Field Name Type Description flag int 0: Already up to date, 1: New version available, 2: Network error, 3: Other error version int Protocol version Example: { \"flag\": 0, \"version\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlRequestStartOta.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlRequestStartOta.html","title":"Device request OTA","keywords":"","body":"Device Requests OTA JSON fields received by the App: Field Name Type Description JSON fields sent by the App: Field Name Type Description flag int 0: Request successful, 1: Error occurred Example: { \"flag\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlFastMsgUpdate.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlFastMsgUpdate.html","title":"Device notify app SMS information","keywords":"","body":"Active Notification of SMS to APP JSON fields sent by the App: Field Name Type Description is_success int 0 for failed message sending, 1 for successful send msg_ID int ID for the reply: each message has a corresponding ID msg_type int Type of the message msg_notice int 0 for no corresponding SMS reply, corresponding to the reply list Example: { \"is_success\": 0, \"msg_ID\": 1, \"msg_type\": 1, \"msg_notice\": 0 } JSON fields received by the App: Field Name Type Description msg_type int Type of the reply message: Incoming call SMS (1), QQ, WeChat msg_ID int ID for the reply: each message has a corresponding ID msg_notice int 0 for no corresponding SMS reply, corresponding to the reply list Example: { \"msg_ID\": 1, \"msg_type\": 1, \"msg_notice\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlPhotograph.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlPhotograph.html","title":"Device control app camera","keywords":"","body":"Control Camera in Device Control App JSON fields received by the App: Field Name Type Description type int 0: Open camera 1: Click to start capturing 2: Capture completed 3: Request system pairing Example: { \"type\": 0 } JSON fields sent by the App: Field Name Type Description type int 0: Open camera 1: Click to start capturing 2: Capture completed 3: Request system pairing Example: { \"type\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlSpeakerValue.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlSpeakerValue.html","title":"Device notify firmware speaker volume modification","keywords":"","body":"Device Notification Firmware Speaker Volume Modification (Alexa) JSON Field Received by App: Field Name Field Type Field Description value int Firmware volume value 0-100 Example: { \"value\":20 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOSetEvtIntroduction.html":{"url":"doc/IDOSetEvtIntroduction.html","title":"V2 Setting Instruction Event","keywords":"","body":"{V2 Setting Instruction Event} Function Set sedentary reminder Set display mode Set do not disturb mode Set find phone Set motion goal (set daily steps) Set left or right hand Set time Set user information Set one key SOS Set music switch Set anti-lost Add alarm Set sports mode Set watch dial Set shortcut Set blood pressure calibration Set stress calibration Set heart rate interval Set heart rate mode Set unit Set sleep period Set lift wrist to view Set blood pressure measurement Set screen brightness Set GPS information Set control GPS Set control connection parameters Set hot start parameters Set menstruation Set menstruation reminder Set calorie and distance goals Set blood oxygen switch Set pressure switch Set sports mode sorting Set walk reminder Set breath training Set activity switch Set drink water reminder Simple file operations Set menu list Set control camera Set notification center switch Set delete file Set phone volume sent to firmware Set hand washing reminder Set taking medicine reminder Set smart heart rate mode Set environment volume switch and threshold Set scientific sleep switch Set night temperature switch Set fitness guidance switch Set unread app reminder switch Set notification app status(Event alert notification type) Set respiration rate switch Set body battery switch Set weather switch Send phone's operating system set voice assistant switch Set weather data Set weather city name Set sunrise sunset time Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-10-09 17:37:36 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetLongSitReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetLongSitReminder.html","title":"Set Sedentary Reminder","keywords":"","body":"Set Sedentary Reminder Menu: setSedentariness Flutter Example: /// Set Long Sit Event setLongSit( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_long_sit), /// Set Long Sit libManager.send(evt: CmdEvtType.setLongSit, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description start_hour int Start Time of Sedentary Reminder (hour) start_minute int Start Time of Sedentary Reminder (minute) end_hour int End Time of Sedentary Reminder (hour) end_minute int End Time of Sedentary Reminder (minute) interval int Interval (in minutes) Value should be greater than 15 minutes repetitions int Repetitions and Switchbit0: 0 means off, 1 means on bit1-7: 0 means no repetition, 1 means repetition Example: { \"start_hour\": 15, \"start_minute\": 40, \"end_hour\": 23, \"end_minute\": 26, \"interval\": 15, \"repetitions\": 254 } JSON Field Received by the App: Field Name Field Type Field Description status_code int 0: Success, non-zero: Error code Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetDisplayMode.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetDisplayMode.html","title":"Set Display Mode","keywords":"","body":"Set Display Mode Menu: displayMode (SDK to be supplemented) Flutter Example: /// Display mode event number setDisplayMode( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_display_mode), /// Set display mode libManager.send(evt: CmdEvtType.setDisplayMode, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description mode int Mode 0: Default 1: Landscape 2: Portrait 3: Flipped (180 degrees) Example: { \"mode\": 0 } JSON fields received by the App: Field Name Field Type Field Description status_code int 0 for success, non-zero for failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetDoNotDisturb.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetDoNotDisturb.html","title":"Set Do Not Disturb Mode","keywords":"","body":"Set Do Not Disturb Mode Menu: setDoNotDisturb [disturbHaveRangRepeat (SDK to be supplemented), setOnlyNoDisturbAllDayOnOff, setOnlyNoDisturbSmartOnOff] Flutter Example: /// Do not disturb mode event number setDoNotDisturb( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_do_not_disturb), /// Set do not disturb mode libManager.send(evt: CmdEvtType.setDoNotDisturb, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description switch_flag int switch 1: On0: Off start_hour int Start time Hour start_minute int Start time Minute end_hour int End time Hour end_minute int End time Minute have_time_range int Whether there is a time range 0: Invalid 1: No time range 2: Has time rangeMenudisturbHaveRangRepeat is available when opened week_repeat int reserve noontime_rest_on_off int Daytime do not disturb switch 1: On0: Off noontime_rest_start_hour int Start time Hour noontime_rest_start_minute int Start time Minute noontime_rest_end_hour int End time Hour noontime_rest_end_minute int End time Minute all_day_on_off int All-day do not disturb 1: On0: OffMenusetOnlyNoDisturbAllDayOnOff is available when opened intelligent_on_off int Intelligent do not disturb switch 1: On0: OffMenusetOnlyNoDisturbSmartOnOff is available when opened Example: { \"switch_flag\":1, \"start_hour\":15, \"start_minute\":23, \"end_hour\":23, \"end_minute\":30, \"have_time_range\":2, \"week_repeat\":127, \"noontime_rest_on_off\":1, \"noontime_rest_start_hour\":9, \"noontime_rest_start_minute\":0, \"noontime_rest_end_hour\":12, \"noontime_rest_end_minute\":0, \"all_day_on_off\":0, \"intelligent_on_off\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-19 17:03:09 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetFindPhone.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetFindPhone.html","title":"Set Find Phone","keywords":"","body":"Set Find Phone Menu: getFindPhone Flutter Example: /// Set Find Phone setFindPhone( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_find_phone), /// Set Do Not Disturb Mode libManager.send(evt: CmdEvtType.setNotDisturb, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int 1: Turn on,0: Turn off Example: { \"on_off\": 1 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0: Success, non-zero: Error Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSportGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSportGoal.html","title":"Set Sport Goal","keywords":"","body":"Set Exercise Goal Menu: [supportWalkGoalSteps (to be filled by SDK), v2SupportSetStepDataType (to be filled by SDK)] Flutter Example: /// Set exercise goal event setSportGoal( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sport_goal), /// Set exercise goal libManager.send(evt: CmdEvtType.setSportGoal, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description sport_step int Number of steps for the exercise goal walk_goal_steps int Walk goal steps per hour setting target_type int Target type setting0: Invalid1: Daily Goal 2: Weekly GoalRequires support from the menu Example: { \"sport_step\": 2000, \"walk_goal_steps\": 15, \"target_type\": 2 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0 for success, non-zero for failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHand.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHand.html","title":"Set Hand Orientation","keywords":"","body":"Set Left/Right Hand Menu: ////TODO (No corresponding menu found) Flutter Example: /// Set Left/Right Hand Event setHand( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_hand), /// Set Left/Right Hand libManager.send(evt: CmdEvtType.setHand, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description hand int 0: Left Hand1: Right Hand Example: { \"hand\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTime.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTime.html","title":"Set Time","keywords":"","body":"Set Time Flutter Example: /// Set Time setTime( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_time), /// Set Time libManager.send(evt: CmdEvtType.setTime, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description year int Year month int Month day int Day hour int Hour minute int Minute second int Second week int Week: 0-6 for Monday to Sunday time_zone int Timezone in a 24-hour format: 0-12 for East13-24 for West Example: { \"year\": 2022, \"month\": 12, \"day\": 16, \"hour\": 17, \"minute\": 49, \"second\": 46, \"week\": 5, \"time_zone\": 8 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUserInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUserInfo.html","title":"Set User Information","keywords":"","body":"Set User Information Flutter Example: /// Set user information event number setUserInfo( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_user_info), /// Set user information libManager.send(evt: CmdEvtType.setUserInfo, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description year int Birth year month int Birth month day int Birth day height int Height in centimeters weight int Weight in kilograms,requires x100 gender int Gender1: Female0: Male Example: { \"year\": 2022, \"month\": 12, \"day\": 16, \"height\": 173, \"weight\": 7400, \"gender\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-10-18 16:53:26 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOOneKeySOS.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOOneKeySOS.html","title":"Set One-Key SOS","keywords":"","body":"Set One-touch Calling Function: onetouchCalling (SDK to be provided) Flutter Example: /// Set the one-touch calling event number setOnekeySOS( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_onekey_sos), /// Set one-touch calling libManager.send(evt: CmdEvtType.setOnekeySOS, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description on_off bool Switch: 1 - On0 - Off phone_type int 0: Invalid1: Doro phone2: Non-Doro phone Example: { \"on_off\": 1, \"phone_type\": 0 } JSON fields received by the App: Field Name Field Type Field Description status_code int 0: Success, Non-zero: Failure Example: { \"status_code\": 0 } The above Chinese text has been translated into English. Other structures should not be changed. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMusicONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMusicONOFF.html","title":"Set Music Switch","keywords":"","body":"Set Music On/Off Menu: setBleControlMusic [supportV2SetShowMusicInfoSwitch] Flutter Example: /// Set Music On/Off Event setMusicOnOff( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_muisc_onoff), /// Set Music On/Off libManager.send(evt: CmdEvtType.setMusicOnOff, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int 1: On0: Off show_info_status int Show song information switch1: On0: OffRequires firmware support for menu: supportV2SetShowMusicInfoSwitch Example: { \"on_off\": 1, \"show_info_status\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0: Success, non-zero: Failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-12 11:44:16 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetLostFind.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetLostFind.html","title":"Set Lost Find","keywords":"","body":"Set Anti-Lost Mode Menu: antilost (SDK to be supplied) Flutter Example: /// Set Lost Find Event setLostFind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_lost_find), /// Set Lost Find libManager.send(evt: CmdEvtType.setLostFind, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int Mode0: No anti-lost1: Close-range anti-lost2: Medium-range anti-lost3: Long-range anti-lost Example: { \"mode\": 0 } JSON Field Received by the App: Field Name Field Type Field Description status_code int 0: Success, non-zero: Error code Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetAlarm.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetAlarm.html","title":"Add Alarm","keywords":"","body":"Add Alarm Function: setAddAlarm [v3AddAlarm (to be provided), add_alarm_to_clibrary (C library jsonid SDK to be provided)] Flutter Example: /// Set alarm event number setAddAlarm( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_add_alarm), /// Set alarm libManager.send(evt: CmdEvtType.setAddAlarm, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description alarm_num int Number of alarms alarm_items array Collection of details of each alarm (alarm_id, alarm_type, alarm_hour, alarm_minute, alarm_status, tsnooze_duration, repeat) Field Name Field Type Field Description alarm_id int Alarm ID (fixed from 1 to the maximum number of alarms) alarm_type int Type:0: Wake up1: Sleep2: Exercise3: Medication4: Appointment5: Gathering6: Meeting7: Other8: Meal9: Brushing teeth10: Rest11: Class12: Bathing13: Study14: Playtime alarm_hour int Alarm hour (24-hour format) alarm_minute int Alarm minute (24-hour format) alarm_status int Status:1: Display0: Don't display tsnooze_duration int Snooze duration0 means no snooze, 0-60 minutes repeat int Repeat and switch:bit0: Overall switch (0: Off, 1: On)bit1-7: Each bit corresponds to Monday to Sunday (1: Repeat reminder, 0: No repeat reminder) Example: { \"alarm_num\": 10, \"alarm_items\": [ { \"alarm_id\": 1, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 1, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 2, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 0, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 3, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 0, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 4, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 0, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 5, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 0, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 6, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 0, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 7, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 0, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 8, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 0, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 9, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 0, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 10, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 0, \"tsnooze_duration\": 5, \"repeat\": 285 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-19 15:46:12 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSportMode.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSportMode.html","title":"Set Sport Mode","keywords":"","body":"Set Sport Mode Flutter Example: /// Set sport mode select event number setSportModeSelect( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sport_mode_select), /// Set sport mode select libManager.send(evt: CmdEvtType.setSportModeSelect, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description flag int 0: Invalid1: Set quick sport type - sport_type1 & sport_type2 & sport_type3 & sport_type42: Set specific sport type sport_type1 int Quick sport type 1flag: 1 is valid sport_type2 int Quick sport type 2flag: 1 is valid sport_type3 int Quick sport type 3flag: 1 is valid sport_type4 int Quick sport type 4flag: 1 is valid sport_type0_walk bool Type: Walking, 0 not supported, 1 supportedflag: 2 is valid sport_type0_run bool Type: Running, 0 not supported, 1 supportedflag: 2 is valid sport_type0_by_bike bool Type: Cycling, 0 not supported, 1 supportedflag: 2 is valid sport_type0_on_foot bool Type: Walking (on foot), 0 not supported, 1 supportedflag: 2 is valid sport_type0_swim bool Type: Swimming, 0 not supported, 1 supportedflag: 2 is valid sport_type0_mountain_climbing bool Type: Mountain climbing, 0 not supported, 1 supportedflag: 2 is valid sport_type0_badminton bool Type: Badminton, 0 not supported, 1 supportedflag: 2 is valid sport_type0_other bool Type: Other, 0 not supported, 1 supportedflag: 2 is valid sport_type1_fitness bool Type: Fitness, 0 not supported, 1 supportedflag: 2 is valid sport_type1_spinning bool Type: Spinning, 0 not supported, 1 supportedflag: 2 is valid sport_type1_ellipsoid bool Type: Ellipsoid, 0 not supported, 1 supportedflag: 2 is valid sport_type1_treadmill bool Type: Treadmill, 0 not supported, 1 supportedflag: 2 is valid sport_type1_sit_up bool Type: Sit-ups, 0 not supported, 1 supportedflag: 2 is valid sport_type1_push_up bool Type: Push-ups, 0 not supported, 1 supportedflag: 2 is valid sport_type1_dumbbell bool Type: Dumbbell, 0 not supported, 1 supportedflag: 2 is valid sport_type1_weightlifting bool Type: Weightlifting, 0 not supported, 1 supportedflag: 2 is valid sport_type2_bodybuilding_exercise bool Type: Bodybuilding exercise, 0 not supported, 1 supportedflag: 2 is valid sport_type2_yoga bool Type: Yoga, 0 not supported, 1 supportedflag: 2 is valid sport_type2_rope_skipping bool Type: Rope skipping, 0 not supported, 1 supportedflag: 2 is valid sport_type2_table_tennis bool Type: Table tennis, 0 not supported, 1 supportedflag: 2 is valid sport_type2_basketball bool Type: Basketball, 0 not supported, 1 supportedflag: 2 is valid sport_type2_football bool Type: Football, 0 not supported, 1 supportedflag: 2 is valid sport_type2_volleyball bool Type: Volleyball, 0 not supported, 1 supportedflag: 2 is valid sport_type2_tennis bool Type: Tennis, 0 not supported, 1 supportedflag: 2 is valid sport_type3_golf bool Type: Golf, 0 not supported, 1 supportedflag: 2 is valid sport_type3_baseball bool Type: Baseball, 0 not supported, 1 supportedflag: 2 is valid sport_type3_skiing bool Type: Skiing, 0 not supported, 1 supportedflag: 2 is valid sport_type3_roller_skating bool Type: Roller skating, 0 not supported, 1 supportedflag: 2 is valid sport_type3_dance bool Type: Dance, 0 not supported, 1 supportedflag: 2 is valid sport_type3_strength_training bool Type: Strength training, 0 not supported, 1 supportedflag: 2 is valid sport_type3_core_training bool Type: Core training, 0 not supported, 1 supportedflag: 2 is valid sport_type3_tidy_up_relax bool Type: Tidy up and relax, 0 not supported, 1 supportedflag: 2 is valid Example: { \"flag\": 2, \"sport_type1\": 0, \"sport_type2\": 0, \"sport_type3\": 0, \"sport_type4\": 0, \"sport_type0_walk\": 1, \"sport_type0_run\": 1, \"sport_type0_by_bike\": 1, \"sport_type0_on_foot\": 1, \"sport_type0_swim\": 1, \"sport_type0_mountain_climbing\": 1, \"sport_type0_badminton\": 1, \"sport_type0_other\": 1, \"sport_type1_fitness\": 1, \"sport_type1_spinning\": 1, \"sport_type1_ellipsoid\": 1, \"sport_type1_treadmill\": 1, \"sport_type1_sit_up\": 1, \"sport_type1_push_up\": 1, \"sport_type1_dumbbell\": 1, \"sport_type1_weightlifting\": 1, \"sport_type2_bodybuilding_exercise\": 1, \"sport_type2_yoga\": 1, \"sport_type2_rope_skipping\": 1, \"sport_type2_table_tennis\": 1, \"sport_type2_basketball\": 1, \"sport_type2_football\": 1, \"sport_type2_volleyball\": 1, \"sport_type2_tennis\": 1, \"sport_type3_golf\": 1, \"sport_type3_baseball\": 1, \"sport_type3_skiing\": 1, \"sport_type3_roller_skating\": 1, \"sport_type3_dance\": 1, \"sport_type3_strength_training\": 1, \"sport_type3_core_training\": 1, \"sport_type3_tidy_up_relax\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0: Success, non-zero: Failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWatchDial.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWatchDial.html","title":"Set Watch Dial","keywords":"","body":"Set Watch Face Function: WatchDial Flutter Example: /// Set watch face event number setWatchDial( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_watch_dial), /// Set watch face libManager.send(evt: CmdEvtType.setWatchDial, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description dial_id int ID of the watch face to be setDial id0 invalid,currently supports1~4 Example: { \"dial_id\": 1 } JSON Fields Received by the App: Field Name Field Type Field Description ret_code int 0 for success, non-zero for failure Example: { \"ret_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-12 16:02:34 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetShortcut.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetShortcut.html","title":"Set Shortcut","keywords":"","body":"Set Shortcut Flutter Example: /// Set shortcut setShortcut( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_shortcut), /// Set shortcut libManager.send(evt: CmdEvtType.setShortcut, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int Function of Shortcut 10: Invalid1: Quick access to camera control2: Quick access to motion mode3: Quick access to do not disturb Example: { \"mode\": 2 } JSON Fields Received by the App: Field Name Field Type Field Description ret_code int 0 for success, non-zero for failure Example: { \"ret_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBpCal.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBpCal.html","title":"Set Blood Pressure Calibration","keywords":"","body":"v2 Blood Pressure Calibration Function: getSupportBpSetOrMeasurementV2 Flutter Example: /// Blood pressure calibration event number setBpCalibration( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_bp_cal), /// Blood pressure calibration libManager.send(evt: CmdEvtType.setBpCalibration, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description flag int 1: Blood pressure calibration settings2: Blood pressure calibration query result diastolic int Systolic pressure systolic int Diastolic pressure Example: { \"flag\": 2, \"diastolic\": 0, \"systolic\": 0 } JSON fields received by the App: Field Name Field Type Field Description ret_code int 0: Success1: Successfully entered calibration mode, calibration in progress2: In exercise mode3: Device busy4: Invalid status Example: { \"ret_code\": 4 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetStressCal.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetStressCal.html","title":"Set Stress Calibration","keywords":"","body":"Set Stress Calibration Menu: setSetStressCalibration Flutter Example: /// Set Stress Calibration Event Code setStressCalibration( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_stress_cal), /// Set Stress Calibration libManager.send(evt: CmdEvtType.setStressCalibration, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description stress_score int Stress score, ranging from 1 to 10 status int 0: Start calibration setting1: Cancel calibration setting Example: { \"stress_score\": 6, \"status\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description ret_code int 0: Success1: Failed - Calibration in progress2: Failed - Charging3: Failed - Not wearing4: Failed - In a sports scene Example: { \"ret_code\": 3 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHRInterval.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHRInterval.html","title":"Set Heart Rate Interval","keywords":"","body":"Setting Heart Rate Interval Flutter example: /// Set heart rate interval event ID setHeartRateInterval( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_heart_rate_interval), /// Set heart rate interval libManager.send(evt: CmdEvtType.setHeartRateInterval, json: jsonEncode(json)); JSON fields issued by the App: Field Name Field Type Field Description burn_fat_threshold int Fat burning heart rate zoneCalculation: 50%-69% of max heart rateUnit: bpm aerobic_threshold int Aerobic training heart rate zoneCalculation: 70%-84% of max heart rateUnit: bpm limit_threshold int Peak training heart rate zoneCalculation: 85%-100% of max heart rateUnit: bpm user_max_hr int Maximum heart rate reminderUnit: bpm range1 int Warm-up exercise heart rate zoneCalculation: (200-age) * 50Unit: bpm range2 int Fat burning exercise heart rate zoneCalculation: (200-age) * 60Unit: bpm range3 int Aerobic exercise heart rate zoneCalculation: (200-age) * 70Unit: bpm range4 int Anaerobic exercise heart rate zoneCalculation: (200-age) * 80Unit: bpm range5 int Maximum effort exercise heart rate zoneCalculation: (200-age) * 90Unit: bpm min_hr int Minimum heart rateUnit: bpm max_hr_remind int Maximum heart rate reminder0: Off, 1: On min_hr_remind int Minimum heart rate reminder0: Off, 1: On remind_start_hour int Reminder start hour remind_start_minute int Reminder start minute remind_stop_hour int Reminder stop hour remind_stop_minute int Reminder stop minute Example: { \"burn_fat_threshold\": 113, \"aerobic_threshold\": 132, \"limit_threshold\": 170, \"user_max_hr\": 220, \"range1\": 94, \"range2\": 113, \"range3\": 132, \"range4\": 151, \"range5\": 170, \"min_hr\": 20, \"max_hr_remind\": 1, \"min_hr_remind\": 0, \"remind_start_hour\": 0, \"remind_start_minute\": 0, \"remind_stop_hour\": 23, \"remind_stop_minute\": 59 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-12 15:44:19 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHRMode.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHRMode.html","title":"Set Heart Rate Mode","keywords":"","body":"Set Heart Rate Mode Menu: syncHeartRateMonitor [exTableMain7HeartRateInterval] Flutter Example: /// Set Heart Rate Mode Event setHeartRateMode( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_heart_rate_mode), /// Set Heart Rate Mode libManager.send(evt: CmdEvtType.setHeartRateMode, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int 0: Off1: Auto(5min)2: Continuous Monitoring(5sec)3: Manual Mode has_time_range int Time Range0: No1: Yes start_hour int Start Hour (24-hour format, 0-23) start_minute int Start Minute (0-59) end_hour int End Hour end_minute int End Minute measurement_interval int Measurement IntervalUnit: minute Example: { \"mode\": 3, \"has_time_range\": 1, \"start_hour\": 10, \"start_minute\": 30, \"end_hour\": 20, \"end_minute\": 30, \"measurement_interval\": 15 } JSON Field Received by the App: Field Name Field Type Field Description status_code int 0: Success, non-zero: Failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-12 16:00:50 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUint.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUint.html","title":"Set Unit","keywords":"","body":"Set Units Function list: [setSupportFahrenheit, setSupportCalorieUnit, setSupportSwimPoolUnit, setSupportCyclingUnit, setSupportWalkRunUnit] Flutter Example: /// Set Unit event number setUnit( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_unit), /// Set Unit libManager.send(evt: CmdEvtType.setUnit, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description dist_unit int Distance Unit:0: Invalid1: km (metric)2: mi (imperial) weight_unit int Weight Unit:0: Invalid1: kg2: lb temp int Temperature Unit:0: Invalid1: ℃2: ℉ stride int Walking Stride:0: Invalid0: cm language int LanguageRefer to Language code List is_12hour_format int Time Format:0: Invalid1: 24-hour format2: 12-hour format stride_run int Running Stride:0: Invalid1: cmDefault value for males: 90cm stride_gps_cal int Stride Calibration via GPS on/off:0: Invalid1: On2: Off week_start_date int Start day of the week:0: Monday1: Sunday3: Saturday calorie_unit int Calorie unit setting:0: Invalid1: Default kCal2: Cal3: kJ swim_pool_unit int Swim pool unit setting:0: Invalid1: Default meters2: yards cycling_unit int Cycling unit:0: Invalid1: km2: miles walking_running_unit int Unit for walking or running (km/miles) setting:0: Invalid1: km2: milesRequires support from the device firmware (V3_support_walking_running_unit) Language code List code language function table id -1 is not valid - 1 Chinese languageCh 2 English languageEnglish 3 French languageFrench 4 German languageGerman 5 Italian languageItalian 6 Spanish languageSpanish 7 Japanese languageJapanese 8 Polish languagePolish 9 Czech languageCzech 10 Romanian languageRomanian 11 Lithuanian languageLithuanian 12 Dutch languageDutch 13 Slovenian languageSlovenian 14 Hungarian languageHungarian 15 Russian languageRussian 16 Ukrainian languageUkrainian 17 Slovak languageSlovak 18 Danish languageDanish 19 Croatian languageCroatian 20 Indonesian languageIndonesian 21 Korean languageKorean 22 Hindi languageHindi 23 Portuguese languagePortuguese 24 Turkish languageTurkish 25 Thai languageThai 26 Vietnamese languageVietnamese 27 Burmese languageBurmese 28 Filipino languageFilipino 29 Traditional Chinese languageTraditionalChinese 30 Greek languageGreek 31 Arabic languageArabic 32 Swedish languageSweden 33 Finland languageFinland 34 Persia languagePersia 35 Norwegian languageNorwegian 36 Malay languageMalay 37 Brazilian Portuguese languageBrazilianPortuguese 38 Bengali languageBengali 39 Khmer languageKhmer Example: { \"dist_unit\": 1, \"weight_unit\": 1, \"temp\": 1, \"stride\": 1, \"language\": 1, \"is_12hour_format\": 1, \"stride_run\": 1, \"stride_gps_cal\": 1, \"week_start_date\": 1, \"calorie_unit\": 1, \"swim_pool_unit\": 1, \"cycling_unit\": 1, \"walking_running_unit\": 1 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0: Success, Non-zero: Failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-24 15:22:43 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSleepPeriod.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSleepPeriod.html","title":"Set Sleep Period","keywords":"","body":"Set Sleep Period Menu: exSleepPeriod Flutter Example: /// Set sleep period event setSleepPeriod( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sleep_period), /// Set sleep period libManager.send(evt: CmdEvtType.setSleepPeriod, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int Switch1 On0 Off start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) Example: { \"on_off\": 1, \"start_hour\": 23, \"start_minute\": 0, \"end_hour\": 8, \"end_minute\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0 for success, non-zero for failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUpHandGesture.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUpHandGesture.html","title":"Set Up Hand Gesture","keywords":"","body":"Set Raise-to-Wake Gesture Function list: setUpHandGesture Flutter Example: /// Raise-to-wake gesture event number setUpHandGesture( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_up_hand_gesture), /// Set Raise-to-wake gesture libManager.send(evt: CmdEvtType.setUpHandGesture, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int Switch1: On0: Off show_second int Duration for the screen to stay on, in seconds has_time_range int Whether there is a time range1: Yes0: No start_hour int Starting hour of the time range start_minute int Starting minute of the time range end_hour int Ending hour of the time range end_minute int Ending minute of the time range Example: { \"on_off\": 1, \"show_second\": 10, \"has_time_range\": 1, \"start_hour\": 8, \"start_minute\": 0, \"end_hour\": 18, \"end_minute\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0: Success, Non-zero: Failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBpMeasure.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBpMeasure.html","title":"Set Blood Pressure Measurement","keywords":"","body":"Set Blood Pressure Measurement Function: getSupportBpSetOrMeasurementV2 Flutter Example: /// Blood pressure measurement event number setBpMeasurement( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_bp_measure), /// Blood pressure measurement libManager.send(evt: CmdEvtType.setBpMeasurement, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description flag int 1: Start measurement2: End measurement3: Get blood pressure data Example: { \"flag\": 1 } JSON fields received by the App: Field Name Field Type Field Description status int 0: Not supported1: Measurement in progress2: Measurement successful3: Measurement failed4: Device in exercise mode systolic_bp int Systolic blood pressure diastolic_bp int Diastolic blood pressure Example: { \"status\": 2, \"systolic_bp\": 120, \"diastolic_bp\": 68 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetScreenBrightness.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetScreenBrightness.html","title":"Set Screen Brightness","keywords":"","body":"Set Screen Brightness Menu: setScreenBrightness 【v2SupportSetBrightScreenTime，v2SupportAdjustNightTurnOnAfterSunset，v2SupportAddNightLevel，nightAutoBrightness】 Flutter Example: /// Screen brightness setting event setScreenBrightness( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_screen_brightness), /// Set screen brightness libManager.send(evt: CmdEvtType.setScreenBrightness, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description level int Brightness level0-100 opera int 0: Auto-sync configuration1: User manual adjustment mode int 0: Specify level1: Use ambient light sensor2: level does not take effect auto_adjust_night int Nighttime auto brightness adjustment0: Invalid, defined by firmware1: Off2: Auto adjust brightness at night3: Nighttime brightness decrease, using the set timeavailable when thenightAutoBrightnessmenu is opened start_hour int Start time - houravailable when thev2SupportSetBrightScreenTimemenu is opened start_minute int Start time - minuteavailable when thev2SupportSetBrightScreenTimemenu is opened end_hour int End time - houravailable when thev2SupportSetBrightScreenTimemenu is opened end_minute int End time - minuteavailable when thev2SupportSetBrightScreenTimemenu is opened night_level int Nighttime brightness0-100available when thev2SupportAddNightLevelmenu is opened show_interval int Display intervalvalue 0 is invalidUnit: second Example: { \"level\": 20, \"opera\": 0, \"mode\": 0, \"auto_adjust_night\": 3, \"start_hour\": 18, \"start_minute\": 0, \"end_hour\": 23, \"end_minute\": 0, \"night_level\": 20, \"show_interval\": 5 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-12 16:26:30 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetConfigGPS.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetConfigGPS.html","title":"Set GPS Information","keywords":"","body":"Set GPS Information Flutter Example: /// Set temperature switch event number setTemperatureSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_temperature_switch), /// Set temperature switch libManager.send(evt: CmdEvtType.setTemperatureSwitch, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description utc_year int Year utc_month int Month utc_day int Day utc_hour int Hour utc_minute int Minute utc_second int Second start_mode int Start mode 1: Cold start 2: Hot start Default 2 gsop_operation_mode int Operation mode 1: Normal 2: Low power 4: Balance 5: 1PPS Default 1 gsop_cycle_ms int Position cycle in milliseconds Default 1000 (1 second) gns_value int Positioning satellite mode 1: GPS 2: GLONASS 3: GPS + GLONASS Default 1 Example: { \"utc_year\": 2022, \"utc_month\": 12, \"utc_day\": 19, \"utc_hour\": 16, \"utc_minute\": 18, \"utc_second\": 30, \"start_mode\": 2, \"gsop_operation_mode\": 1, \"gsop_cycle_ms\": 1000, \"gns_value\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetControlGPS.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetControlGPS.html","title":"Set Control GPS","keywords":"","body":"Set Control GPS Flutter Example: /// Control GPS event number setGpsControl( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_control_gps), /// Set control GPS libManager.send(evt: CmdEvtType.setGpsControl, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description operate int 1: Control 2: Query type int 1: Enable log 2: Disable log 3: Write AGPS data 4: Erase AGPS data 5: Write GPS firmware Example: { \"operate\": 2, \"type\": 0 } JSON fields received by the App: Field Name Field Type Field Description type int 1: Enable log 2: Disable log 3: Write AGPS data 4: Erase AGPS data 5: Write GPS firmware status int 0: Invalid 1: Command in progress 2: Completed error_code int 0 for success, non-zero for failure Example: { \"type\": 2, \"status\": 0, \"error_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetConnectParam.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetConnectParam.html","title":"Set Control Connection Parameters","keywords":"","body":"Set Control Connection Parameters Flutter Example: /// Control connection parameters event number setConnParam( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_conn_param), /// Set control connection parameters libManager.send(evt: CmdEvtType.setConnParam, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description mode int 1: Control 2: Query modify_conn_param int 1: Enable log 2: Disable log 3: Write AGPS data 4: Erase AGPS data 5: Write GPS firmware max_interval int Maximum intervalUnit:second min_interval int Minimum intervalUnit:second slave_latency int Device latency0-499 packetsNumber of packets that the device does not respond to the app conn_timeout int Connection timeout timeUnit:second Example: { \"mode\": 2, \"modify_conn_param\": 0, \"max_interval\": 0, \"min_interval\": 0, \"slave_latency\": 0, \"conn_timeout\": 0 } JSON fields received by the App: Field Name Field Type Field Description cur_mode int Current mode 1: Set fast mode 2: Set slow mode err_code int 0 for success, non-zero for failure Example: { \"cur_mode\": 2, \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-12 20:36:04 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHotStartParam.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHotStartParam.html","title":"Set Hot Start Parameters","keywords":"","body":"Set Hot Start Parameters Flutter Example: /// Set Hot Start Parameters Event setHotStartParam( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_hot_start_param), /// Set Hot Start Parameters libManager.send(evt: CmdEvtType.setHotStartParam, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description longitude int Crystal oscillator offset latitude int Longitude Multiply by 1,000,000 and then transmit altitude int LatitudeMultiply by 1,000,000 and then transmit tcxo_offset int Height Multiply by 10 and then transmit Example: { \"longitude\": 2, \"latitude\": 0, \"altitude\": 0, \"tcxo_offset\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-12 17:09:01 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMenstruation.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMenstruation.html","title":"Set Menstruation","keywords":"","body":"Set Menstruation Function: setMenstruation [getMenstrualAddNotifyFlagV3, support_set_menstrual_reminder_on_off (to be supplemented by SDK)] Flutter Example: /// Set menstruation event number setMenstruation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_menstruation), /// Set menstruation libManager.send(evt: CmdEvtType.setMenstruation, json: jsonEncode(json)); JSON fields issued by the app: Field Name Field Type Field Description on_off int Menstruation switch 1: On0: Off menstrual_length int Length of the menstrual period menstrual_cycle int Menstrual cycle last_menstrual_year int Year of the recent menstrual start time last_menstrual_month int Month of the recent menstrual start time last_menstrual_day int Day of the recent menstrual start time ovulation_interval_day int The interval from the next menstrual period to the ovulation day, usually 14 days ovulation_before_day int The number of days before the ovulation day in the fertility period, usually 5 ovulation_after_day int The number of days after the ovulation day in the fertility period, usually 5 notify_flag int Notification type 0: Invalid 1: Allow notifications 2: Silent notifications 3: Turn off notifications Requires firmware support for V3_menstrual_add_notify_flag menstrual_reminder_on_off int Menstruation reminder switch 1: On0: Off Requires firmware support for support_set_menstrual_reminder_on_off When this switch is invalid, the reminder is enabled by default. Example: { \"on_off\": 1, \"menstrual_length\": 7, \"menstrual_cycle\": 21, \"last_menstrual_year\": 2022, \"last_menstrual_month\": 12, \"last_menstrual_day\": 19, \"ovulation_interval_day\": 15, \"ovulation_before_day\": 5, \"ovulation_after_day\": 5, \"notify_flag\": 1, \"menstrual_reminder_on_off\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMenstruationRemind.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMenstruationRemind.html","title":"Set Menstruation Reminder","keywords":"","body":"Set Menstrual Reminder Menu: setMenstruation [setMenstrualAddPregnancy, not_support_set_ovulation (SDK to be supplied)] Flutter Example: /// Set Menstrual Reminder Event setMenstruationRemind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_menstruation_remind), /// Set Menstrual Reminder libManager.send(evt: CmdEvtType.setMenstruationRemind, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description start_day int Number of days before start day to send reminder ovulation_day int Number of days before ovulation day to send reminder hour int Reminder time, hour minute int Reminder time, minute pregnancy_day_before_remind int Number of days before the start of the fertile period to send reminder pregnancy_day_end_remind int Number of days before the end of the fertile period to send reminder menstrual_day_end_remind int Number of days before the end of the menstrual period to send reminder Example: { \"start_day\": 5, \"ovulation_day\": 5, \"hour\": 21, \"minute\": 0, \"pregnancy_day_before_remind\": 5, \"pregnancy_day_end_remind\": 5, \"menstrual_day_end_remind\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetCalorieDistanceGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetCalorieDistanceGoal.html","title":"Set Calorie and Distance Goal","keywords":"","body":"Set Calorie and Distance Goal (Set Daily Three Rings) Function: setCalorieGoal, exMain3DistanceGoal (to be supplemented in SDK), set_mid_high_time_goal_03_43 (to be supplemented in C library JSON ID), getSupportGetMainSportGoalV3, getSupportSetGetTimeGoalTypeV2 Flutter Example: /// Set daily three rings goal event number setCalorieDistanceGoal( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_calorie_distance_goal), /// Set daily three rings goal libManager.send(evt: CmdEvtType.setCalorieDistanceGoal, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description calorie int Activity calorie goal Unit: calories distance int Distance Unit: meters calorie_min int Minimum activity calorie value Unit: calories calorie_max int Maximum activity calorie value Unit: calories mid_high_time_goal int Mid to high-intensity exercise duration goal Unit: seconds walk_goal_time int Goal timeUnit: seconds time_goal_type int Goal type 0: Invalid 1: Daily goal 2: Weekly goal Example: { \"calorie\": 500, \"distance\": 200, \"calorie_min\": 100, \"calorie_max\": 666, \"mid_high_time_goal\": 600, \"walk_goal_time\": 600, \"time_goal_type\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-12 17:16:36 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSp02Data.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSp02Data.html","title":"Set Blood Oxygen Switch","keywords":"","body":"Set SpO2 Switch Menu: setSpo2Data [setSpo2AllDayOnOff, v3SupportSetSpo2LowValueRemind (to be filled by SDK), getSpo2NotifyFlag] Flutter Example: /// Set SpO2 switch event setSpo2Switch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_spo2), /// Set SpO2 switch libManager.send(evt: CmdEvtType.setSpo2Switch, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int SpO2 all-day switch1 On0 Off start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) low_spo2_on_off int Low SpO2 switch1 On0 OffRequires support from the menu v3_support_set_spo2_low_value_remind low_spo2_value int Low SpO2 thresholdRequires support from the menu v3_support_set_spo2_low_value_remind notify_flag int Notification type0: Invalid1: Allow notifications2: Silent notifications3: Disable notificationsRequires support from the menu v3_spo2_add_notify_flag Example: { \"on_off\": 1, \"start_hour\": 14, \"start_minute\": 0, \"end_hour\": 20, \"end_minute\": 0, \"low_spo2_on_off\": 1, \"low_spo2_value\": 20, \"notify_flag\": 1 } JSON Fields Received by the App: Field Name Field Type Field Description err_code int 0 for success, non-zero for error code Example: { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetPressure.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetPressure.html","title":"Set Pressure Switch","keywords":"","body":"Set Pressure Switch Menu: setPressureData [getPressureNotifyFlagMode, v2SendCalibrationThreshold (SDK to be supplemented)] Flutter Example: /// Pressure switch setting event setStressSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_pressure), /// Set pressure switch libManager.send(evt: CmdEvtType.setStressSwitch, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int Overall switch1: On0: Off start_hour int Start time - hour start_minute int Start time - minute end_hour int End time - hour end_minute int End time - minute remind_on_off int Stress reminder switch1: On0: OffDoesn't work if on_off is off repeat int Reserve interval int Reminder interval in minutes, default is 60 minutes high_threshold int High pressure threshold stress_threshold int Pressure calibration threshold, default is 80Requires firmware support for v2_send_calibration_threshold notify_flag int Notification type0: Invalid1: Allow notification2: Silent notification3: Disable notificationRequires firmware support for V3_pressure_add_notify_flag_and_mode Example: { \"on_off\": 1, \"start_hour\": 14, \"start_minute\": 0, \"end_hour\": 20, \"end_minute\": 0, \"remind_on_off\": 1, \"repeat\": 127, \"interval\": 60, \"high_threshold\": 170, \"stress_threshold\": 80, \"notify_flag\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-19 17:07:29 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSportModeSort.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSportModeSort.html","title":"Set Sport Mode Sorting","keywords":"","body":"Set Sport Mode Sorting Menu: setSportModeSort Flutter Example: /// Set Sport Mode Sorting Event Code setSportModeSort( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sport_mode_sort), /// Set Sport Mode Sorting libManager.send(evt: CmdEvtType.setSportModeSort, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description items Array Array of sport mode sorting details with index and type Field Name Field Type Field Description index int Sorting index (starting from 1, 0 is invalid) type int Sport mode type1 for walking2 for running... and so on. Example: { \"items\": [ { \"index\": 1, \"type\": 0 }, { \"index\": 2, \"type\": 2 }, { \"index\": 3, \"type\": 4 }, { \"index\": 4, \"type\": 8 }, { \"index\": 5, \"type\": 85 }, { \"index\": 6, \"type\": 78 }, { \"index\": 7, \"type\": 45 }, { \"index\": 8, \"type\": 65 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWalkReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWalkReminder.html","title":"Set Walk Reminder","keywords":"","body":"Set Walk Reminder Function: setWalkReminder [setWalkReminderAddNotify, setDrinkWaterReminder(待补充)] Flutter Example: /// Set walk reminder event number setWalkRemind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_walk_reminder), /// Set walk reminder libManager.send(evt: CmdEvtType.setWalkRemind, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int Switch0: Off1: On goal_step int Goal stepsReserved start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) repeat int Repeatbit0 is invalidbit1-bit7 is Monday to Sunday respectivelyvalue 0 not repeat, value 1 repeat goal_time int Goal timeReserved notify_flag int Notification type0: Invalid1: Allow notifications2: Silent notifications3: Disable notificationsRequires firmware support for setWalkReminderAddNotify do_not_disturb_on_off int Do not disturb (no reminder) switch0: Off1: OnRequires firmware support for v2SupportSetGetNoReminderOnWalkReminder no_disturb_start_hour int Start time of do not disturb (hour)Requires firmware support for v2SupportSetGetNoReminderOnWalkReminder no_disturb_start_minute int Start time of do not disturb (minute)Requires firmware support for v2SupportSetGetNoReminderOnWalkReminder no_disturb_end_hour int End time of do not disturb (hour)Requires firmware support for v2SupportSetGetNoReminderOnWalkReminder no_disturb_end_minute int End time of do not disturb (minute)Requires firmware support for v2SupportSetGetNoReminderOnWalkReminder Example: { \"on_off\": 1, \"goal_step\": 2000, \"start_hour\": 14, \"start_minute\": 0, \"end_hour\": 20, \"end_minute\": 0, \"repeat\": 127, \"goal_time\": 60, \"notify_flag\": 1, \"do_not_disturb_on_off\": 0, \"no_disturb_start_hour\": 0, \"no_disturb_start_minute\": 0, \"no_disturb_end_hour\": 0, \"no_disturb_end_minute\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-19 17:10:04 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBreatheTrain.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBreatheTrain.html","title":"Set Breathe Training","keywords":"","body":"Set Breathing Training Function: setSupportBreathRate Flutter Example: /// Breathing training event number setBreatheTrain( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_breathe_train), /// Breathing training libManager.send(evt: CmdEvtType.setBreatheTrain, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description frequency int Breathing rate per minute Example: { \"frequency\": 30 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetActivitySwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetActivitySwitch.html","title":"Set Activity Recognition Switch","keywords":"","body":"Set Activity Recognition Switch Function: setActivitySwitch [v3AutoActivitySwitch (to be provided), auto_activity_switch_add_smart_rope_02_EA_03_49 (C library jsonid SDK to be provided)] Flutter Example: /// Activity switch setting event number setActivitySwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_activity_switch), /// Set activity switch libManager.send(evt: CmdEvtType.setActivitySwitch, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description auto_identify_sport_walk int Auto identify walking switch0:Off1:OnMenu getAutoActivitySetGetUseNewStructExchange after open, by getting recognition switch libManager. Send (evt: CmdEvtType. SetActivitySwitch) judge this switch does not support team (-1 value is not support) auto_identify_sport_run int Auto identify running switch0:Off1:OnMenu getAutoActivitySetGetUseNewStructExchange after open, by getting recognition switch libManager. Send (evt: CmdEvtType. SetActivitySwitch) judge this switch does not support team (-1 value is not support) auto_identify_sport_bicycle int Auto identify cycling switch0:Off1:OnMenu getAutoActivitySetGetUseNewStructExchange after open, by getting recognition switch libManager. Send (evt: CmdEvtType. SetActivitySwitch) judge this switch does not support team (-1 value is not support) auto_pause_on_off int Auto pause during activity0:Off1:OnMenu getAutoActivitySetGetUseNewStructExchange after open, by getting recognition switch libManager. Send (evt: CmdEvtType. SetActivitySwitch) judge this switch does not support team (-1 value is not support) auto_end_remind_on_off_on_off int End reminder0:Off1:OnMenu getAutoActivitySetGetUseNewStructExchange after open, by getting recognition switch libManager. Send (evt: CmdEvtType. SetActivitySwitch) judge this switch does not support team (-1 value is not support) auto_identify_sport_elliptical int Auto identify elliptical switch0:Off1:OnMenu getAutoActivitySetGetUseNewStructExchange after open, by getting recognition switch libManager. Send (evt: CmdEvtType. SetActivitySwitch) judge this switch does not support team (-1 value is not support) auto_identify_sport_rowing int Auto identify rowing machine switch0:Off1:OnMenu getAutoActivitySetGetUseNewStructExchange after open, by getting recognition switch libManager. Send (evt: CmdEvtType. SetActivitySwitch) judge this switch does not support team (-1 value is not support) auto_identify_sport_swim int Auto identify swimming switch0:Off1:OnMenu getAutoActivitySetGetUseNewStructExchange after open, by getting recognition switch libManager. Send (evt: CmdEvtType. SetActivitySwitch) judge this switch does not support team (-1 value is not support) auto_identify_sport_smart_rope int Auto identify smart rope switch0:Off1:OnMenu getAutoActivitySetGetUseNewStructExchange after open, by getting recognition switch libManager. Send (evt: CmdEvtType. SetActivitySwitch) judge this switch does not support team (-1 value is not support) Example: { \"auto_identify_sport_walk\": 0, \"auto_identify_sport_run\": 0, \"auto_identify_sport_bicycle\": 0, \"auto_pause_on_off\": 0, \"auto_end_remind_on_off_on_off\": 1, \"auto_identify_sport_elliptical\": 0, \"auto_identify_sport_rowing\": 0, \"auto_identify_sport_swim\": 0, \"auto_identify_sport_smart_rope\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-19 15:44:11 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetDrinkWaterReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetDrinkWaterReminder.html","title":"Set Drink Water Reminder","keywords":"","body":"Set Drink Water Reminder Menu: DrinkWaterReminder 【setNoReminderOnDrinkReminder，setDrinkWaterAddNotifyFlag】 Flutter Example: /// Set drink water reminder event number setDrinkWaterRemind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_drink_water_reminder), /// Set drink water reminder libManager.send(evt: CmdEvtType.setDrinkWaterRemind, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description on_off int Switch 0: Off 1: On start_hour int Start time Hour start_minute int Start time Minute end_hour int End time Hour end_minute int End time Minute repeat int Repeat bit0: Invalid (bit1 - bit7): For Monday to Sunday, value 0 not repeat, value 1 repeat interval int Reminder interval in minutes notify_flag int Notification type 0: Invalid 1: Allow notification 2: Silent notification 3: Notification offNeed to open firmware table support setDrinkWaterAddNotifyFlag do_not_disturb_on_off int Do not disturb switch 00: Off 01: OnNeed to open firmware table support setNoReminderOnDrinkReminder no_disturb_start_hour int Do not disturb start time HourNeed to open firmware table support setNoReminderOnDrinkReminder no_disturb_start_minute int Do not disturb start time MinuteNeed to open firmware table support setNoReminderOnDrinkReminder no_disturb_end_hour int Do not disturb end time HourNeed to open firmware table support setNoReminderOnDrinkReminder no_disturb_end_minute int Do not disturb end time MinuteNeed to open firmware table support setNoReminderOnDrinkReminder Example: { \"on_off\":1, \"start_hour\":18, \"start_minute\":7, \"end_hour\":23, \"end_minute\":12, \"repeat\":127, \"interval\":20, \"notify_flag\":1, \"do_not_disturb_on_off\":1, \"no_disturb_start_hour\":9, \"no_disturb_start_minute\":0, \"no_disturb_end_hour\":12, \"no_disturb_end_minute\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-19 17:12:29 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSimpleFileOperations.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSimpleFileOperations.html","title":"Simple File Operation","keywords":"","body":"Simple File Operations Flutter Example: /// Simple file operations event funcSimpleFileOpt( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_simple_file_operations), /// Simple file operations libManager.send(evt: CmdEvtType.funcSimpleFileOpt, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description operate int Operation type0: Get1: Overwrite2: Delete3: Copy index int Index number dest_index int Destination index, only used for copying, invalid for other cases Example: { \"operate\": 0, \"index\": 1, \"dest_index\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description error int Error code0 for success, others for errors operate int Operation type0: Get1: Overwrite2: Delete index int Index number Example: { \"error\": 0, \"operate\": 0, \"index\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMenuList.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMenuList.html","title":"Set Menu List","keywords":"","body":"Set Menu List Menu: setMenuListMain7 [supportCompass (to be supplied), supportBarometricAltimeter (to be supplied), support_call_list (to be supplied), supportSetMenuListTypeMeasure (to be supplied)] Flutter Example: /// Set Menu List Event setMenuList( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_menu_list), /// Set Menu List libManager.send(evt: CmdEvtType.setHeartRateMode, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description items int [] Menu list with built-in sortingWhen no sorting is needed, it will be displayed if it has a value, otherwise it won't be displayedWhen sorting is needed, it should be arranged in an array starting from 00 Invalid1 Step Count2 Heart Rate3 Sleep4 Take Photo5 Alarm6 Music7 Stopwatch8 Timer9 Activity Mode10 Weather11 Breathing Exercise12 Find Phone13 Stress14 Data Rings15 Time Screen16 Last Activity17 Health Data18 Blood Oxygen19 Menu Settings20 Alexa Voice Display in Order21 X Screen (gt01pro-X added)22 Calories (Doro Watch added)23 Distance (Doro Watch added)24 One-key Measurement (IDW05 added)25 Renpho Health (IDW12 added)26 Compass (mp01 added)27 Barometric Altimeter (mp01 added) Example: { \"items\": [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTakePicture.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTakePicture.html","title":"Set Control Camera","keywords":"","body":"Set Control for Taking Photos Menu: bleControlTakePhoto (To be added in the SDK) Flutter Example: /// Set Take Picture Event Code setTakePicture( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_take_picture), /// Set Control for Taking Photos libManager.send(evt: CmdEvtType.setTakePicture, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int 0 for off1 for on Example: { \"on_off\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetNotice.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetNotice.html","title":"Set Notification Center Switch","keywords":"","body":"Set Notification Center Switch Menu: ancs(c library jsonid SDK to be supplemented)【setMsgAllSwitch】 Flutter Example: /// Set Notification Center Event setNotificationCenter( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_notice), /// Set Notification Center libManager.send(evt: CmdEvtType.setNotificationCenter, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description notify_switch int Notification reminder switch0: BLE switch off(Reserved,invalid function)1: BLE switch on(Initiate pairing for IOS only)2: Set sub-switches3: BT switch on (switch)4: BLE and BT on (switch) call_switch int Incoming call reminder switch1: On0: Off notify_item1 int Sub-app switch 1, each bit represents an app notify_item2 int Sub-app switch 2, each bit represents an app call_delay int Incoming call reminder delay, in seconds notify_item3 int Sub-app switch 3, each bit represents an app notify_item4 int Sub-app switch 4, each bit represents an app notify_item5 int Sub-app switch 5, each bit represents an app notify_item6 int Sub-app switch 6, each bit represents an app notify_item7 int Sub-app switch 7, each bit represents an app notify_item8 int Sub-app switch 8, each bit represents an app notify_item9 int Sub-app switch 9, each bit represents an app notify_item10 int Sub-app switch 10, each bit represents an app msg_all_switch int Message app switchOn: 1Off: 0 notify_item11 int Sub-app switch 11, each bit represents an app notify_item12 int Sub-app switch 12, each bit represents an app Example: { \"call_delay\" : 0, \"call_switch\" : 1, \"msg_all_switch\" : 0, \"notify_item1\" : 0, \"notify_item2\" : 0, \"notify_item3\" : 0, \"notify_item4\" : 0, \"notify_item5\" : 0, \"notify_item6\" : 0, \"notify_item7\" : 0, \"notify_item8\" : 0, \"notify_item9\" : 0, \"notify_item10\" : 0, \"notify_item11\" : 0, \"notify_item12\" : 0, \"notify_switch\" : 1 } JSON Fields Received by the App: Field Name Field Type Field Description notify_switch int Notification reminder switch status_code int Status0: Unknown timeout1: Success2: Failed (canceled)3: Firmware pairing timeout err_code int 0: SuccessNon-zero: Failure Example: { \"notify_switch\" : 1, \"status_code\" : 1, \"err_code\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-06 10:35:17 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetClearOperations.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetClearOperations.html","title":"Set Delete File","keywords":"","body":"Set Delete File Flutter Example: /// Delete log event number setClearOperation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_clear_operations), /// Delete log libManager.send(evt: CmdEvtType.setClearOperation, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description type int 1: Overheating log 2: Battery log Example: { \"type\": 1 } JSON fields received by the App: Field Name Field Type Field Description state int 0: Success 1: Fail Example: { \"state\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBleVoice.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBleVoice.html","title":"Set Bluetooth Voice","keywords":"","body":"Set Phone Volume for Device Function: setSetPhoneVoice Flutter Example: /// Set phone volume for device event number setBleVoice( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_ble_voice), /// Set phone volume for device libManager.send(evt: CmdEvtType.setBleVoice, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description total_volume int Total volume current_volume int Current volume Example: { \"total_volume\": 100, \"current_volume\": 85 } JSON fields received by the App: Field Name Field Type Field Description state int 0 for failure, 1 for success Example: { \"state\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-19 16:09:51 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHandWashingReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHandWashingReminder.html","title":"Set Hand Washing Reminder","keywords":"","body":"Set Hand Washing Reminder Menu: setHandWashReminder Flutter Example: /// Set Hand Washing Reminder Event setHandWashingReminder( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_set_hand_washing_reminder), /// Set Hand Washing Reminder libManager.send(evt: CmdEvtType.setHandWashingReminder, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int 0: Off1: OnDefault is off start_hour int Start hour of the reminder start_minute int Start minute of the reminder end_hour int End hour of the reminder end_minute int End minute of the reminder repeat int Repeatbit0: Invalidbit1-7: Monday to Sunday interval int Reminder interval in minutesDefault is 60 minutes Example: { \"on_off\": 0, \"start_hour\": 0, \"start_minute\": 0, \"end_hour\": 0, \"end_minute\": 0, \"repeat\": 0, \"interval\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0: Failed1: Success Example: { \"is_success\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTakingMedicineReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTakingMedicineReminder.html","title":"Set Taking Medicine Reminder","keywords":"","body":"Set Medication Reminder Menu: exTableMain11TakingMedicine (To be added in the SDK) Flutter Example: /// Set Taking Medicine Reminder Event Code setTakingMedicineReminder( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_taking_medicine_reminder), /// Set Medication Reminder libManager.send(evt: CmdEvtType.setTakingMedicineReminder, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description taking_medicine_id int ID ranging from 1 to 5 on_off int 0 for off1 for on start_hour int Starting hour of the reminder start_minute int Starting minute of the reminder end_hour int Ending hour of the reminder end_minute int Ending minute of the reminder repeat int Bit0 is invalidBit1 to Bit7 represent Monday to Sunday interval int Reminder interval in minutesDefault is 60 minutes do_not_disturb_on_off int Do not disturb time period switch0 for off1 for onDefault is off do_not_disturb_start_hour int Do not disturb start hour do_not_disturb_start_minute int Do not disturb start minute do_not_disturb_end_hour int Do not disturb end hour do_not_disturb_end_minute int Do not disturb end minute Example: { \"taking_medicine_id\": 1, \"on_off\": 0, \"start_hour\": 10, \"start_minute\": 22, \"end_hour\": 23, \"end_minute\": 0, \"repeat\": 127, \"interval\": 60, \"do_not_disturb_on_off\": 0, \"do_not_disturb_start_hour\": 0, \"do_not_disturb_start_minute\": 0, \"do_not_disturb_end_hour\": 0, \"do_not_disturb_end_minute\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0 for failed1 for success Example: { \"is_success\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHRModeSmart.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHRModeSmart.html","title":"Set Smart Heart Rate Mode","keywords":"","body":"Set Smart Heart Rate Mode Menu: setSmartHeartRate Flutter Example: /// Set Smart Heart Rate Mode Event setHeartRateModeSmart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_heart_rate_mode_smart), /// Set Smart Heart Rate Mode libManager.send(evt: CmdEvtType.setHeartRateModeSmart, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int Switch0:Off1:On notify_flag int Notification Type0: Invalid1: Allow Notifications2: Silent Notifications3: Disable Notifications high_heart_mode int 1: Enable Smart High Heart Rate Alert0: Disable low_heart_mode int 1: Enable Smart Low Heart Rate Alert0: Disable high_heart_value int Smart High Heart Rate Alert Threshold low_heart_value int Smart Low Heart Rate Alert Threshold start_hour int Start Time of Heart Rate Monitoring (hour) start_minute int Start Time of Heart Rate Monitoring (minute) end_hour int End Time of Heart Rate Monitoring (hour) end_minute int End Time of Heart Rate Monitoring (minute) Example: { \"mode\": 1, \"notify_flag\": 0, \"high_heart_mode\": 0, \"low_heart_mode\": 0, \"high_heart_value\": 100, \"low_heart_value\": 80, \"start_hour\": 9, \"start_minute\": 0, \"end_hour\": 12, \"end_minute\": 0 } JSON Field Received by the App: Field Name Field Type Field Description err_code int 0: Success, non-zero: Error code Example: { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-07 10:32:18 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetNoise.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetNoise.html","title":"Set Noise Volume Switch and Threshold","keywords":"","body":"Set Environmental Noise Volume On/Off and Threshold Menu: syncV3Noise Flutter Example: /// Set Environmental Noise Volume On/Off and Threshold Event setV3Noise( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_v3_noise), /// Set Environmental Noise Volume On/Off and Threshold libManager.send(evt: CmdEvtType.setV3Noise, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int All-day environmental noise volume switch1: On0: Off start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) high_noise_on_off int Threshold switch1: On0: Off high_noise_value int Threshold value Example: { \"mode\": 1, \"start_hour\": 15, \"start_minute\": 0, \"end_hour\": 20, \"end_minute\": 0, \"high_noise_on_off\": 1, \"high_noise_value\": 100 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0 for failure, 1 for success Example: { \"is_success\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetScientificSleepSwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetScientificSleepSwitch.html","title":"Set Scientific Sleep Switch","keywords":"","body":"Set Scientific Sleep Switch Menu: setScientificSleepSwitch Flutter Example: /// Scientific sleep switch setting event setScientificSleepSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_scientific_sleep_switch), /// Set scientific sleep switch libManager.send(evt: CmdEvtType.setScientificSleepSwitch, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int Mode2: Scientific sleep1: Normal sleep start_hour int Start time - hour start_minute int Start time - minute end_hour int End time - hour end_minute int End time - minute Example: { \"mode\": 1, \"start_hour\": 23, \"start_minute\": 0, \"end_hour\": 9, \"end_minute\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0 for failure, 1 for success Example: { \"is_success\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTemperatureSwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTemperatureSwitch.html","title":"Set Night Temperature Switch","keywords":"","body":"Set Night-time Temperature Switch Menu: setTemperatureSwitchSupport Flutter Example: /// Set Night-time Temperature Switch Event Code setTemperatureSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_temperature_switch), /// Set Night-time Temperature Switch libManager.send(evt: CmdEvtType.setTemperatureSwitch, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int Mode: 1: On0: Off start_hour int Start time, hour start_minute int Start time, minute end_hour int End time, hour end_minute int End time, minute unit int Temperature unit setting:1 :Celsius2 :Fahrenheit Example: { \"mode\": 1, \"start_hour\": 19, \"start_minute\": 0, \"end_hour\": 23, \"end_minute\": 0, \"unit\": 1 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0 for failed1 for success Example: { \"is_success\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetFitnessGuidance.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetFitnessGuidance.html","title":"Set Fitness Guidance","keywords":"","body":"Set Fitness Guidance Switch Menu: setSetFitnessGuidance Flutter Example: /// Fitness Guidance Event setFitnessGuidance( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_fitness_guidance), /// Fitness Guidance libManager.send(evt: CmdEvtType.setFitnessGuidance, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int Fitness guidance mode switch1: On0: Off start_hour int Start hour start_minute int Start minute end_hour int End hour end_minute int End minute notify_flag int Notification type0: Invalid1: Allow2: Silent3: Disable go_mode int Reminders to move switch1: On0: Off repeat int Repeatbit0: Invalidbit1-7: Monday to Sunday,value 0 not repeat, value 1 repeat target_steps int Target steps Example: { \"mode\": 1, \"start_hour\": 9, \"start_minute\": 0, \"end_hour\": 18, \"end_minute\": 0, \"notify_flag\": 1, \"go_mode\": 0, \"repeat\": 127, \"target_steps\": 2000 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0: Failed1: Success Example: { \"is_success\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-19 17:13:42 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUnreadAppReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUnreadAppReminder.html","title":"Set Unread App Reminder Switch","keywords":"","body":"Set Unread Message Reminder Switch Function list: setSetUnreadAppReminder Flutter Example: /// Unread message reminder switch event number setUnreadAppReminder( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_unread_app_reminder), /// Unread message reminder switch libManager.send(evt: CmdEvtType.setUnreadAppReminder, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int Switch1: On0: Off Example: { \"on_off\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0: Failed1: Success Example: { \"is_success\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetNotificationStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetNotificationStatus.html","title":"Set Notification App Status(Event alert notification type)","keywords":"","body":"Set Notification App Status Menu: setSetNotificationStatus Flutter Example: /// Currently, only event reminders are applicable. Therefore, the default notification type of event reminders is set on this interface /// Notification app status setting event setNotificationStatus( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_notification_status), /// Use this command to set the type of notification for event reminder libManager.send(evt: CmdEvtType.setNotificationStatus, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description notify_flag int Notification type:1: Allow notification2: Silent notification3: Disable notification Example: { \"notify_flag\": 1 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0 for failure1 for success Example: { \"is_success\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-05 14:45:51 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetRespiRateONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetRespiRateONOFF.html","title":"Set Respiration Rate Switch","keywords":"","body":"Set Respiration Rate Switch Menu: setRespirationRate Flutter Example: /// Respiration rate switch setting event setRRespiRateTurn( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_respi_rate_on_off), /// Set respiration rate switch libManager.send(evt: CmdEvtType.setRRespiRateTurn, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int 0: Off1: On Example: { \"on_off\": 1 } JSON Fields Received by the App: Field Name Field Type Field Description err_code int 0 for success, non-zero for error Example: { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBodyPowerONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBodyPowerONOFF.html","title":"Set Body Battery Switch","keywords":"","body":"Set Body Power Switch Function: syncV3BodyPower Flutter Example: /// Set body power switch event number setBodyPowerTurn( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_body_power_on_off), /// Set body power switch libManager.send(evt: CmdEvtType.setBodyPowerTurn, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description on_off int 0: Off 1: On Example: { \"on_off\": 170 } JSON fields received by the App: Field Name Field Type Field Description err_code int 0 for success, non-zero for error code Example: { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatherSwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatherSwitch.html","title":"Set Weather Switch","keywords":"","body":"Set Weather Switch Function: setSetV3Weather Flutter Example: /// Set weather switch event number setWeatherSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_weather_switch), /// Set weather switch libManager.send(evt: CmdEvtType.setWeatherSwitch, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int 0: Off1: On Example: { \"on_off\": 1 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0 for success, non-zero for failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatcherData.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatcherData.html","title":"Set Weather Data","keywords":"","body":"Set Weather Data Function: setWeatherData Flutter Example: /// Set weather data event number setWeatherData( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_weatcher_data), /// Set weather data libManager.send(evt: CmdEvtType.setWeatherData, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description type int Weather type temp int Current temperature max_temp int Maximum temperature of the day min_temp int Minimum temperature of the day humidity int Current humidity uv_intensity int Current UV intensity aqi int Current air quality index (AQI) future array Weather conditions for the next three daysArray of type, min_temp, and max_temp Field Name Field Type Field Description type int Weather type min_temp int Minimum temperature max_temp int Maximum temperature Code Weather Type 0x00 Other 0x01 Sunny 0x02 Cloudy 0x03 Overcast 0x04 Rain 0x05 Heavy Rain 0x06 Thunderstorm 0x07 Snow 0x08 Sleet 0x09 Typhoon 0x0A Sandstorm 0x0B Clear Night 0x0C Cloudy Night 0x0D Hot 0x0E Cold 0x0F Gentle Breeze 0x10 Strong Wind 0x11 Haze 0x12 Shower 0x13 Cloudy to Sunny 0x30 Thunder 0x31 Hail 0x32 Dust 0x33 Tornado Example: { \"type\": 1, \"temp\": 10, \"max_temp\": 18, \"min_temp\": 7, \"humidity\": 20, \"uv_intensity\": 30, \"aqi\": 60, \"future\": [ { \"type\": 2, \"min_temp\": 10, \"max_temp\": 18 }, { \"type\": 2, \"min_temp\": 9, \"max_temp\": 16 }, { \"type\": 1, \"min_temp\": 8, \"max_temp\": 19 } ] } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0 for success, non-zero error code Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-12 18:01:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatcherCityName.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatcherCityName.html","title":"Set Weather City Name","keywords":"","body":"Set Weather City Name Function: setWeatherCity Flutter Example: /// Set weather city name event number setWeatherCityName( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_weatcher_city_name), /// Set weather city name libManager.send(evt: CmdEvtType.setWeatherCityName, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description version int Version number (0) city_name char [] City nameFor firmwares with V3_support_v3_long_city_name, the city name can be up to 74 bytes long. Without the function table enabled, the default size is 16 bytes. Example: { \"version\": 0, \"city_name\": \"shenzhen\" } JSON Fields Received by the App: Field Name Field Type Field Description version int 0 for failure, 1 for success err_code int 0 for success, non-zero error code Example: { \"version\": 0, \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-07 10:49:59 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatcherSunTime.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatcherSunTime.html","title":"Set Sunrise and Sunset Time","keywords":"","body":"Set Sunrise and Sunset Time Function: support_set_weatch_sun_time_0a_06 (C library JSON ID, SDK to be supplemented) Flutter Example: /// Set sunrise and sunset time event number setWeatherSunTime( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_weatcher_set_sun_time), /// Set sunrise and sunset time libManager.send(evt: CmdEvtType.setWeatherSunTime, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description sunrise_hour int Hour of sunrise sunrise_min int Minute of sunrise sunset_hour int Hour of sunset sunset_min int Minute of sunset Example: { \"sunrise_hour\": 6, \"sunrise_min\": 12, \"sunset_hour\": 18, \"sunset_min\": 30 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0 for failure1 for success Example: { \"is_success\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSystemInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSystemInfo.html","title":"Send phone's operating system","keywords":"","body":"Send phone's operating system Function: getSupportAppSendPhoneSystemInfo Flutter Example: /// set phone system evt setAppOS( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_app_os), /// set phone system libManager.send(evt: CmdEvtType.setAppOS, json: jsonEncode(json)); JSON fields sent by the app: Field Name Field Type Field Description system int Phone operating system 0x1: iOS 0x2: Android system_version int Phone system version Reserved Example: { \"system\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-10-06 17:13:33 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetVoiceAssistant.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetVoiceAssistant.html","title":"Set Voice Assistant Switch","keywords":"","body":"Setting Voice Assistant Switch Menu: getSupportSetVoiceAssistantStatus Flutter example: /// Set the switch for the voice assistant on the phone setVoiceAssistantOnOff( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_voice_assistant_on_off); /// Set the switch for the voice assistant on the phone libManager.send(evt: CmdEvtType.setVoiceAssistantOnOff, json: jsonEncode(json)); JSON fields sent by the app: Field Name Field Type Field Description on_off int Switch0: Off1: On Example: { \"on_off\": 1 } JSON fields received by the app: Field Name Field Type Field Description err_code int 0 for success, non-zero for error code Example: { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-10-09 17:36:30 "},"doc/IDOGetEvtIntroduction.html":{"url":"doc/IDOGetEvtIntroduction.html","title":"V2 Get Instruction Event","keywords":"","body":"{V2 Get Event Instructions} Function Get Device MAC Address Get Device Information Get BT Name Get Sn Info Get Function Table Get Notification Center Status Get Real-time Data Get Error Records Get File Transfer Configuration Get HID Information Get GPS Information Get Hot Start Parameters Get GPS Status Get Version Information Get Do Not Disturb Mode Status Get MTU Information Get Default Sport Type Get Download Language Support Get Battery Information Get Font Library Information Get Device Supported Menu List Get Screen Brightness Get Raise Wrist Data Get Device Update Status Get Watch ID Get Watch Name Get Device Log Status Get Calorie/Distance/Active Time Settings (Daily Three Rings) Get Walk Reminder Get All Health Switch States Get Activity Autodetection Switch Get Firmware Level 3 Version and BT Level 3 Version Get Stress Value Get Blood Pressure Algorithm Version Get Maximum Number of Settings Supported by Firmware Get Undeletable Shortcut App List Get Unread App Red Dot Prompt Switch Query BT Pairing/Connection/A2DP Connection/HFP Connection Status Get Modification Time of Locally Saved Contact File on Firmware Get Heart Rate Monitoring Mode Get All-day Step Goal Get units Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-24 15:21:31 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMac.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMac.html","title":"Get Device MAC Address","keywords":"","body":"Get Device MAC Address Function Table: getBtAddrV2 Flutter Example: /// Get MAC Address event number getMac( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_app_get_mac), /// Get MAC Address libManager.send(evt: CmdEvtType.getMac, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description mac_addr int [6] Device ID address (maximum 6 bytes) bt_addr int [6] Bluetooth address (maximum 6 bytes) Example: { \"bt_addr\" : [ 135, 0, 23, 0, 136, 173 ], \"mac_addr\" : [ 173, 136, 0, 23, 0, 135 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDeviceInfoOnly.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDeviceInfoOnly.html","title":"Get Device Information","keywords":"","body":"Get Device Information Menu: Supported by each device Flutter Example: /// Get device information evt getDeviceInfoOnly( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.intapp_get_device_info), /// Get device information libManager.send(evt: CmdEvtType.getDeviceInfo, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description deivce_id int Device ID firmware_version int Firmware version mode int Mode0: Exercise mode1: Sleep mode batt_status int Battery status0: Normal1: Charging2: Full3: Low battery energe int Battery level pair_flag int Pairing status0: Not paired1: Paired reboot int Whether to rebootIf true, the app will sync configuration to the device after restart bind_confirm_method int Pairing confirmation method0: Default (Note: custom ID number is valid, timeout value is invalid)1: Single tap [key below]2: Long press [key below]3: Screen touch, horizontal confirmation and cancel (confirm on the left)4: Screen touch, horizontal confirmation and cancel (confirm on the right)5: Screen touch, vertical confirmation and cancel (confirm on the top)6: Screen touch, vertical confirmation and cancel (confirm on the bottom)7: Click (right side key) bind_confirm_timeout int Timeout durationMaximum is 15 seconds, 0 means no timeout platform int Platform of the device0: Nordic10: Realtek 8762x20: Cypress Psoc630: Apollo340: Chipone50: Nordic + Realtek, Rui Kun80: 534090: Jixing shape int Shape of the device0: Default (gt01 square)1: Circular2: Square3: Elliptical dev_type int Device type0: Default (gt01 watch)1: Bracelet2: Watch user_defined_dial_main_version int Custom dial main version (starting from 1)0: Corresponding custom dial feature not supported cloud_clock_dial_version int Cloud clock dial version (starting from 0)Corresponding feature available in the multi_dial menu (Deprecated, same as user_defined_dial_main_version) show_bind_choice_ui int Whether to show UI for binding confirmation in the firmware0: No app prompting required1: App prompting required bootload_version int Bootloader version information for Nordic platform (minimum is 1) Example: ```json { \"batt_status\": 0, \"bind_confirm_method\": 0, \"bind_confirm_timeout\": 0, \"bootload_version\": 0, \"cloud_clock_dial_version\": 2, \"deivce_id\": 7453, \"dev_type\": 2, \"energe\": 32, \"firmware_version\": 2, \"mode\": 1, \"pair_flag\": 1, \"platform\": 30, \"reboot\": 0, \"shape\": 2, \"show_bind_choice_ui\": 0, \"user_defined_dial_main_version\": 2 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDeviceInfoWithBTName.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDeviceInfoWithBTName.html","title":"Get BT name","keywords":"","body":"Get BT Name Menu: getBtAddrV2 Flutter Example: /// Get BT Bluetooth name event code getBtName( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_bt_name) /// Get BT Bluetooth name libManager.send(evt: CmdEvtType.getBtName, json: jsonEncode(json)); JSON fields received by the App: Field Name Field Type Field Description bt_name char [32] BT Bluetooth namebt name will only be returned if firmware has v2_get_bt_addr enabled and alarm_count > 0, otherwise it will be empty Example: { \"bt_name\" : \"ID206\" } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetSnInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetSnInfo.html","title":"Get Sn Info","keywords":"","body":"Get SN Information Menu: supportGetSnInfo Flutter Example: /// Get SN event code getSnInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_sn_info) /// Get SN libManager.send(evt: CmdEvtType.getSnInfo, json: jsonEncode(json)); JSON fields received by the App: Field Name Field Type Field Description len int Length of SN string sn char [] SN serial number string, maximum length of 17 bytes Example: { \"len\": 11, \"sn\": \"as1d65sa2qs\" } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetFuncTableUser.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetFuncTableUser.html","title":"Get Function Table","keywords":"","body":"Get Function Table Function Table: Get Supported Features of Each Device Flutter Example: /// Get Function Table event number getFuncTable( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_func_table_user), /// Get Function Table libManager.send(evt: CmdEvtType.getFuncTable, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description .. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetNoticeStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetNoticeStatus.html","title":"Get Notification Center Switch","keywords":"","body":"Get Notification Center Switch Function Table: reminderAncs Flutter Example: /// Get notification center status event number getNoticeStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_notice_status), /// Get notification center status libManager.send(evt: CmdEvtType.getNoticeStatus, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description notify_switch int Notification reminder switch0: BLE switch off(Reserved,invalid function)1: BLE switch on(Initiate pairing for IOS only)2: Setting sub-switch3: BT only (switch)4: BLE and BT on (switch)-1: Invalid(Not Support) call_switch int Incoming call reminder switch1: On0: Off-1: Invalid(Not Support) notify_item1 int Sub-app switch 1, each bit represents an app notify_item2 int Sub-app switch 2, each bit represents an app call_delay int Incoming call reminder delay in seconds notify_item3 int Sub-app switch 3, each bit represents an app notify_item4 int Sub-app switch 4, each bit represents an app notify_item5 int Sub-app switch 5, each bit represents an app notify_item6 int Sub-app switch 6, each bit represents an app notify_item7 int Sub-app switch 7, each bit represents an app notify_item8 int Sub-app switch 8, each bit represents an app notify_item9 int Sub-app switch 9, each bit represents an app notify_item10 int Sub-app switch 10, each bit represents an app msg_all_switch int Message app total switch1: On0: Off-1: Invalid(Not Support) notify_item11 int Sub-app switch 11, each bit represents an app notify_item12 int Sub-app switch 12, each bit represents an app Example: { \"call_delay\" : 0, \"call_switch\" : 1, \"msg_all_switch\" : 0, \"notify_item1\" : 0, \"notify_item2\" : 0, \"notify_item3\" : 0, \"notify_item4\" : 0, \"notify_item5\" : 0, \"notify_item6\" : 0, \"notify_item7\" : 0, \"notify_item8\" : 0, \"notify_item9\" : 0, \"notify_item10\" : 0, \"notify_item11\" : 0, \"notify_item12\" : 0, \"notify_switch\" : 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-06 10:35:16 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetLiveData.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetLiveData.html","title":"Get Real-time Data","keywords":"","body":"Get Real-time Data Function Table: getRealtimeData Flutter Example: /// Get Real-time Data event number getLiveData( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_live_data), /// Get Real-time Data libManager.send(evt: CmdEvtType.getLiveData, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Description flag int 0: No function1: Force open heart rate monitoring2: Force open blood pressure monitoring JSON Fields Received by the App: Field Name Field Type Description total_step int Total steps total_calories int Total calories (in kilocalories) total_distances int Total distance (in meters) total_active_time int Total active time (in seconds) heart_rate int Heart rate data (in beats per minute) If heart rate function is not available, this value will be 0 Example: { \"heart_rate\" : 0, \"total_active_time\" : 0, \"total_calories\" : 0, \"total_distances\" : 0, \"total_step\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetErrorRecord.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetErrorRecord.html","title":"Get Error Records","keywords":"","body":"Get Error Records Menu: getFlashLog Flutter Example: /// Get Error Records event number getErrorRecord( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_error_record), /// Get Error Records libManager.send(evt: CmdEvtType.getErrorRecord, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description type int 0 Query1 Clear Log JSON fields received by the App: Field Name Field Type Field Description type int 0 Query1 Clear Log reset_flag int 0 Normal1 Hard Faul2 Watchdog service3 Assertion reset4 Power-off service5 Other exceptions hw_error int Hardware error code0 Normal1 Accelerometer error2 Heart rate error3 TP error4 Flash error Example: { \"type\":0, \"reset_flag\":0, \"hw_error\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDataTranConfig.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDataTranConfig.html","title":"Get Data Transfer Configuration","keywords":"","body":"Get Icon File Transfer Configuration / Get Image File Transfer Configuration Menu: getNotifyIconAdaptive Flutter Example: /// Get data transfer configuration event number getDataTranConfig( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_data_tran_configure ), /// Get data transfer configuration libManager.send(evt: CmdEvtType.getDataTranConfig, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description type int Icon type corresponding to the activity type0: Invalid1: Small icon for activity2: Large icon for activity3: Animated icon for activity4: Variable-sized icons for activity5: Smallest icon for activity evt_type int Event type0: InvalidFor example, 1: SMS, 2: Email, 3: WeChat, etc. sport_type int Activity type0: InvalidActivity mode type1: Walking, 2: Running, etc. Example: { \"type\": 1, \"evt_type\": 1, \"sport_type\": 1 } JSON Fields Received by the App: Field Name Field Type Field Description err_code int Error code0: NormalNon-zero: Error type int Icon type corresponding to the activity type0: Invalid1: Small icon for activity2: Large icon for activity3: Animated icon for activity4: Medium-sized icons for activity evt_type int Event type0: InvalidFor example, 1: SMS, 2: Email, 3: WeChat, etc. sport_type int Activity type0: InvalidActivity mode type, 1: Walking, 2: Running, etc. icon_width int Width required by the firmware icon (determined by type and evt_type/sport_type) icon_height int Height required by the firmware icon (determined by type and evt_type/sport_type) format int Color format block_size int Compression block size big_sports_num int Number of big sports icons msg_num int Number of message icons small_sports_and_animation_num int Number of small sports and animation icons medium_num int Number of medium-sized icons Example: { \"err_code\": 0, \"type\": 1, \"evt_type\": 1, \"sport_type\": 1, \"icon_width\": 50, \"icon_height\": 50, \"format\": 133, \"block_size\": 1024, \"big_sports_num\": 5, \"msg_num\": 0, \"small_sports_and_animation_num\": 0, \"medium_num\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetHIDInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetHIDInfo.html","title":"Get HID Information","keywords":"","body":"Get HID Information Function Table: /// TODO Flutter Example: /// Get HID Information event number getHidInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_hid_info), /// Get HID Information libManager.send(evt: CmdEvtType.getHidInfo, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description is_start int 0 - Not started, 1 - Started successfully Example: { \"is_start\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetGPSInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetGPSInfo.html","title":"Get GPS Information","keywords":"","body":"Get GPS Information Function Table: getSupportUpdateGps Flutter Example: /// Get GPS Information event number getGpsInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_gps_info), /// Get GPS Information libManager.send(evt: CmdEvtType.getGpsInfo, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description err_code int GPS error code0 - Normal, non-zero - Exceptional fw_version int GPS firmware version agps_info int Validity period of AGPS (Assisted GPS) agps_err_code int AGPS error code utc_year int UTC year utc_month int UTC month utc_day int UTC day utc_hour int UTC hour utc_minute int UTC minute start_mode int Start mode1 - Cold start2 - Hot start gns int Positioning satellite selection1 - GPS2 - GLONASS3 - GPS + GLONASS fix_start_bit int Fix start bitDefault 0, used for debugging Example: { \"err_code\": 0, \"fw_version\": 512, \"agps_info\": 0, \"agps_err_code\": 0, \"utc_year\": 0, \"utc_month\": 0, \"utc_day\": 0, \"utc_hour\": 0, \"utc_minute\": 0, \"start_mode\": 2, \"gns\": 0, \"fix_start_bit\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetGPSStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetGPSStatus.html","title":"Get GPS Status","keywords":"","body":"Get GPS Status Function Table: getSupportUpdateGps Flutter Example: /// Get GPS Status event number getGpsStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_gps_status), /// Get GPS Status libManager.send(evt: CmdEvtType.getGpsStatus, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description gps_run_status int GPS running status0 - Not running1 - Searching for satellites2 - Tracking agps_is_valid int Validity of AGPS (Assisted GPS) in hoursNon-zero values indicate validity Example: { \"gps_run_status\": 0, \"agps_is_valid\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetVersionInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetVersionInfo.html","title":"Get Version Information","keywords":"","body":"Get Version Information Menu: getVersionInfo Flutter Example: /// Get version information event number getVersionInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_version_info), /// Get version information libManager.send(evt: CmdEvtType.getVersionInfo, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description sdk_version int SDK version hr_algorithm_version int Heart rate algorithm version sleep_algorithm_version int Sleep algorithm version step_algorithm_version int Step counter algorithm version gesture_recognition_version int Gesture recognition algorithm version pcb_version int PCB version (multiplied by 10, e.g., 11 for version 1.1) spo2_version int Wearable version wear_version int SpO2 algorithm version stress_version int Stress level algorithm version kcal_version int Calorie algorithm version dis_version int Distance algorithm version axle3_swim_version int 3-axis sensor swimming algorithm version axle6_swim_version int 6-axis sensor swimming algorithm version act_mode_type_version int Activity mode recognition algorithm version all_day_hr_version int All-day heart rate algorithm version gps_version int GPS algorithm version peripherals_version int Peripheral version for 206 customized projects Example: { \"act_mode_type_version\" : 10, \"all_day_hr_version\" : 45, \"axle3_swim_version\" : 19, \"axle6_swim_version\" : 19, \"dis_version\" : 4, \"gesture_recognition_version\" : 33, \"gps_version\" : 0, \"hr_algorithm_version\" : 45, \"kcal_version\" : 5, \"pcb_version\" : 1, \"peripherals_version\" : 0, \"sdk_version\" : 15, \"sleep_algorithm_version\" : 1, \"spo2_version\" : 24, \"step_algorithm_version\" : 25, \"stress_version\" : 4, \"wear_version\" : 22 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDoNotDisturb.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDoNotDisturb.html","title":"Get Do Not Disturb Mode Status","keywords":"","body":"Get Do Not Disturb Mode Status Menu: getDoNotDisturbMain3 Flutter Example: /// Get Do Not Disturb mode status event number getNotDisturbStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_do_not_disturb), /// Get Do Not Disturb mode status libManager.send(evt: CmdEvtType.getNotDisturbStatus, json: jsonEncode(json)); JSON fields received by the App: Field Name Field Type Field Description switch_flag int Switch status 1: On 0: Off-1:Not Support start_hour int Start hour start_minute int Start minute end_hour int End hour end_minute int End minute have_time_range int Whether there is a time range 0: Invalid 1: No time range 2: Has time range week_repeat int reserve noontime_rest_on_off int Noon rest switch, headset reminder switch 1: On 0: Off-1:Not Support noontime_rest_start_hour int Reminder start hour noontime_rest_start_minute int Reminder start minute noontime_rest_end_hour int Reminder end hour noontime_rest_end_minute int Reminder end minute all_day_on_off int All day Do Not Disturb switch 1: On 0: Off-1:Not Support intelligent_on_off int Intelligent Do Not Disturb switch 1: On 0: Off-1:Not Support Example: { \"all_day_on_off\": 0, \"end_hour\": 7, \"end_minute\": 0, \"have_time_range\": 0, \"intelligent_on_off\": 0, \"noontime_rest_end_hour\": 7, \"noontime_rest_end_minute\": 0, \"noontime_rest_on_off\": 1, \"noontime_rest_start_hour\": 22, \"noontime_rest_start_minute\": 0, \"start_hour\": 22, \"start_minute\": 0, \"switch_flag\": 1, \"week_repeat\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-19 17:50:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMtuInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMtuInfo.html","title":"Get MTU Information","keywords":"","body":"Get MTU Information Function Table: getMtu Flutter Example: /// Get MTU Information event number getMtuInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_mtu_info), /// Get MTU Information libManager.send(evt: CmdEvtType.getMtuInfo, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description status int 0: Data is valid1: Data is invalid, wait a while and try again. In case of invalid data, MTU is 20. rx_mtu int MTU for app receiving data tx_mtu int MTU for app sending data phy_speed int Physical layer speed0: Invalid1000: 1M2000: 2M512: 512K dle_length int DLE length0: Not supported Example: { \"dle_length\" : 27, \"phy_speed\" : 285, \"rx_mtu\" : 132, \"status\" : 0, \"tx_mtu\" : 132 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDefaultSportType.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDefaultSportType.html","title":"Get Default Sport Type","keywords":"","body":"Get Default Sport Types Menu: setV3GetSportSortField Flutter Example: /// Get default sport types event number getDefaultSportType( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_default_sport_type), /// Get default sport types libManager.send(evt: CmdEvtType.getDefaultSportType, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description default_show_num int Number of default sport types to be displayed min_show_num int Minimum number of supported sport types max_show_num int Maximum number of supported sport types is_supports_sort int Whether default sorting is supported0: No1: Yes sport_types list List of sport types (of type int) Example: ```json { \"default_show_num\": 27, \"min_show_num\": 285, \"max_show_num\": 132, \"is_supports_sort\": 0, \"sport_types\": [ {\"type\": 1}, {\"type\": 2}, {\"type\": 3}, {\"type\": 4}, {\"type\": 5}, {\"type\": 6}, {\"type\": 7}, {\"type\": 8} ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDownloadLanguage.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDownloadLanguage.html","title":"Get Download Language Support","keywords":"","body":"Get Download Language Support Menu: getDownloadLanguage Flutter Example: /// Get Download Language Support event number getDownloadLanguage( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_down_language), /// Get Download Language Support libManager.send(evt: CmdEvtType.getDownloadLanguage, json: jsonEncode(json)); JSON fields received by the App: Field Name Field Type Field Description use_lang int Current used language default_lang int Default language fixed_lang int Number of fixed stored languages max_storage_lang int Maximum stored languages lang_array array List of stored language values Field Name Field Type Field Description value int [14] Stored language values, ended by 0 Example: { \"use_lang\" : 27, \"default_lang\" : 285, \"fixed_lang\" : 132, \"max_storage_lang\" : 0, \"lang_array\":[ { \"value\":1 }, { \"value\":2 }, { \"value\":3 }, { \"value\":4 }, { \"value\":5 }, { \"value\":6 }, { \"value\":7 }, { \"value\":8 }] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-29 15:30:25 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetBattInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetBattInfo.html","title":"Get Battery Information","keywords":"","body":"Get Battery Information Menu: getBatteryInfo Flutter Example: /// Get battery information event number getBatteryInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_batt_info), /// Get battery information libManager.send(evt: CmdEvtType.getBatteryInfo, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description type int Battery type: 0: Rechargeable lithium battery, 1: Button battery voltage int Voltage status int Battery status0: Normal1: Charging2: Charging complete3: Low battery level int Level last_charging_year int Last charging time, year last_charging_month int Last charging time, month last_charging_day int Last charging time, day last_charging_hour int Last charging time, hour last_charging_minute int Last charging time, minute last_charging_second int Last charging time, second mode int 0: Invalid1: Normal mode (non-power saving mode)2: Power saving mode Example: { \"last_charging_day\" : 0, \"last_charging_hour\" : 158, \"last_charging_minute\" : 66, \"last_charging_month\" : 0, \"last_charging_second\" : 0, \"last_charging_year\" : 0, \"level\" : 100, \"mode\" : 0, \"status\" : 0, \"type\" : 0, \"voltage\" : 4317 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetFlashBinInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetFlashBinInfo.html","title":"Get Font Library Information","keywords":"","body":"Get Font Library Information Function Table: getFlashLog Flutter Example: /// Get Font Library Information event number getFlashBinInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_flash_bin_info), /// Get Font Library Information libManager.send(evt: CmdEvtType.getFlashBinInfo, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description status int Status: 0 - Normal, 1 - Invalid font, checksum error, 2 - Version mismatch version int Font library version match_version int Matching version required by the firmware check_code int Font library checksum code Example: { \"check_code\" : 1211171869, \"match_version\" : 13, \"status\" : 0, \"version\" : 13 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMenuList.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMenuList.html","title":"Get Device Supported Menu List","keywords":"","body":"Get Supported Menu List Function Table: getMenuList Flutter Example: /// Get Supported Menu List event number getMenuList( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_menu_list), /// Get Supported Menu List libManager.send(evt: CmdEvtType.getMenuList, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description min_show_num int Minimum number of items to show max_show_num int Maximum number of items to show max_num int Maximum number of items in the list current_show_num int Number of items currently shown on the device items array Details of the items currently shown on the deviceCollection of index & value Field Name Field Type Description index int IndexStarting from 0 with a maximum value of 13 value int Type0: Invalid1: Steps2: Heart rate3: Sleep4: Camera5: Alarm6: Music7: Stopwatch8: Timer9: Sports mode10: Weather11: Breathing exercise12: Find phone13: Pressure14: Data triathlon15: Time interface16: Last activity17: Health data18: Blood oxygen19: Menu settings20: Alexa voice display sequentially21: X screen (gt01pro-X added)22: Calories (Doro Watch added)23: Distance (Doro Watch added)24: One-key measurement (IDW05 added)25: Renpho health(IDW12 added) 26: Compass (mp01 added) 27: Barometer altimeter (mp01 added) Example: { \"current_show_num\" : 5, \"items\" : [ { \"index\" : 0, \"value\" : 17 }, { \"index\" : 1, \"value\" : 2 }, { \"index\" : 2, \"value\" : 13 }, { \"index\" : 3, \"value\" : 16 }, { \"index\" : 4, \"value\" : 20 }, { \"index\" : 5, \"value\" : 6 }, { \"index\" : 6, \"value\" : 10 } ], \"max_num\" : 7, \"max_show_num\" : 7, \"min_show_num\" : 2 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetScreenBrightness.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetScreenBrightness.html","title":"Get Screen Brightness","keywords":"","body":"Get Screen Brightness Menu: getScreenBrightnessMain9 Flutter Example: /// Get screen brightness event number getScreenBrightness( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_screen_brightness), /// Get screen brightness libManager.send(evt: CmdEvtType.getScreenBrightness, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description level int Brightness level(0-100) opera int 0 Auto1 Manual If it is automatic synchronization configuration, please send 00; if it is user adjustment, please send 01 mode int 0 Specify level1 Use ambient light sensor2 level does not matter auto_adjust_night int Night auto brightness adjustment 0 Invalid, defined by firmware1 Off2 Night auto brightness adjustment3 Night brightness reduction uses the set time start_hour int Start time hour start_minute int Start time minute end_hour int End time hour end_minute int End time minute night_level int Night brightness show_interval int Display interval Example: { \"auto_adjust_night\" : 1, \"end_hour\" : 6, \"end_minute\" : 0, \"level\" : 60, \"mode\" : 0, \"night_level\" : 0, \"opera\" : 1, \"show_interval\" : 5, \"start_hour\" : 19, \"start_minute\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUpHandGesture.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUpHandGesture.html","title":"Get Up Hand Gesture","keywords":"","body":"Get Wrist Up Gesture Data Menu: getUpHandGestureEx Flutter Example: /// Get wrist up gesture data event number getUpHandGesture( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_up_hand_gesture), /// Get wrist up gesture data libManager.send(evt: CmdEvtType.getUpHandGesture, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description on_off int Switch1: On0: Off-1:Not Support show_second int Screen on durationin seconds has_time_range int Whether time range is available1: Yes0: No start_hour int Start time, hour start_minute int Start time, minute end_hour int End time, hour end_minute int End time, minute Example: { \"end_hour\" : 0, \"end_minute\" : 0, \"has_time_range\" : 0, \"on_off\" : 1, \"show_second\" : 5, \"start_hour\" : 0, \"start_minute\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUpdateStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUpdateStatus.html","title":"Get Device Upgrade Status","keywords":"","body":"Get Device Update Status Menu: getDeviceUpdateState Flutter Example: /// Get device update status event number getUpdateStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_update_state), /// Get device update status libManager.send(evt: CmdEvtType.getUpdateStatus, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description dev_vesion int Firmware version number state int 0 for normal state1 for upgrade state Example: { \"dev_vesion\":0, \"state\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDevicesLogStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDevicesLogStatus.html","title":"Get Device Log Status","keywords":"","body":"Get Device Log State Menu: Each device supports getDeviceLogState Flutter Example: /// Get device log state event number getDeviceLogState( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_devices_log_state), /// Get device log state libManager.send(evt: CmdEvtType.getDeviceLogState, json: jsonEncode(json)); JSON fields received by the App: Field Name Field Type Field Description type int 0: No corresponding log 1: Firmware restart log 2: Firmware exception err_code int Error code of firmware restart log, 0 is normal Example: { \"err_code\": 4, \"type\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMainSportGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMainSportGoal.html","title":"Get Calorie/Distance/Duration of Medium-high Intensity Exercise (Daily Three Rings)","keywords":"","body":"Get Set Calorie/Distance/Mid-High Sport Time Goal Function Table: getSupportGetMainSportGoalV3 【setCalorieGoal，exMain3DistanceGoal(//TODO)，setMidHighTimeGoal，getSupportSetGetTimeGoalTypeV2】 Flutter Example: /// Get Set Calorie/Distance/Mid-High Sport Time Goal event number getMainSportGoal( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_main_sport_goal), /// Get Set Calorie/Distance/Mid-High Sport Time Goal libManager.send(evt: CmdEvtType.getMainSportGoal, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Description time_goal_type int 0: Invalid1: Daily goal2: Weekly goalRequires firmware to enable function table getSupportSetGetTimeGoalTypeV2 JSON Fields Received by the App: Field Name Field Type Description calorie int Activity calorie goal (in kilocalories)Requires firmware to enable function table setCalorieGoal distance int Distance goal (in meters) calorie_min int Minimum activity calorie value calorie_max int Maximum activity calorie value mid_high_time_goal int Mid-high sport time goal (in seconds)Requires firmware to enable function table setMidHighTimeGoal walk_goal_time int Goal time(in seconds) time_goal_type int 0: Invalid1: Daily goal2: Weekly goalRequires firmware to enable function table getSupportSetGetTimeGoalTypeV2 Example: { \"calorie\" : 4, \"distance\" : 200, \"calorie_min\" : 101, \"calorie_max\" : 500, \"mid_high_time_goal\" : 1, \"walk_goal_time\" : 1, \"time_goal_type\" : 1, } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 11:25:24 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetWalkReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetWalkReminder.html","title":"Get Walking Reminder","keywords":"","body":"Get Walk Reminder Menu: getWalkReminderV3 【setWalkReminderAddNotify，getSupportSetGetNoReminderOnWalkReminderV2】 Flutter Example: /// Get walk reminder event number getWalkRemind( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_walk_reminder), /// Get walk reminder libManager.send(evt: CmdEvtType.getWalkRemind, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description on_off int 0 Off，1 On goal_step int Goal step (deprecated) start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) repeat int Repeatbit0 is invalidbit1-bit7 is Monday to Sunday respectivelyvalue 0 not repeat, value 1 repeat goal_time int Goal time (deprecated) notify_flag int Notification type0: Invalid1: Allow notification2: Silent notification3: Close notificationRequires firmware to enable setWalkReminderAddNotify do_not_disturb_on_off int Do not disturb switch0 Off1 OnRequires firmware to enable getSupportSetGetNoReminderOnWalkReminderV2 no_disturb_start_hour int Do not disturb start time (hour)Requires firmware to enable getSupportSetGetNoReminderOnWalkReminderV2 no_disturb_start_minute int Do not disturb start time (minute)Requires firmware to enable getSupportSetGetNoReminderOnWalkReminderV2 no_disturb_end_hour int Do not disturb end time (hour)Requires firmware to enable getSupportSetGetNoReminderOnWalkReminderV2 no_disturb_end_minute int Do not disturb end time (minute)Requires firmware to enable getSupportSetGetNoReminderOnWalkReminderV2 Example: { \"on_off\" : 0, \"goal_step\" : 0, \"start_hour\" : 18, \"start_minute\" : 0, \"end_hour\" : 23, \"end_minute\" : 0, \"repeat\" : 127, \"goal_time\" : 0, \"notify_flag\" : 2, \"do_not_disturb_on_off\" : 0, \"no_disturb_start_hour\" : 0, \"no_disturb_start_minute\" : 0, \"no_disturb_end_hour\" : 0, \"no_disturb_end_minute\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-19 17:55:03 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetAllHealthSwitchState.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetAllHealthSwitchState.html","title":"Get All Health Monitoring Switches","keywords":"","body":"Get All Health Monitoring Switches Menu: getHealthSwitchStateSupportV3 Flutter Example: /// Get event number for all health monitoring switches getAllHealthSwitchState( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_all_health_switch_state), /// Get all health monitoring switches libManager.send(evt: CmdEvtType.getAllHealthSwitchState, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description heart_mode int Continuous heart rate measurement switch: 1:On0:Off-1:Not Support pressure_mode int Automatic blood pressure measurement switch1:On0:Off-1:Not Support spo2_mode int Automatic blood oxygen measurement switch1:On0:Off-1:Not Support science_mode int Scientific sleep switch2:scientific sleep mode1:normal sleep mode-1:Not Support temperature_mode int Nighttime temperature switch1:On0:Off-1:Not Support noise_mode int Noise switch1:On0:Off-1:Not Support menstrual_mode int Menstrual cycle switch1:On0:Off-1:Not Support walk_mode int Walking reminder switch1:On0:Off-1:Not Support handwashing_mode int Handwashing reminder switch1:On0:Off-1:Not Support respir_rate_state int Respiration rate switch1:On0:Off-1:Not Support body_power_state int Body battery switch1:On0:Off-1:Not Support drinkwater_mode int Drink water reminder switch1:On0:Off-1:Not Support heartmode_notify_flag int Heart rate notification status: 0 for invalid 1 for allow notification 2 for silent notification 3 for disable notification pressure_notify_flag int Blood pressure notification status: 0 for invalid 1 for allow notification 2 for silent notification 3 for disable notification spo2_notify_flag int Blood oxygen notification status: 0 for invalid 1 for allow notification 2 for silent notification 3 for disable notification menstrual_notify_flag int Menstrual cycle notification status: 0 for invalid 1 for allow notification 2 for silent notification 3 for disable notification guidance_notify_flag int Fitness guidance notification status: 0 for invalid 1 for allow notification 2 for silent notification 3 for disable notification reminder_notify_flag int Reminder notification status: 0 for invalid 1 for allow notification 2 for silent notification 3 for disable notification Example: { \"heart_mode\" : 1, \"pressure_mode\" : 1, \"spo2_mode\" : 1, \"science_mode\" : 0, \"temperature_mode\" : 0, \"noise_mode\" : 1, \"menstrual_mode\" : 0, \"walk_mode\" : 0, \"handwashing_mode\" : -1, \"drinkwater_mode\" : -1, \"heartmode_notify_flag\" : -1, \"pressure_notify_flag\" : 1, \"spo2_notify_flag\" : 1, \"menstrual_notify_flag\" : 0, \"guidance_notify_flag\" : -1, \"reminder_notify_flag\" : 0, \"respir_rate_state\" : 0, \"body_power_state\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetActivitySwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetActivitySwitch.html","title":"Get Activity Recognition Switch","keywords":"","body":"Get Activity Switch for Motion Mode Recognition Menu: getActivitySwitch Flutter Example: /// Get event number for activity switch getActivitySwitch( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_activity_switch), /// Get activity switch libManager.send(evt: CmdEvtType.getActivitySwitch, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description err_code int 0 for successnon-zero for error auto_identify_sport_walk int Auto identify walking switch: 0 for off, 1 for on, -1 for not supported auto_identify_sport_run int Auto identify running switch: 0 for off, 1 for on, -1 for not supported auto_identify_sport_bicycle int Auto identify cycling switch: 0 for off, 1 for on, -1 for not supported auto_pause_on_off int Auto pause switch: 0 for off, 1 for on, -1 for not supported auto_end_remind_on_off_on_off int End reminder switch: 0 for off, 1 for on, -1 for not supported auto_identify_sport_elliptical int Auto identify elliptical switch: 0 for off, 1 for on, -1 for not supported auto_identify_sport_rowing int Auto identify rowing switch: 0 for off, 1 for on, -1 for not supported auto_identify_sport_swim int Auto identify swimming switch: 0 for off, 1 for on, -1 for not supported auto_identify_sport_smart_rope int Auto identify smart rope switch: 0 for off, 1 for on, -1 for not supported Example: { \"err_code\":0, \"auto_identify_sport_walk\":1, \"auto_identify_sport_run\":1, \"auto_identify_sport_bicycle\":-1, \"auto_pause_on_off\":0, \"auto_end_remind_on_off_on_off\":0, \"auto_identify_sport_elliptical\":0, \"auto_identify_sport_rowing\":0, \"auto_identify_sport_swim\":-1, \"auto_identify_sport_smart_rope\":-1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetFirmwareBtVersion.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetFirmwareBtVersion.html","title":"Get Firmware Version and BT Version","keywords":"","body":"Get Firmware Version and BT Version Function Table: getBleAndBtVersion Flutter Example: /// Get Firmware Version and BT Version event number getFirmwareBtVersion( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_get_firmware_bt_version), /// Get Firmware Version and BT Version libManager.send(evt: CmdEvtType.getFirmwareBtVersion, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description firmware_version1 int Firmware version level 1 firmware_version2 int Firmware version level 2 firmware_version3 int Firmware version level 3 BT_flag int BT version flag0: Invalid1: Indicates that the firmware has a corresponding BT firmware BT_version1 int BT version level 1 BT_version2 int BT version level 2 BT_version3 int BT version level 3 BT_match_version1 int BT matching version level 1 BT_match_version2 int BT matching version level 2 BT_match_version3 int BT matching version level 3 Example: { \"BT_flag\" : 1, \"BT_match_version1\" : 2, \"BT_match_version2\" : 0, \"BT_match_version3\" : 7, \"BT_version1\" : 2, \"BT_version2\" : 0, \"BT_version3\" : 9, \"firmware_version1\" : 2, \"firmware_version2\" : 0, \"firmware_version3\" : 6 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetBpAlgVersion.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetBpAlgVersion.html","title":"Get Blood Pressure Algorithm Version","keywords":"","body":"Get Blood Pressure Algorithm Version Information Menu: setSupportV3Bp Flutter Example: /// Get blood pressure algorithm version information event number getBpAlgVersion( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_bp_alg_version), /// Get blood pressure algorithm version information libManager.send(evt: CmdEvtType.getBpAlgVersion, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description Concatenated Version: version1.version2.version3 bp_version_1 int Firmware blood pressure algorithm version1 bp_version_2 int Firmware blood pressure algorithm version2 bp_version_3 int Firmware blood pressure algorithm version3 Example: { \"bp_version_1\": 0, \"bp_version_2\": 0, \"bp_version_3\": 6 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetSupportMaxSetItemNum.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetSupportMaxSetItemNum.html","title":"Get Maximum Number of Details Supported by Firmware","keywords":"","body":"Get Maximum Number of Settings Supported by Firmware Menu: getSetMaxItemsNum Flutter Example: /// Get maximum number of settings supported by firmware event number getSupportMaxSetItemsNum( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_support_max_set_items_num ), /// Get maximum number of settings supported by firmware libManager.send(evt: CmdEvtType.getSupportMaxSetItemsNum, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description contact_max_set_num int Maximum number of frequently contacted persons that firmware supports for app to set (default is 10) reminder_max_set_num int Maximum number of schedule reminders that firmware supports for app to set(default is 30) msg_max_buff_size int Maximum sending buffer size of message reminders (default is 250 bytes) Example: { \"contact_max_set_num\":0, \"reminder_max_set_num\":0, \"msg_max_buff_size\":300, } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 11:32:36 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUndeletableMenuList.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUndeletableMenuList.html","title":"Get Undeletable Menu List in Firmware","keywords":"","body":"Get Non-Deletable Menu List in Firmware Menu: getDeletableMenuListV2 Flutter Example: /// Get non-deletable menu list in firmware event number getUnerasableMeunList( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_undeleteable_meun_list ), /// Get non-deletable menu list in firmware libManager.send(evt: CmdEvtType.getUnerasableMeunList, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description num int Number of items in the list, maximum is 10 item_list int [10] List of non-deletable applications0: Invalid1: Step2: Heart Rate3: Sleep4: Camera5: Alarm6: Music... Example: { \"num\":4, \"item_list\":[ 1, 2, 3, 4 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUnreadAppONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUnreadAppONOFF.html","title":"Get Firmware Red Dot Prompt Switch Status","keywords":"","body":"Get Firmware Red Dot Reminder Switch Status Menu: TODO Flutter Example: /// Get unread app reminder switch event number getUnreadAppReminder( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_unread_app_onoff ), /// Get unread app reminder switch libManager.send(evt: CmdEvtType.getUnreadAppReminder, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description on_off int Switch status 1: On 0: Off-1:Not Support Example: { \"on_off\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetBtStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetBtStatus.html","title":"Query BT Pairing Switch, Connection, A2DP Connection, HFP Connection Status","keywords":"","body":"Query BT Pairing Switch, Connection, A2DP Connection, HFP Connection Status (Only Supported on Devices with BT Bluetooth) Menu: getBleAndBtVersion Flutter Example: /// Query BT pairing switch, connection, A2DP connection, HFP connection status (Only Supported on devices with BT Bluetooth) event number getBtNotice( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_set_bt_notice), /// Query BT pairing switch, connection, A2DP connection, HFP connection status (Only Supported on devices with BT Bluetooth) libManager.send(evt: CmdEvtType.getBtNotice, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description bt_connect_states int 1: BT connection status on0: BT connection status off-1: Invalid bt_pair_states int 1: BT pairing status on0: BT pairing status off-1: Invalid a2dp_connect_states int 1: A2DP connection status on0: A2DP connection status off-1: Invalid hfp_connect_states int 1: HFP connection status on0: HFP connection status off-1: Invalid Example: { \"bt_connect_states\":1, \"bt_pair_states\":1, \"a2dp_connect_states\":1, \"hfp_connect_states\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetContactReviceTime.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetContactReviceTime.html","title":"Get Modification Time of Locally Stored Contact File","keywords":"","body":"Get Firmware Local Contact File Modification Time Menu: TODO Flutter Example: /// Get firmware local contact file modification time event number getContactReviseTime( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_contact_revice_time ), /// Get firmware local contact file modification time libManager.send(evt: CmdEvtType.getContactReviseTime, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description result int 0: No need to send contact file1: Need to send contact data Example: { \"result\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetHRMode.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetHRMode.html","title":"Get Heart Rate Monitoring Mode","keywords":"","body":"Get Heart Rate Monitoring Mode Function Table: getHeartRateModeV2 Flutter Example: /// Get Heart Rate Monitoring Mode event number getHeartRateMode( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_heart_rate_mode), /// Get Heart Rate Monitoring Mode libManager.send(evt: CmdEvtType.getHeartRateMode, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description mode int 0: Turned Off1: Manual Mode2: Automatic3: Continous Monitoring-1:Invalid has_time_range int Whether there is a time range0: No1: Yes start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) measurement_interval int Measurement interval (in minutes) Example: { \"mode\": 1, \"has_time_range\": 0, \"start_hour\": 9, \"start_minute\": 0, \"end_hour\": 12, \"end_minute\": 0, \"measurement_interval\": 15 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetStepGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetStepGoal.html","title":"Get All-day Step Goal","keywords":"","body":"Get Daily Step Goal Menu: getStepDataTypeV2 Flutter Example: /// Get daily step goal event number getStepGoal( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_step_goal), /// Get daily step goal libManager.send(evt: CmdEvtType.getStepGoal, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description step int Daily step goal step_week int Weekly step goalValid when v2_support_set_step_data_type_03_03 is enabled Example: { \"step\":2000, \"step_week\":6000 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUnit.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUnit.html","title":"Get Unit","keywords":"","body":"Get units Menu :getSupportGetUnit Flutter Example: /// Get the unit getUnit( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_unit), /// Get the unit libManager.send(evt: CmdEvtType.getUnit, json: jsonEncode(json)); json fields received by App: Field Name Field Type Field Description dist_unit int -1: invalid 1:km(metric) 2:mi(imperial) temp int Temperature unit -1: invalid 1: Celsius 2: Fahrenheit swim_pool_unit int Pool unit Settings -1: invalid 1: default meter 2: code language int language -1: invalid Refer to Language code List Language code List code language function table id -1 is not valid - 1 Chinese languageCh 2 English languageEnglish 3 French languageFrench 4 German languageGerman 5 Italian languageItalian 6 Spanish languageSpanish 7 Japanese languageJapanese 8 Polish languagePolish 9 Czech languageCzech 10 Romanian languageRomanian 11 Lithuanian languageLithuanian 12 Dutch languageDutch 13 Slovenian languageSlovenian 14 Hungarian languageHungarian 15 Russian languageRussian 16 Ukrainian languageUkrainian 17 Slovak languageSlovak 18 Danish languageDanish 19 Croatian languageCroatian 20 Indonesian languageIndonesian 21 Korean languageKorean 22 Hindi languageHindi 23 Portuguese languagePortuguese 24 Turkish languageTurkish 25 Thai languageThai 26 Vietnamese languageVietnamese 27 Burmese languageBurmese 28 Filipino languageFilipino 29 Traditional Chinese languageTraditionalChinese 30 Greek languageGreek 31 Arabic languageArabic 32 Swedish languageSweden 33 Finland languageFinland 34 Persia languagePersia 35 Norwegian languageNorwegian 36 Malay languageMalay 37 Brazilian Portuguese languageBrazilianPortuguese 38 Bengali languageBengali 39 Khmer languageKhmer Get unit example: ```json { \"dist_unit\" :1, \"temp\" :1, \"swim_pool_unit\" :1, \"language\" : 2 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-28 12:24:54 "},"doc/IDOOtaEvtIntroduction.html":{"url":"doc/IDOOtaEvtIntroduction.html","title":"OTA Instruction Event","keywords":"","body":"{OTA Event} Function Enter Upgrade Mode Directly Enter Upgrade Mode (Ignore Battery) Set OTA Authorization Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOOtaEvt/IDOOtaStart.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOOtaEvt/IDOOtaStart.html","title":"Enter Upgrade Mode","keywords":"","body":"Enter Upgrade Mode Flutter Example: /// Enter Upgrade Mode event number otaStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_ota_start), /// Enter Upgrade Mode libManager.send(evt: CmdEvtType.otaStart, json: jsonEncode(json)); JSON Field Received by App: Field Name Field Type Field Description err_flag int 0: OTA entered successfully1: Failed: Low battery2: Failed: Device not supported3: Failed: Incorrect parameter Example: { \"err_flag\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOOtaEvt/IDOOtaDirectStart.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOOtaEvt/IDOOtaDirectStart.html","title":"Directly Enter Upgrade Mode (Ignore Battery Level)","keywords":"","body":"Enter Upgrade Mode Directly (Ignore Battery) Flutter Example: /// Enter Upgrade Mode Directly (Ignore Battery) event number otaDirectStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_ota_direct_start), /// Enter Upgrade Mode Directly (Ignore Battery) libManager.send(evt: CmdEvtType.otaDirectStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOOtaEvt/IDOOtaAuth.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOOtaEvt/IDOOtaAuth.html","title":"Set OTA Authorization","keywords":"","body":"Set OTA Authorization Flutter Example: /// OTA authorization event number otaAuth( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_ota_auth), /// OTA Authorization libManager.send(evt: CmdEvtType.otaAuth, json: jsonEncode(json)); JSON Field Sent by App: Field Name Field Type Field Description device_id int Device ID version int Version 0 indicates no version check, used for constraints that cannot be downgraded, default 0 Example: { \"device_id\":0, \"version\":0 } JSON Field Received by App: Field Name Field Type Field Description err_code int Error code0: Check passed1: ID check failed2: Version check failed3: Low battery4: Other errors Example: { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/IDOControlEvtIntroduction.html":{"url":"doc/IDOControlEvtIntroduction.html","title":"APP Initiated Notification/Control Event","keywords":"","body":"{APP Initiates Notification/Control Event} Function Control Device Reboot Control Device Disconnection Clear Binding Information Control Device Shutdown Control Device Factory Reset Control Clear Band Cache Send Call Time to Firmware Control Music Start Control Music Stop Control Photo Taking Start Control Photo Taking Stop Control Find Phone Start Control Find Phone Stop Control Open ANCS Start Control Open ANCS Stop APP Transmits Sports Icon Information and Status to the Firmware APP Notifies Firmware to Enable BT Broadcast APP Notifies Firmware of the Permission Status of Certain Functions Set the firmware call quick return switch Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-24 12:24:19 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlReboot.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlReboot.html","title":"Control Device Reboot","keywords":"","body":"Control to Reboot the Device Flutter Example: /// Event number for rebooting the device reboot(evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_reboot), /// Reboot the device libManager.send(evt: CmdEvtType.reboot, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlDisconnect.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlDisconnect.html","title":"Control Device Disconnection","keywords":"","body":"Control Device Disconnection Flutter Example: /// Event number for controlling disconnection controlDisconnect( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_control_disconnect), /// Control disconnection libManager.send(evt: CmdEvtType.controlDisconnect, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlCleanBindInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlCleanBindInfo.html","title":"Clear Binding Information","keywords":"","body":"Clear Binding Information Flutter Example: /// Event number for clearing binding information cleanBindInfo( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_clean_bond_info), /// Clear binding information libManager.send(evt: CmdEvtType.cleanBindInfo, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlShutdown.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlShutdown.html","title":"Control Device Shutdown","keywords":"","body":"Control to Power Off the Device Flutter Example: /// Event number for powering off the device shutdown( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_shutdown), /// Power off the device libManager.send(evt: CmdEvtType.shutdown, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlRestoreFazctory.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlRestoreFazctory.html","title":"Control Device Factory Reset","keywords":"","body":"Control to Factory Reset the Device Flutter Example: /// Event number for factory resetting the device factoryReset( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_restore_fazctory), /// Factory reset the device libManager.send(evt: CmdEvtType.factoryReset, json: jsonEncode(json)); JSON Field Received by the App: Field Name Field Type Field Description is_success int 1: Success 0: Failed Example: { \"is_success\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlClearCache.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlClearCache.html","title":"Control Clear Band Cache","keywords":"","body":"Control Clearing Bracelet Cache Flutter Example: /// Event number for clearing bracelet cache clearCache( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_clear_cache), /// Clear bracelet cache libManager.send(evt: CmdEvtType.clearCache, json: jsonEncode(json)); JSON fields returned by the app: Field Name Field Type Field Description is_success int 1: Success, 0: Failure Example: { \"is_success\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeCallTime.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeCallTime.html","title":"Transfer Call Time to Firmware","keywords":"","body":"Send Call Duration to Firmware Flutter Example: /// Event number for sending call duration to firmware after call connection is established setNoticeCallTime( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_notice_call_time), /// Send call duration to firmware after call connection is established libManager.send(evt: CmdEvtType.setNoticeCallTime, json: jsonEncode(json)); JSON fields sent by the app: Field Name Field Type Field Description sec int Call duration in seconds Example: { \"sec\": 30 } JSON fields received by the app: Field Name Field Type Field Description status_code int 0: Success1: Failure, incorrect parameters Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlMusicStart.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlMusicStart.html","title":"Control Music Start","keywords":"","body":"Control Music Start Flutter Example: /// Event number for controlling music start musicStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_music_start), /// Control music start libManager.send(evt: CmdEvtType.musicStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlMusicStop.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlMusicStop.html","title":"Control Music Stop","keywords":"","body":"Control Music Stop Flutter Example: /// Event number for controlling music stop musicStop( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_music_stop), /// Control music stop libManager.send(evt: CmdEvtType.musicStop, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlPhotoStart.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlPhotoStart.html","title":"Control Photo Start","keywords":"","body":"Control to Start Taking Photo Flutter Example: /// Event number for starting to take a photo (app -> ble) photoStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_photo_start), /// Start taking a photo (app -> ble) libManager.send(evt: CmdEvtType.photoStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlPhotoStop.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlPhotoStop.html","title":"Control Photo Stop","keywords":"","body":"Control to Stop Taking Photo Flutter Example: /// Event number for stopping taking a photo (app -> ble) photoStop( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_photo_stop), /// Stop taking a photo (app -> ble) libManager.send(evt: CmdEvtType.photoStop, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlFindDeviceStart.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlFindDeviceStart.html","title":"Control Find Device Start","keywords":"","body":"Control Find Device Start Flutter Example: /// Event number for Find Device Start (app -> ble) findDeviceStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_find_device_start), /// Find Device Start (app -> ble) libManager.send(evt: CmdEvtType.findDeviceStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlFindDeviceStop.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlFindDeviceStop.html","title":"Control Find Device Stop","keywords":"","body":"Control Find Device Stop Flutter Example: /// Event number for Find Device Stop (app -> ble) findDeviceStop( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_find_device_stop), /// Find Device Stop (app -> ble) libManager.send(evt: CmdEvtType.findDeviceStop, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlOpenANCS.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlOpenANCS.html","title":"Control Open ANCS","keywords":"","body":"Control to Open ANCS (Apple Notification Center Service) Start Flutter Example: /// Event number for opening ANCS (Apple Notification Center Service) start openAncs( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_open_ancs), /// Open ANCS (Apple Notification Center Service) start libManager.send(evt: CmdEvtType.openAncs, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlCloseANCS.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlCloseANCS.html","title":"Control Close ANCS","keywords":"","body":"Control to Stop Opening ANCS Flutter Example: /// Event number for closing ANCS closeAncs( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_close_ancs), /// Close ANCS libManager.send(evt: CmdEvtType.closeAncs, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeIconInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeIconInfo.html","title":"APP Transfers Sport Icon Information and State to Firmware","keywords":"","body":"Transmit Motion Icon Information and Notify Firmware of Status from the App Flutter Example: /// Event number for transmitting motion icon information and notifying firmware of status from the app setNoticeIconInformation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_notcie_icon_informationg ), /// Transmit motion icon information and notify firmware of status from the app libManager.send(evt: CmdEvtType.setNoticeIconInformation, json: jsonEncode(json)); JSON fields sent by the app: Field Name Field Type Field Description states int 1: Start transmission2: End transmission icon_num int Number of icons for transmission Example: { \"states\": 0, \"icon_num\": 0 } JSON fields received by the app: Field Name Field Type Field Description status int 0: Success1: Failure Example: { \"status\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeOpenBroadcast.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeOpenBroadcast.html","title":"APP Notifies Firmware to Enable BT Broadcast","keywords":"","body":"Notify Firmware to Enable BT Broadcasting from the App Flutter Example: /// Event number for notifying firmware to enable BT broadcasting from the app setNoticeOpenBroadcastn( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_notcie_open_broadcast ), /// Notify firmware to enable BT broadcasting from the app libManager.send(evt: CmdEvtType.setNoticeOpenBroadcastn, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description err_code int 0: Success1: Failure Example: { \"err_code\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeDisableFunction.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeDisableFunction.html","title":"APP Notifies Firmware of Permission State for Certain Functions","keywords":"","body":"Notify Firmware of Permission Status for Certain Features Flutter Example: /// Notify firmware that certain features are disabled due to permission denial in the app setNoticeDisableFunc( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_notcie_disable_func ), /// Notify firmware that certain features are disabled due to permission denial in the app libManager.send(evt: CmdEvtType.setNoticeDisableFunc, json: jsonEncode(json)); JSON fields sent by the app: Field Name Field Type Field Description type int 0: Camera permission enable int 1: Enabled0: Disabled Example: { \"type\": 0, \"enable\": 1 } JSON fields received by the app: Field Name Field Type Field Description status_code int 0: Success1: Failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeSetCallQuickReplySwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeSetCallQuickReplySwitch.html","title":"Set the firmware call quick return switch","keywords":"","body":"Set the firmware call quick return switch The function table: setSupportSetCallQuickReplyOnOff Flutter Example: /// Set the shortcut return switch setCallQuickReplyOnOff( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_call_quick_reply_on_off), /// Set the shortcut return switch libManager.send(evt: CmdEvtType.setCallQuickReplyOnOff, json: jsonEncode(json)); json fields delivered by App: Field Name Field Type Field Description on_off int 0: off 1: on Example: { \"on_off\" :1 } json fields received by App: Field Name Field Type Field Description status_code int 0: success, not 0 failure Example: { \"status_code\" :0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-24 12:24:46 "},"doc/IDOV3EvtIntroduction.html":{"url":"doc/IDOV3EvtIntroduction.html","title":"V3 Long Package Instruction Event","keywords":"","body":"{V3 long packet instruction event} Function V3GetDialList V3GetScreenInfo V3SetDial V3SetHRMode V3MusicControl V3NoticeMsg V3SetSportSort V3GetDefaultSportType V3SetAlarm V3GetAlarm V3SetFastMsg V3GetLanguageLibList V3SetVoiceReplyTxt V3SetHotStartParam V3GetBleBeep V3ControlBpCal V3GetDailLIstNew V3SetWallpaperDialStyle V3SetGet100SportSort V3ScheduleReminder V3SetGetMainUiSort V3SetGetBaseSportParamSort V3SetLongCityName V3SetNoticeMegState V3GetPackName V3SyncContact V3SetWeather V3SetWorldTime V3SetWalkRemindTimes V3GetMusicInfo V3OperateMusic V3NoticeMsgDynamic V3SetHistoricalMenstruation V3SetDialSort V3SetRunPlan V3SetCutoverSport V3GetHabitInfo V3MiniProgramControl V3SetSmartCompetitorConfigInfo V3CutoverSportFromDevice V3NoticeDialChange Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetDialList.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetDialList.html","title":"V3 Get Dial List","keywords":"","body":"Get Watch Face List in V3 Function: getNewWatchList Flutter example: /// Get the event ID for the watch face list getWatchFaceList( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_get_watch_face_list), /// Obtain the watch face list libManager.send(evt: CmdEvtType.getWatchFaceList, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description version int Protocol version number available_count int Number of remaining available files file_max_size int Maximum size of a single file (in KB) item array List of watch face details, with \"file_name\" as the field Field Name Field Type Field Description file_name char [] Watch face name Example: { \"version\": 0, \"available_count\": 0, \"file_max_size\": 140, \"item\": [ { \"file_name\": \"w256.iwf\" }, { \"file_name\": \"w174.iwf\" } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetScreenInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetScreenInfo.html","title":"V3 Get Screen Information","keywords":"","body":"V3 Get Screen Information Flutter Example: /// Get event number for obtaining screen information getWatchDialInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_get_screen_ifno), /// Get screen information libManager.send(evt: CmdEvtType.getWatchDialInfo, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description width int Screen width (pixel size) height int Screen height (pixel size) format int Color format sizex100 int Size in 100x increments family_name char [] Family name (maximum 10 bytes) block_size int Compression block size Example: { \"block_size\" : 4096, \"family_name\" : \"139\", \"format\" : 133, \"height\" : 280, \"sizex100\" : 0, \"width\" : 240 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 14:59:38 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetDial.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetDial.html","title":"V3 Set Dial","keywords":"","body":"V3 Set Watch Face function table：getMultiDial 【v3WatchDailSetAddSize】 Flutter Example: /// Set watch face data setWatchFaceData( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_set_watch_face_data), /// Set watch face libManager.send(evt: CmdEvtType.setWatchFaceData, json: jsonEncode(json)); JSON Fields Sent by App: Field Name Field Type Field Description operate int Operation:0 - Query the currently used watch face1 - Set watch face2 - Delete watch face3 - Dynamic request space to set the corresponding space size file_name char [] Watch face name, maximum 29 bytes watch_file_size int Uncompressed file lengthAfter the firmware opens the function table v3WatchDailSetAddSize, the app needs to send this fieldBefore the watch face is transmitted, the firmware needs to allocate corresponding space to save it, and the uncompressed file length needs to be transmitted Example: { \"operate\": 0, \"file_name\": \"\", \"watch_file_size\": 0 } JSON Fields Received by App: Field Name Field Type Field Description err_code int Error code, 0 for success, non-zero for error operate int Operation:0 - Query the currently used watch face1 - Set watch face2 - Delete watch face3 - Dynamic request space to set the corresponding space size file_name char [] Watch face name, maximum 29 bytes file_count int Number of filesRequires the firmware to enable the function table v3WatchDailSetAddSizeIf operate!=3, this data is the same as before, which is 1 and is saved as beforeIf operate=3: dynamic request space to set the corresponding space size, this corresponds to a deleted file name columnIf v3WatchDailSetAddSize is not enabled, this field defaults to 1 Example: { \"err_code\": 0, \"operate\": 0, \"file_name\": \"w256.iwf\", \"file_count\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 15:07:01 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetHRMode.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetHRMode.html","title":"V3 Set Heart Rate Mode","keywords":"","body":"Set Heart Rate Mode V3 Function: setSmartHeartRate【setSetV3HeartInterval，v3HeartSetRateModeCustom】 Flutter Example: // Set heart rate mode event number setHeartMode( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_hr_mode), /// Set heart rate mode libManager.send(evt: CmdEvtType.setHeartMode, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description update_time int Update time as a Unix timestamp in seconds. If equal to 0, it means to get the current UTC timestamp. mode int Mode0: Off1: Auto (5 minutes)2: Continuous monitoring (5 seconds)3: Manual mode (disables auto)4: Default type, firmware automatically sets to default mode after setting5: Set the corresponding measurement interval6: Intelligent Heart Rate Mode (ID206)Note:1. If the function setSetV3HeartInterval is configured, Mode 0, Mode 1, and Mode 2 will be ineffective.2. When configuring with fast settings, setting setSetV3HeartInterval will activate Mode 53. When setting continuous heart rate, if the function setSetV3HeartInterval is configured, the corresponding mode is Mode 5. has_time_range int Whether there is a time range. 0: No, 1: Yes start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) measurement_interval int Measurement interval in seconds notify_flag int Notification type:0: Invalid1: Allow notifications2: Silent notifications3: Close notificationsNote: This is ineffective if the firmware does not enable v3HeartSetRateModeCustom high_heart_mode int 1: Enable smart high heart rate reminder0: OffNote: This is ineffective if the firmware does not enable v3HeartSetRateModeCustom low_heart_mode int 1: Enable smart low heart rate reminder0: OffNote: This is ineffective if the firmware does not enable v3HeartSetRateModeCustom high_heart_value int Smart high heart rate reminder thresholdNote: This is ineffective if the firmware does not enable v3HeartSetRateModeCustom low_heart_value int Smart low heart rate reminder thresholdNote: This is ineffective if the firmware does not enable v3HeartSetRateModeCustom Example of querying the heart rate mode by APP: { \"update_time\": 0, \"mode\": 0, \"has_time_range\": 0, \"start_hour\": 0, \"start_minute\": 0, \"end_hour\": 0, \"end_minute\": 0, \"measurement_interval\": 0, \"notify_flag\": 0, \"high_heart_mode\": 0, \"low_heart_mode\": 0, \"high_heart_value\": 0, \"low_heart_value\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description update_time int Update time as a Unix timestamp in seconds. If equal to 0, it means to get the current UTC timestamp. mode int Mode0: Off1: Auto (5 minutes)2: Continuous monitoring (5 seconds)3: Manual mode (disables auto)4: Default type, firmware automatically sets to default mode after setting5: Set the corresponding measurement interval6: Intelligent Heart Rate Mode (ID206)-1:invalidNote:1. If the function setSetV3HeartInterval is configured, Mode 0, Mode 1, and Mode 2 will be ineffective.2. When configuring with fast settings, setting setSetV3HeartInterval will activate Mode 53. When setting continuous heart rate, if the function setSetV3HeartInterval is configured, the corresponding mode is Mode 5. has_time_range int Whether there is a time range. 0: No, 1: Yes start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) measurementInterval int Measurement interval in seconds get_sec_mode int Currently supported heart rate types by the watchall 0 invalid valuesBit0: 5s modeNote: This is returned as 0 if setSetV3HeartInterval is not enabled in the firmware get_min_mode int Currently supported heart rate types by the watch,all 0:invalid valuesBit0: 1 minutebit1: 3 minutesbit2: 5 minutesbit3: 10 minutesbit4: 30 minutesbit5: 285 mode,bit6: 15 minute modeNote: This is returned as 0 if setSetV3HeartInterval is not enabled in the firmware notify_flag int Notification type:0: Invalid1: Allow notifications2: Silent notifications3: Close notificationsNote: This is returned as 0 if v3HeartSetRateModeCustom is not enabled in the firmware high_heart_mode int 1: Enable smart high heart rate reminder0: Off-1:invalidNote: This is returned as 0 if v3HeartSetRateModeCustom is not enabled in the firmware low_heart_mode int 1: Enable smart low heart rate reminder 0: Off-1:invalidNote: This is returned as 0 if v3HeartSetRateModeCustom is not enabled in the firmware high_heart_value int Smart high heart rate reminder thresholdNote: This is returned as 0 if v3HeartSetRateModeCustom is not enabled in the firmware low_heart_value Int Smart low heart rate reminder thresholdNote: This is returned as 0 if v3HeartSetRateModeCustom is not enabled in the firmware Example: { \"update_time\": 0, \"mode\": 5, \"has_time_range\": 1, \"start_hour\": 9, \"start_minute\": 0, \"end_hour\": 12, \"end_minute\": 19, \"measurement_interval\": 5, \"notify_flag\": 2, \"high_heart_mode\": 0, \"low_heart_mode\": 0, \"high_heart_value\": 0, \"low_heart_value\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 15:16:18 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3MusicControl.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3MusicControl.html","title":"V3 Music Control","keywords":"","body":"V3 Control Music Function: setBleControlMusic 【v3MusicControl02AddSingerName】 Flutter Example: /// Music control event number musicControl( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_music_control), /// Control music libManager.send(evt: CmdEvtType.musicControl, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description status int Status:0: Invalid1: Play2: Pause3: Stop cur_time_second int Current play timeUnit:second total_time_second int Total play timeUnit:second music_name char [] Music name (maximum 63 bytes) singer_name char [] Singer name (maximum 63 bytes)This value is not applicable if v3MusicControl02AddSingerName is not enabled on the firmware Example: { \"status\": 1, \"cur_time_second\": 5, \"total_time_second\": 360, \"music_name\": \"夕阳无限好.mp3\", \"singer_name\": \"eason\" } JSON Fields Received by the App: Field Name Field Type Field Description status int 1: Success0: Failure Example: { \"status\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 15:26:36 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3NoticeMsg.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3NoticeMsg.html","title":"V3 Notify Message Reminder","keywords":"","body":"V3 Notification Message Reminder Function: getNotifyMsgV3 Flutter Example: /// Notification message reminder event number noticeMessageV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_notice_message), /// Notification message reminder libManager.send(evt: CmdEvtType.noticeMessageV3, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description verison int Protocol library version numberDefault version=1Version=2 is the sent format with msg_id evt_type int Message application type msg_id int Message IDIf evt_type is message reminder, mesg_ID is valid support_answering bool Support answering: 1Do not support answering: 0 support_mute bool Support mute: 1Do not support mute: 0 support_hang_up bool Support hang up: 1Do not support hang up: 0 contact char [] Contact name (maximum 63 bytes) phone_number char [] Phone number (maximum 31 bytes) data_text char [] Message content (maximum 249 bytes) Example: { \"verison\": 2, \"evt_type\": 12289, \"msg_id\": 1, \"support_answering\": false, \"support_mute\": false, \"support_hang_up\": false, \"msg_data\": \"Hello\", \"contact\": \"Lihua\", \"phone_number\": \"13340216580\", \"data_text\": \"123456\" } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 1: Success, 0: Failure Example: { \"is_success\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-07 10:52:30 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetSportSort.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetSportSort.html","title":"V3 Set Sport Type Sorting","keywords":"","body":"V3 Set Sports Type Sorting Function Name: getSportsTypeV3 Flutter Example: /// Set sports type sorting event number setSportSortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_sport_sort), /// Set sports type sorting libManager.send(evt: CmdEvtType.setSportSortV3, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Data Type Field Description num int Number of sports type details, up to 30 item array Array of sport type sorting details with index and type Field Name Data Type Field Description index int Sorting number, starting from 1 type int Sport type, check the defined sport types for details Example: { \"num\":3, \"item\":[ { \"index\":1, \"type\":2, }, { \"index\":2, \"type\":22, }, { \"index\":3, \"type\":33, } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetAlarm.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetAlarm.html","title":"V3 APP Set BLE Alarm","keywords":"","body":"V3 Set BLE alarm Menu: syncV3SyncAlarm Flutter example: /// Set BLE alarm event number in V3APP setAlarmV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_alarm), /// Set BLE alarm in V3APP libManager.send(evt: CmdEvtType.setAlarmV3, json: jsonEncode(json)); App's JSON fields: Field Name Field Type Field Description num int Alarm ID, starting from 1, 1~maximum supported number of alarms version int Protocol version, default is 0 item list Collection of alarm details.Fields: alarm_id&status&type&hour&minute&repeat&tsnooze_duration&delay_min&name&shock_on_off&repeat_times Field Name Field Type Field Description alarm_id int Alarm ID status int 0: Do not display (Delete)1: Display type int Alarm type00: Wake up01: Sleep,02: Exercise03: Take medicine04: Appointment05: Gathering06: Meeting,07: Other hour int Alarm time (hour) minute int Alarm time (minute) repeat int Repeatbit1-bit7: Monday to Sunday,value 0 not repeat, value 1 repeatbit0: master switch (on/off),value 0 off, value 1 on tsnooze_duration int Snooze duration in minutes or seconds delay_min int Delay minutes name char [24] Alarm name, maximum 23 bytes shock_on_off int Vibration switch0: Off, 1: On repeat_times int Repeat alarm timesSet to 0 to turn off, set to a number to repeat that many times Example: { \"item\" : [ { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 } ], \"num\" : 10, \"version\" : 0 } App's received JSON fields: Field Name Field Type Field Description status int 0: Success, 1: Failed Example: { \"status\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-19 17:19:23 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetAlarm.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetAlarm.html","title":"V3 APP Get Device Alarm","keywords":"","body":"Getting Alarms for V3APP Devices Menu: syncV3SyncAlarm Flutter example: /// Get alarm events of BLE devices in v3app getAlarmV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_alarm), /// Send command to get alarms for v3app devices libManager.send(evt: CmdEvtType.getAlarmV3, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description flag int Flag for getting alarms0: Get all alarms1: Get alarms modified by the device notification JSON fields received by the App: Field Name Field Type Field Description num int Number of alarm details version int Protocol version, default is 0 item List Alarm detailsCollection of alarm details: alarm_id&status&type&hour&minute&repeat&delay_min&name&shock_on_off&repeat_times Field Name Field Type Field Description alarm_id int Alarm ID, starting from 1, 1~maximum supported number of alarms status int 0: Hidden (deleted)1: Displayed-1:Invailed type int Alarm type00: Wake up,01: Sleep02: Exercise03: Medication04: Date05: Gathering06: Meeting07: Other hour int Alarm hour minute int Alarm minute repeat int Repeatbit1-bit7: Monday to Sunday,value 0 not repeat, value 1 repeatbit0: master switch (on/off),value 0 off, value 1 on tsnooze_duration int reserve delay_min int Delay in minutes name char [24] Alarm name, maximum 23 bytes shock_on_off int Vibration switch0: Off1: On repeat_times int Number of repeated alarms Number of times the alarm is repeated, delay switch, set to 0 to turn off, set to a number to repeat that many times Example: { \"item\" : [ { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 } ], \"num\" : 10, \"version\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-19 17:22:41 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetLanguageLibList.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetLanguageLibList.html","title":"V3 Get Device Font Library List","keywords":"","body":"V3 Get Language Library List Menu: getLangLibraryV3 Flutter Example: /// Event number for getting the device's language library list in V3 getLanguageLibraryDataV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_language_library_data), /// Get the device's language library list in V3 libManager.send(evt: CmdEvtType.getLanguageLibraryDataV3, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description version int Protocol library versionReserved use_lang int Currently used language default_lang int Default language fixed_lang int Number of fixed storage languages max_storage_lang int Maximum storage languages items_len int Number of languages currently supported by the firmwareThere may not be corresponding font library files user_len int Number of languages currently stored items set Details of the number of languages currently supported by the firmwarelanguage_type & language_version set items_user set Details of the number of languages currently storedlanguage_type & language_version set Field Name Field Type Field Description language_type int Language type0: Invalid1: Chinese2: English3: French4: German5: Italian6: Spanish7: Japanese8: Polish9: Czech10: Romanian11: Lithuanian12: Dutch13: Slovenian14: Hungarian15: Russian16: Ukrainian17: Slovak18: Danish19: Croatian20: Indonesian21: Korean22: Hindi23: Portuguese24: Turkish25: Thai26: Vietnamese27: Burmese28: Filipino29: Traditional Chinese30: Greek31: Arabic32: Swedish33: Finnish34: Persian35: Norwegian language_version int Language version number Example: { \"version\": 0, \"use_lang\": 1, \"default_lang\": 1, \"fixed_lang\": 3, \"max_storage_lang\": 10, \"items_len\": 2, \"user_len\": 3, \"items\": [ { \"language_type\": 1, \"language_version\": 0 }, { \"language_type\": 2, \"language_version\": 0 } ], \"items_user\": [ { \"language_type\": 1, \"language_version\": 0 }, { \"language_type\": 2, \"language_version\": 0 }, { \"language_type\": 3, \"language_version\": 0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetVoiceReplyTxt.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetVoiceReplyTxt.html","title":"V3 Set Voice Reply Text","keywords":"","body":"V3 Voice Reply Text Function Name: getSportsTypeV3 Flutter Example: /// V3 voice reply text event number setVoiceReplyTxtV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_voice_reply_txt), /// V3 voice reply text libManager.send(evt: CmdEvtType.setVoiceReplyTxtV3, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Data Type Field Description version int Protocol version number, 2 flag_is_continue int Flag for continuing recording0: Stop recording, 1: Continue recording title char [] Title data, maximum 31 bytes text_content char [] Content data, maximum 511 bytes Example: { \"version\":0, \"flag_is_continue\":1, \"title\":\"title\", \"text_content\":\"content\" } JSON Fields Received by the App: Field Name Data Type Field Description is_success int 1: Success, 0: Failure Example: { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-07 10:55:14 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetHotStartParam.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetHotStartParam.html","title":"V3 Set GPS Hot Start Parameters","keywords":"","body":"V3 Set GPS Hot Start Parameters Flutter Example: /// V3 set GPS hot start parameters event number setHotStartParamV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_hot_start_param ); /// V3 set GPS hot start parameters libManager.send( evt: CmdEvtType.setHotStartParamV3, json: jsonEncode(json) ); JSON Fields Sent by the App: Field Name Field Type Field Description accmaj int Reference height (in meters) accmin int Semi-major RMS accuracy (in meters) accvert int Direction angle (in degrees) altitude int Height x10 bear int Semi-minor RMS accuracy (in meters) latitude int Latitude x10^6, positive for north longitude int Longitude x10^6, positive for east tcxo_offset int TCXO offset Example: { \"accmaj\": 0, \"accmin\": 0, \"accvert\": 0, \"altitude\": 0, \"bear\": 0, \"latitude\": 0, \"longitude\": 0, \"tcxo_offset\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetBleBeep.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetBleBeep.html","title":"V3 Get Firmware Local Beep Sound File Information","keywords":"","body":"Getting firmware local beep file information for V3 Menu: getSupportGetBleBeepV3 Flutter example: /// V3 command to get firmware local beep file information getBleBeepV3( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_ble_beep ), /// Send V3 command to get firmware local beep file information libManager.send(evt: CmdEvtType.getBleBeepV3, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description version int Protocol version number err_code int Error code, 0 for success, non-zero for failure item_count int Number of beep files item array List of beep file names Field Name Field Type Field Description name char [] Beep file name, maximum 30 bytes Example: { \"version\": 0, \"err_code\": 0, \"item_count\": 2, \"item\": [ { \"name\": \" \" }, { \"name\": \" \" } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3ControlBpCal.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3ControlBpCal.html","title":"V3 Control Blood Pressure Calibration","keywords":"","body":"V3 Blood Pressure Calibration Control function table:setSupportV3Bp Flutter Example: /// v3 blood pressure calibration control setBpCalControlV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_bp_cal_control), /// v3 blood pressure calibration control libManager.send(evt: CmdEvtType.setBpCalControlV3, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description operate int 0: Invalid1: Start blood pressure calibration2: Stop blood pressure calibration3: Get feature vector information file_path char [] The file path to save the raw data obtained during firmware blood pressure calibrationPath includes file name (../../blood.txt)Valid when operate=1 Example: { \"operate\": 1, \"file_path\": \"/sdcard/lx/blood.txt\" } JSON Fields Received by the App: Field Name Field Type Field Description error_code int Error code: 0 for success, non-zero for failure operate int Operation0: Invalid1: Start blood pressure calibration2: Stop blood pressure calibration3: Get feature vector sbp_ppg_feature_num int Number of high blood pressure PPG feature vectorsValid when operate=3 dbp_ppg_feature_num int Number of low blood pressure PPG feature vectorsValid when operate=3 sbp_ppg_feature_items int [] Array of high blood pressure PPG feature vectorsValid when operate=3 dbp_ppg_feature_items int [] Array of low blood pressure PPG feature vectorsValid when operate=3 Example: { \"error_code\": 0, \"operate\": 1, \"sbp_ppg_feature_num\": 0, \"dbp_ppg_feature_num\": 0, \"sbp_ppg_feature_items\": null, \"dbp_ppg_feature_items\": null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 16:22:33 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetDailLIstNew.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetDailLIstNew.html","title":"V3 Get Dial List (New Interface)","keywords":"","body":"Getting watch face list for V3 (New API) Menu: getNewWatchList 【setWatchCapacitySizeDisplay，v3SupportGetWatchSize】 Flutter example: /// V3 command to get watch face list getWatchListV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_watch_list_new), /// Send V3 command to get watch face list libManager.send(evt: CmdEvtType.getWatchListV3, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description local_watch_num int Total number of local watch faces cloud_watch_num int Total number of cloud watch faces wallpaper_watch_num int Total number of wallpaper watch faces user_cloud_watch_num int Number of cloud watch faces used user_wallpaper_watch_num int Number of wallpaper watch faces used now_show_watch_name char [] ID of the currently displayed watch face, maximum 30 bytes watch_frame_main_version int Framework version number, starting from 1 file_max_size int Maximum size of a single file, in kilobytes(reserve) list_item_numb int Number of watch face list details watch_capacity_size int Total capacity of watch facesUint:ByteSet to 0 if the firmware enables setWatchCapacitySizeDisplay user_watch_capacity_size int Used capacity of watch facesUint:ByteSet to 0 if the firmware enables setWatchCapacitySizeDisplay usable_max_download_space_size int Maximum continuous space available for downloading watch facesUint:ByteSet to 0 if the firmware enables setWatchCapacitySizeDisplay item array Watch face list details, including type, watch_version, sort_number, name, and size Field Name Field Type Field Description type int Watch face type1: Normal watch face2: Wallpaper watch face3: Cloud watch face watch_version int Current version number of the watch face (applies to cloud watch faces) sort_number int Watch face order numberStart at 0 name char [] Watch face name size int Size of the watch face, in bytesApplies only if the firmware enables v3SupportGetWatchSize, otherwise the field is invalid Example: { \"local_watch_num\": 0, \"cloud_watch_num\": 0, \"wallpaper_watch_num\": 0, \"user_cloud_watch_num\": 0, \"user_wallpaper_watch_num\": 0, \"now_show_watch_name\": \"w123.iwf\", \"watch_frame_main_version\": 0, \"file_max_size\": 0, \"list_item_numb\": 2, \"watch_capacity_size\": 0, \"user_watch_capacity_size\": 0, \"usable_max_download_space_size\": 0, \"item\": [ { \"type\": 0, \"watch_version\": 0, \"sort_number\": 0, \"name\": \"w123.iwf\", \"size\": 0 }, { \"type\": 0, \"watch_version\": 0, \"sort_number\": 0, \"name\": \"w846.iwf\", \"size\": 0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 17:36:14 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWallpaperDialStyle.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWallpaperDialStyle.html","title":"V3 Set Wallpaper Dial Style","keywords":"","body":"V3 Set Wallpaper Dial Color and Position Function Name: setWatchPhotoPositionMove Flutter Example: /// Set wallpaper dial list event number setWallpaperDialReplyV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_wallpaper_dial_reply), /// Set wallpaper dial list libManager.send(evt: CmdEvtType.setWallpaperDialReplyV3, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Data Type Field Description operate int Operation: 0 for query, 1 for setting, 2 for deleting the wallpaper dial location int Set location information, reference to the 9-grid layout hide_type int Hide type: 0 for showing all, 1 for hiding sub-controls (icons and numbers) time_color int Color of time control (1 byte reserved + R (1 byte) + G (1 byte) + B (1 byte)) widget_type int Control type: 1 for week/date, 2 for steps, 3 for distance, 4 for calories, 5 for heart rate, 6 for battery widget_icon_color int Color of widget icons (1 byte reserved + R (1 byte) + G (1 byte) + B (1 byte)) widget_num_color int Color of widget numbers (1 byte reserved + R (1 byte) + G (1 byte) + B (1 byte)) Example: { \"operate\": 0, \"location\": 0, \"hide_type\": 0, \"time_color\": 0, \"widget_type\": 0, \"widget_icon_color\": 0, \"widget_num_color\": 0 } JSON Fields Received by the App: Field Name Data Type Field Description err_code int 0 for success, non-zero for failure operate int Operation: 0 for query, 1 for setting, 2 for deleting the wallpaper dial location int Set location information hide_type int Hide type time_color int Color of time control widget_type int Control type widget_icon_color int Color of widget icons (1 byte reserved + R (1 byte) + G (1 byte) + B (1 byte)) widget_num_color int Color of widget numbers (1 byte reserved + R (1 byte) + G (1 byte) + B (1 byte)) Example: { \"err_code\": 0, \"operate\": 0, \"location\": 1, \"hide_type\": 1, \"time_color\": 16777215, \"widget_type\": 1, \"widget_icon_color\": 0, \"widget_num_color\": 65535 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetGet100SportSort.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetGet100SportSort.html","title":"V3 Set/Get 100 Sport Type Sorting","keywords":"","body":"V3 Set and Query 100 Sports Sorting Function: getSportsTypeV3 Flutter Example: /// v3 New event number for 100 sports sorting set100SportSortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_100_sport_sort), /// v3 New 100 sports sorting libManager.send(evt: CmdEvtType.set100SportSortV3, json: jsonEncode(json)); JSON Fields Sent by App: Field Name Field Type Field Description version int Protocol library version number operate int Operation 0: Invalid 1: Query 2: Set now_user_location int Current position of displayed added sports all_num int Number of sports in the sorting list items_set int [] Sports sorting list, maximum 150 set Example: { \"version\": 0, \"operate\": 2, \"now_user_location\": 2, \"all_num\": 6, \"items_set\": [ 2, 3, 50, 198, 20, 32 ] } JSON Fields Received by App: Field Name Field Type Field Description version int Protocol library version number err_code int 0: Success, Non-zero: Failure operate int Operation 0: Invalid 1: Query 2: Set min_show_num int Minimum number of items to be displayed, at least 1 max_show_num int Maximum number of items to be displayed, maximum 20 now_user_location int Current position of displayed added sports, app displays based on this position, with the devices added before corresponding to those positions, and those added later to the positions after this position. Only valid for queries all_num int Number of sports sorting list details, valid for queriesmaximum 150 set(array items) items array List of sports sorting, containing type andflag Each item in the sports sorting list contains the following fields: Field Name Field Type Field Description type int Type of sport flag int 0: None downloaded for allBit0: Small icon downloadedBit1: Big icon downloadedBit2: Medium icon downloadedBit3: Smallest icon downloaded Example: { \"version\": 0, \"err_code\": 0, \"operate\": 2, \"min_show_num\": 1, \"max_show_num\": 20, \"now_user_location\": 2, \"all_num\": 6, \"items\": null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 19:59:36 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3ScheduleReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3ScheduleReminder.html","title":"V3 Schedule Reminder","keywords":"","body":"V3 Schedule Reminder Menu: 【getSupportSetRepeatWeekTypeOnScheduleReminderV3，getSupportSetRepeatTypeOnScheduleReminderV3】 Flutter example: /// v3 set schedule reminder event ID setSchedulerReminderV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_scheduler_reminder), /// v3 set schedule reminder libManager.send(evt: CmdEvtType.setSchedulerReminderV3, json: jsonEncode(json)); JSON fields sent by the app: Field Name Field Type Field Description version int Protocol library version number operate int Operation type0: Invalid1: Add2: Delete3: Query4: Modify num int Number of reminder event details in the items field. Only affects the setting, otherwise 0. Sent one at a time items array Reminder event details Maximum of 1 data item Field Name Field Type Field Description id int Reminder event ID. Incremental value sent by the app, starting from 0 year int Year mon int Month day int Day hour int Hour min int Minute sec int Second repeat_type int Repeat time Set bit1-bit7 for week-based repeat if enabled with getSupportSetRepeatWeekTypeOnScheduleReminderV3 (Monday to Sunday, with bit 0 as the general switch) Set repeat type (0: Invalid, 1: Once, 2: Daily, 3: Weekly, 4: Monthly, 5: Yearly) if enabled with getSupportSetRepeatTypeOnScheduleReminderV3 remind_on_off int Daily reminder switch0: Off, 1: On state int State code 0: Invalid, 1: Deleted, 2: Enabled title char [] Title content. Maximum 74 bytes note char [] Reminder content. Maximum 149 bytes Example: { \"version\": 0, \"operate\": 1, \"num\": 1, \"items\": [ { \"id\": 0, \"year\": 2022, \"mon\": 12, \"day\": 26, \"hour\": 15, \"min\": 51, \"sec\": 20, \"repeat_type\": 255, \"remind_on_off\": 1, \"state\": 2, \"title\": \"Reminder 1\", \"note\": \"Remember to complete the task\" } ] } JSON fields received by the app: Field Name Field Type Field Description version int Protocol library version number err_code int Error code. 0 if successful, non-zero if error num int Number of existing reminder data in the firmware operate int Operation type0: Invalid1: Add2: Delete3: Query4: Modify items array Reminder event details Field Name Field Type Field Description id int Reminder event ID. Incremental value sent by the app, starting from 0 year int Year mon int Month day int Day hour int Hour min int Minute sec int Second repeat_type int Repeat time Set bit1-bit7 for week-based repeat if enabled with getSupportSetRepeatWeekTypeOnScheduleReminderV3 (Monday to Sunday, with bit 0 as the general switch) Set repeat type (0: Invalid, 1: Once, 2: Daily, 3: Weekly, 4: Monthly, 5: Yearly) if enabled with getSupportSetRepeatTypeOnScheduleReminderV3 remind_on_off int Daily reminder switch0: Off, 1: On state int State code 0: Invalid, 1: Deleted, 2: Enabled title char [] Title content. Maximum 74 bytes note char [] Reminder content. Maximum 149 bytes Example: { \"version\": 0, \"err_code\": 0, \"num\": 0, \"operate\": 1, \"items\": null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 18:22:17 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetGetMainUiSort.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetGetMainUiSort.html","title":"V3 Set/Get Main UI Control Sorting","keywords":"","body":"V3 Setting and Query Sorting of Main UI Controls Function: setSetMainUiSort Flutter Example: /// v3 Set event number for sorting of main UI controls setMainUISortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_main_ui_sort), /// v3 Set sorting of main UI controls libManager.send(evt: CmdEvtType.setMainUISortV3, json: jsonEncode(json)); JSON Fields Sent by App: Field Name Field Type Field Description version int Protocol library version number operate int Operation 0: Invalid 1: Query 2: Set all_num int Number of details of control sorting list items int [] List of control sorting details location_x int Coordinate x-axis, starting from 1 location_y int Coordinate y-axis, starting from 1 One y-axis represents a horizontal grid size_type int 0: Invalid 1: Large icon 2: Small icon widgets_type int Types of controls 0: Invalid 1: Week/Date 2: Steps 3: Distance 4: Calories 5: Heart Rate 6: Battery Example: { \"version\": 0, \"operate\": 2, \"all_num\": 3, \"items\": [ 1, 2, 3 ], \"location_x\": 1, \"location_y\": 1, \"size_type\": 2, \"widgets_type\": 1 } JSON Fields Received by App: Field Name Field Type Field Description version int Protocol library version number err_code int 0: Success, Non-zero: Failure operate int Operation 0: Invalid 1: Query 2: Set all_num int Number of currently displayed list in firmware items array Arrangement of currently displayed list in firmware Collection oflocation_x,location_y,size_type, support_size_type,and widgets_type support_items array All supported component types in firmware Collection of support_size_type and widgets_type Field Name Field Type Field Description location_x int Coordinate x-axis, starting from 1 location_y int Coordinate y-axis, starting from 1 One y-axis represents a horizontal grid size_type int 0: Invalid 1: Large icon 2: Small icon support_size_type int Editable icon types supported by the firmware 0: Invalid 1: Large icon 2: Small icon 3: Large icon + Small icon widgets_type int Types of controls 0: Invalid 1: Week/Date 2: Steps 3: Distance 4: Calories 5: Heart Rate 6: Battery Field Name Field Type Field Description support_size_type int Editable icon types supported by the firmware 0: Invalid 1: Large icon 2: Small icon 3: Large icon + Small icon widgets_type int Types of controls 0: Invalid 1: Week/Date 2: Steps 3: Distance 4: Calories 5: Heart Rate 6: Battery Example: { \"version\": 0, \"err_code\": 0, \"operate\": 0, \"all_num\": 0, \"items\": [], \"location_x\": 0, \"location_y\": 0, \"size_type\": 0, \"widgets_type\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 20:03:54 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetGetBaseSportParamSort.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetGetBaseSportParamSort.html","title":"V3 Set/Get Base Sport Parameter Sorting","keywords":"","body":"V3 Set and Query Sports Sub-item Data Sorting Function: setSet20SportParamSort Flutter Example: /// v3 Set event number for sports sub-item data sorting setBaseSportParamSortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_base_sport_param_sort), /// v3 Set sports sub-item data sorting libManager.send(evt: CmdEvtType.setBaseSportParamSortV3, json: jsonEncode(json)); JSON Fields Sent by App: Field Name Field Type Field Description version int Protocol library version number operate int Operation 0: Invalid 1: Query 2: Set sport_type int Type of sport now_user_location int Current position of displayed added sports all_num int Number of items in the sports sorting list items int [] Settings list, maximum 50 set Example: { \"version\": 0, \"operate\": 2, \"sport_type\": 2, \"now_user_location\": 2, \"all_num\": 5, \"items\": [ 1, 2, 3, 4, 5 ] } JSON Fields Received by App: Field Name Field Type Field Description version int Protocol library version number err_code int 0: Success, Non-zero: Failure operate int Operation 0: Invalid 1: Query 2: Set sport_type int Type of sport now_user_location int Current position of displayed added sports, app displays based on this position, with the devices added before corresponding to those positions, and those added later to the positions after this position. Only valid for queries all_num int Number of sports sorting list details, valid for queriesmaximum 50 set items int [] List of sports sub-item sorting, containing sub-item sorting enumeration Example: { \"version\": 0, \"err_code\": 0, \"operate\": 0, \"sport_type\": 0, \"now_user_location\": 0, \"all_num\": 0, \"items\": [] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 20:02:22 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetLongCityName.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetLongCityName.html","title":"V3 Set Sport City Name","keywords":"","body":"Setting the Name of a Sports City (V3) Flutter Example: /// V3 Setting the Name of a Sports City event number setLongCityNameV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_long_city_name), /// V3 Setting the Name of a Sports City libManager.send(evt: CmdEvtType.setLongCityNameV3, json: jsonEncode(json)); JSON field sent by the app: Field Name Field Type Field Description version int Library version number name char [] City nameMaximum 74 bytes Example: { \"version\": 0, \"name\": \"shenzhen\" } JSON field received by the app: Field Name Field Type Field Description version int Library version number err_code int Error code: 0 for success, non-zero for error Example: { \"version\": 0, \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-07 10:56:47 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetNoticeMegState.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetNoticeMegState.html","title":"V3 Set Notification Status for Individual Applications","keywords":"","body":"Setting Notification Status for a Single App (V3) Function: setSetNotificationStatus 【setNoticeMessageStateUseVersion0x20】 Flutter Example: /// V3 Setting Notification Status event number setNoticeMessageState( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.tran_json_set_notice_message_state), /// V3 Setting Notification Status libManager.send(evt: CmdEvtType.setNoticeMessageState, json: jsonEncode(json)); JSON field sent by the app: Field Name Field Type Field Description version int Library version number items_num int Number of message details operat int Operation1: Add2: Modify3: Get and Query all_on_off int Add and modify onlyOverall notification switch1: Enable all notifications0: Disable all notifications all_send_num int Total number of packets sentFor sending more than 100 packets in multiple partsall_send_num = now_send_index for completion of sending now_send_index int Current sequence of sending all_notify_state int Added and modified Valid Notification status General switch 0: invalid 1: all enable notifications 2: all silent notifications 3: all disable notifications function table setNoticeMessageStateUseVersion0x20 open effectively items Array Message detailsCollection of evt_type, notify_state, and pic_flag Field Name Field Type Field Description evt_type int Event type notify_state int Notification status1: Allow notifications2: Silent notifications3: Close notifications pic_flag int Applies when replying, set this parameter to 00: Invalid1: Download corresponding image2: No corresponding image APP Example of querying application notification status: { \"version\": 0, \"items_num\": 0, \"operat\": 3, \"all_on_off\": 1, \"all_send_num\": 1, \"now_send_index\": 1 } JSON field received by the app: Field Name Field Type Field Description version int Library version number err_code int Error code: 0 for success, non-zero for failure operat int Operation1: Add2: Modify3: Get and Query all_on_off int Valid for queryingReply with overall notification switch status1: Enable all notifications,0: Disable all notifications-1:Invalid all_notify_state int Valid Total switch of notification status -1: invalid 1: all enable notifications 2: all silent notifications 3: all disable notifications function table setNoticeMessageStateUseVersion0x20 open effectively items_num int Valid for queryingNumber of message details in the firmware items Array Message details content, valid for querying Field Name Field Type Field Description evt_type int Event type notify_state int Notification status1: Allow notifications2: Silent notifications3: Close notifications pic_flag int 0: Invalid1: Download corresponding image2: No corresponding image Example of a device replying to query application status: { \"version\": 0, \"err_code\": 0, \"operat\": 3, \"all_on_off\": 1, \"items_num\": 2, \"items\": [ { \"evt_type\": 1, \"notify_state\": 1, \"pic_flag\": 1 }, { \"evt_type\": 1, \"notify_state\": 1, \"pic_flag\": 1 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-11-10 16:34:36 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetPackName.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetPackName.html","title":"V3 Get Package Name","keywords":"","body":"V3 Get Package Name Function: getNotifyIconAdaptive Flutter Example: /// Get event number for obtaining app package name getPackName( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.tran_json_get_app_pack_name ), /// Get app package name libManager.send(evt: CmdEvtType.getPackName, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description operat_flag int 0: Get all1: Get incremental data last_id int Only effective when operat_flag equal to get incremental data.Need to pass the ID returned last time to continue getting incremental data Example: { \"operat_flag\": 0, \"last_id\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description version int Protocol library version number icon_width int Width(pixel size) icon_height int Height(pixel size) format int Color format block_size int Compression block size pack_name_num int Number of package names package_num int Total number of package name details items array App package name detailsCollection of item_id, evt_type, need_sync_icon, msg_cout, pack_name_len, pack_name_array Field Name Field Type Field Description item_id int ID assigned to each package name, starting from 0, used later to get incremental data evt_type int Event type need_sync_icon int Need to update icon data:0: No update1: Update icon only2: Update app name only3: Update both icon and app name msg_cout int Number of times this message was received pack_name_len int Package name length, maximum 50 bytes pack_name_array char [] Package name Example: { \"version\": 0, \"icon_width\": 200, \"icon_height\": 120, \"format\": 133, \"block_size\": 1024, \"pack_name_num\": 0, \"package_num\": 0, \"items\": null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 18:04:37 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SyncContact.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SyncContact.html","title":"V3 Sync Bluetooth Call Common Contacts","keywords":"","body":"V3 Synchronization Protocol Bluetooth Call Common Contacts Menu: setSyncContact, reminderCallContact 【getSupportSetGetEmergencyContactV3】 Flutter Example: /// Synchronize common contacts event number setSyncContact( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.tran_json_sync_contact ), /// Synchronize common contacts libManager.send(evt: CmdEvtType.setSyncContact, json: jsonEncode(json)); JSON fields issued by the App: Field Name Field Type Field Description version int Protocol library version number operat int Operation 0: invalid1: set contacts2: query contacts 3: set emergency contacts (requires support for getSupportSetGetEmergencyContactV3 in the menu)4: query emergency contacts (requires support for getSupportSetGetEmergencyContactV3 in the menu) items_num int The maximum number of contacts details supported by default is 10. You can retrieve the maximum number of common contacts supported by the device by using the event ID getSupportMaxSetItemsNum and reading the field contact_max_set_num. items array Contact details collection ofphone and name Field Name Field Type Field Description phone char [] Contact phone number content, maximum of 14 bytes + '\\0' line break name char [] Contact name content, maximum of 31 bytes + '\\0' line break Example: { \"version\": 0, \"operat\": 1, \"items_num\": 1, \"items\": [ { \"phone\": \"13310214520\", \"name\": \"张三\" } ] } JSON fields received by the App: Field Name Field Type Field Description version int Protocol library version number err_code int Error code, 0 for success, non-zero for error code operat int Operation 0: invalid1: set2: query3: set emergency contacts (requires support for getSupportSetGetEmergencyContactV3 in the menu)4: query emergency contacts (requires support for getSupportSetGetEmergencyContactV3 in the menu) items_num int Number of contact details, maximum of 10The maximum number of contacts details supported by default is 10. You can retrieve the maximum number of common contacts supported by the device by using the event ID getSupportMaxSetItemsNum and reading the field contact_max_set_num.Valid only when the operation code (operat) is 2 or 4 items array Contact details collection of phone and nameValid only when the operation code (operat) is 2 or 4 Field Name Field Type Field Description phone char [] Contact phone number content, maximum of 14 bytes + '\\0' line breakValid only when the operation code (operat) is 2 or 4 name char [] Contact name content, maximum of 31 bytes + '\\0' line breakValid only when the operation code (operat) is 2 or 4 Example: { \"version\": 0, \"err_code\": 0, \"operat\": 1, \"items_num\": 0, \"items\": null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 20:22:55 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWeather.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWeather.html","title":"V3 Set Weather Data","keywords":"","body":"Setting Weather Data for V3 Menu: setSetV3Weather Flutter Example: /// Send the v3 weather protocol event number under v3 setWeatherV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_v3_weather ); /// Send the v3 weather protocol under v3 libManager.send(evt: CmdEvtType.setWeatherV3, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Type Description version int Protocol library version number month int Month of the most recent sync from the server day int Day of the most recent sync from the server hour int Hour of the most recent sync from the server min int Minute of the most recent sync from the server sec int Second of the most recent sync from the server week int The day of the weekbit0: Mondaybit1: Tuesdayand so on up to Sunday weather_type int Weather type0: Other1: Sunny2: Cloudy3: Overcast4: Rain5: Heavy rain6: Thunderstorm7: Snow8: Sleet9: Typhoon10: Sandstorm11: Night clear12: Night cloudy13: Hot14: Cold15: Gentle breeze16: Strong wind17: Haze18: Shower19: Cloudy to sunny48: Thunder49: Hail50: Blowing sand51: Tornado (realme custom weather type idw02) today_tmp int Current temperature in CelsiusFor negative temperatures, add 100 to the temperature and transmit today_max_temp int Maximum temperature in CelsiusFor negative temperatures, add 100 to the temperature and transmit today_min_temp int Minimum temperature in CelsiusFor negative temperatures, add 100 to the temperature and transmit city_name char [] City nameMaximum of 74 bytes air_quality int Air qualityMultiply by 10 for transmission precipitation_probability int Precipitation probability0-100 percentage humidity int Humidity today_uv_intensity int UV intensityMultiply by 10 for transmission wind_speed int Wind speed sunrise_hour int Sunrise hourValid only for version 1 sunrise_min int Sunrise minutesValid only for version 1 sunset_hour int Sunset hourValid only for version 1 sunset_min int Sunset minutesValid only for version 1 sunrise_item_num int Number of sunrise and sunset time detailsCurrently, the maximum number of days is set to 7Invalid for version 1 air_grade_item char [] Air quality level contentInvalid for version 1 hours_weather_items array Collection of weather data for the next 48 hoursCollection of weather_type, temperature, and probability future_items array Weather data for the next seven daysCollection of weather_type, max_temp, and min_temp sunrise_item array Sunrise and sunset time detailsCollection of sunrise_hour, sunrise_min, sunset_hour, and sunset_minInvalid for version 1 Field Name Type Description weather_type int Weather type temperature int TemperatureFor negative temperatures, add 100 to the temperature and transmit probability int Probability of temperature occurrence0-100 percentage Field Name Type Description weather_type int Weather type max_temp int Maximum temperatureFor negative temperatures, add 100 to the temperature and transmit min_temp int Minimum temperatureFor negative temperatures, add 100 to the temperature and transmit Field Name Type Description sunrise_hour int Sunrise hourInvalid for version 1 sunrise_min int Sunrise minutesInvalid for version 1 sunset_hour int Sunset hourInvalid for version 1 sunset_min int Sunset minutesInvalid for version 1 Example: { \"version\": 0, \"month\": 12, \"day\": 26, \"hour\": 16, \"min\": 31, \"sec\": 30, \"week\": 1, \"weather_type\": 1, \"today_tmp\": 21, \"today_max_temp\": 23, \"today_min_temp\": 12, \"city_name\": \"shenzhen\", \"air_quality\": 53, \"precipitation_probability\": 1, \"humidity\": 0, \"today_uv_intensity\": 0, \"wind_speed\": 0, \"sunrise_hour\": 6, \"sunrise_min\": 20, \"sunset_hour\": 18, \"sunset_min\": 17, \"sunrise_item_num\": 0, \"air_grade_item\": [], \"hours_weather_items\": [ { \"weather_type\": 1, \"temperature\": 0, \"probability\": 0 }, { \"weather_type\": 1, \"temperature\": 0, \"probability\": 0 } ], \"future_items\": null, \"sunrise_item\": null } JSON Fields Received by the App: Field Name Type Description version int Protocol library version number err_code int Error code, 0 for success, non-zero for error codes Example: { \"version\": 0, \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 20:14:24 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWorldTime.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWorldTime.html","title":"V3 Send World Time","keywords":"","body":"V3 World Time Set Function Menu: setSetV3WorldTime Flutter Example: /// v3 set v3 world time setWorldTimeV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_world_time), /// v3 set v3 world time libManager.send(evt: CmdEvtType.setWorldTimeV3, json: jsonEncode(json)); JSON Field Sent by the App: Field Name Field Type Field Description version int Protocol library version number items_num int Number of clocks, send all clocks at a timeMax 10 items List Details of world clocksContains id, min_offset, city_name, sunrise_hour, sunrise_min, sunset_hour, sunset_min, longitude_flag, longitude, latitude_flag, latitude Field Name Field Type Field Description id int Detail ID,Uniqueness min_offset int Minute offset from current time to UTC 0 city_name String City name, up to 59 bytes sunrise_hour int Hour of sunrise sunrise_min int Minute of sunrise sunset_hour int Hour of sunset sunset_min int Minute of sunset longitude_flag int 1: East longitude 2: West longitude longitude int Longitude, multiplied by 100, with 2 decimal places latitude_flag int 1: North latitude 2: South latitude latitude Int Latitude, multiplied by 100, with 2 decimal places Example: { \"items_num\": 4, \"items\": [{ \"id\": 31, \"min_offset\": 480, \"city_name\": \"Beijing\", \"sunrise_hour\": 7, \"sunrise_min\": 25, \"sunset_hour\": 16, \"sunset_min\": 49, \"longitude_flag\": 1, \"longitude\": 11641, \"latitude_flag\": 1, \"latitude\": 3990 }, { \"id\": 295, \"min_offset\": 540, \"city_name\": \"Tokyo\", \"sunrise_hour\": 6, \"sunrise_min\": 41, \"sunset_hour\": 16, \"sunset_min\": 28, \"longitude_flag\": 1, \"longitude\": 13965, \"latitude_flag\": 1, \"latitude\": 3568 }, { \"id\": 148, \"min_offset\": 0, \"city_name\": \"London\", \"sunrise_hour\": 7, \"sunrise_min\": 56, \"sunset_hour\": 15, \"sunset_min\": 51, \"longitude_flag\": 2, \"longitude\": 13, \"latitude_flag\": 1, \"latitude\": 5151 }, { \"id\": 197, \"min_offset\": -300, \"city_name\": \"New York\", \"sunrise_hour\": 7, \"sunrise_min\": 10, \"sunset_hour\": 16, \"sunset_min\": 28, \"longitude_flag\": 2, \"longitude\": 7401, \"latitude_flag\": 1, \"latitude\": 4071 }] } JSON Field Received by the App: Field Name Field Type Field Description version int Protocol library version number err_code int Error code, 0 for success, non-zero for error Example: { \"version\": 0, \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 20:18:36 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWalkRemindTimes.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWalkRemindTimes.html","title":"V3 Set Walking Reminder Time Points","keywords":"","body":"V3 Set Multiple Walk Reminder Times Function Name: setWalkReminderTimeGoal Flutter Example: /// Set multiple walk reminder times event number setWalkRemindTimes( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_walk_remind_times), /// Set multiple walk reminder times libManager.send(evt: CmdEvtType.setWalkRemindTimes, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Data Type Field Description version int Protocol library version number on_off int Switch: 1:On0:Off num int Number of items, i.e., number of set reminder times items array Details of walk reminders with hour and minute Field Name Data Type Field Description hour int Walk reminder time: Hour min int Walk reminder time: Minute Example: { \"version\": 0, \"on_off\": 1, \"num\": 2, \"items\": [ { \"hour\": 8, \"min\": 0 }, { \"hour\": 12, \"min\": 30 } ] } JSON Fields Received by the App: Field Name Data Type Field Description version int Protocol version number err_code int Error code: 0 for success, non-zero for failure Example: { \"version\": 0, \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 20:11:32 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetMusicInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetMusicInfo.html","title":"V3 Get Firmware Music Name and Folder","keywords":"","body":"V3 Get Firmware Song Names and Folders Menu: getSupportGetBleMusicInfoVerV3 Flutter Example: /// Event number for getting the firmware song names and folders getBleMusicInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_ble_music_info), /// Get the firmware song names and folders libManager.send(evt: CmdEvtType.getBleMusicInfo, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description version int Protocol library versionReserved all_memory int Firmware SDK card informationTotal spaceUint:Byte useful_memory int Firmware SDK card informationAvailable spaceUint:Byte used_memory int Firmware SDK card informationCurrent used space in bytesUint:Byte folder_num int Number of folder details (playlists) music_num int Number of music details folder_items set Folder details (playlists)folder_id & music_num & folder_name & music_index set music_items set Music detailsmusic_id & music_memory & music_name & singer_name set Field Name Field Type Field Description folder_id int Playlist (folder) id 1~10 music_num int Number of songs in the playlist, up to 100 folder_name char [] Playlist (folder) name, up to 19 bytes music_index int [] Ids of the songs in the playlist, listed in the order they were added Field Name Field Type Field Description music_id int Song ID, starting from 1 music_memory int Space occupied by the songUint:Byte music_name char [] Song name, up to 44 bytes singer_name char [] Singer name, up to 29 bytes Example: { \"all_memory\" : 209715200, \"folder_items\" : null, \"folder_num\" : 0, \"music_items\" : [ { \"music_id\" : 1, \"music_memory\" : 50078, \"music_name\" : \"jog for.mp3\", \"singer_name\" : \"jog for\" } ], \"music_num\" : 1, \"used_memory\" : 50078, \"useful_memory\" : 209665122, \"version\" : 16 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 18:00:01 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3OperateMusic.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3OperateMusic.html","title":"V3 Operate Music or Folder","keywords":"","body":"V3 Operation for Songs or Folders Flutter Example: /// Operation for songs or folders event setMusicOperate( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_operate_ble_music), /// Operation for songs or folders libManager.send(evt: CmdEvtType.setMusicOperate, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description version int Protocol library version number music_operate int Music operation0: Invalid operation1: Delete music2: Add music folder_operate int Folder (playlist) operation0: Invalid operation1: Delete folder2: Add folder3: Modify playlist4: Import playlist5: Delete music music_items array Music detailsArray containing music_id, music_memory, music_name, and singer_name folder_items array Folder (playlist) detailsArray containing folder_id, music_num, folder_name, and music_index Field Name Field Type Field Description folder_id int Playlist (folder) id, ranging from 1 to 10 music_num int Number of songs in the playlist, maximum of 100 folder_name char [] Playlist (folder) name, maximum of 19 bytes music_index int [] Corresponding song ids in the playlist, arranged in order of addition Field Name Field Type Field Description music_id int Music id, starting from 1 music_memory int Space occupied by the music music_name char [] Music name, maximum of 44 bytes singer_name char [] Singer name, maximum of 29 bytes Example: { \"version\": 0, \"music_operate\": 0, \"folder_operate\": 2, \"music_items\": null, \"folder_items\": { \"folder_id\": 1, \"music_num\": 0, \"folder_name\": \"music fold 1\", \"music_index\": [] } } JSON Fields Received by the App: Field Name Field Type Field Description operate_type int Operation type:0: Invalid operation1: Delete music2: Add music3: Delete folder4: Add folder5: Modify playlist6: Import playlist7: Delete music in playlist version int Firmware SDK card informationTotal space err_code int 0: Successful; non-zero: Failed music_id int Music id returned when adding music successfully Example: { \"operate_type\": 4, \"version\": 0, \"err_code\": 0, \"music_id\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-07 10:55:39 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3NoticeMsgDynamic.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3NoticeMsgDynamic.html","title":"V3 Notification Message Reminder (Dynamic)","keywords":"","body":"V3 Dynamic Notification Message Reminder Flutter Example: /// V3 dynamic notification message event number setNoticeAppName( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_notice_message_add_app_name ) /// V3 dynamic notification message libManager.send(evt: CmdEvtType.setNoticeAppName, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description verison int Protocol library version number os_platform int System0: Invalid, 1: Android, 2: iOS evt_type int Current mode0: Invalid, 1: Message reminder notify_type int Enumeration type of messageMax value: 20000 msg_ID int Message IDValid only if evt_type is message reminder and msg_ID is not 0 app_items_len int Number of country and language details contact char [] Contact name (maximum 63 bytes) phone_number char [] Phone number (maximum 31 bytes) msg_data char [] Message content (maximum 249 bytes) items Array Country and language detailsCollection of language and name Field Name Field Type Field Description language int Language type name char [] App name corresponding to the country (maximum 49 bytes) Example: { \"verison\": 0, \"os_platform\": 1, \"evt_type\": 1, \"notify_type\": 3, \"msg_ID\": 1, \"app_items_len\": 1, \"contact\": \"John Doe\", \"phone_number\": \"1234567890\", \"msg_data\": \"Hello\", \"items\": [ { \"language\": 2, \"name\": \"wechat\" } ] } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 1: Success, 0: Failure Example: { \"is_success\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-07 10:59:00 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetHistoricalMenstruation.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetHistoricalMenstruation.html","title":"V3 Send Historical Menstruation Data","keywords":"","body":"V3 Menstrual Historical Data Delivery Function: setHistoryMenstrual 【supportSetHistoricalMenstruationUseVersion2】 Flutter Example: /// Menstrual historical data delivery event number getHistoricalMenstruation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_historical_menstruation ); /// Menstrual historical data delivery libManager.send( evt: CmdEvtType.getHistoricalMenstruation, json: jsonEncode(json) ); JSON Fields Sent by the App: Field Name Field Type Field Description version int Protocol library version number avg_menstrual_day int Average length of menstrual cycleUint:day avg_cycle_day int Average length of menstrual cycleUint:day items_len int Number of menstrual history details items，max len value 5 items list Details of menstrual historical dataCollection of year, month, day, menstrual_day, cycle_dayovulation_interval_day, ovulation_before_day, and ovulation_after_day are effective when the Function supportSetHistoricalMenstruationUseVersion2 is enabled. Field Name Field Type Field Description year int Year when menstruation starts mon int Month when menstruation starts day int Day when menstruation starts menstrual_day int Length of menstrual cycle (days) cycle_day int Length of cycle (days) ovulation_interval_day int The interval from the start of the next menstrual period to the ovulation day is usually 14 days when the Function supportSetHistoricalMenstruationUseVersion2 is enabled. ovulation_before_day int The number of days of fertility before the ovulation day is usually 5 when the Function supportSetHistoricalMenstruationUseVersion2 is enabled. ovulation_after_day int The number of days of fertility after the ovulation day is usually 5 when the Function supportSetHistoricalMenstruationUseVersion2 is enabled. Example: { \"version\": 2, \"avg_menstrual_day\": 7, \"avg_cycle_day\": 29, \"items_len\": 1, \"items\": [ { \"year\": 2023, \"mon\": 8, \"day\": 1, \"menstrual_day\": 7, \"cycle_day\":30, \"ovulation_interval_day\":14, \"ovulation_before_day\":5, \"ovulation_after_day\":5, }, { \"year\": 2023, \"mon\": 8, \"day\": 31, \"menstrual_day\": 7, \"cycle_day\":28, \"ovulation_interval_day\":14, \"ovulation_before_day\":5, \"ovulation_after_day\":5, } ] } JSON Fields Received by the App: Field Name Field Type Field Description err_code int Error code: 0 for success, non-zero for failure Example: { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-26 14:57:27 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetDialSort.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetDialSort.html","title":"V3 Set Dial Order","keywords":"","body":"V3 Set Watch Dial Sort API: setWatchDialSort Flutter Example: /// Set watch dial sort event setWatchDialSort( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_watch_dial_sort), /// Set watch dial sort libManager.send(evt: CmdEvtType.setWatchDialSort, json: jsonEncode(json)); JSON Fields Sent by App: Field Name Field Type Field Description sort_item_numb int Number of items in the watch dial sort list p_sort_item array Array of watch dial sort items type, sort_number, and name Each watch dial sort item contains the following fields: Field Name Field Type Field Description type int Watch dial type 1: Normal Dial, 2: Wallpaper Dial, 3: Cloud Dial sort_number int Serial number, starting from 0, not exceeding the total number of supported watch dials name char [] Watch dial ID, maximum 29 bytes Example: { \"sort_item_numb\": 2, \"p_sort_item\": [ { \"type\": 1, \"sort_number\": 0, \"name\": \"w123.iwf\" }, { \"type\": 1, \"sort_number\": 1, \"name\": \"w555.iwf\" } ] } JSON Fields Received by App: Field Name Field Type Field Description version int Protocol version number err_code int Error code, 0 for success, non-zero for failure Example: { \"version\": 0, \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-07 10:59:55 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetRunPlan.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetRunPlan.html","title":"V3 APP Send Running Plan (Sport Plan)","keywords":"","body":"V3APP issued running plan (exercise plan) Function menu: setSupportSportPlan Flutter example: /// App issued running plan (exercise plan) event number setSendRunPlan( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_send_run_plan), /// App issued running plan (exercise plan) libManager.send(evt: CmdEvtType.setSendRunPlan, json: jsonEncode(json)); Json fields issued by the App: Field Name Field Type Field Description verison int Protocol library version number operate int Operation1: Start plan 2: Plan data sent 3: End plan 4: Query running plan type int Plan type1: 3km running plan 2: 5km running plan 3: 10km running plan4: Half marathon training (Phase 2)5: Marathon training (Phase 2) year int Plan start time year month int Plan start time month day int Plan start time day hour int Plan start time hour min int Plan start time minute sec int Plan start time second day_num int Number of plan daysApplicable when operate is 2 items Array Plan details:type & num & item Field Name Field Type Field Description type int Training type 186: Rest plan 187: Outdoor running plan 188: Indoor running plan189: Indoor fitness plan num int Number of actionsNote: The number of actions is zero when resting, and non-zero for other actions item Array Details of action: type & time & height_heart & low_heart Field Name Field Type Field Description type int Action type1: Fast walk 2: Jog 3: Moderate run 4: Fast run time int Target time Unit: seconds height_heart int Low heart rate range low_heart int High heart rate range Example: { \"verison\": 0, \"operate\": 1, \"type\": 1, \"year\": 2022, \"month\": 12, \"day\": 26, \"hour\": 17, \"min\": 36, \"sec\": 0, \"day_num\": 1, \"items\":[ { \"type\": 186, \"num\": 2, \"item\": [ { \"type\": 1, \"time\": 200, \"height_heart\": 110, \"low_heart\": 80 }, { \"type\": 1, \"time\": 500, \"height_heart\": 110, \"low_heart\": 80 } ] } ], \"item\": [] } Json fields received by the App: Field Name Field Type Field Description err_code int 00: Success, 01: Failed, 02: Another running plan is already enabled version int Protocol library version number operate int Operation:1: Start plan 2: Plan data sent 3: End plan 4: Query running plan type int Plan type:1: 3km running plan 2: 5km running plan 3: 10km running plan 4: Half marathon training (Phase 2)5: Marathon training (Phase 2) year int Plan implementation start time year month int Plan implementation start time month day int Plan implementation start time day hour int Plan implementation start time hour min int Plan implementation start time minute sec int Plan implementation start time second Example: { \"err_code\": 0, \"version\": 0, \"operate\": 1, \"type\": 1, \"year\": 2022, \"month\": 12, \"day\": 26, \"hour\": 17, \"min\": 36, \"sec\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 20:10:52 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetCutoverSport.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetCutoverSport.html","title":"V3 APP Toggle Device Sport During Exercise","keywords":"","body":"V3APP Notifies Device to Switch Exercise Process Flutter Example: /// Exercise plan operation event number in the app exchangeAppPlan( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_app_to_ble_sport_cutover), /// Exercise plan operation in the app libManager.send(evt: CmdEvtType.exchangeAppPlan, json: jsonEncode(json)); JSON fields sent by the app: Field Name Field Type Field Description operate int Operation1: Start Exercise 2: Pause Exercise 3: Resume Exercise 4: End Exercise 5: Switch Action type int Plan type1: Running Plan 3km2: Running Plan 5km3: Running Plan 10km4: Half Marathon Training (Phase 2)5: Marathon Training (Phase 2)6: Post-Run Stretching7: 6-minute Easy Run 8: 10-minute Easy Run 9: 15-minute Easy Run 10: Walk-Run Combination (Beginner) 11: Walk-Run Combination (Advanced) 12: Walk-Run Combination (Intensive) training_offset int Training course date offset starting from zero hour int Start, Pause, Resume, End time determined by operateTime: Hour minute int Time: Minute second int Time: Second Example: { \"operate\":1, \"type\":1, \"training_offset\":0, \"hour\":15, \"minute\":22, \"second\": 0 } JSON fields received by the app: Field Name Field Type Field Description err_code int 0: Success, other values indicate failure operate int Operation1: Start Exercise2: Pause Exercise 3: Resume Exercise4: End Exercise 5: Switch Action type int Plan type1: Running Plan 3km2: Running Plan 5km3: Running Plan 10km4: Half Marathon Training (Phase 2)5: Marathon Training (Phase 2) action_type int This field is effective when operate is 5Action type1: Fast Walking2: Slow Jogging3: Medium Speed Running4: Fast Running5: End Course Exercise (also waits for user's Free Exercise) Example: { \"err_code\": 0, \"operate\": 1, \"type\": 1, \"action_type\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-10-10 14:15:03 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetHabitInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetHabitInfo.html","title":"V3 Get User Habit Information","keywords":"","body":"Get User Habit Information in V3 Function: getHabitInfoV3 Flutter example: /// Get user habit information in V3 getHabitInfoV3( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_habit_information, ), /// Send command to get user habit information in V3 libManager.send(evt: CmdEvtType.getHabitInfoV3, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description browse_count int Number of browsing items implement_count int Number of implementation items bro_items array Details of browsing items imp_items array Details of implementation items Field Name Field Type Field Description type int Type of feature 1: Running Course 2: Running Plan 3: Device Sleep 4: Weight evt int Event 1: Browse Running Course 2: Browse Running Plan 3: Browse Sleep 4: Sleep Breathing 5: Click Weight Management year int Browsing Date (Year) month int Browsing Date (Month) day int Browsing Date (Day) hour int Last click time of the day (Hour) min int Last click time of the day (Minute) sec int Last click time of the day (Second) count int Number of clicks Field Name Field Type Field Description type int Type of feature 1: Running Course 2: Running Plan 3: Post-running Stretch evt int Event 1: Use Running Course 2: Implement Running Plan 3: Implement Post-running Stretch start_year int Start Time (Year) start_month int Start Time (Month) start_day int Start Time (Day) start_hour int Start Time (Hour) start_min int Start Time (Minute) start_sec int Start Time (Second) end_year int End Time (Year) end_month int End Time (Month) end_day int End Time (Day) end_hour int End Time (Hour) end_min int End Time (Minute) end_sec int End Time (Second) completion_rate int Completion Rate (0 to 100) Example: { \"browse_count\": 1, \"implement_count\": 1, \"bro_items\": [ { \"type\": 0, \"evt\": 0, \"year\": 0, \"month\": 0, \"day\": 0, \"hour\": 0, \"min\": 0, \"sec\": 0, \"count\": 0 } ], \"imp_items\": [ { \"type\": 0, \"evt\": 0, \"start_year\": 0, \"start_month\": 0, \"start_day\": 0, \"start_hour\": 0, \"start_min\": 0, \"start_sec\": 0, \"end_year\": 0, \"end_month\": 0, \"end_day\": 0, \"end_hour\": 0, \"end_min\": 0, \"end_sec\": 0, \"completion_rate\": 0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3MiniProgramControl.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3MiniProgramControl.html","title":"V3 Operate Mini Program Information (Reserved)","keywords":"","body":"V3 Manage Mini Program Information(reserve) JSON Fields Sent by the App: Field Name Field Type Field Description version int Protocol library version operate int 0: Invalid1: Launch mini program2: Delete mini program3: Get installed mini program list mini_program_name char [] Mini program name Not applicable for operate=0 or operate=3. No need to send the nameMaximum 29 bytes Example: { \"version\": 0, \"operate\": 1, \"mini_program_name\": \"粤康码\" } JSON Fields Received by the App: Field Name Field Type Field Description version int Protocol library version operate int 0: Invalid1: Launch mini program2: Delete mini program3: Get installed mini program list error_code int 0: SuccessNon-zero: Failure mini_program_num int Number of mini programs (valid for operate=3)Maximum 50 programs residual_space int Remaining space total_space int Total space info_item array List of mini programs In info_item: Field Name Field Type Field Description mini_program_name char [] Mini program name (maximum 29 bytes) mini_program_size int Mini program size mini_program_version int Mini program version number Example: { \"version\": 0, \"operate\": 1, \"error_code\": 0, \"mini_program_num\": 0, \"residual_space\": 0, \"total_space\": 0, \"info_item\": null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 18:06:26 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetSmartCompetitorConfigInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetSmartCompetitorConfigInfo.html","title":"V3 Configure Smart Companion Running Information (Reserved)","keywords":"","body":"V3 Intelligent Running Companion Information Configuration(reserve) Flutter示例： //TODO JSON Fields Sent by the App: Field Name Data Type Field Description version int Protocol library version number, default 0 operate int Operation 0: Invalid 1: Set 2: Query background_font_color int Background font color Set operation valid ai_image_id int AI image ID Set operation valid user_image_id int User image ID Set operation valid bg_image_id Int Background image ID Set operation valid Example: { } JSON Fields Received by the App: Field Name Data Type Field Description version int Protocol library version number, default 0 err_code int 0: Success, non-zero: Failure operate int Operation 0: Invalid 1: Set 2: Query background_font_color int Background font color Query operation valid ai_image_id int AI image ID Query operation valid user_image_id int User image ID Query operation valid bg_image_id Int Background image ID Query operation valid Example: { } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 20:09:07 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3CutoverSportFromDevice.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3CutoverSportFromDevice.html","title":"V3 Device Notifies App to Switch Sport During Exercise","keywords":"","body":"V3 Device Notifies App of Exercise Process Switching function table:setSupportSportPlan 【setWatchCapacitySizeDisplay】 JSON Fields Sent by the App: Field Name Field Type Field Description operate int Operation1: Start exercise2: Pause exercise3: Resume exercise4: End exercise5: Switch action type int Plan type1: 3km running plan2: 5km running plan3: 10km running plan4: Half marathon training (Phase 2)5: Marathon training (Phase 2) action_type int Action type1: Fast walk2: Jog3: Moderate run4: Fast run5: End course exercise (waiting for user's free exercise) (This field is effective when operate is 5) err_code int 0: Success, non-zero: Failure Example: { \"operate\": 1, \"type\": 1, \"action_type\": 1, \"err_code\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description operate int 1: Start exercise2: Pause exercise3: Resume exercise4: End exercise5: Switch action type int Plan type1: 3km running plan2: 5km running plan3: 10km running plan4: Half marathon training (Phase 2)5: Marathon training (Phase 2) action_type int Action type1: Fast walk2: Jog3: Moderate run4: Fast run5: End course exercise (waiting for user's free exercise); 6: Free exercise after course ends (This field is effective when operate is 5) year int Year of the training course date (training day's date) month int Month of the training course date (training day's date) day int Day of the training course date (training day's date) time int Action target time in seconds low_heart int Lower value of heart rate range high_heart int Upper value of heart rate range cur_day int Start/pause/resume/end time, determined by the operate valueTime: day hour int Time: hour minute int Time: minute second int Time: second Example: { \"operate\": 1, \"type\": 1, \"action_type\": 1, \"year\": 2022, \"month\": 12, \"day\": 26, \"time\": 200, \"low_heart\": 80, \"high_heart\": 110, \"cur_day\": 1, \"hour\": 0, \"minute\": 0, \"second\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 16:42:35 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3NoticeDialChange.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3NoticeDialChange.html","title":"V3 APP Get Dial Color Style Modification","keywords":"","body":"V3 App Get Dial Color Style Modification Flutter示例： //TODO JSON Fields Received by the App: Field Name Field Type Field Description version int Protocol library version number dial_ID int Dial ID name char [] Dial name (maximum 30 bytes) dial_type int Reply type:Currently only 0: Invalid; 1: Color style_enum int Enumeration of the color change, starting from 0 Example: { \"version\": 0, \"dail_ID\": 1, \"name\": \"w120.iwf\", \"dial_type\": 1, \"style_enum\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-09-13 18:11:11 "},"doc/IDOProtocolSimulatorExec/IDOProtocolSimulatorIntroduction.html":{"url":"doc/IDOProtocolSimulatorExec/IDOProtocolSimulatorIntroduction.html","title":"IDO模拟器事件字段说明","keywords":"","body":"{IDO模拟器事件字段说明} 1.功能概述 模拟器外部通过json将对应基础事件的字段输入，设置对应的基础事件的模拟器回应内容。 这个文件描述对应基础事件的有效的json字段及输入json字段后应该转换得到的字节数据内容。 以下描述中的APP下发的json内容为发送端，APP收到的json字段为模拟器回复APP的内容，为APP预想接收的内容。 2.基础事件 V2设置指令事件 V2获取指令事件 V3长包指令事件 OTA指令事件 APP发起通知/控制事件 设备主动通知/控制事件 ALEXA事件////TODO V2多运动交互事件////TODO V2同步健康数据事件////TODO V3同步健康数据事件////TODO Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-23 14:51:32 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetEvtIntroduction.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetEvtIntroduction.html","title":"V2设置指令事件","keywords":"","body":"{V2设置指令事件} 事件号及对应功能： 事件号 功能 101 设置久坐提醒 108 设置显示模式 116 设置勿扰模式 103 设置寻找手机 105 设置运动目标(设置全天步数) 109 设置左右手 104 设置时间 107 设置用户信息 119 设置一键呼叫 117 设置音乐开关 ////TODO 102 设置防丢 5000 添加闹钟 151 设置运动模式 124 设置表盘 125 设置快捷方式 126 设置血压校准 128 设置压力校准 112 设置心率区间 113 设置心率模式 108 设置单位 152 设置睡眠时间段 114 设置抬腕亮屏 127 设置血压测量 154 设置屏幕亮度 185 设置GPS信息 156 设置控制GPS 157 设置控制连接参数 158 设置热启动参数 159 设置经期 160 设置经期提醒 161 设置卡路里和距离目标 162 设置血氧开关 163 设置压力开关 164 设置运动模式排序 165 设置走动提醒 166 设置呼吸训练 167 设置运动自识别开关 168 设置喝水提醒 5510 简单文件操作 171 设置菜单列表 172 设置控制拍照 111 设置通知中心开关 173 设置删除文件 174 设置手机音量下发给固件 175 设置洗手提醒 177 设置吃药提醒 182 设置智能心率模式 183 设置环境音量的开关和阀值 184 设置科学睡眠开关 185 设置夜间体温开关 186 设置健身指导开关 188 设置未读信息红点提示开关 190 设置通知应用状态(事项提醒通知类型) 191 设置呼吸率开关 192 设置身体电量开关 150 设置天气开关 153 设置天气数据 6500 设置天气城市名称 6504 设置日出日落时间 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 17:24:55 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetLongSitReminder.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetLongSitReminder.html","title":"设置久坐提醒","keywords":"","body":"设置久坐提醒 事件号:101 APP端发送： 发送json字段： 字段名 字段类型 字段说明 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 interval int 间隔 取值应大于15分钟 单位分钟 repetitions int 重复及开关 bit0 ：0表示关 1表示开 bit1-7 : 0表示不重复，1表示重复 交互结构体内容： struct protocol_long_sit { struct protocol_head head;//0x03,0x20 uint8_t start_hour; //开始时间 晚上勿扰 uint8_t start_minute; uint8_t end_hour; uint8_t end_minute; //结束时间 uint16_t interval; //间隔 uint16_t repetitions; //重复 }; 设置久坐提醒信息json示例： { \"start_hour\": 15, \"start_minute\": 40, \"end_hour\": 23, \"end_minute\": 26, \"interval\": 15, \"repetitions\": 254 } 设置久坐提醒信息字节数据： [0x03,0x20,0xf,0x28,0x17,0x1a,0xf,0x0,0xfe,0x0] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 交互结构体内容： struct protocol_reply { struct protocol_head head;//0x03,0x20 uint8_t status_code; }; 回复APP设置久坐提醒信息json示例： { \"status_code\": 0 } 回复APP设置久坐提醒信息字节数据： [0x03,0x20,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 18:09:11 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetDisplayMode.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetDisplayMode.html","title":"设置显示模式","keywords":"","body":"设置显示模式 事件号：108 APP端发送： 发送json字段 字段名 字段类型 字段说明 mode int 模式0:默认1:横屏2:竖屏3:翻转180度 交互结构体内容： //显示模式 struct protocol_display_mode { struct protocol_head head; uint8_t mode; }; 设置显示模式json示例： { \"mode\": 0 } 设置显示模式字节数据： [0x03,0x2B,0x0] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 交互结构体内容： struct protocol_reply { struct protocol_head head;//0x03,0x2B uint8_t status_code; }; 回复APP设置显示模式json示例： { \"status_code\" : 0 } 回复APP设置显示模式字节数据： [0x03,0x2B,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 16:12:17 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetDoNotDisturb.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetDoNotDisturb.html","title":"设置勿扰模式","keywords":"","body":"设置勿扰模式 事件号：116 APP端发送： 发送json字段： 字段名 字段类型 字段说明 switch_flag int 开关1 开启0 关闭 start_hour int 开始时间时 start_minute int 开始时间分 end_hour int 结束时间时 end_minute int 结束时间分 have_time_range int 是否有时间范围 0 无效1 表示无时间范围2 表示有时间范围功能表disturbHaveRangRepeat开启有效 week_repeat int 预留 noontime_rest_on_off int 白天勿扰开关 1 开启0 关闭 noontime_rest_start_hour int 开始时间时 noontime_rest_start_minute int 开始时间分 noontime_rest_end_hour int 结束时间时 noontime_rest_end_minute int 结束时间分 all_day_on_off int 全天勿扰 1 开启0 关闭功能表setOnlyNoDisturbAllDayOnOff开启有效 intelligent_on_off int 智能勿扰开关 1 开启0 关闭功能表setOnlyNoDisturbSmartOnOff开启有效 交互结构体内容： //防打扰 struct protocol_do_not_disturb { struct protocol_head head; uint8_t switch_flag; //0xAA 开启,0x55 关闭 勿擾1开关 晚上勿扰 uint8_t start_hour; uint8_t start_minute; uint8_t end_hour; uint8_t end_minute; uint8_t have_time_range; //是否有时间范围 新增字段,功能表,0x00 无效,0x01 表示无时间范围,0x02 表示有时间范围 uint8_t week_repeat; //预留 uint8_t noontime_rest_on_off;//勿擾2开关 白天勿扰 uint8_t noontime_rest_start_hour; //提醒开始时间 uint8_t noontime_rest_start_minute; uint8_t noontime_rest_end_hour; //提醒结束时间 uint8_t noontime_rest_end_minute; //bool v2_support_disturb_three_on_off_03_29;//idw05新增：勿扰模式设置获取新增全天勿扰开关 //注：之前的全天勿扰开关与智能勿扰开关使用的同一个功能表v2_support_disturb_three_on_off_03_29支持,后续为了方便开发,新固件不需要开启前者,转用以下两个功能表去支持 2022-11-7 //bool support_v2_disturb_all_day_switch_03_29; //支持设置全天勿扰开关 //bool support_v2_disturb_smart_switch_03_29; //支持设置智能勿扰开关 uint8_t all_day_on_off;//20220627新增 全天勿扰开关 uint8_t intelligent_on_off; //20220627新增 智能勿扰开关 }; 设置勿扰模式json示例： { \"switch_flag\": 1, \"start_hour\": 15, \"start_minute\": 23, \"end_hour\": 23, \"end_minute\": 30, \"have_time_range\": 2, \"week_repeat\": 127, \"noontime_rest_on_off\": 1, \"noontime_rest_start_hour\": 9, \"noontime_rest_start_minute\": 0, \"noontime_rest_end_hour\": 12, \"noontime_rest_end_minute\": 0, \"all_day_on_off\": 0, \"intelligent_on_off\": 0 } 设置勿扰模式字节数据： [0x03,0x29,0x1,0xf,0x17,0x17,0x1e,0x2,0x7f,0x1,0x9,0x0,0xc,0x0,0x0,0x0] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd; //0x3 uint8_t key; //0x29 }; 回复设置勿扰模式json示例： 无 回复设置勿扰模式字节数据： [0x03,0x29] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 16:09:49 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetFindPhone.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetFindPhone.html","title":"设置寻找手机","keywords":"","body":"设置寻找手机 事件号：103 APP端发送: 发送json字段： 字段名 字段类型 字段说明 on_off int 1:打开0:关闭 交互结构体内容： //寻找手机 struct protocol_find_phone { struct protocol_head head; uint8_t status; uint8_t timeout; }; 设置寻找手机json示例： { \"on_off\": 1 } 设置寻找手机字节数据： [0x03,0x26,0xAA] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 交互结构体内容： struct protocol_reply { struct protocol_head head;//0x03,0x26 uint8_t status_code; }; 回复APP设置寻找手机json示例： { \"status_code\" : 0 } 回复APP设置寻找手机字节数据： [0x03,0x26,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 16:12:38 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetSportGoal.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetSportGoal.html","title":"设置运动目标(设置全天步数)","keywords":"","body":"设置运动目标 事件号：105 APP端发送： 发送json字段： 字段名 字段类型 字段说明 sport_step int 步数 walk_goal_steps int 每小时步数目标设置 target_type int 0无效 1日目标 2周目标 功能表v2SupportSetStepDataType开启有效 交互结构体内容： //设置目标 struct protocol_set_sport_goal { struct protocol_head head; uint8_t type; //00步数 uint32_t data; //数值 uint8_t sleep_hour; //预留 uint8_t sleep_minute;//预留 uint16_t walk_goal_steps; //每小时步数目标设置 功能表 bool support_walk_goal_steps_03_03 //固件支持每小时目标步数设置和获取 uint8_t target_type;//0无效 1日目标 2周目标 功能表 bool v2_support_set_step_data_type_03_03//支持app设置目标步数类型为周目标 }; 设置运动目标示例： { \"sport_step\": 2000, \"walk_goal_steps\": 15, \"target_type\" : 1 } 设置运动目标字节数据： [0x3,0x3,0x0,0xd0,0x7,0x0,0x0,0x0,0x0,0xf,0x0,0x1] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 交互结构体内容： struct protocol_reply { struct protocol_head head;//0x03,0x03 uint8_t status_code; }; 回复APP设置运动目标的示例： { \"status_code\" : 0 } 回复APP设置运动目标字节数据： [0x3,0x3,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 16:13:15 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetHand.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetHand.html","title":"设置左右手","keywords":"","body":"设置左右手 事件号：109 APP端发送： 发送json字段： 字段名 字段类型 字段说明 hand int 0：左手 1：右手 交互结构体内容： //设置左右手 struct protocol_set_handle { struct protocol_head head; uint8_t hand_type; }; 设置左右手json示例： { \"hand\":0 } 设置左右手字节数据： [0x3,0x22,0x0] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd; //0x3 uint8_t key; //0x22 }; 回复设置左右手json示例： 无 回复设置左右手字节数据： [0x3,0x22] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 16:13:36 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetTime.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetTime.html","title":"设置时间","keywords":"","body":"设置时间 事件号：104 APP端发送： 发送json字段： 字段名 字段类型 字段说明 year int 年 monuth int 月 day int 日 hour int 时 minute int 分 second int 秒 week int 星期0~6， 表示星期一到星期天 time_zone int 用24时区的，手机端的获取时区是整数0-12东，13-24西,需要功能表支持 交互结构体内容： //系统时间 struct protocol_set_time { struct protocol_head head;//0x3,0x1 uint16_t year; uint8_t month; uint8_t day; uint8_t hour; uint8_t minute; uint8_t second; uint8_t week; uint32_t utc_time; //暂时不用兼容硬件部分代码 /* bool v2_support_set_time_zone_float_03_01;//支持世界时钟设备在有此功能表的情况下时间设置中 time_zone为浮点型，小数点后有两位，app此时的时区设定值为实际时区值的扩大一百倍 ，无此功能表则按实际时区值下发 */ uint16_t time_zone; //用24时区的，手机端的获取时区是整数，0-12东，13-24西 }; 设置时间的json示例： { \"year\": 2022, \"monuth\": 12, \"day\": 16, \"hour\": 17, \"minute\": 49, \"second\": 46, \"week\": 5, \"time_zone\": 8 } 设置时间的字节数据： [0x3,0x1,0xe6,0x7,0xc,0x10,0x11,0x31,0x2e,0x5,0x8] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd; //0x3 uint8_t key; //0x1 }; 回复APP设置运动目标的示例： 无 回复APP设置运动目标字节数据： [0x3,0x1] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 16:43:43 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetUserInfo.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetUserInfo.html","title":"设置用户信息","keywords":"","body":"设置用户信息 事件号：107 APP端发送： 发送json字段： 字段名 字段类型 字段说明 year int 出生日期 年 month int 出生日期 月 day int 出生日期 日 height int 身高 单位厘米 weight int 体重 单位千克 值需要x100 gender int 性别1：女 0：男 交互结构体内容： //用户信息 struct protocol_set_user_info { struct protocol_head head;//0x3,0x10 uint8_t height; //身高 uint16_t weight; //体重 uint8_t gender; uint16_t year; //生日 uint8_t month; uint8_t day; }; 设置用户信息json示例： { \"year\": 2022, \"monuth\": 12, \"day\": 16, \"heigh\": 173, \"weigh\": 7400, \"gender\": 0 } 设置用户信息的字节数据： [0x3,0x10,0xad,0xe8,0x1c,0x0,0x0,0xe6,0x7,0xc,0x10] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd; //0x3 uint8_t key; //0x10 }; 回复设置用户信息json示例： 无 回复设置用户信息字节数据： [0x03,0x10] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 17:00:01 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOOneKeySOS.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOOneKeySOS.html","title":"设置一键呼叫","keywords":"","body":"设置一键呼叫 事件号：119 APP端发送： 发送json字段： 字段名 字段类型 字段说明 on_off int 开关1 开 0 关 phone_type int 0：无效 1：doro手机 2：非doro手机 交互结构体内容： //设置一键呼叫开关 struct protocol_set_onekey_sos { struct protocol_head head;//0x3,0x2c uint8_t on_off; //0xAA 开,0x55 关 uint8_t phone_type; //0x00:无效 0x01:doro手机 0x02：非doro手机 }; 设置一键呼叫开关json示例： { \"on_off\": 1, \"phone_type\" : 0 } 设置一键呼叫开关字节数据： [0x3,0x2c,0xaa,0x0] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 交互结构体内容： struct protocol_reply { struct protocol_head head;//0x03,0x2c uint8_t status_code; }; 回复设置一键呼叫开关json示例： { \"status_code\" : 0 } 回复设置一键呼叫开关字节数据： [0x3,0x2c] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 17:08:36 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetMusicONOFF.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetMusicONOFF.html","title":"设置音乐开关","keywords":"","body":"设置音乐开关 事件号：117 APP端发送： 发送json字段： 字段名 字段类型 字段说明 on_off int 开关1 开 0 关 show_info_status int 展示歌曲信息开关1:开 0:关需要固件开启功能表支持supportV2SetShowMusicInfoSwitch 交互结构体内容： //音乐开关 struct protocol_music_onoff { struct protocol_head head;//0x3,0x2a uint8_t switch_status; uint8_t show_info_status;//展示歌曲信息开关 0xAA:开 0x55:关 0无效默认开启,需要功能表支持support_v2_set_show_music_info_switch_03_2A }; 设置音乐开关json示例： { \"on_off\":1 } 设置音乐开关字节数据： [0x3,0x2a,0xaa,0x0] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 交互结构体内容： struct protocol_reply { struct protocol_head head;//0x03,0x2a uint8_t status_code; }; 回复设置音乐开关json示例： { \"status_code\" : 0 } 回复设置音乐开关字节数据： [0x3,0x2a,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 17:24:30 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetEvtIntroduction.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetEvtIntroduction.html","title":"V2获取指令事件","keywords":"","body":"{V2获取指令事件} 事件号及对应功能： 事件号 功能 300 获取设备MAC地址 301 获取设备信息 303 获取功能表////TODO 306 获取通知中心开关 304 获得实时数据 320 获取错误记录 334 获取文件传输配置 310 获取HID信息 312 获取GPS信息 ////TODO 313 获取热启动参数 314 获取GPS状态 315 获取版本信息 316 获取勿扰模式状态 317 获取MTU信息 318 获取默认的运动类型 319 获取下载语言支持 321 获取电池信息 322 获取字库信息 323 获取设备支持的菜单列表 325 获取屏幕亮度 326 获取抬腕数据 327 获取设备升级状态 328 获取表盘ID 329 获取手表名字 330 获取设备的日志状态 331 获取设置的卡路里/距离/中高运动时长(日常三环) 332 获取走动提醒 333 获取所有的健康监测开关 335 获取运动模式自动识别开关 336 获得固件三级版本和BT的3级版本 337 获取压力值 338 获取血压算法三级版本号信息 339 获取固件支持的详情最大设置数量 340 获取固件不可删除的快捷应用列表 351 获取固件红点提示开关状态 352 查询获取bt配对开关、连接、a2dp连接、hfp连接状态 353 获取固件本地保存联系人文件修改时间 421 获取心率监测模式 422 获取全天步数目标 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 19:33:25 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetMac.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetMac.html","title":"获取设备MAC地址","keywords":"","body":"获取设备mac地址 事件号：300 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_get { struct protocol_head head;//0x02,0x04 }; 获取设备mac地址json示例： 无 获取设备mac地址字节数据： [0x2,0x4] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 mac_addr int [6] 设备的id地址 最大6个字节 bt_addr int [6] bt的蓝牙地址 最大6个字节 交互结构体内容： //设备mac地址 struct protocol_device_mac { struct protocol_head head; uint8_t mac_addr[6]; uint8_t bt_addr[6];//bt蓝牙地址 功能表支持bool v2_get_bt_addr_02_04 }; 回复APP获取设备mac地址json示例： { \"bt_addr\" : [ 244, 3, 18, 255, 132, 212 ], \"mac_addr\" : [ 244, 3, 18, 255, 132, 212 ] } 回复APP获取设备mac地址字节数据： [0x2,0x4,0xF4,0x3,0x12,0xFF,0x84,0xD4,0xF4,0x03,0x12,0xFF,0x84,0xD4,0x0,0x0,0x0,0x0,0x0,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 17:37:18 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetDeviceInfoOnly.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetDeviceInfoOnly.html","title":"获取设备信息","keywords":"","body":"获取设备信息 事件号:301 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_get { struct protocol_head head;//0x02,0x01 }; 获取设备信息json示例： 无 获取设备信息字节数据： [0x2,0x1] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 deivce_id int 设备id firmware_version int 版本号 mode int 模式0：运动模式，1：睡眠模式 batt_status int 电池状态 0： 正常1：正在充电2：充满3：低电量 energe int 电量等级 pair_flag int 绑定状态 reboot int 是否重启 如果重启 app会再次同步配置信息给手环 bind_confirm_method int 绑定确认方式 0：默认(注意以前ID号定制),超时时间无效1：单击[按键在下面]2：为长按[按键在下面]3：屏幕点击 横向确认和取消,确认在左边4：屏幕点击 横向确认和取消,确认在右边5：屏幕点击 竖向确认和取消，确认在上边6：屏幕点击 竖向确认和取消，确认在下边7：点击(右边一个按键) bind_confirm_timeout int 超时时间最长为15秒 0表示不超时 platform int 手环的平台 0 ：nordic10 ：realtek 8762x 20 ：cypress psoc630：Apollo3 40：为汇顶 50：nordic+泰凌微, 瑞坤 80：5340 90：炬芯 shape int 0：默认（gt01 方形的）1：圆形2：方形的3：椭圆 dev_type int 0：默认（gt01 手表）1： 手环2：手表 user_defined_dial_main_version int 自定义表盘主版本 从1开始 0：不支持对应的自定义表盘功能 cloud_clock_dial_version int 云端表盘版本号 默认从0开始 是否支持云端表盘有对应的功能表multi_dial (废弃 同user_defined_dial_main_version ) show_bind_choice_ui int 固件绑定时候显示勾勾叉叉ui界面 app根据这个位显示提示固件点击绑定 0：不需要app提示 1：需要app提示 bootload_version int nordic平台bootloader版本信息 最小为1 交互结构体内容： //获取信息类 struct protocol_device_info { struct protocol_head head;//0x2,0x1 uint16_t device_id; //设备id uint8_t version; //版本号 uint8_t mode; //模式 uint8_t batt_status; //电池状态 电池状态 （0x00： 正常， 0x01：正在充电，0x02：充满， 0x03：低电量） uint8_t batt_level; //电量等级 uint8_t pair_flag; //绑定状态 uint8_t reboot_flag; //是否重启 ,如果重启，app会再次同步配置信息给手环 uint8_t version_info; //是否存在版本信息; uint8_t bind_confirm_method; /** * 绑定确认方式 低4位为确认方式 &0x0f, * 0x00默认(注意以前ID号定制),超时时间无效, * 0x01(单击[按键在下面]), * 0x02(为长按[按键在下面]), * 0x03(屏幕点击 横向确认和取消,确认在左边), * 0x04(屏幕点击 横向确认和取消,确认在右边)， * 0x05(屏幕点击 竖向确认和取消，确认在上边)， * 0x06(屏幕点击 竖向确认和取消，确认在下边, * 0x07点击(右边一个按键)) * 高4位为超时时间 &0xf0,最长为15秒,0表示不超时 **/ uint8_t platform; /** * 手环的平台 * 0:nordic * 10:realtek 8762x * 20:cypress psoc6 * 30:Apollo3 * 40:汇顶 * 50:nordic+泰凌微 * 60:泰凌微+5340+no nand flash(需要ota模式) * 70:汇顶+富瑞坤 * 80:5340 * 90:炬芯 * 99:思澈 */ uint8_t shape; // 0:默认(gt01方形的) 1:圆形 2:方形的 3:椭圆 uint8_t dev_type; // 0:默认(gt01手表) 1:手环 2:手表 uint8_t user_defined_dial_main_version;//自定义表盘主版本 从1开始 0:不支持对应的自定义表盘功能 uint8_t cloud_clock_dial_version;//云端表盘版本号 默认从0开始，是否支持云端表盘有对应的功能表multi_dial (废弃 同user_defined_dial_main_version ) uint8_t show_bind_choice_ui; //固件绑定时候显示勾勾叉叉ui界面，app根据这个位显示提示固件点击绑定 0:不需要app提示 1:需要app提示 uint8_t bootload_version; //nordic平台bootloader版本信息 最小为1 }; 回复APP获取设备信息的json示例： \"batt_status\" : 0, \"bind_confirm_method\" : 0, \"bind_confirm_timeout\" : 0, \"bootload_version\" : 0, \"cloud_clock_dial_version\" : 5, \"deivce_id\" : 7698, \"dev_type\" : 2, \"energe\" : 56, \"firmware_version\" : 1, \"mode\" : 1, \"pair_flag\" : 1, \"platform\" : 90, \"reboot\" : 0, \"shape\" : 2, \"show_bind_choice_ui\" : 0, \"user_defined_dial_main_version\" : 5 } 回复APP获取设备信息的字节数据： [0x2,0x1,0x12,0x1E,0x1,0x1,0x0,0x38,0x1,0x0,0x1,0x0,0x5A,0x2,0x2,0x3,0x5,0x0,0x0,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 18:08:53 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetNoticeStatus.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetNoticeStatus.html","title":"获取通知中心开关","keywords":"","body":"获取通知中心开关 事件号：306 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_get { struct protocol_head head;//0x02,0x10 }; 获取通知中心开关json示例： 无 获取通知中心开关字节数据： [0x2,0x10] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 notify_switch int 通知提醒开关0：总开关关(预留 无效功能)1：ble总开关开(发起配对 IOS专用)2：设置子开关3：只开bt（开关）4：ble、bt都开（开关）-1：无效 call_switch int 来电子提醒开关 1:开0:关-1:无效 notify_item1 int 子应用开关1 每个bit代表一个应用 notify_item2 int 子应用开关2 每个bit代表一个应用 call_delay int 来电提醒延时 单位秒 notify_item3 int 子应用开关3 每个bit代表一个应用 notify_item4 int 子应用开关4 每个bit代表一个应用 notify_item5 int 子应用开关5 每个bit代表一个应用 notify_item6 int 子应用开关6 每个bit代表一个应用 notify_item7 int 子应用开关7 每个bit代表一个应用 notify_item8 int 子应用开关8 每个bit代表一个应用 notify_item9 int 子应用开关9 每个bit代表一个应用 notify_item10 int 子应用开关10 每个bit代表一个应用 msg_all_switch int 消息应用总开关 1:开0:关-1:无效(不支持) notify_item11 int 子应用开关11 每个bit代表一个应用 notify_item12 int 子应用开关12 每个bit代表一个应用 回复APP获取通知中心json示例： { \"call_delay\" : 0, \"call_switch\" : 1, \"msg_all_switch\" : -1, \"notify_item1\" : 0, \"notify_item10\" : 0, \"notify_item11\" : 0, \"notify_item12\" : 0, \"notify_item2\" : 0, \"notify_item3\" : 0, \"notify_item4\" : 0, \"notify_item5\" : 0, \"notify_item6\" : 0, \"notify_item7\" : 0, \"notify_item8\" : 0, \"notify_item9\" : 0, \"notify_switch\" : 0 } 回复APP获取通知中心字节数据： [0x2,0x10,0xAA,0x0,0x0,0x55,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 18:20:35 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetLiveData.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetLiveData.html","title":"获得实时数据","keywords":"","body":"获得实时数据 事件号：304 APP端发送： 发送json字段： 字段名 字段类型 字段说明 flag int 0：无功能1：强制打开心率监测2：强制打开血压监测 交互结构体内容： //实时数据 struct protocol_get_live_data { struct protocol_head head;//0x2,0xa0 uint8_t flag; }; 获取实时数据json示例： { \"flag\" : 1 } 获取实时数据字节数据： [0x2,0xa0,0x1] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 total_step int 总步数 total_calories int 总卡路里 单位大卡 total_distances int 总距离 单位m total_active_time int 总活动时长单位秒 heart_rate int 心率数据单位bpm如果没有心率功能，该值为0 交互结构体内容： struct protocol_get_live_data_reply { struct protocol_head head; uint32_t step; uint32_t calories; uint32_t distances; uint32_t active_time; uint8_t heart_rate; }; 回复APP获取实时数据json示例： { \"heart_rate\" : 0, \"total_active_time\" : 0, \"total_calories\" : 0, \"total_distances\" : 0, \"total_step\" : 0 } 回复APP获取实时数据字节数据： [0x2,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 18:40:55 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetErrorRecord.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetErrorRecord.html","title":"获取错误记录","keywords":"","body":"获取错误记录 事件号：320 APP端发送： 发送json字段： 字段名 字段类型 字段说明 type int 0 查询1 清除记录 交互结构体内容： struct protocol_get_error_record { struct protocol_head head; uint8_t type; // 0x00 查询,0x01 清除记录 }; 获取错误记录json示例： { \"type\" : 0 } 获取错误记录字节数据： [0x2,0x40,0x0] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 type int 0 查询1 清除记录 reset_flag int 0 正常1 硬错误(Hard Faul)2 看门狗服务3 断言复位4 掉电服务5 其他异常 hw_error int 硬件错误码 0 正常1 加速度错误2 心率错误3 TP错误4 flash错误 交互结构体内容： struct protocol_get_error_record_reply { struct protocol_head head; uint8_t type; //0x00:查询 0x01:清除记录 uint8_t reset_flag; //0x00:正常 0x01:硬错误(Hard Faul) 0x02:看门狗服务 0x03:断言复位 0x04:掉电服务 0x05:其他异常 uint8_t hw_error; //硬件错误码 0:正常 0x01:加速度错误 0x02:心率错误 0x03:TP错误 0x04:flash错误 }; 回复获取错误信息示例： { \"type\":0, \"reset_flag\":0, \"hw_error\":0 } 回复获取错误信息字节数据： [0x2,0x40,0x0,0x0,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 18:47:51 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetDataTranConfig.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetDataTranConfig.html","title":"获取文件传输配置","keywords":"","body":"获取图标文件传输配置传输 / 获取图片文件传输配置 事件号：334 APP端发送： 发送json字段： 字段名 字段类型 字段说明 type int 运动类型 对应的图标类型 0：这个字段无效1：运动小图标2：运动大图标3：运动动画 4：运动等大小图标 5：运动最小图标 evt_type int 事件类型0是这个字段无效 比如 1：短信,2：邮件，3：微信 .... sport_type int 运动类型 0是这个字段无效 运动模式类型1 走路,2 跑步.... 交互结构体内容： struct protocol_data_tran_configure_get { struct protocol_head head;//0x2,0xe9 uint8_t type; //运动类型 对应的图标类型 0这个字段无效 1运动小图标 2:运动大图标 3:运动动画 4:运动中等大小图标 uint16_t evt_type; //事件类型 0是这个字段无效 比如0x01短信 0x02邮件 0x03微信 ...(上限值：0x4E20) uint16_t sport_type;//运动类型 0是这个字段无效 运动模式类型0x01走路 0x02跑步 ... }; 获取图标文件传输配置传输json示例： { \"type\" : 1, \"evt_type\" : 1, \"sport_type\" : 1 } 获取图标文件传输配置传输字节数据： [0x2,0xe9,0x1,0x1,0x0,0x1,0x0] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 err_code int 错误码 0是正常，非0是错误 type int 运动类型 对应的图标类型 0：这个字段无效1：运动小图标2：运动大图标 3：运动动画 4：运动中等大小图标 evt_type int 事件类型0是这个字段无效 比如 1：短信,2：邮件，3：微信 .... sport_type int 运动类型0是这个字段无效 运动模式类型, 1 走路,2 跑步.... icon_width int 固件图标需要的宽度（根据type 和 evt_type/sport_type 确定） icon_height int 固件图标需要的高度（根据type 和 evt_type/sport_type 确定） format int 颜色格式 block_size int 压缩块大小 big_sports_num int 运动图标大图标个数 msg_num int 消息图标的个数 small_sports_and_animation_num int 运动动画和小图标的个数 medium_num int 运动中等图标个数 交互结构体内容： struct protocol_data_tran_configure_get_reply { struct protocol_head head; uint8_t err_code; //错误码 0是正常，非0是错误 uint8_t type; //运动类型 对应的图标类型 0这个字段无效 1运动小图标 2运动大图标 3运动动画 4运动中等大小图标 uint16_t evt_type; //事件类型 0是这个字段无效 通消息通知 比如 0x01短信 0x02邮件 0x03微信（上限值：0x4E20） uint16_t sport_type; //运动类型 0是这个字段无效 运动模式类型 0x01走路 0x02跑步 uint16_t icon_width; //固件图标需要的宽度和高度（根据type 和 evt_type/sport_type 确定） uint16_t icon_height; uint8_t format; //颜色格式 uint16_t block_size; //压缩块大小 uint8_t big_sports_num; //运动图标大图标个数 uint8_t msg_num; //消息图标的个数 uint8_t small_sports_and_animation_num; //运动动画和小图标的个数 // -------- 20220707 新增运动最小图标、中等图标个数返回 -------- uint8_t min_samll_num;//运动最小图标个数 uint8_t medium_num; //运动中等图标个数 }; 回复获取图标文件传输配置传输json示例： { \"err_code\": 0, \"type\": 1, \"evt_type\": 1, \"sport_type\": 1, \"icon_width\": 50, \"icon_height\": 50, \"format\": 133, \"block_size\": 1024, \"big_sports_num\": 5, \"msg_num\": 0, \"small_sports_and_animation_num\": 0, \"medium_num\": 0, \"min_samll_num\": 0 } 回复获取图标文件传输配置传输字节数据： [0x2,0xe9,0x0,0x1,0x1,0x0,0x1,0x0,0x32,0x0,0x32,0x0,0x85,0x0,0x4,0x5,0x0,0x0,0x0,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 10:53:07 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetHIDInfo.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetHIDInfo.html","title":"获取HID信息","keywords":"","body":"获取HID信息 事件号：310 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_get { struct protocol_head head;//0x02,0xa2 }; 获取HID信息json示例： 无 获取HID信息字节数据： [0x2,0xa2] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 is_start int 0没有启动1启动成功 交互结构体内容： struct protocol_get_hid_info_reply { struct protocol_head head;//0x2,0xa2 uint8_t is_start; //0没有启动,1启动成功 }; 回复获取HID信息json示例： { \"is_start\" : 0 } 回复获取HID信息字节数据： [0x2,0xa2,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 10:59:31 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetGPSInfo.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetGPSInfo.html","title":"获取GPS信息","keywords":"","body":"获取GPS信息 事件号：312 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_get { struct protocol_head head;//0x02,0xa3 }; 获取GPS信息json示例： 无 获取GPS信息字节数据： [0x2,0xa3] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 err_code int GPS是否错误0正常 非0异常 fw_version int GPS固件版本 agps_info int AGPS有效期 agps_err_code int AGPS错误值 utc_year int utc时间 年 utc_month int utc时间 月 utc_day int utc时间 日 utc_hour int utc时间 时 utc_minute int utc时间 分 start_mode int 启动模式1 冷启动2 热启动 gns int 定位星选择1 GPS2 GLONASS3 GPS + GLONASS fix_start_bit int 修正标识位默认0 用于调试 回复获取GPS信息json示例： { \"err_code\": 0, \"fw_version\": 66051, \"agps_info\": 0, \"agps_err_code\": 0, \"utc_year\": 0, \"utc_month\": 0, \"utc_day\": 0, \"utc_hour\": 0, \"utc_minute\": 0, \"start_mode\": 2, \"gns\": 0, \"fix_start_bit\": 0 } 回复获取GPS信息字节数据： [0x2,0xa3,0x0,0x3,0x2,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 19:33:09 "},"doc/IDOProtocolSimulatorExec/IDOV3Evt/IDOV3EvtIntroduction.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV3Evt/IDOV3EvtIntroduction.html","title":"V3长包指令事件","keywords":"","body":"{V3长包指令事件} 事件号及对应功能： 事件号 功能 5006 V3获取表盘列表 5007 V3获取屏幕信息 ////TODO 5008 V3设置表盘 5010 V3设置心率模式 5011 V3控制音乐 5012 V3通知消息提醒 5013 V3设置运动类型排序 5016 V3获取运动默认的类型 5017 V3APP设置ble的闹钟 5018 V3APP获取设备的闹钟 5020 V3APP设置回复快速信息 5021 V3多运动数据交互 5022 V3多运动数据最后一次数据获取 5023 V3多运动数据数据交换中获取1分钟的心率数据 5024 V3获取设备字库列表 5025 V3语音回复文本 5030 V3多运动数据数据交换中获取一段时间的GPS数据 5070 V3设置GPS热启动参数 5071 V3获取固件本地提示音文件信息 5072 V3操作血压校准控制 5035 V3获取表盘列表(新接口) 5036 V3设置壁纸表盘颜色和位置 5037 V3设置查询100种运动排序 5038 V3日程提醒 5039 V3设置查询主界面控件排序 5040 V3设置查询运动子项数据排列 5041 V3设置运动城市名称 5042 V3设置单个应用的通知状态 5043 V3获取包名 5044 V3同步协议蓝牙通话常用联系人 5045 V3设置天气数据 5046 V3下发世界时间 5047 V3设置多个走动提醒的时间点 5048 V3获取固件的歌曲名和文件夹 5049 V3操作歌曲或者文件夹 5051 V3通知消息提醒(动态) 5052 V3经期的历史数据下发 5053 V3设置表盘顺序 5054 V3APP下发跑步计划(运动计划) 5056 V3APP通知设备运动过程切换 5059 V3获取用户习惯信息 5078 V3操作小程序信息 5080 V3智能陪跑信息配置 5085 V3设备通知APP运动过程切换 5800 V3APP获取表盘颜色样式修改 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 20:14:57 "},"doc/IDOProtocolSimulatorExec/IDOV3Evt/IDOV3GetDialList.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV3Evt/IDOV3GetDialList.html","title":"V3获取表盘列表","keywords":"","body":"V3获取表盘列表 事件号：5006 APP端发送： 发送json字段： 无 交互结构体内容： uint8_t cmd = 0x33; typedef struct protocol_v3_base { uint32_t fixed; uint8_t version; uint16_t length; uint16_t cmd_id; uint16_t nseq; }protocol_v3_base_s; uint16_t crc; 获取表盘列表json示例： 无 获取表盘列表的字节数据： [0x33,0xDA,0xAD,0xDA,0xAD,0x01,0x0B,0x00,0x06,0x00,0x05,0x00,0x5D,0x34] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 version int 协议版本号 available_count int 剩余个数，可用文件个数 file_max_size int 单个文件最大size 单位KB item 集合 表盘列表详情，file_name的集合 字段名 字段类型 字段说明 file_name char [] 表盘名称 交互结构体内容： uint8_t cmd = 0x33; typedef struct protocol_v3_base { uint32_t fixed; uint8_t version; uint16_t length; uint16_t cmd_id; uint16_t nseq; }protocol_v3_base_s; struct protocol_v3_file_list { uint8_t version; //版本号 uint16_t file_count; //表盘已经使用数目 uint16_t available_count; //剩余个数，可用文件个数 uint16_t file_max_size; //单个文件最大sizeKB char file_list[10][30]; //这里的数据用pd解包 }; uint16_t crc; 回复获取表盘列表json示例： { \"available_count\" : 4, \"file_max_size\" : 600, \"item\" : [ { \"file_name\" : \"custom1.iwf\" }, { \"file_name\" : \"watch253.iwf\" } ], \"version\" : 1 } 回复获取表盘列表字节数据： [33 DA AD DA AD 01 33 00 06 00 05 00 01 02 00 04 00 58 02 01 0B 00 00 00 63 75 73 74 6F 6D 31 2E 69 77 66 01 0C 00 00 00 77 61 74 63 68 32 35 33 2E 69 77 66 FD 16] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 20:15:00 "},"doc/IDOProtocolSimulatorExec/IDOV3Evt/IDOV3GetScreenInfo.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV3Evt/IDOV3GetScreenInfo.html","title":"V3获取屏幕信息","keywords":"","body":"V3获取屏幕信息 事件号：5007 APP端发送： 发送json字段： 无 交互结构体内容： uint8_t cmd = 0x33; typedef struct protocol_v3_base { uint32_t fixed; uint8_t version; uint16_t length; uint16_t cmd_id; uint16_t nseq; }protocol_v3_base_s; uint16_t crc; 获取屏幕信息json示例： 无 获取屏幕信息的字节数据： [33 DA AD DA AD 01 0B 00 07 00 05 00 E9 42] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 width int 屏幕宽度 (像素大小) height int 屏幕高度 (像素大小) format int 颜色格式 sizex100 int 尺寸 x100 family_name char [] 家族名称 最大10个字节 block_size int 压缩块大小 交互结构体内容： uint8_t cmd = 0x33; typedef struct protocol_v3_base { uint32_t fixed; uint8_t version; uint16_t length; uint16_t cmd_id; uint16_t nseq; }protocol_v3_base_s; struct protocol_v3_watch_face_info { char family_name[10];//家族名字 uint16_t width; //宽度像素块 uint16_t height; //高度像素块 uint8_t format; //颜色格式 uint16_t sizex100; //尺寸 x100 uint16_t block_size; //压缩块大小 }; uint16_t crc; 回复获取屏幕信息json示例： { \"block_size\" : 1024, \"family_name\" : \"ID206\", \"format\" : 133, \"height\" : 280, \"sizex100\" : 0, \"width\" : 240 } 回复获取屏幕信息字节数据： [33 DA AD DA AD 01 1E 00 07 00 05 00 49 44 32 30 36 00 00 00 00 00 F0 00 18 01 85 00 00 00 04 B6 8E] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 20:14:43 "},"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaEvtIntroduction.html":{"url":"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaEvtIntroduction.html","title":"OTA指令事件","keywords":"","body":"{OTA事件} 事件号及对应功能： 事件号 功能 400 进入升级模式 401 直接进入升级模式(忽略电量) 407 设置OTA授权 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 14:24:04 "},"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaStart.html":{"url":"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaStart.html","title":"进入升级模式","keywords":"","body":"进入升级模式 事件号:400 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd; //0x1 uint8_t key; //0x1 }; 设置进入升级模式json示例： 无 设置进入升级模式字节数据： [0x1,0x1] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 err_flag int 0: 进入OTA成功 1: 失败：电量过低 2: 失败：设备不支持 3: 失败：参数不正确 回复设置进入升级模式json示例： { \"err_flag\" : 0 } 回复设置进入升级模式字节数据 [0x1,0x1,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 16:24:02 "},"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaDirectStart.html":{"url":"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaDirectStart.html","title":"直接进入升级模式(忽略电量)","keywords":"","body":"直接进入升级模式(忽略电量) 事件号:401 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd; //0x1 uint8_t key; //0x2 }; 忽略电量直接设置进入升级模式json示例： 无 忽略电量直接设置进入升级模式字节数据： [0x1,0x2] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd; //0x1 uint8_t key; //0x2 }; `回复忽略电量直接设置进入升级模式json示例： 无 回复忽略电量直接设置进入升级模式字节数据： [0x1,0x2] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 17:09:26 "},"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaAuth.html":{"url":"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaAuth.html","title":"设置OTA授权","keywords":"","body":"设置ota授权 事件号:407 APP端发送： 发送json字段： 字段名 字段类型 字段说明 device_id int 设备ID version int 版本0 表示不进行版本校验,用于不能降级的约束,默认0 交互结构体内容： struct protocol_ota_auth { struct protocol_head head; uint16_t device_id; //设备ID uint8_t version; //版本0 表示不进行版本校验,用于不能降级的约束,默认0 }; 设置OTA授权json示例： { \"device_id\" : 0, \"version\" : 0 } 设置OTA授权字节数据： [0x1,0x3,0x0,0x0] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 err_code int 错误码0：校验成功1：ID号校验失败2：版本号校验失败3：电量不足4：其他错误 交互结构体内容： struct protocol_ota_auth_reply { struct protocol_head head; uint8_t err_code; //0x00校验成功,0x01 ID号校验失败,0x02 版本号校验失败,0x03 电量不足,0x04 其他错误 }; 回复设置OTA授权json示例： { \"err_code\" : 0 } 回复设置OTA授权字节数据： [0x1,0x3,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 17:09:35 "},"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlEvtIntroduction.html":{"url":"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlEvtIntroduction.html","title":"APP发起通知/控制事件","keywords":"","body":"{APP发起通知/控制事件} 事件号及对应功能： 事件号 功能 403 控制设备重启 404 控制设备断线 405 清除绑定信息 406 控制关闭设备 408 控制设备恢复出厂 409 控制清除手环缓存 ////TODO 415 下发通话时间给固件 500 控制音乐开始 501 控制音乐停止 502 控制拍照开始 503 控制拍照停止 504 控制寻找手机开始 505 控制寻找手机停止 506 控制打开ANCS开始 507 控制打开ANCS停止 511 APP传输运动图标信息及状态通知固件 512 APP通知固件开启BT广播 513 APP通知固件某些功能的权限状态 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:10:36 "},"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlReboot.html":{"url":"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlReboot.html","title":"控制设备重启","keywords":"","body":"控制设备重启 事件号：403 APP端发送： 无 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_reply { struct protocol_head head;//0xf0,0x1 uint8_t status_code; }; 回复APP设置设备重启json字段： { \"status_code\" : 0 } 回复APP设置设备重启的字节数据： [0xf0,0x1,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 17:24:44 "},"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlDisconnect.html":{"url":"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlDisconnect.html","title":"控制设备断线","keywords":"","body":"控制设备断线 事件号:404 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0xf0 uint8_t key;//0x2 }; 控制设备断线json示例： 无 控制设备断线字节数据： [0xf0,0x2] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0xf0 uint8_t key;//0x2 }; 回复控制设备断线json示例： 无 回复控制设备断线字节数据： [0xf0,0x2] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:13:36 "},"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlCleanBindInfo.html":{"url":"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlCleanBindInfo.html","title":"清除绑定信息","keywords":"","body":"清除绑定信息 事件号:405 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0x3 uint8_t key;//0xd1 }; 控制设备清除绑定信息json示例： 无 控制设备清除绑定信息字节数据： [0x3,0xd1] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0x3 uint8_t key;//0xd1 }; 回复控制设备清除绑定信息json示例： 无 回复控制设备清除绑定信息字节数据： [0x3,0xd1] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:04:28 "},"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlShutdown.html":{"url":"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlShutdown.html","title":"控制关闭设备","keywords":"","body":"控制关闭设备 事件号:406 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0xf0 uint8_t key;//0x3 }; 控制关闭设备json示例： 无 控制关闭设备字节数据： [0xf0,0x3] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0xf0 uint8_t key;//0x3 }; 回复控制关闭设备json示例： 无 回复控制关闭设备字节数据： [0xf0,0x3] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:06:38 "},"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlRestoreFazctory.html":{"url":"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlRestoreFazctory.html","title":"控制设备恢复出厂","keywords":"","body":"控制设备恢复出厂 事件号:408 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0xf0 uint8_t key;//0x4 }; 控制设备恢复出厂json示例： 无 控制设备恢复出厂字节数据： [0xf0,0x4] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0xf0 uint8_t key;//0x4 }; 回复控制设备恢复出厂json示例： 无 回复控制设备恢复出厂字节数据： [0xf0,0x4] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:07:25 "},"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlClearCache.html":{"url":"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlClearCache.html","title":"控制清除手环缓存","keywords":"","body":"控制清除手环缓存 事件号:409 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0xf0 uint8_t key;//0x5 }; 控制控制清除手环缓存json示例： 无 控制清除手环缓存字节数据： [0xf0,0x5] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 is_success int 1：成功 0：失败 交互结构体内容： struct protocol_set_reply { struct protocol_head head;//0xf0,0x5 uint8_t is_success; // 1：成功 ， 0失败 }; 回复控制清除手环缓存json示例： { \"is_success\" : 0 } 回复控制清除手环缓存字节数据： [0xf0,0x5,0x1] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:10:37 "},"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlEvtIntroduction.html":{"url":"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlEvtIntroduction.html","title":"设备主动通知/控制事件","keywords":"","body":"{设备主动通知/控制事件} 事件号及对应功能： 事件号 功能 551 设备控制APP音乐开始 552 设备控制APP音乐暂停 553 设备控制APP音乐停止 554 设备控制APP音乐上一首 555 设备控制APP音乐下一首 556 设备控制APP拍照单拍 ////TODO 557 设备控制APP拍照连拍 558 设备控制APP音量加 559 设备控制APP音量减 560 设备控制APP打开相机 561 设备控制APP关闭相机 562 设备控制APP接听电话 563 设备控制APP拒接电话 565 设备控制APP音乐音量百分比 570 设备控制APP寻找手机开始 571 设备控制APP寻找手机结束 572 设备通知APP防丢启动 574 设备通知APP一键呼叫开始 575 设备通知传感器数据 576 设备通知APP操作类型 577 设备通知APP数据更新 578 设备请求版本检查 579 设备请求OTA 580 主动通知APP短信 581 设备控制APP相机 591 设备通知固件喇叭音量修改(alexa) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-23 11:03:24 "},"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicStart.html":{"url":"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicStart.html","title":"设备控制APP音乐开始","keywords":"","body":"设备控制APP音乐开始 事件号：551 APP端发送： 无 设备/模拟器发送： 发送json字段： 无 设备控制APP音乐开始字节数据： [0x7,0x1,0x1] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:17:14 "},"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicPause.html":{"url":"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicPause.html","title":"设备控制APP音乐暂停","keywords":"","body":"设备控制APP音乐暂停 事件号：552 APP端发送： 无 设备/模拟器发送： 发送json字段： 无 设备控制APP音乐开始字节数据： [0x7,0x1,0x2] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:17:50 "},"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicStop.html":{"url":"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicStop.html","title":"设备控制APP音乐停止","keywords":"","body":"设备控制APP音乐停止 事件号：553 APP端发送： 无 设备/模拟器发送： 发送json字段： 无 设备控制APP音乐开始字节数据： [0x7,0x1,0x3] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:17:55 "},"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicLast.html":{"url":"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicLast.html","title":"设备控制APP音乐上一首","keywords":"","body":"设备控制APP音乐上一首 事件号：554 APP端发送： 无 设备/模拟器发送： 发送json字段： 无 设备控制APP音乐开始字节数据： [0x7,0x1,0x4] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:18:09 "},"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicNext.html":{"url":"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicNext.html","title":"设备控制APP音乐下一首","keywords":"","body":"设备控制APP音乐下一首 事件号：555 APP端发送： 无 设备/模拟器发送： 发送json字段： 无 设备控制APP音乐开始字节数据： [0x7,0x1,0x5] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:18:20 "},"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlPhotoSingleShot.html":{"url":"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlPhotoSingleShot.html","title":"设备控制APP拍照单拍","keywords":"","body":"设备控制APP拍照单拍 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOAppendix/IDODeviceErrorCode.html":{"url":"doc/IDOAppendix/IDODeviceErrorCode.html","title":"Firmware Standardization General Error Codes","keywords":"","body":"{Firmware Generic Error code} Note: The following common error codes are from firmware development and are for reference only. Some firmware items may use different error codes. You need to locate error flags corresponding to different firmware items index ID Description 0 ERROR_CODE_SUCCESS Successful command 1 ERROR_CODE_SVC_HANDLER_MISSING SVC handler is missing 2 ERROR_CODE_SOFTDEVICE_NOT_ENABLED SoftDevice has not been enabled 3 ERROR_CODE_INTERNAL Internal Error 4 ERROR_CODE_NO_MEM No Memory for operation 5 ERROR_CODE_NOT_FOUND Not found 6 ERROR_CODE_NOT_SUPPORTED Not supported 7 ERROR_CODE_INVALID_PARAM Invalid Parameter 8 ERROR_CODE_INVALID_STATE Invalid state, operation disallowed in this state 9 ERROR_CODE_INVALID_LENGTH Invalid Length 10 ERROR_CODE_INVALID_FLAGS Invalid Flags 11 ERROR_CODE_INVALID_DATA Invalid Data 12 ERROR_CODE_DATA_SIZE Invalid Data size 13 ERROR_CODE_TIMEOUT Operation timed out 14 ERROR_CODE_NULL Null Pointer 15 ERROR_CODE_FORBIDDEN Forbidden Operation 16 ERROR_CODE_INVALID_ADDR Bad Memory Address 17 ERROR_CODE_BUSY Busy 18 ERROR_CODE_CONN_COUNT Maximum connection count exceeded. 19 ERROR_CODE_RESOURCES Not enough resources for operation 20 ERROR_CODE_BT_OTA Bt Bluetooth upgrade error 21 ERROR_CODE_NO_SPACE Not enough space for operation 22 ERROR_CODE_LOW_BATTERY Low Battery 23 ERROR_CODE_INVALID_FILE_NAME Invalid File Name/Format 24 ERROR_SPACE_ORGANIZATION Watch space needs to be organized 25 ERROR_SPACE_ORGANIZATION_ING Watch space is being organized Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-28 10:28:46 "}}