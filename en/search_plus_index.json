{"./":{"url":"./","title":"Preface","keywords":"","body":"IDO Smart Band iOS SDK 1.1Functional Overview IDOBluetooth, IDOBlueProtocol, and IDOBlueUpdate are suitable for iOS devices and support IDO's wristbands to implement Bluetooth connection control framework library. The Bluetooth framework based on the iOS system extends the functions of Bluetooth scanning, connection, binding, control, setting, acquisition, monitoring, and transmission. The protocol library written in c is used to realize the logical processing in the process of structure data conversion and health data synchronization, which reduces the errors of bluetooth communication data and improves the speed and accuracy of bluetooth communication. This feature-rich API is easy to use. 1.2Quick integration 1.2.1 Using Cocoapods integration Add the following to the Podfile： source 'https://github.com/idoosmart/IDOSmartSpec.git' platform :ios, '8.0' target 'your_target_name' do pod 'IDOBluetooth' pod 'IDOBlueProtocol' pod 'IDOBlueUpdate' end Then execute the pod update command in the project root directory to integrate third-party libraries. Please refer to the use of CocoaPods：CocoaPods Guides 1.3 initialization SDK Open the project settings, Target => Build Settings, modify Other Linker Flags and add -Objc The Objective-C project needs to add an empty Swift file to generate the Objective-C Bridging Header Depends on the system library CoreBluetooth.frameworklibc++.tbdlibsqlite3.0.tbd Add the following to the PrefixHeader.pch file of the project： #import #import #import Swift Add the following to the project import IDOBlueUpdate import IDOBluetooth import IDOBlueProtocol 1.3.1 registration SDK Open the AppDelegate.m file and register the SDK in the [AppDelegateapplication:didFinishLaunchingWithOptions:] method: Interface Description IDOBluetoothServices * _Nonnull registrationServices(NSString * _Nullable password) @property (nonatomic,copy,nullable) IDOBluetoothServices *_Nonnull(^outputSdkLog)(BOOL isOutput); @property (nonatomic,copy,nullable) IDOBluetoothServices *_Nonnull(^outputProtocolLog)(BOOL isOutput,BOOL isRecord); @property (nonatomic,copy,nullable) IDOBluetoothServices *_Nonnull(^rawDataLog)(BOOL isRecord); @property (nonatomic,copy,nullable) void(^startScanBule)(void(^ _Nullable getDeviceInfoBlock)(IDOGetDeviceInfoBluetoothModel * _Nullable model)); Parameter Description Parameters Description Notes registrationServices Registration service initialization SDK database password, pass nil database without encryption startConnectDevice Tell the SDK what device to connect to when starting up Mac address outputSdkLog output sdk log YES in debug mode outputProtocolLog Export and log protocol YES in debug mode rawDataLog Record raw log Add according to project needs Objc: #ifdef DEBUG registrationServices().outputSdkLog(YES).outputProtocolLog(YES,YES).rawDataLog(YES).startScanBule(^(IDOGetDeviceInfoBluetoothModel * _Nullable model) { //Perform automatic scan connection according to the binding state, initialize the Bluetooth management center if(__IDO_BIND__)[IDOBluetoothManager startScan]; else [IDOBluetoothManager refreshDelegate]; }); #else registrationServices().outputSdkLog(NO).outputProtocolLog(NO,YES).rawDataLog(YES).startScanBule(^(IDOGetDeviceInfoBluetoothModel * _Nullable model) { //Perform automatic scan connection according to the binding state, initialize the Bluetooth management center if(__IDO_BIND__)[IDOBluetoothManager startScan]; else [IDOBluetoothManager refreshDelegate]; }); #endif Swift #if DEBUG registrationServices().outputSdkLog!(true).outputProtocolLog!(true,true).rawDataLog!(true).startScanBule!{ (model) in //Perform automatic scan connection according to the binding state, initialize the Bluetooth management center if IDOBluetoothEngine.shareInstance()?.peripheralEngine.isBind == true { IDOBluetoothManager.startScan() }else { IDOBluetoothManager.refreshDelegate() } } #else registrationServices().outputSdkLog!(false).outputProtocolLog!(false,true).rawDataLog!(true).startScanBule!{ (model) in //Perform automatic scan connection according to the binding state, initialize the Bluetooth management center if IDOBluetoothEngine.shareInstance()?.peripheralEngine.isBind == true { IDOBluetoothManager.startScan() }else { IDOBluetoothManager.refreshDelegate() } } #endif 1.3.2 SDK Notification service name // Bluetooth scan, connection status notification listener name | Bluetooth scan, connection status notification listener name extern NSString *_Nonnull IDOBluetoothConnectStateNotifyName; // Bluetooth scan, connection process error notification monitor name | Bluetooth scan, connection process error notification listener name extern NSString * _Nonnull IDOBluetoothConnectErrorNotifyName; // device bind status notification name | device bind status notification name extern NSString * _Nonnull IDOBluetoothDeviceBindNotifyName; // Synchronize configuration to get device information notification name | get device info notification name extern NSString * _Nonnull IDOBluetoothGetDeviceInfoNotifyName; // sync config complete notification name | sync config complete notification name extern NSString *_Nonnull IDOBluetoothSyncConfigNotifyName; // Sync health data complete notification name | sync health data complete notification name extern NSString *_Nonnull IDOBluetoothSyncHealthNotifyName; // Quick configuration completion notification name when just connected | fast sync complete notification name extern NSString * _Nonnull IDOBluetoothFastSyncNotifyName; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"IDOBluetooth.html":{"url":"IDOBluetooth.html","title":"Bluetooth Management Library","keywords":"","body":"Bluetooth Management Library 2.1 Functional Overview When you apply an unconnected bound device, you need to create a view controller that implements the SDK bluetooth proxy. Scan peripheral devices, the agent will return the device collection, display it in the list, select the device that needs to be connected, after the connection is successful, it will return the device information and whether the device is in OTA mode, if the connection fails, there will be an error callback. The default scan signal filter parameter is 80, and the automatic scan connection timeout is 20 seconds. The Bluetooth management library (IDOBluetooth) depends on the Bluetooth protocol library (IDOBlueProtocol), so before using the Bluetooth management library, import the Bluetooth protocol library first. 2.2 Scanning connection flow chart 2.3 Bluetooth initialization Objc: [IDOBluetoothManager shareInstance].rssiNum = 100; [IDOBluetoothManager shareInstance].delegate = self; Swift: IDOBluetoothManager.shareInstance()?.rssiNum = 100; IDOBluetoothManager.shareInstance()?.delegate = self; 2.4 Parameter Description parameters illustrate Remarks timeout Auto scan connection timeout period default 20 rssiNum set scan filter signal Default value 80 isIntervalScan Whether to start the timeout interval scan Default yes isReconnect Whether a reconnection mechanism is required default yes autoScanInterval Set the scan interval default 10s isMandatoryManual Force switch to manual mode to scan connections Add a device that is currently bound to a device scanMode Bluetooth scan device mode readonly state Bluetooth management connection status readonly errorCode Bluetooth connection error code readonly manualConnectTotalTime Total time spent manually clicking connected devices readonly autoConnectTotalTime Total duration of auto scan to successfully connected devices readonly 2.5 basic method Objc: //start scanning [IDOBluetoothManager startScan]; //refresh bluetooth proxy [IDOBluetoothManager refreshDelegate]; //stop scanning [IDOBluetoothManager stopScan]; //Connect the device [IDOBluetoothManager connectDeviceWithModel:model]; //Disconnects the current peripheral device [IDOBluetoothManager cancelCurrentPeripheralConnection]; Swift: //start scanning IDOBluetoothManager.startScan(); //refresh bluetooth proxy IDOBluetoothManager.refreshDelegate(); //stop scanning IDOBluetoothManager.stopScan(); //Connect the device IDOBluetoothManager .connectDevice(with: model as? IDOPeripheralModel); //Disconnects the current peripheral device IDOBluetoothManager.cancelCurrentPeripheralConnection(); 2.6 proxy method Objc: - (BOOL)bluetoothManager:(IDOBluetoothManager *)manager centerManager:(CBCentralManager *)centerManager didConnectPeripheral:(CBPeripheral *)peripheral isOatMode:(BOOL)isOtaMode { //Device connection successful callback return YES; } - (void)bluetoothManager:(IDOBluetoothManager *)manager allDevices:(NSArray *)allDevices otaDevices:(NSArray *)otaDevices { //Scanning devices returns the device collection callback in real time } - (void)bluetoothManager:(IDOBluetoothManager *)manager didUpdateState:(IDO_BLUETOOTH_MANAGER_STATE)state { //Scan connection status callback } - (void)bluetoothManager:(IDOBluetoothManager *)manager connectPeripheralError:(NSError *)error { //Scan connection error callback } Swift: IDOBluetoothManagerDelegate func bluetoothManager(_ manager: IDOBluetoothManager!, connectPeripheralError error: Error!) { //Scan connection error callback }; func bluetoothManager(_ manager: IDOBluetoothManager!, didUpdate state: IDO_BLUETOOTH_MANAGER_STATE) { //Scan connection status callback }; func bluetoothManager(_ manager: IDOBluetoothManager!, allDevices: [IDOPeripheralModel]!, otaDevices: [IDOPeripheralModel]!) { //Scanning devices returns the device collection callback in real time }; func bluetoothManager(_ manager: IDOBluetoothManager!, center centerManager: CBCentralManager!, didConnect peripheral: CBPeripheral!, isOatMode isOtaMode: Bool) -> Bool { //Device connection successful callback return true; }; 2.7 Bluetooth notification 1.IDOBluetoothConnectStateNotifyName Bluetooth scan connection status monitoring notification name. Generally, this notification is monitored globally. When the Bluetooth status changes, a notification is thrown and the corresponding UI interaction is modified.。 2.IDOBluetoothConnectErrorNotifyName Bluetooth scan connection error monitoring notification name. Generally, this notification is monitored globally. When a Bluetooth error occurs, a notification is thrown, and the corresponding UI interaction is modified.。 3.IDOBluetoothOtaModeNotifyName The Bluetooth connection bracelet is the name of the OTA mode monitoring notification. Generally, this notification is monitored globally. When the current bracelet is found to be in OTA mode after the Bluetooth connection, a notification is thrown, and the bracelet upgrade operation is performed according to the business。 Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"IDOBlueUpdate.html":{"url":"IDOBlueUpdate.html","title":"Upgrade Management Library","keywords":"","body":"Bluetooth upgrade library 3.1 Functional Overview The SDK upgrade function is only responsible for firmware upgrade. Firmware version determination and firmware download are not handled. Pay attention to the integrity of firmware downloads, pass in firmware local sandbox paths during upgrades, monitor upgrade progress and completion status, and error proxy callbacks. The current version of the upgrade library adds nordic, realtk, apollo platforms. The upgrade management library (IDOBlueUpdate) depends on the Bluetooth protocol library (IDOBlueProtocol), so before using the upgrade management library, import the Bluetooth protocol library first.。 3.2 Corresponding function table //Device update funcTable4Model.deviceUpdate 3.3 Upgrade initialization Objc: [IDOUpdateFirmwareManager shareInstance].delegate = self; [IDOUpdateFirmwareManager shareInstance].updateType = IDO_NORDIC_PLATFORM_TYPE; Swift: IDOUpdateFirmwareManager.shareInstance().delegate = self; IDOUpdateFirmwareManager.shareInstance().updateType = IDO_UPDATE_PLATFORM_TYPE.NORDIC_PLATFORM_TYPE; 3.4 Parameter Description Parameters illustrate Remarks packagePath Firmware package local path local sandbox path errorCode upgrade error code readonly state upgrade status readonly updateType Upgrade platform type Support nordic、realtk、apollo 3.5 basic method Objc: //startUpdate [IDOUpdateFirmwareManager startUpdate]; Swift: //startUpdate IDOUpdateFirmwareManager.startUpdate(); 3.6 proxy method Objc: - (NSString *)currentPackagePathWithUpdateManager:(IDOUpdateFirmwareManager *)manager { // Firmware package local storage path return filePath; } - (void)updateManager:(IDOUpdateFirmwareManager *)manager state:(IDO_UPDATE_STATE)state { if (state == IDO_UPDATE_COMPLETED) { //update completed }else if state == IDO_UPDATE_DID_ENTER_OTA{ //enter ota mode }else if state == IDO_UPDATE_STARTING { //Upgrading } } - (void)updateManager:(IDOUpdateFirmwareManager *)manager updateError:(NSError *)error { // upgrade unsuccessful } - (void)updateManager:(IDOUpdateFirmwareManager *)manager progress:(float)progress message:(NSString *)message { // Upgrade progress (0-1) } @optional - (IDO_UPDATE_DFU_FIRMWARE_TYPE)selectDfuFirmwareTypeWithUpdateManager:(IDOUpdateFirmwareManager * _Nullable)manager { // Upgrade nordic application Type return IDO_DFU_FIRMWARE_APPLICATION_TYPE; // Upgrade nordic bootloader Type return IDO_DFU_FIRMWARE_BOOTLOADER_TYPE; } - (IDO_REALTK_UPDATE_TYPE)selectRealtkTypeWithUpdateManager(IDOUpdateFirmwareManager *_Nullable)manager supportOtaMode:(BOOL)isOtaMode supportSilentMode:(BOOL)isSilentMode { // Upgrade realtk main control program return IDO_NORMAL_MODE_UPDATE_TYPE; // Upgrade realtk flash file return IDO_SILENT_MODE_UPDATE_TYPE; } - (IDO_DATA_FILE_TRAN_TYPE)selectFileTranTypeUpdateManager:(IDOUpdateFirmwareManager *_Nullable)manager { return IDO_DATA_FILE_TRAN_DIAL_TYPE; } - (IDO_DATA_TRAN_COMPRESSION_TYPE)fileTranCompressionTypeUpdateManager:(IDOUpdateFirmwareManager *)manager { return IDO_DATA_TRAN_COMPRESSION_FASTLZ_TYPE; } - (NSString * _Nullable)fileTranNameUpdateManager:(IDOUpdateFirmwareManager *_Nullable)manager { //Firmware upgrade name: @\".fw\" Image resource name: @\".fzbin\" font name:@\".bin\" language:@\".lang\",bt upgrade:@\".bt\" return @\".bt\"; } - (NSInteger)setTransferNumberPacketsUpdateManager:(IDOUpdateFirmwareManager *)manager { //default value is 10 return 10; } Swift: IDOUpdateManagerDelegate func currentPackagePath(withUpdate manager: IDOUpdateFirmwareManager?) -> String? { // Firmware package local storage path return filePath; } func update(_ manager: IDOUpdateFirmwareManager?, progress: Float, message: String?) { // Upgrade progress (0-1) } func update(_ manager: IDOUpdateFirmwareManager?, state: IDO_UPDATE_STATE) { if state == IDO_UPDATE_STATE.COMPLETED { //update completed }else if state == IDO_UPDATE_STATE.DID_ENTER_OTA{ //enter ota mode }else if state == IDO_UPDATE_STATE.STARTING { //Upgrading } } func update(_ manager: IDOUpdateFirmwareManager?, updateError error: Error?) { // upgrade unsuccessful } func selectDfuFirmwareType(withUpdate manager: IDOUpdateFirmwareManager?) -> IDO_UPDATE_DFU_FIRMWARE_TYPE { // Upgrade nordic application Type return IDO_UPDATE_DFU_FIRMWARE_TYPE.DFU_FIRMWARE_APPLICATION_TYPE; // Upgrade nordic bootloader Type return IDO_UPDATE_DFU_FIRMWARE_TYPE.DFU_FIRMWARE_BOOTLOADER_TYPE; } func selectRealtkType(withUpdate manager: IDOUpdateFirmwareManager?, supportOtaMode isOtaMode: Bool, supportSilentMode isSilentMode: Bool) -> IDO_REALTK_UPDATE_TYPE { // Upgrade realtk main control program return IDO_REALTK_UPDATE_TYPE.NORMAL_MODE_UPDATE_TYPE; // Upgrade realtk flash file return IDO_REALTK_UPDATE_TYPE.SILENT_MODE_UPDATE_TYPE; } func selectFileTranTypeUpdate(_ manager: IDOUpdateFirmwareManager?) -> IDO_DATA_FILE_TRAN_TYPE { return .DIAL_TYPE } func fileTranCompressionTypeUpdate(_ manager: IDOUpdateFirmwareManager?) -> IDO_DATA_TRAN_COMPRESSION_TYPE { return .FASTLZ_TYPE } func fileTranNameUpdate(_ manager: IDOUpdateFirmwareManager?) -> String? { //Firmware upgrade name: @\".fw\" Image resource name: @\".fzbin\" font name:@\".bin\" language:@\".lang\",bt upgrade:@\".bt\" return \"bt\" } func setTransferNumberPacketsUpdate(_ manager: IDOUpdateFirmwareManager?) -> Int { return 10 } 3.7 Demo Upgrade function entry Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"IDODeviceBinding.html":{"url":"IDODeviceBinding.html","title":"Device binding and unbinding","keywords":"","body":"Device binding and unbinding 4.1 Functional Overview When connecting the device for the first time, you need to execute the binding command. According to the status type returned by the binding command, there are authorized binding and unauthorized binding. For authorized binding, you need to enter the verification code displayed on the bracelet to bind successfully. You can bind directly without confirmation. Device unbinding includes connection unbinding and disconnection unbinding. When connected, unbind is when the app sends an unbind command to unbind both parties, and all data on the bracelet will be erased at the same time. When disconnected, the app unilaterally modifies the binding. The status is unbound, and the data on the bracelet will not be erased. 4.2 bind command Objc: IDOSetBindingInfoBluetoothModel * model = [[IDOSetBindingInfoBluetoothModel alloc]init]; [IDOFoundationCommand bindingCommand:model waitForSure:^{ //The process of binding waiting } callback:^(IDO_BIND_STATUS status, int errorCode) { if (errorCode == 0) { if (status == IDO_BLUETOOTH_BIND_SUCCESS) { //Binding succeeded }else if (status == IDO_BLUETOOTH_BINDED) { //already bound }else if (status == IDO_BLUETOOTH_BIND_FAILED) { //bind failed }else if (status == IDO_BLUETOOTH_NEED_AUTH) { //Authorization binding required }else if (status == IDO_BLUETOOTH_REFUSED_BINDED) { //refuse to bind } }else { //bind failed } }]; //If authorization binding is required, execute the following code IDOSetBindingInfoBluetoothModel * model = [IDOSetBindingInfoBluetoothModel currentModel]; //Enter the authorization code model.authCode = authCode; [IDOFoundationCommand setAuthCodeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Authorization binding succeeded }else { //Authorization binding failed } }]; Swift: let model = IDOSetBindingInfoBluetoothModel.init(); IDOFoundationCommand.bindingCommand(model, callback: {(state,errorCode) in if errorCode == 0 { if state == IDO_BIND_STATUS.BLUETOOTH_BIND_SUCCESS { //Binding succeeded }else if state == IDO_BIND_STATUS.BLUETOOTH_BINDED { // already bound }else if state == IDO_BIND_STATUS.BLUETOOTH_BIND_FAILED { // bind failed }else if state == IDO_BIND_STATUS.BLUETOOTH_NEED_AUTH { // Authorization binding required }else if state == IDO_BIND_STATUS.BLUETOOTH_REFUSED_BINDED { // refuse to bind } }else { //bind failed } }); //If authorization binding is required, execute the following code let currentModel = IDOSetBindingInfoBluetoothModel.current(); currentModel?.authCode = authCode; IDOFoundationCommand.setAuthCode(currentModel, callback: {(errorCode) in if errorCode == 0 { //Authorization binding succeeded }else { //Authorization binding failed } }); 4.3 Unbind command Objc: /* In the connection state, this method executes a successful callback, which belongs to the unbinding of both parties, and deletes the bracelet data; In the disconnected state, the successful callback is executed, the App is unilaterally unbound, and the bracelet data will not be deleted； */ [IDOFoundationCommand mandatoryUnbindingCommand:^(int errorCode) { if (errorCode == 0) { //Unbind successfully }else { //Unbind failed } }]; Swift: /* In the connection state, this method executes a successful callback, which belongs to the unbinding of both parties, and deletes the bracelet data; In the disconnected state, the successful callback is executed, the App is unilaterally unbound, and the bracelet data will not be deleted； */ IDOFoundationCommand.mandatoryUnbindingCommand { (errorCode) in if errorCode == 0 { //Unbind successfully }else { //Unbind failed } }; 4.4 switch device Objc: //The incoming Mac address is the Mac address of the device that has been bound [IDOFoundationCommand switchDeviceCommand:model.macAddr isMandatory:YES //NO: Only bound devices can be switched, YES: unbound devices can also be switched callback:^(int errorCode) { if (errorCode == 0) { /** Successfully initialized switch device information Bluetooth needs to be reconnected=>YES Connection authentication settings=>NO */ [IDOBluetoothManager shareInstance].isReconnect = YES; [IDOBluetoothManager shareInstance].isDetectionAuthCode = NO; if (!__IDO_CONNECTED__) {//Scan if not connected [IDOBluetoothManager startScan]; }else {//Disconnect if connected, start auto scan connection [IDOBluetoothManager cancelCurrentPeripheralConnection]; } }else { //Failed to switch } }]; //Listen to the device connection callback, if the connection fails, the switch device fails, and if the connection is successful, execute the following command /** If the switch device is connected successfully, the device encryption authorization code needs to be detected. If the current device does not support authentication, the error code 6 will be returned. Please press Execute to complete the binding operation as normal。 */ [IDOFoundationCommand switchDeviceDetectionEncryptionAuthCallback:^(int errorCode) { if(errorCode == 0) { //The authentication device is switched successfully }else if(errorCode == 6){ //Ordinary device switch successfully [IDOFoundationCommand swithOrdinaryDeviceComplete]; }else if(errorCode == 1041) { //Inconsistent authorization codes => the device is bound by other mobile phones }else if(errorCode == 1035) { //Device is not bound }else { //failure } }]; Swift: //The incoming Mac address is the Mac address of the device that has been bound IDOFoundationCommand.switchDeviceCommand(\"\", isMandatory: true) { (errorCode) in if errorCode == 0 { /** Successfully initialized switch device information Bluetooth needs to be reconnected=>YES Connection authentication settings=>NO */ IDOBluetoothManager.shareInstance().isReconnect = true IDOBluetoothManager.shareInstance().isDetectionAuthCode = false if !IDOBluetoothEngine.shareInstance().managerEngine.isConnected { //Scan if not connected IDOBluetoothManager.startScan() }else { //Disconnect if connected, start auto scan connection IDOBluetoothManager.cancelCurrentPeripheralConnection() } }else { //Failed to switch } } //Listen to the device connection callback, if the connection fails, the switch device fails, and if the connection is successful, execute the following command /** If the switch device is connected successfully, the device encryption authorization code needs to be detected. If the current device does not support authentication, the error code 6 will be returned. Please press Execute to complete the binding operation as normal。 */ IDOFoundationCommand.switchDeviceDetectionEncryptionAuthCallback { (errorCode) in if errorCode == 0 { //The authentication device is switched successfully }else if errorCode == 6 { //Ordinary device switch successfully IDOFoundationCommand.swithOrdinaryDeviceComplete() }else if errorCode == 1041 { //Inconsistent authorization codes => the device is bound by other mobile phones }else if errorCode == 1035 { //Device is not bound }else { //failed } } 4.5 Demo Unbind function entry Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"IDOErrorCode.html":{"url":"IDOErrorCode.html","title":"Error code description","keywords":"","body":"Error code description 5.1Functional Overview errorCode is the basis for judging the status of the global command callback. When the errorCode is equal to 0, it is successful, and other values are failure. The error code string can be obtained through the method in the IDOErrorCodeToStr class, or the explanation of the code corresponding to the documentation can be used。 5.2 Corresponding error code table error code string Remark 0 SUCCESS success 4 ERROR_NO_MEM unknown 5 ERROR_NOT_FIND Method not found 6 ERROR_NOT_SUPPORTED This feature is not supported 7 ERROR_INVALID_PARAM invalid parameter 8 ERROR_INVALID_STATE invalid state 9 ERROR_INVALID_LENGTH invalid data length 10 ERROR_INVALID_FLAGS unknown 11 ERROR_INVALID_DATA invalid data 12 ERROR_DATA_SIZE wrong data size 13 ERROR_TIMEOUT time out 14 ERROR_NULL empty data 15 ERROR_FORBIDDEN Forbidden errors/td> 17 ERROR_BUSY The system is busy 18 ERROR_LOW_BATT battery is too low 19 ERROR_SERIAL Bluetooth disconnection 20 ERROR_TIME_OUT_RECONNECT Bluetooth disconnection 21 ERROR_APP_TEST Bluetooth disconnection 22 ERROR_MAX_TIME Bluetooth disconnection 24 ERROR_WATCH_SPACE_ORGANIZATION Dial space is enough but needs to be organized 25 ERROR_WATCH_SPACE_ORGANIZATION_ING The dial space is being organized 1019 ERROR_BLUETOOTH_DISCONNECT Bluetooth disconnection 1020 ERROR_MODEL_DATA Model data error 1021 ERROR_CURRENT_OTA Current OTA 1022 ERROR_DEVICE_SYNCING synchronizing 1023 ERROR_AUTH_CODE wrong authorization code 1024 ERROR_SET_PAIRING_CANCEL Unpairing 1025 ERROR_SET_PAIRING_UNKNOWN_TIMEOUT Pairing unknown timeout 1026 ERROR_SET_PAIRING_RECONNECT Pairing reconnection failed 1027 ERROR_SET_OTA_RECONNECT OTA reconnection failed 1028 ERROR_TRAN_FILE_NO_EXIST Transfer file does not existwrong transfer file path 1029 ERROR_TRAN_FILE_FAILED Failed to transfer file 1030 ERROR_ALARM_ID Alarm ID is wrong 1031 ERROR_PAIRING_TIMEOUT pairing timeout 1032 ERROR_FAST_CONFIG fast shipping error 1033 ERROR_MIGRATION_ING data migration 1034 ERROR_BLUE_PAIRING Bluetooth pairing 1035 ERROR_DEVICE_NO_BIND Device not bound 1036 ERROR_TRAN_FILE_GPS_RUN GPS running 1037 ERROR_SYNC_ITEM_TYPE Error synchronization class item 1038 ERROR_TRAN_FILE_ING transferring files 1039 ERROR_METHOD_DEPRECATED method deprecation 1040 ERROR_ALARM_NAME wrong alarm clock name 1041 ERROR_ENCRYPTED_CODE Authentication code error 1042 ERROR_WRITE_VALUE write data error 1043 ERROR_SYNC_ACTIVITY_EMPTY Sync activity data is empty 1044 ERROR_SYNC_GPS_EMPTY Sync GPS data is empty Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"IDOSetUpFunction.html":{"url":"IDOSetUpFunction.html","title":"Set command function","keywords":"","body":"Set command 6.1 Function overview The setting command is that the mobile terminal sends data to the wristband terminal through the command, and the wristband terminal returns the response status corresponding to the processing data. When successful, the setting data is stored, otherwise it is not stored. According to the status code as a prompt, if the setting is successful, the errorCode is equal to 0. 6.2 Main command function set time command set alarm command Set user information Set up to find your phone Set the wrist lift command Set left and right hand wear Set up anti-lost commands set display mode Set up smart reminders Set a sedentary reminder set the weather forecast Set v2 heart rate mode Set heart rate zones Set up do not disturb mode set unit command Set up a one-key call for help Set up shortcuts Set up blood pressure calibration Set exercise shortcuts Set exercise sorting Set screen brightness set music switch Set gps information Set the watch face id Set reminders to move Set v3 heart rate mode Set the blood oxygen switch set sleep switch Set the pressure switch Settings menu list Set up menstrual cycle reminders Set up a menstrual cycle Set a reminder to drink water Set up breathing exercises Set the motion switch Set drink water reminder Set breath rate Set fitness switch Set widget ordering Set period history data Set ambient volume switch Set v3 smart reminder Set schedule reminders Set science sleep switch Set smart heart rate mode Set blood oxygen switch Set sports subitem data arrangement Set sunrise and sunset times Set all contacts Set up call favorites Set night temperature switch Set handwashing reminders Set world time 6.3 Demo set function entry Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"set/IDOSetTimeFunction.html":{"url":"set/IDOSetTimeFunction.html","title":"Set time command","keywords":"","body":"Set time command Time Model Description IDOSetTimeInfoBluetoothModel Parameter Description Remark year Year int month Month int day Day int hour Hour int minute Minute int second Second int weekDay Wekk int timeZone Timezone 1-24 Function table in table 36 =>timeZoneFloat if supported Timezone*100 foe example：8.10*100 = 810 timeStamp Timestamp str Command code Objc: //Get current time IDOSetTimeInfoBluetoothModel * model = [IDOSetTimeInfoBluetoothModel currentModel]; //Get UTC time if(__IDO_FUNCTABLE__.funcTable28Model.utcTimeZone) { IDOSetTimeInfoBluetoothModel * model = [IDOSetTimeInfoBluetoothModel getCurrentUtcTimeModel]; } [IDOFoundationCommand setCurrentTimeCommand:model callback:^(int errorCode) { if(errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device does not support this method }else { //Wrong setting } }]; Swift: let model1:IDOSetTimeInfoBluetoothModel = IDOSetTimeInfoBluetoothModel.current(); if IDOBluetoothEngine.shareInstance().managerEngine.funcTableModel.funcTable28Model.utcTimeZone { let model:IDOSetTimeInfoBluetoothModel = IDOSetTimeInfoBluetoothModel.getCurrentUtcTime(); } IDOFoundationCommand.setCurrentTime(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetAlarmFunction.html":{"url":"set/IDOSetAlarmFunction.html","title":"Set alarm command","keywords":"","body":"Set alarm command Alarm clock model description IDOSetAlarmInfoBluetoothModel Parameter Description Remark isOpen Alarm is on bool isSync Whether to sync to the bracelet No assignment is required, the alarm will be automatically assigned after the alarm is set successfully isDelete Delete or not DefaultYES type Type 0：Get up， 1：Sleep， 2：Exercise， 3：Take medicine， 4：Dating， 5：Reunion， 6:Meeting，7：Other 8：Eat， 9：Brush teeth，10 :Rest 11 : Course 12: Shower 13:Study 14: Play 42：Custom name hour 分 int minute Second int repeat Repeat set [Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday] tsnoozeDuration Snooze duration int alarmId AlarmID int setTimeStamp The timestamp of the alarm modification No assignment is required, it will be automatically assigned after the alarm is set successfully repeatTime Repeat alarm times Repeat alarm times v3 alarm clock only works shockOnOff Vibration switch v3 alarm clock only works delayMinute Delay minutes v3 alarm clock only works alarmName alarm clock name The length is limited to 23 bytes, and the v3 alarm clock is valid IDOSetExtensionAlarmInfoBluetoothModel Parameter Description Remark alarmVersion Alarm version number int alarmCount Number of alarm clocks int items Alarm clock collection Initialize the bracelet alarm when syncing the configuration Command code Set v2 alarm Objc: //All alarms NSArray * alarms = [IDOSetAlarmInfoBluetoothModel queryAllAlarms]; //Unfired or deleted alarms NSArray * alarms = [IDOSetAlarmInfoBluetoothModel queryAllNoOpenAlarms]; [IDOFoundationCommand setAllAlarmsCommand:alarms callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let alarms = IDOSetAlarmInfoBluetoothModel.queryAllAlarms(); let alarms = IDOSetAlarmInfoBluetoothModel.queryAllNoOpenAlarms(); IDOFoundationCommand.setAllAlarms(alarms) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Set v3 alarm Objc: IDOSetExtensionAlarmInfoBluetoothModel * alarmModel = [IDOSetExtensionAlarmInfoBluetoothModel currentModel]; [IDOFoundationCommand setV3AllAlarmsCommand:alarmModel callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetExtensionAlarmInfoBluetoothModel.current(); IDOFoundationCommand.setV3AllAlarms(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetUserInfoFunction.html":{"url":"set/IDOSetUserInfoFunction.html","title":"Set user information","keywords":"","body":"Set user information Command code Set user information IDOSetUserInfoBuletoothModel Parameter Description Remark year Year int month Month int day Day int height Height Unit: cm weight Weight Unit: Kilogram gender Gender 1:Male,2:Female Objc: IDOSetUserInfoBuletoothModel * model = [IDOSetUserInfoBuletoothModel currentModel]; [IDOFoundationCommand setUserInfoCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetUserInfoBuletoothModel.current(); IDOFoundationCommand.setUserInfo(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Set v2 motion target 📢 ：Execute a command every time a target type is set IDOSetUserInfoBuletoothModel Parameter Description Remark goalSleepDataHour Target sleep (hours) int goalSleepDataMinute Target sleep (minutes) int goalStepData Target steps Unit: step goalCalorieData Target Calories Unit:Kcal goalDistanceData Target Distance Unit:meter goalWeightData target weight Unit:kg*100 goalType Target type 0:Steps, 1: Calories, 2: Distance Objc: IDOSetUserInfoBuletoothModel * model = [IDOSetUserInfoBuletoothModel currentModel]; [IDOFoundationCommand setTargetInfoCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetUserInfoBuletoothModel.current(); IDOFoundationCommand.setUserInfo(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Set v3 motion goals IDOSetUserInfoBuletoothModel Parameter Description Remark goalCalorieData Target calories Unit: Kcal goalDistanceData Target distance Unit: meter goalMidHighTimeData Medium to high duration of exercise targets Units: Second goalWalkTime Walk around the target time Unit: hour calorieMax Maximum active calories Unit: kcal calorieMin Minimum active calories Unit: kcal Objc: IDOSetUserInfoBuletoothModel * model = [IDOSetUserInfoBuletoothModel currentModel]; [IDOFoundationCommand setCalorieAndDistanceGoalCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Setup successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetUserInfoBuletoothModel.current(); IDOFoundationCommand.setCalorieAndDistanceGoal(model) { (errorCode) in if errorCode == 0 { //Setup successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetFindPhoneFunction.html":{"url":"set/IDOSetFindPhoneFunction.html","title":"Set find Phone","keywords":"","body":"Set up to find your phone Function table __IDO_FUNCTABLE__.funcTable11Model.findPhone Find Phone Model Instructions IDOSetFindPhoneInfoBuletoothModel Parameter Description Remark isOpen Find the phone switch bool Command code Objc: IDOSetFindPhoneInfoBuletoothModel * model = [IDOSetFindPhoneInfoBuletoothModel currentModel]; [IDOFoundationCommand setFindPhoneCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetFindPhoneInfoBuletoothModel.current(); IDOFoundationCommand.setFindPhone(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetHandUpFunction.html":{"url":"set/IDOSetHandUpFunction.html","title":"Set wrist lift command","keywords":"","body":"#Set the wrist lift command Function table __IDO_FUNCTABLE__.funcTable11Model.upHandGesture Wrist lift model description IDOSetHandUpInfoBuletoothModel Parameter Description Remark isOpen Switch bool isHasTimeRange Is there a time gap bool showSecond Display time 3～10 second startHour Start (Hour) int startMinute Start (Minute) int endHour Finish (Hour) int endMinute Finish (Second) int Command code Objc: IDOSetHandUpInfoBuletoothModel * model = [IDOSetHandUpInfoBuletoothModel currentModel]; [IDOFoundationCommand setHandUpCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetHandUpInfoBuletoothModel.current(); IDOFoundationCommand.setHandUp(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetLeftRightFundation.html":{"url":"set/IDOSetLeftRightFundation.html","title":"Set left and right hand wear","keywords":"","body":"Set up left and right hand to wear Description of wearing on the left and right hand IDOSetLeftOrRightInfoBuletoothModel Parameter Description Remark isRight Whether to wear on the right hand bool Command code Objc: IDOSetLeftOrRightInfoBuletoothModel * model = [IDOSetLeftOrRightInfoBuletoothModel currentModel]; [IDOFoundationCommand setLeftRightHandCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetLeftOrRightInfoBuletoothModel.current(); IDOFoundationCommand.setLeftRightHand(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOPreventLostFunction.html":{"url":"set/IDOPreventLostFunction.html","title":"Set anti-loss command","keywords":"","body":"Set up anti-lost commands Function table __IDO_FUNCTABLE__.funcTable11Model.antilost Anti-lost model description IDOSetPreventLostInfoBuletoothModel Parameter Description Remark levelType Anti-loss level 0:Not anti-lost,1:Anti-lost at close range,2:Anti-lost at middle range,3:Anti-lost at long range Command code Objc: IDOSetPreventLostInfoBuletoothModel * model = [IDOSetPreventLostInfoBuletoothModel currentModel]; [IDOFoundationCommand setPreventLostCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetPreventLostInfoBuletoothModel.current(); IDOFoundationCommand.setPreventLost(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetDisplayFunction.html":{"url":"set/IDOSetDisplayFunction.html","title":"Set display mode","keywords":"","body":"Set display mode Function table __IDO_FUNCTABLE__.funcTable13Model.displayMode Display Mode Model Description IDOSetDisplayModeInfoBluetoothModel Parameter Description Remark modeType Display mode 0:Default,1:Horizontal screen,2:Vertical screen,3:Rotate 180 degrees Command code Objc: IDOSetDisplayModeInfoBluetoothModel * model = [IDOSetDisplayModeInfoBluetoothModel currentModel]; [IDOFoundationCommand setDisplayModeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetDisplayModeInfoBluetoothModel.current(); IDOFoundationCommand.setDisplayMode(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetNoticeFunction.html":{"url":"set/IDOSetNoticeFunction.html","title":"Set smart reminder","keywords":"","body":"Set up smart reminders Set smart reminder to initiate pairing first, and then turn on the corresponding notification switch Function table __IDO_FUNCTABLE__.funcTable4Model.ancs Description of smart reminder model IDOSetNoticeInfoBuletoothModel Parameter Description Remark isPairing Is it paired bool callDelay Call delay The current setting must be greater than or equal to 3 seconds to be effective isOnChild Whether to open the sub switch Only valid for smart reminders, invalid for incoming call reminders isOnCall Incoming call bool isOnSms SMS notification bool isOnEmail Email reminder bool isOnWeChat WeChat reminder bool isOnQq qq reminder bool isOnWeibo Weibo reminder bool isOnFaceBook FaceBook reminder bool isOnTwitter Twitter reminder bool isOnWhatsapp Whatsapp reminder bool isOnMessenger Messenger reminder bool isOnInstagram Instagram reminder bool isOnLinkedIn LinkedIn reminder bool isOnCalendar Calendar reminder bool isOnSkype Skype reminder bool isOnAlarm Alarm reminder bool isOnPokeman Pokeman reminder bool isOnVkontakte Vkontakte reminder bool isOnLine Line reminder bool isOnViber Viber reminder bool isOnKakaoTalk KakaoTalk reminder bool isOnGmail Gmail reminder bool isOnOutlook Outlook reminder bool isOnSnapchat Snapchat reminder bool isOnTelegram Telegram reminder bool isOnChatwork Chatwork reminder bool isOnSlack Slack reminder bool isOnYahooMail Yahoo Mail reminder bool isOnTumblr Tumblr reminder bool isOnYoutube Youtube reminder bool isOnYahooPinterest Yahoo Pinterest reminder bool isOnKeep Keep reminder bool isOnTikTok TikTok reminder bool isOnRedbus Redbus reminder bool isOnDailyhunt isOnDailyhunt reminder bool isOnHotstar Hotstar reminder bool isOnInshorts Inshorts reminder bool isOnPaytm Paytm reminder bool isOnAmazon Amazon reminder bool isOnFlipkart Flipkart reminder bool isOnPrime Prime reminder bool isOnNetflix Netflix reminder bool isOnGpay Gpay reminder bool isOnPhonpe Phonpe reminder bool isOnSwiggy Swiggy reminder bool isOnZomato Zomato reminder bool isOnMakeMyTrip MakeMyTrip reminder bool isOnJioTv JioTv reminder bool isOnMicrosoft Microsoft reminder bool isOnWhatsAppBusiness WhatsApp Business reminder bool isOnNioseFit NioseFit reminder bool isOnDidNotCall Did no call reminder bool isOnMattersRemind Matter reminder bool isOnUber Uber reminder bool isOnOla Ola reminder bool isOnYtMusic Yt music reminder bool isOnGoogleMeet Google meet reminder bool isOnMormaiiSmartwatch Mormaii smartwatch reminder bool isOnTechnosConnect Technos connect reminder bool isOnEnioei Enioei reminder bool isOnAliexpress Aliexpress reminder bool isOnShopee Shopee reminder bool isOnTeams Teams reminder bool isOn99Taxi 99 taxi reminder bool isOnUberEats Uber eats reminder bool isOnLfood l food reminder bool isOnRappi rappi reminder bool isOnMercadoLivre Mercado Livre reminder bool isOnMagalu Magalu reminder bool isOnAmericanas Americanas reminder bool isOnYahoo Yahoo reminder bool Command code Set the pairing and notification switch If the device is not paired, it will initiate pairing. After the pairing is successful, set the sub-switch state. It takes a long time to pair, please monitor the callback. Objc: IDOSetNoticeInfoBuletoothModel * model = [IDOSetNoticeInfoBuletoothModel currentModel]; [IDOFoundationCommand setSwitchNoticeCommand:model callback:^(BOOL isNeedDisconnect, int stateCode) { //Whether the pairing process needs to be disconnected, the status of the pairing process } complete:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetNoticeInfoBuletoothModel.current(); IDOFoundationCommand.setSwitchNotice(model, callback: { (isNeedDisconnect, stateCode) in //Whether the pairing process needs to be disconnected, the status of the pairing process }) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6 { //Device not supported }else { //Setup failed } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetLongSitFunction.html":{"url":"set/IDOSetLongSitFunction.html","title":"设置久坐提醒","keywords":"","body":"设置久坐提醒 功能表 __IDO_FUNCTABLE__.funcTable11Model.sedentariness 久坐模型说明 IDOSetLongSitInfoBuletoothModel 参数 说明 备注 startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int interval 间隔 0-10分钟 isOpen 开关 bool selectWeeks 重复集合 [星期一,星期二,星期三,星期四,星期五,星期六,星期日] 命令代码 Objc: IDOSetLongSitInfoBuletoothModel * model = [IDOSetLongSitInfoBuletoothModel currentModel]; [IDOFoundationCommand setLongSitCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetLongSitInfoBuletoothModel.current(); IDOFoundationCommand.setLongSit(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetWeatherFunction.html":{"url":"set/IDOSetWeatherFunction.html","title":"Set sedentary reminder","keywords":"","body":"Set the weather forecast Function table __IDO_FUNCTABLE__.funcTable11Model.weather || __IDO_FUNCTABLE__.funcTable38Model.setV3Weather Description of Weather Switch Model IDOSetWeatherSwitchInfoBluetoothModel Parameter Description Remark isOpen Switch bool Set the weather switch Objc: IDOSetWeatherSwitchInfoBluetoothModel * model = [IDOSetWeatherSwitchInfoBluetoothModel currentModel]; [IDOFoundationCommand setWeatherCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift let model = IDOSetWeatherSwitchInfoBluetoothModel.current(); IDOFoundationCommand.setWeather(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; v2 weather forecast model descriptionv2天气功能表 : _IDOFUNCTABLE.funcTable11Model.weather IDOSetWeatherDataInfoBluetoothModel Parameter Description Remark timeStr Timestamp of weather forecast update str todayTemp Average temperature today int todayType Weather type of the day 0:Other, 1: sunny, 2: cloudy, 3: overcast, 4: rain, 5: heavy rain, 6: thunderstorm, 7: snow, 8: sleet, 9: typhoon, 10: sandstorm, 11: Clear at night, 12: Cloudy at night, 13: Hot, 14: Cold, 15: Breeze, 16: Strong wind, 17: Fog, 18: Showers, 19: Cloudy to clear todayMaxTemp Highest temperature of the day int todayMinTemp Minimum temperature of the day int humidity Temperature int todayUvIntensity UV intensity int todayAqi Air pollution index int future Weather collection for the next three days 格式:@{@\"type\":@(0),@\"maxTemp\":@(0),@\"minTemp\":@(0)} Set v2 weather data Objc: IDOSetWeatherDataInfoBluetoothModel * model = [IDOSetWeatherDataInfoBluetoothModel currentModel]; [IDOFoundationCommand setWeatherDataCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetWeatherDataInfoBluetoothModel.current(); IDOFoundationCommand.setWeatherData(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Set v2 city name model description IDOSetWeatherDataInfoBluetoothModel Parameter Description Remark cityName City name str Set v2 city name Objc: IDOSetWeatherDataInfoBluetoothModel * model = [IDOSetWeatherDataInfoBluetoothModel currentModel]; [IDOFoundationCommand setWeatherCityCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetWeatherDataInfoBluetoothModel.current(); IDOFoundationCommand.setWeatherCity(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Set v3 weather forecast model instructions V3 Weather Menu: _IDOFUNCTABLE.funcTable38Model.setV3Weather IDOSetV3WeatherDataModel Parameter Description Remark weatherVersion Version int Assignment 2 month Month int day Day int min Minute int sec Second int week Week Sunday: 0,Monday: 1,Tuesday: 2,Wednesday: 3,Thursday: 4,Friday: 5,Saturday:6 weatherType Weather Conditions 0:Other, 1:Sunny, 2:Cloudy, 3:Overcast, 4:Rain, 5:Rainstorm, 6: thunderstorm, 7: snow, 8: sleet, 9: typhoon, 10: sandstorm, 11: clear at night, 12: Cloudy at night, 13: Hot, 14: Cold, 15: Breeze, 16: Strong wind, 17: Fog, 18: Showers, 19: Cloudy to sunny 20: New Moon, 21: Emei Moon, 22: First Quarter Moon, 23: Full Moon, 24: Full Moon, 25: Losing Gibbous, 26: Last Quarter, 27: Waning Moon 48: thunder, 49: hail, 50: blowing sand, 51: tornado todayTmp Current temperature int todayMaxTemp Maximum temperature int cityNameLen City name length int cityName City name str airQuality Air quality int precipitationProbability Precipitation probability int humidity Temperature int todayUvIntensity UV intensity int windSpeed Wind Speed int sunriseHour Sunrise hour int sunriseMin Sunrise minute int sunsetHour Sunset hour int sunsetMin Sunset minute int airGradeInfo Air quality description str future24HoursItems The next 24\\48 hours weather collection IDOFuture24HourWeatherModel weatherType、temperature、probability future7DaysItems Future 7 Weather Collection IDOFuture7DayWeatherDataModel weatherType、maxTemp、minTemp futureSunriseItems Future 3 Sunset Sunrise Weather Collection IDOFutureSunriseWeatherDataItems sunriseHour、sunriseMin、sunsetHour、sunsetMin Set v3 weather data Objc: IDOSetV3WeatherDataModel * model = [IDOSetV3WeatherDataModel currentModel]; [IDOFoundationCommand setV3WeatcherDataCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetV3WeatherDataModel.current(); IDOFoundationCommand.setV3WeatcherData(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetHrModeFunction.html":{"url":"set/IDOSetHrModeFunction.html","title":"Set heart rate Mode","keywords":"","body":"Set heart rate mode Function table __IDO_FUNCTABLE__.funcTable4Model.heartRate || __IDO_FUNCTABLE__.funcTable22Model.v3HrData v2 Heart Rate Mode Model Description IDOSetHrModeInfoBluetoothModel Parameter Description Remark modeType Heart rate mode 0:Turn off heart rate monitoring,1:Manual mode,2:Automatic mode,3:Continuous monitoring isHasTimeRange Is there a time gap bool startHour Start (Hour) int startMinute Start (Minute) int endHour Finish (hour) int endMinute Finish (Hour) int measurementInterval Measurement interval Unit: minutes Command code Set v2 heart rate mode Objc: IDOSetHrModeInfoBluetoothModel * model = [IDOSetHrModeInfoBluetoothModel currentModel]; [IDOFoundationCommand setHrModeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetHrModeInfoBluetoothModel.current(); IDOFoundationCommand.setHrMode(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; v3 Heart Rate Mode Model Description IDOSetV3HeartRateModeBluetoothModel Parameter Description Remark modeType Heart rate mode Heart rate mode 0:Turn off heart rate monitoring(Invalid) 1:Manual mode (auto off) 2: Auto Mode (5 minutes) 3:Continuous monitoring (5 seconds)(Default: auto mode)4:Default type (used by the first binding synchronization configuration, used by the C library) 5:Set the corresponding measurement interval（Set the corresponding measurement_interval）Select 4 and 5 mode, 2 and 3 modes are invalid 6:Intelligent heart rate mode (206 wal customization) updateTime Timestamp str isHasTimeRange Is there a time gap str startHour Start (Hour) int startMinute Start (Minute) int endHour Finish (hour) int endMinute Finish (Minute) int measurementInterval Measurement interval Unit: second, modeType ==5 is valid notifyFlag Notification type 0Invalid；1：Allow notifications； 2：Silent notification； 3：Turn off notifications （Need to support menu__ IDO_ FUNCTABLE__ FuncTable34Model. supportHrHighOrLowBtAlarm can only be configured with notifyFlag, highHeartMode, highHeartValue, lowHeartMode, and lowHeartValue） highHeartMode Intelligent high heart rate reminder switch bool lowHeartMode Intelligent low heart rate reminder switch bool highHeartValue Smart Heart Rate High Alert Threshold int lowHeartValue Intelligent low heart rate reminder threshold int Command code Set v3 heart rate mode Objc: IDOSetV3HeartRateModeBluetoothModel * model = [IDOSetV3HeartRateModeBluetoothModel currentModel]; [IDOFoundationCommand setV3HrModelCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetV3HeartRateModeBluetoothModel.current(); IDOFoundationCommand.setV3HrModel(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 18:01:30 "},"set/IDOSetHrIntervalFunction.html":{"url":"set/IDOSetHrIntervalFunction.html","title":"Set heart rate interval","keywords":"","body":"Set heart rate zones Function table __IDO_FUNCTABLE__.funcTable4Model.heartRate Heart Rate Zone Model Description IDOSetHrIntervalInfoBluetoothModel Parameter Description Remark burnFat Fat burning int aerobic Aerobic exercise int limitValue Extreme sport int userMaxHr Maximum heart rate int warmUp Warm up int anaerobic Anaerobic exercise int minHr Minimum heart rate int maxHrRemind Maximum heart rate reminder switch bool minHrRemind Minimum heart rate reminder switch bool startHour Start (hour) int startMinute Start (Minute) int stopHour Finish (Hour) int stopMinute Finish (Minute) int Command code Objc: IDOSetHrIntervalInfoBluetoothModel * model = [IDOSetHrIntervalInfoBluetoothModel currentModel]; [IDOFoundationCommand setHrIntervalCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetHrIntervalInfoBluetoothModel.current(); IDOFoundationCommand.setHrInterval(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetNoDisturbFunction.html":{"url":"set/IDOSetNoDisturbFunction.html","title":"Set do not disturb mode","keywords":"","body":"Set up do not disturb mode Function table __IDO_FUNCTABLE__.funcTable13Model.doNotDisturb Description of the do not disturb mode IDOSetNoDisturbModeInfoBluetoothModel Parameter Description Remark isOpen Switch bool startHour Start (Hour) int startMinute Start (Minute) int endHour Finish (Hour) int endMinute Finish (Minute) int isHaveRangRepeat Whether there is an interval repeat reminder bool repeat Repeat set [Monday,Tuerday,Wednesday,Thursday,Friday,Saturday,Sunday] noonTimeOnOff Lunch break switch bool noonTimeStartHour The hour of lunch break beginning int noonTimeStartMinute The minute of lunch break beginning int noonTimeEndHour The hour of lunch break finishing int noonTimeEndMinute The minute of lunch break finishing int 命令代码 Objc: IDOSetNoDisturbModeInfoBluetoothModel * model = [IDOSetNoDisturbModeInfoBluetoothModel currentModel]; [IDOFoundationCommand setNoDisturbModeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetNoDisturbModeInfoBluetoothModel.current(); IDOFoundationCommand.setNoDisturbMode(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetUnitFunction.html":{"url":"set/IDOSetUnitFunction.html","title":"Set unit command","keywords":"","body":"Set unit command Description of Unit Model IDOSetUnitInfoBluetoothModel Parameter Description Remark distanceUnit Distance unit 0x00:Invalid,0x01:km,0x02:mi weightUnit Weight unit 0x00:Invalid,0x01:kg,0x02:lb,0x03:Stone tempUnit 0x00:Invalid,0x01:°C,0x02:°F languageUnit Language unit Invalid:0,Chinese:1,English:2,French:3,German:4,Italian:5,Spanish:6,Japanese:7, Polish:8,Czech: 9, Romanian: 10,Lithuanian: 11, Dutch: 12, Slovenian: 13, Hungarian: 14, Russian: 15, Ukrainian: 16, Slovak: 17, Danish: 18, Croatia: 19, Indonesian: 20, Korean: 21, Hindi: 22, Portuguese: 23, Turkey: 24, Thai: 25, Vietnamese: 26, Burmese: 27, Filipino: 28, Traditional Chinese: 29, Greek: 30, Arabic: 31, Swedish: 32, Finnish: 33, Persian: 34, Norwegian:35 Function table judgment strideWalk Walking pace According to male conversion, the default value:72cm strideRun Running pace According to male conversion, the default value:90cm strideGps gps calibration step size 0x00:Invalid,0x01:on,0x02:off timeUnit Time unit 0x00:Invalid,0x01:24 hour clock,0x02:12 hour clock weekStart Start day of the week Sunday:0x01,Monday:0x00,Saturday:0x03 calorieUnit Calorie Unit 0x00 ：Invalid； 0x01 ：Kcal；0x02 : Kcal； 0x03 : Kilojoule swimPoolUnit Pool unit 0x00 ：Invalid； 0x01 ：meter；0x02 : Yard cyclingUnit Riding unit 0x00 : Invalid；0x01 : km Kilometer 0x02 : Mile walkRunUnit Walking or running unit 0x00 : Invalid；0x01 : km Kilometer 0x02 : Mile Command code Objc: IDOSetUnitInfoBluetoothModel * model = [IDOSetUnitInfoBluetoothModel currentModel]; [IDOFoundationCommand setUnitCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetUnitInfoBluetoothModel.current(); IDOFoundationCommand.setUnit(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetOneKeySosFunction.html":{"url":"set/IDOSetOneKeySosFunction.html","title":"Set one-key call for help","keywords":"","body":"Set up a one-key call for help Function table __IDO_FUNCTABLE__.funcTable11Model.onetouchCalling One-click call for help model description IDOSetOneKeySosInfoBuletoothModel Parameter Description Remark isOpen Switch bool Command code Objc: IDOSetOneKeySosInfoBuletoothModel * model = [IDOSetOneKeySosInfoBuletoothModel currentModel]; [IDOFoundationCommand setOneKeySosCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetOneKeySosInfoBuletoothModel.current(); IDOFoundationCommand.setOneKeySos(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetShortcutFunction.html":{"url":"set/IDOSetShortcutFunction.html","title":"Set up shortcut","keywords":"","body":"Set up shortcuts Function table __IDO_FUNCTABLE__.funcTable18Model.shortcut Description of shortcut model IDOSetShortcutInfoBluetoothModel Parameter Description Remark shortcutType Shortcut Type 0:Invalid,1:Photograph,2:Sport mode,3:Do not disturb mode Command code Objc: IDOSetShortcutInfoBluetoothModel * model = [IDOSetShortcutInfoBluetoothModel currentModel]; [IDOFoundationCommand setShortcutCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetShortcutInfoBluetoothModel.current(); IDOFoundationCommand.setShortcut(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetBpFunction.html":{"url":"set/IDOSetBpFunction.html","title":"Set blood pressure calibration","keywords":"","body":"Set up blood pressure calibration Function table __IDO_FUNCTABLE__.funcTable18Model.bloodPressure || __IDO_FUNCTABLE__.funcTable34Model.supportV3Bp Blood Pressure Calibration Model Description IDOSetBloodPressureInfoBluetoothModel Parameter Description Remark diastolic Diastolic blood pressure int shrinkage Systolic blood pressure int statusCode Return to calibration state 0x01:Successfully entered calibration mode, calibrating 0x02:in sport mode,0x03:Dice is busy,0x04:Invalid state,0x06:Calibration failed,0x00:Calibration succeeded flag Blood pressure calibration control 0x01:Blood pressure calibration starts,0x02:Blood pressure calibration query Command code Objc: IDOSetBloodPressureInfoBluetoothModel * model = [IDOSetBloodPressureInfoBluetoothModel currentModel]; [IDOFoundationCommand setBpCalCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetBloodPressureInfoBluetoothModel.current(); IDOFoundationCommand.setBpCal(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetSportShortcutFunction.html":{"url":"set/IDOSetSportShortcutFunction.html","title":"Set sports shortcut","keywords":"","body":"Set exercise shortcuts Select up to 8 sport mode settings at a time Function table __IDO_FUNCTABLE__.sportShowCount != 0 || [IDOGetDeviceFuncBluetoothModel isHaveMovment] Description of Motion Shortcut Model IDOSetSportShortcutInfoBluetoothModel Parameter Description Remark isWalk Walk bool isRun Run bool isByBike Cycle bool isOnFoot Walk bool isSwim Swim bool isMountainClimbing Badminton bool isOther Other bool isFitness Fitness bool isSpinning Spinning bike bool isEllipsoid Rugby bool isTreadmill Treadmill bool isSitUp Sit-ups bool isPushUp push-ups bool isDumbbell Dumbbel bool isWeightlifting Weightlifting bool isBodybuildingExercise Gymnastics bool isYoga Yoga bool isRopeSkipping Skip bool isTableTennis Table tennis bool isBasketball Basketball bool isFootball Football bool isVolleyball Volleyball bool isTennis Tennis bool isGolf Golf bool isBaseball Baeball bool isSkiing Skiing bool isRollerSkating Roller skating bool isDance Dance bool Command code Objc: IDOSetSportShortcutInfoBluetoothModel * model = [IDOSetSportShortcutInfoBluetoothModel currentModel]; [IDOFoundationCommand setSportModeSelectCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetSportShortcutInfoBluetoothModel.current(); IDOFoundationCommand.setSportModeSelect(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetSportSortFunction.html":{"url":"set/IDOSetSportSortFunction.html","title":"Set motion sorting","keywords":"","body":"Set exercise sorting Motion Ranking Model Description IDOSetSportSortingInfoBluetoothModel Parameter Description Remark sportSortingItems Sport Mode Sorted Collection Sport Mode Sorted Collection Up to 8 or 14 or 30 or 150 operat Operation Type 0: invalid; 1 Inquire; 2 set up (no assignment required) allNum Number int currentIndex Index of currently added sport types int supports 100 kinds of sports only need to assign value IDOSetSportSortingItemModel Paremeter Description Remark index Sort index 从1、2、3、4....,0:Invalid type Sport mode 当功能表 v3SportsType、set100SportSort Support, motion type starts from 48, 1-29 motion type is v2 protocol refer to the IDOSportTypes file description for motion types Command code Objc: IDOSetSportSortingInfoBluetoothModel * model = [IDOSetSportSortingInfoBluetoothModel currentModel]; [IDOFoundationCommand setSportModeSortCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetSportSortingInfoBluetoothModel.current(); IDOFoundationCommand.setSportModeSort(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"set/IDOSetScreenBrightFunction.html":{"url":"set/IDOSetScreenBrightFunction.html","title":"Set screen brightness","keywords":"","body":"Set screen brightness Function table __IDO_FUNCTABLE__.funcTable19Model.screenBrightness || __IDO_FUNCTABLE__.funcTable23Model.nightAutoBrightness || __IDO_FUNCTABLE__.funcTable7Model.screenBrightInterval Description of screen brightness model IDOSetScreenBrightnessInfoBluetoothModel Parameter Description Remark levelValue Screen brightness level 1-100 isManual Whether user adjusted bool mode Screen brightness level 0x00Turn off autoscale,0x01 Using an ambient light sensor,0x02,Automatically adjust brightness at night,0x03 Use the set time to dim the brightness at night autoAdjustNight Automatic brightness adjustment at night 0x00,invalid,Defined by firmware,0x01 tuen off,0x02,Automatically adjust brightness at night,0x03 Use the set time to dim the brightness at night startHour Start (Hour) int startMinute Start (Minute) int endHour Finish (Hour) int endMinute Finish (Minute) int nightLevel Brightness at night 1-100 showInterval Display interval int Unit second Command code Objc: IDOSetScreenBrightnessInfoBluetoothModel * model = [IDOSetScreenBrightnessInfoBluetoothModel currentModel]; [IDOFoundationCommand setScreenBrightnessCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetScreenBrightnessInfoBluetoothModel.current(); IDOFoundationCommand.setScreenBrightness(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { /Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetMusicFunction.html":{"url":"set/IDOSetMusicFunction.html","title":"Set music switch","keywords":"","body":"Set music switch Function table __IDO_FUNCTABLE__.funcTable4Model.ancs Setting up music control requires Bluetooth pairing first Music Switch Model Description IDOSetPairingInfoBuletoothModel Parameter Description Remark pairingTimeStr Pairing timestamp str isPairing Is it paired bool IDOSetMusicOpenInfoBuletoothModel Parameter Description/strong> Remark isOpen Switch bool Command code Bluetooth pairing Objc: [IDOFoundationCommand setBluetoothPairingCommandWithCallback:^(BOOL isNeedDisconnect, int stateCode) { //Whether the pairing process needs to be disconnected, the status of the pairing process } pairingComplete:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: IDOFoundationCommand.setBluetoothPairingCommandWithCallback({ (isNeedDisconnect, stateCode) in //Whether the pairing process needs to be disconnected, the status of the pairing process }) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6 { //Device not supported }else { //Setup failed } }; Music switch Objc: IDOSetMusicOpenInfoBuletoothModel * model = [IDOSetMusicOpenInfoBuletoothModel currentModel]; [IDOFoundationCommand setOpenMusicCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetMusicOpenInfoBuletoothModel.current(); IDOFoundationCommand.setOpenMusic(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetGpsInfoFunction.html":{"url":"set/IDOSetGpsInfoFunction.html","title":"Set gps info","keywords":"","body":"Set GPS information Function table __IDO_FUNCTABLE__.funcTable19Model.gps Description of GPS Information Model IDOSetGpsConfigInfoBluetoothModel Parameter Description Remark startMode Boot mode 0x01:Cold start,0x02:Hot Start gsopOperationMode Operating mode 1:Normal;2:Low power consumption;4:Balance,5:1PPS gsopCycleMs Positioning cycle Default 1000 milliseconds gnsValue Positioning star mode 1:GPS,2:GLONASS,3:1GPS+GLONASS year (UTC)Year int month (UTC)Month int day (UTC)Day int hour (UTC)Hour int minute (UTC)Minute int second (UTC)Second int Command code Objc: IDOSetGpsConfigInfoBluetoothModel * model = [IDOSetGpsConfigInfoBluetoothModel currentModel]; [IDOFoundationCommand setGpsInfoCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetGpsConfigInfoBluetoothModel.current(); IDOFoundationCommand.setGpsInfo(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetWatchDiaFunction.html":{"url":"set/IDOSetWatchDiaFunction.html","title":"Set watch id","keywords":"","body":"Set watch face ID Function table __IDO_FUNCTABLE__.funcTable18Model.watchDial Description of Dial ID Model IDOSetWatchDiaInfoBluetoothModel Parameter Description Remark dialId Dial ID int Command code Objc: IDOSetWatchDiaInfoBluetoothModel * model = [IDOSetWatchDiaInfoBluetoothModel currentModel]; [IDOFoundationCommand setWatchDiaCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetWatchDiaInfoBluetoothModel.current(); IDOFoundationCommand.setWatchDia(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetWalkRemindFunction.html":{"url":"set/IDOSetWalkRemindFunction.html","title":"Set walk reminder","keywords":"","body":"Set reminders to move Function table __IDO_FUNCTABLE__.funcTable23Model.walkReminder Walk around reminder model description IDOSetWalkReminderBluetoothModel Parameter Description Remark onOff Switch bool goalStep Target steps int startHour Start (Hour) int startMinute Start (Minute) int endHour Finish (Hour) int endMinute Finish (Minute) int repeat Repeat set [Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday] goalTime Target Time Unit (Hour) notifyFlag Notification type 0 Invalid ； 1：Allow notifications； 2：Silent notification； 3：Turn off notifications __IDO_FUNCTABLE__.funcTable38Model.walkReminderAddNotify Only the function table supports Command code Objc: IDOSetWalkReminderBluetoothModel * model = [IDOSetWalkReminderBluetoothModel currentModel]; [IDOFoundationCommand setWalkReminderCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetWalkReminderBluetoothModel.current(); IDOFoundationCommand.setWalkReminder(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetSleepTimeFunction.html":{"url":"set/IDOSetSleepTimeFunction.html","title":"Set sleep switch","keywords":"","body":"Set sleep period Function table __IDO_FUNCTABLE__.funcTable4Model.sleepMonitor Description of the sleep period model IDOSetSleepPeriodInfoBluetoothModel Parameter Description Remark onOff Switch bool startHour Start (Hour) int startMinute Start (Minute) int endHour Finish (Hour) int endMinute Finish (Minute) int Command code Objc: IDOSetSleepPeriodInfoBluetoothModel * model = [IDOSetSleepPeriodInfoBluetoothModel currentModel]; [IDOFoundationCommand setSleepPeriodCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetSleepPeriodInfoBluetoothModel.current(); IDOFoundationCommand.setSleepPeriod(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetPressureSwitchFunction.html":{"url":"set/IDOSetPressureSwitchFunction.html","title":"Set pressure switch","keywords":"","body":"Set the pressure switch Function table __IDO_FUNCTABLE__.funcTable20Model.pressureData Description of pressure switch model IDOSetPressureSwitchBluetoothModel Parameter Description Remark onOff Switch bool startHour Start (hour) int startMinute Start (minute) int endHour Finish (hour) int endMinute Finish (minute) int remindOnOff Stress reminder Switch bool repeat Repeat set [Monday、Tuesday、Wednesday、Thursday、Friday、Saturday、Sunday] interval Reminder interval Unit minutes Default 60 minutes interval Reminder interval Unit minutes Default 60 minutes highThreshold High pressure threshold int notifyFlag Notification type 0 Invalid ； 1：Allow notifications； 2：Silent notification； 3：Turn off notifications funcTable35Model.pressureNotifyFlagMode Function table support is valid stressThreshold Pressure threshold int Command code Objc: IDOSetPressureSwitchBluetoothModel * model = [IDOSetPressureSwitchBluetoothModel currentModel]; [IDOFoundationCommand setPressureSwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetPressureSwitchBluetoothModel.current(); IDOFoundationCommand.setPressureSwitch(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetMenuListFunction.html":{"url":"set/IDOSetMenuListFunction.html","title":"Set menu list","keywords":"","body":"Set up the menu list Function table __IDO_FUNCTABLE__.funcTable28Model.menuList Description of Menu List Model IDOGetMenuListInfoBluetoothModel Parameter Description Remark minShowNum Minimum number of menus displayed No assignment required maxShowNum The maximum number of menus displayed No assignment required maxNum Maximum number of supported No assignment required itemList Menu sort currently displayed collection 0:Invalid,1:Steps,2:Heart rate,3:Sleep,4:Photograph,5:Alarm,6:Music,7:Stopwatch,8:Timer, 9:Sport mode,10:Weather,11:Breathing exercise,12:Find phone,13:Stress,14:Data ring,15:Time interface,16:Last activity 17:Health data,18:Blood oxygen,19:Menu Settings,20:Alexa voice prompt maxItemList Menu sort max display set 0:Invalid,1:Steps,2:Heart rate,3:Sleep,4:Photograph,5:Alarm,6:Music,7:Stopwatch,8:Timer, 9:Sport mode,10:Weather,11:Breathing exercise,12:Find phone,13:Stress,14:Data ring,15:Time interface,16:Last activity 17:Health data,18:Blood oxygen,19:Menu Settings,20:Alexa voice prompt No assignment required currentShowNum The number of lists currently displayed by the device int No assignment required Command code Objc: IDOGetMenuListInfoBluetoothModel * model = [IDOGetMenuListInfoBluetoothModel currentModel]; [IDOFoundationCommand setMenuListCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOGetMenuListInfoBluetoothModel.current(); IDOFoundationCommand.setMenuList(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetMenstruationRemindFunction.html":{"url":"set/IDOSetMenstruationRemindFunction.html","title":"设置生理周期提醒","keywords":"","body":"设置生理周期提醒 功能表 __IDO_FUNCTABLE__.funcTable20Model.menstruation 生理周期提醒模型说明 IDOSetMenstruationRemindBluetoothModel 参数 说明 备注 startDay 开始日提醒 提前天数 ovulationDay 排卵日提醒 提前天数 hour 提醒时间(时) int minute 提醒时间(分) int pregnancyDayBeforeRemind 易孕期 开始的时候 提前多少天提醒 int pregnancyDayEndRemind 易孕期 结束的时候 提前多少天提醒 int menstrualDayEndRemind 经期结束 提前多少天提醒 int 命令代码 Objc: IDOSetMenstruationRemindBluetoothModel * model = [IDOSetMenstruationRemindBluetoothModel currentModel]; [IDOFoundationCommand setMenstrualRemindCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetMenstruationRemindBluetoothModel.current(); IDOFoundationCommand.setMenstrualRemind(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetMenstruationFunction.html":{"url":"set/IDOSetMenstruationFunction.html","title":"设置生理周期","keywords":"","body":"设置生理周期 功能表 __IDO_FUNCTABLE__.funcTable20Model.menstruation 生理周期模型说明 IDOSetMenstruationInfoBluetoothModel 参数 说明 备注 onOff 开关 bool menstrualLength 经期长度 int menstrualCycle 经期周期 int lastMenstrualYear 最近经期年份 int lastMenstrualMonth 最近经期月份 int lastMenstrualDay 最近经期日期 int ovulationIntervalDay 排卵日的间隔 int ovulationBeforeDay 经期前一天 int ovulationAfterDay 经期后一天 int notifyFlag 通知类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知 命令代码 Objc: IDOSetMenstruationInfoBluetoothModel * model = [IDOSetMenstruationInfoBluetoothModel currentModel]; [IDOFoundationCommand setMenstrualCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetMenstruationInfoBluetoothModel.current(); IDOFoundationCommand.setMenstrual(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetDrinkWaterFunction.html":{"url":"set/IDOSetDrinkWaterFunction.html","title":"Set water reminder","keywords":"","body":"Set a reminder to drink water Function table __IDO_FUNCTABLE__.funcTable22Model.drinkWaterReminder Drink water reminder model description IDOSetDrinkReminderModeBluetoothModel Parameter Description Remark onOff Switch bool interval Reminder interval Unit: minutes startHour Start time (hour) int startMinute Start time (min) int endHour End time (hours) int endMinute End time (minutes) int repeat Repeat set [Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday] notifyFlag Notification type 0Invalid ； 1：Allow notifications； 2：Silent notification； 3：Turn off notifications Command code Objc: IDOSetDrinkReminderModeBluetoothModel * model = [IDOSetDrinkReminderModeBluetoothModel currentModel]; [IDOFoundationCommand setDrinkReminderCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetDrinkReminderModeBluetoothModel.current(); IDOFoundationCommand.setDrinkReminder(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetBreatheFunction.html":{"url":"set/IDOSetBreatheFunction.html","title":"Set breathing training","keywords":"","body":"Set up breathing exercises Function table __IDO_FUNCTABLE__.funcTable23Model.breatheTrain Breathing training model description IDOSetBreatheTrainBluetoothModel Parameter Description Remark frequency Breaths per minute int Command code Objc: IDOSetBreatheTrainBluetoothModel * model = [IDOSetBreatheTrainBluetoothModel currentModel]; [IDOFoundationCommand setBreatheTrainCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetBreatheTrainBluetoothModel.current(); IDOFoundationCommand.setBreatheTrain(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetActivitySwitchFunction.html":{"url":"set/IDOSetActivitySwitchFunction.html","title":"Set motion switch","keywords":"","body":"Set the motion recognition switch Function table __IDO_FUNCTABLE__.funcTable23Model.activitySwitch Motion Recognition Switch Model Description IDOSetActivitySwitchBluetoothModel Parameter Description Remark sportTypeOnOff Automatic recognition of sports type switch This parameter is deprecated sportRunOnOff Automatic recognition of running switch bool sportBicycleOnOff Automatic recognition of bicycle switches bool autoPauseOnOff Motion automatic pause switch bool endRemindOnOff The end reminder switch bool sportEllipticalOnOff Automatic recognition of elliptical machine switch bool sportRowingOnOff Automatic recognition of rowing machine switches bool sportSwimOnOff Automatic recognition of swimming switch bool Command code Objc: IDOSetActivitySwitchBluetoothModel * model = [IDOSetActivitySwitchBluetoothModel currentModel]; [IDOFoundationCommand setActivitySwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetActivitySwitchBluetoothModel.current(); IDOFoundationCommand.setActivitySwitch(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetBreathRateFunction.html":{"url":"set/IDOSetBreathRateFunction.html","title":"Set breath rate","keywords":"","body":"Set breathing rate switch Function table __IDO_FUNCTABLE__.funcTable34Model.supportBreathRate Respiration Rate Switch Model Description IDOSetBreathRateSwitchModel Parameter Description Remark onOff Switch status bool Command code Objc: IDOSetBreathRateSwitchModel * model = [IDOSetBreathRateSwitchModel currentModel]; [IDOFoundationCommand setBreathRateSwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetBreathRateSwitchModel.current(); IDOFoundationCommand.setBreathRateSwitch(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetFitnessFunction.html":{"url":"set/IDOSetFitnessFunction.html","title":"Set fitness switch","keywords":"","body":"Set the fitness coach switch Function table __IDO_FUNCTABLE__.funcTable38Model.setFitnessGuidance Fitness Guidance Switch Model Description IDOSetFitnessGuidanceModel Parameter Description Remark mode Switch bool yes is on no is off walkMode Move reminder switch bool yes is on no is off startHour Start hour int startMinute Start second int endHour Finish hour int endMinute Finish second int notifyFlag Notification Type 0Invalid ； 1：Allow notifications； 2：Silent notification； 3：Turn off notifications repeat Repeat set [Monday、Tuesday、Wednesday、Thursday、Friday、Saturday、Sunday] targetSteps Target steps int Command code Objc: IDOSetFitnessGuidanceModel * model = [IDOSetFitnessGuidanceModel currentModel]; [IDOFoundationCommand setFitnessGuidanceCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetFitnessGuidanceModel.current(); IDOFoundationCommand.setFitnessGuidance(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetMainUiSortFunction.html":{"url":"set/IDOSetMainUiSortFunction.html","title":"Set widget ordering","keywords":"","body":"Set widget ordering Function table __IDO_FUNCTABLE__.funcTable37Model.setMainUiSort Widget Sorting Model Description IDOMainInterfaceItemModel Parameter Description Remark locationX Horizontal axisx Start from 1 locationY Vertical axis y Start from 1 sizeType Size type 0 Invalid；1：Large icons (one takes up a large horizontal grid)； 2：Small icon(2 occupy a horizontal grid) supportSizeType Firmware supports editable icon types 0 Invalid； 1：Large icon； 2：Small icon； 3:Large icon + small icon widgetsType Widget type 0:Invalid 1:Activity tricycle (small icon)2:Steps 3:Last activity 4:Music 5:Weather 6:Heart rate 7:Stress 8:Sleep 9:Alexa 10:Temperature 11:Blood oxygen 12:Timer 13:Alarm 14:Reminder（Current schedule reminder） 15:Noise 16:Battery 17:Phone (Contact)18:World time IDOMainInterfaceSupportItemModel Parameter Description Remark supportSizeType Firmware supports editable icon types 0 ： Invalid； 1：Large icon； 2：Small icon； 3:Large icon + small icon widgetsType Widget type 0:Invalid 1:Activity three rings (small icon)2:Steps 3:Last activity 4:Music 5:Weather 6:Heart rate 7:Stress 8:Sleep 9:Alexa 10:Temperature 11:Blood oxygen 12:Timer 13:Alarm 14:Event reminder (current schedule reminder) 15:Noise 16:Battery 17:Phone（contact）18:World time IDOMainInterfaceSortModel Parameter Description Remark mainUiVersion Version No assignment needed for now operate Operation 0：Invalid； 1Inquire； 2Set up (No assignment required) allNum Current number of firmware component types int allSupportNum The number of types of all widgets supported by the firmware int items Main interface collection array (IDOMainInterfaceItemModel) supportItems Firmware support editable icon collection array (IDOMainInterfaceSupportItemModel) Command code Objc: IDOMainInterfaceSortModel * model = [IDOMainInterfaceSortModel currentModel]; [IDOFoundationCommand setMainUiSortCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOMainInterfaceSortModel.current(); IDOFoundationCommand.setMainUiSort(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetMenstrualHistoryFunction.html":{"url":"set/IDOSetMenstrualHistoryFunction.html","title":"Set period history data","keywords":"","body":"Set period history data Function table __IDO_FUNCTABLE__.funcTable38Model.historyMenstrual Menstrual period history data model description IDOMenstrualHistoryDataItemModel Parameter Description Remark year Year period started int month Month period started int day Day period started int menstrualDay Menstrual length int (Unit: day) cycleDay Cycle length int (Unit: day) IDOMenstrualHistoryDataModel Parameter Description Remark avgMenstrualDay Average menstrual length int avgCycleDay Average period length int itemsCount Number int Up to 5 items Collection of historical data of menstruation array (IDOMenstrualHistoryDataItemModel) Command code Objc: IDOMenstrualHistoryDataModel * model = [IDOMenstrualHistoryDataModel currentModel]; [IDOFoundationCommand setMenstrualHistoryDataCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOMenstrualHistoryDataModel.current(); IDOFoundationCommand.setMenstrualHistoryData(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetNoiseFunction.html":{"url":"set/IDOSetNoiseFunction.html","title":"Set ambient volume switch","keywords":"","body":"Set the ambient volume switch Function table __IDO_FUNCTABLE__.funcTable37Model.syncNoise Ambient Volume Switch Model Description IDOSetV3NoiseSwitchModel Parameter Description Remark mode Switch bool yes is on no is off startHour Start hour int startMinute Start minute int endHour Finish hour int endMinute Finish minute int highNoiseOnOff Threshold switch bool yes is on no is off highNoiseValue Threshold int Command code Objc: IDOSetV3NoiseSwitchModel * model = [IDOSetV3NoiseSwitchModel currentModel]; [IDOFoundationCommand setNoiseSwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetV3NoiseSwitchModel.current(); IDOFoundationCommand.setNoiseSwitch(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetNoticeStateFunction.html":{"url":"set/IDOSetNoticeStateFunction.html","title":"Set v3 smart reminder","keywords":"","body":"Set notification status for third-party apps Function table __IDO_FUNCTABLE__.funcTable38Model.setNotifyAddAppName Description of the notification state model for third-party applications IDOSetAppNotifyStateItemModel Parameter Description Remark evtType Event type int（Firmware dynamically allocated,） notifyState Notification status int (Allow notifications：1，Silent notification ：2，Turn off notifications：3) picFlag Image icon update status int （0: Invalid； 1：There are corresponding pictures to download；2：There is no corresponding picture）Set ignore this property, only support get packName Application package name str Set ignore this property, only support get appName Application Name str Set ignore this property, only support acquisition IDOSetV3NotifyStateModel Parameter Description Remark msgVersion Version No assignment needed for now operat Operation 1：Increase； 2：Revise; 3:Get query allSendNum Total number of packets sent int nowSendIndex Currently sent sequence int itemsNum Number of sets int allOnOff All message notification switch bool items Notification status collection array (IDOSetAppNotifyStateItemModel) Command code Objc: IDOSetV3NotifyStateModel * model = [IDOSetV3NotifyStateModel currentModel]; [IDOFoundationCommand setMessageNoticeStateCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetV3NotifyStateModel.current(); IDOFoundationCommand.setMessageNoticeState(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetScheduleRemindertFunction.html":{"url":"set/IDOSetScheduleRemindertFunction.html","title":"Set schedule reminders","keywords":"","body":"Set schedule reminders Function table __IDO_FUNCTABLE__.funcTable37Model.scheduleReminder Decription of schedule reminder model IDOSetRemindItemModel Parameter Description Remark remindId Version Schedule reminder id starts from 0 year Year int month Month int day Day int hour Hour int minute Minute int second Second int repeat Repeat set array(number) [Monday、Tuesday、Wednesday、Thursday、Friday、Saturday、Sunday] remindOnOff Reminder switch of the day bool state Status code 0:Invalid, 1：Delete state, 2：Enabled state title Title str note Notification str IDOSetV3ScheduleReminderModel Parameter Description Remark scVersion Version No assignment needed for now operate Operation 0:Invalid,1:Increase, 2:Delete, 3:Check,4:Change num The number of items int items Agenda Collection array (IDOSetRemindItemModel) Maximum set 5 data Command code Objc: IDOSetV3ScheduleReminderModel * model = [IDOSetV3ScheduleReminderModel currentModel]; [IDOFoundationCommand setScheduleReminderCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetV3ScheduleReminderModel.current(); IDOFoundationCommand.setScheduleReminder(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetScientificSleeprFunction.html":{"url":"set/IDOSetScientificSleeprFunction.html","title":"Set science sleep switch","keywords":"","body":"Setting the Science Sleep Switch Function table __IDO_FUNCTABLE__.funcTable35Model.setScientificSleepSwitch Description of scientific sleep switch model IDOSetV3ScientificSleepModel Parameter Description Remark mode Mode bool yes is scientific sleep no is normal sleep startHour Start hour int startMinute Start minute int endHour Finish hour int endMinute Finish minute int Command code Objc: IDOSetV3ScientificSleepModel * model = [IDOSetV3ScientificSleepModel currentModel]; [IDOFoundationCommand setScientificSleepCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetV3ScientificSleepModel.current(); IDOFoundationCommand.setScientificSleep(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetSmartHrFunction.html":{"url":"set/IDOSetSmartHrFunction.html","title":"Set smart heart rate mode","keywords":"","body":"Set smart heart rate mode Function table __IDO_FUNCTABLE__.funcTable37Model.smartHeartRate Description of smart heart rate mode IDOSetSmartHeartRateModel Parameter Description Remark modeFlag Smart Heart Rate Mode bool yes is on no is off notifyFlag Notification type 0 Invalid ； 1：Allow notifications； 2：Silent notification； 3：Turn off notifications highHeartMode Turn on the smart heart rate reminder switch bool yes is on no is off lowHeartMode Turn on the smart low heart rate reminder switch bool yes is on no is off highHeartValue Smart Heart Rate High Reminder Threshold int lowHeartValue Intelligent low Heart Rate Reminder Threshold int Command code Objc: IDOSetSmartHeartRateModel * model = [IDOSetSmartHeartRateModel currentModel]; [IDOFoundationCommand setSmartHeartRateCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetSmartHeartRateModel.current(); IDOFoundationCommand.setSmartHeartRate(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetSpo2Function.html":{"url":"set/IDOSetSpo2Function.html","title":"Set blood oxygen switch","keywords":"","body":"Set the blood oxygen switch Function table __IDO_FUNCTABLE__.funcTable20Model.spo2Data Description of Blood Oxygen Switch Model IDOSetSpo2SwitchBluetoothModel Parameter Description Remark onOff Switch bool startHour Start (Hour) int startMinute Start (Minute) int endHour Finish (Hour) int endMinute Finish (Minute) int lowOnOff Low blood oxygen switch bool lowValue Low blood oxygen threshold int notifyFlag Notification type 0 Invalid ； 1：Allow notifications； 2：Silent notification； 3：Turn off notifications funcTable35Model.spo2NotifyFlag Only the function table supports Command code Objc: IDOSetSpo2SwitchBluetoothModel * model = [IDOSetSpo2SwitchBluetoothModel currentModel]; [IDOFoundationCommand setSpo2SwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetSpo2SwitchBluetoothModel.current(); IDOFoundationCommand.setSpo2Switch(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetSportParameterSortFunction.html":{"url":"set/IDOSetSportParameterSortFunction.html","title":"Set sports subitem data arrangement","keywords":"","body":"Set sports subitem data arrangement Function table __IDO_FUNCTABLE__.funcTable37Model.set20SportParamSort Description of sports subitem data arrangement model IDOSetSportParameterSortModel Parameter Description Remark paraVersion Version No assignment needed for now operate Operation 0:Invalid； 1Inquire； 2set up（No assignment required） sportType Sport type int currentIndex Added sports index int allNum Number int items Subitem collection array (number) 0 invalid 1 exercise duration 2 distance 3 calories 4 real-time heart rate + heart rate zone 5 Real-time pace 6 Real-time cadence 7 Aerobic training effect 8 Rolling pace 9 Average pace 10 steps 11 times 12 last strokes 13 last trip SWOLF 14 steps 15 cadence 16 aerobic training effect 17 paddle time 18 paddle frequency 19 time Command code Objc: IDOSetSportParameterSortModel * model = [IDOSetSportParameterSortModel currentModel]; [IDOFoundationCommand setSportParameterSortCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetSportParameterSortModel.current(); IDOFoundationCommand.setSportParameterSort(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetSunTimerFunction.html":{"url":"set/IDOSetSunTimerFunction.html","title":"Set sunrise and sunset times","keywords":"","body":"Set sunrise and sunset times Function table __IDO_FUNCTABLE__.funcTable38Model.setWeatherSunTime Description of Sunrise and sunset time model IDOSetWeatherSunTimeModel Parameter Description Remark sunriseHour Surise Hour int sunriseMinute Sunrise Minute int sunsetHour Sunset Hour int sunsetMinute Sunset Minute int Command code Objc: IDOSetWeatherSunTimeModel * model = [IDOSetWeatherSunTimeModel currentModel]; [IDOFoundationCommand setWeatherSunTimeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetWeatherSunTimeModel.current(); IDOFoundationCommand.setWeatherSunTime(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetSyncAllContactFunction.html":{"url":"set/IDOSetSyncAllContactFunction.html","title":"Set all contacts","keywords":"","body":"Set all contacts Descriptions of All Contact Model IDOSetAllContactItemModel Parameter Description Remark phone Number str name Name str IDOSetSyncAllContactModel Parameter Description Remark year Year int month Month int day Day int hour Hour int minute Minute int second Second int contactItemNum Number of contacts int items Contact collection array (IDOSetAllContactItemModel) Command code Objc: //Address book data to JSON file IDOSetSyncAllContactModel * model = [[IDOSetSyncAllContactModel alloc]init]; [IDOFoundationCommand setSyncAllContactCommand:model callback:^(int errorCode,NSString* path) { if (errorCode == 0) { //The setting is successful, path is the path of the address book JSON file //Perform address book JSON file transfer }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; //Contacts JSON file transfer initTransferManager().transferType = IDO_DATA_FILE_TRAN_CONTACT_TYPE; initTransferManager().compressionType = IDO_DATA_TRAN_COMPRESSION_NO_USE_TYPE; initTransferManager().fileName = @\".ml\"; initTransferManager().filePath = self.filePath; initTransferManager().isSetConnectParam = YES; initTransferManager().addDetection(^(int errorCode) { if errorCode == 0{ //Detection succeeded before update }else { //Detect errors before updating } }).addProgress(^(int progress) { //Update file progress (0-100) }).addTransfer(^(int errorCode) { if errorCode == 0 { //File transfer succeeded }else { //File transfer failed } }); [IDOTransferFileManager startTransfer]; Swift: //Address book data to JSON file let model = IDOSetSyncAllContactModel.init() IDOFoundationCommand.setSyncAllContact(model) { (errorCode) in if errorCode == 0 { //The setting is successful, path is the path of the address book JSON file //Perform address book JSON file transfer }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; //Contacts JSON file transfer initTransferManager().transferType = IDO_DATA_FILE_TRAN_TYPE.DIAL_TYPE; initTransferManager().compressionType = IDO_DATA_TRAN_COMPRESSION_TYPE.NO_USE_TYPE; initTransferManager().fileName = \".ml\"; initTransferManager().filePath = filePath; initTransferManager().addDetection!{(errorCode)in if errorCode == 0i //Detection succeeded before update }else { //Detect errors before updating } }.addProgress!{(progress)in //Update file progress (0-100) }.addTransfer!{(errorCode)in if errorCode == 0 { //File transfer succeeded }else { //File transfer failed } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetSyncContactFunction.html":{"url":"set/IDOSetSyncContactFunction.html","title":"Set up call favorites","keywords":"","body":"Set up call favorites Function table __IDO_FUNCTABLE__.funcTable38Model.syncContact Description of the common contact model for calls IDOSetContactItemModel Parameter Description Remark phone Number str name Name str IDOSetSyncContactModel Parameter Description Remark conVersion Verssion No assignment needed for now operat Operation No assignment required 0：Invalid；1：Set up， 2：Inquire itemsNum The number of items int items Contact collection array (IDOSetContactItemModel) Command code Objc: IDOSetSyncContactModel * model = [IDOSetSyncContactModel currentModel]; [IDOFoundationCommand setSyncContactCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetSyncContactModel.current(); IDOFoundationCommand.setSyncContact(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetTemperatureFunction.html":{"url":"set/IDOSetTemperatureFunction.html","title":"Set night temperature switch","keywords":"","body":"Set the night temperature switch Function table __IDO_FUNCTABLE__.funcTable35Model.setTemperatureSwitch Description of Nighttime Thermoswitch Model IDOSetV3TemperatureModel Parameter Description Remark mode Switch bool yes is on no is off startHour Start hour int startMinute Start minute int endHour Finish hour int endMinute Finish minute int unit Temperature unit settings 1 ：c（Celsius） 16 ：f（Fahrenheit） Command code Objc: IDOSetV3TemperatureModel * model = [IDOSetV3TemperatureModel currentModel]; [IDOFoundationCommand setTemperatureCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetV3TemperatureModel.current(); IDOFoundationCommand.setTemperature(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetWashHandFunction.html":{"url":"set/IDOSetWashHandFunction.html","title":"Set handwashing reminders","keywords":"","body":"Set up handwashing reminders Function table __IDO_FUNCTABLE__.funcTable31Model.handWashReminder Handwashing reminder model illustration IDOSetWashHandReminderModel Parameter Description Remark onOff Switch bool startHour Starting time (Hour) int startMinute Starting time(Minute) int endHour End time (Hour) int endMinute End Time(Minute) int repeat Repeat set [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday] interval Reminder interval Unit: minute Default 60 minutes Command code Objc: IDOSetWashHandReminderModel * model = [IDOSetWashHandReminderModel currentModel]; [IDOFoundationCommand setWashHandReminderCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetWashHandReminderModel.current(); IDOFoundationCommand.setWashHandReminder(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"set/IDOSetWordTimeFunction.html":{"url":"set/IDOSetWordTimeFunction.html","title":"Set world time","keywords":"","body":"Set world time Function table __IDO_FUNCTABLE__.funcTable38Model.setV3WorldTime World Time Reference Table Time Model Description IDOSetV3WorldTimeItemModel Parameter Description Remark cityId ID number of each city int minuteOffset Current time and offset minute data for time zone 0 int cityNameLen City name int cityName City name str sunriseHour Sunrise hour int sunriseMin Sunrise minute int sunsetHour Sunset hour int sunsetMin Sunset minute int longitudeFlag Longitude flag 1: East longitude； 2：West longitude longitude Longitude Retain 2 decimal places to expand the transmission by 100 times, the app needs to convert the corresponding points into degreeslon=104°4’ => (104 + 4/60)*100 rounded up latitudeFlag Latitude flag 1: north latitude; 2: south latitude latitude Latitude Retain 2 decimal places to expand the transmission by 100 times, the app needs to convert the corresponding points into degreeslon=104°4’ => (104 + 4/60)*100 rounded up IDOSetV3WorldTimeModel Parameter Description Remark worldVersion Version No assignment needed for now itemsNum The number of items int items World time collection array (IDOSetV3WorldTimeItemModel) Command code Objc: IDOSetV3WorldTimeModel * model = [IDOSetV3WorldTimeModel currentModel]; [IDOFoundationCommand setWorldTimeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set successfully }else if (errorCode == 6) { //Device not supported }else { //Setup failed } }]; Swift: let model = IDOSetV3WorldTimeModel.current(); IDOFoundationCommand.setWorldTime(model) { (errorCode) in if errorCode == 0 { //Set successfully }else if errorCode == 6{ //Device does not support this method }else { //Wrong setting } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"set/IDOWordTimeJsonInfo.html":{"url":"set/IDOWordTimeJsonInfo.html","title":"World time list","keywords":"","body":"World time list JSON INFO [{ \"city_id\": \"0\", \"ch_area\": \"阿比让\", \"ch_nation\": \"象牙海岸\", \"en_area\": \"Abidjan\", \"en_nation\": \"Ivory Coast\", \"latitude\": \"5.3599517\", \"longitude\": \"-4.0082563\", \"timeZone\": \"Africa/Bamako\" }, { \"city_id\": \"1\", \"ch_area\": \"阿布扎比\", \"ch_nation\": \"阿拉伯联合大公国\", \"en_area\": \"Abu Dhabi\", \"en_nation\": \"U.A.E.\", \"latitude\": \"24.453884\", \"longitude\": \"54.3773438\", \"timeZone\": \"Asia/Dubai\" }, { \"city_id\": \"5\", \"ch_area\": \"阿德莱德\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Adelaide\", \"en_nation\": \"Australia\", \"latitude\": \"-34.9284989\", \"longitude\": \"138.6007456\", \"timeZone\": \"Australia/Adelaide\" }, { \"city_id\": \"423\", \"ch_area\": \"阿蒂科肯\", \"ch_nation\": \"加拿大\", \"en_area\": \"Atikokan\", \"en_nation\": \"Canada\", \"latitude\": \"48.7575098\", \"longitude\": \"-91.6218292\", \"timeZone\": \"America/Atikokan\" }, { \"city_id\": \"6\", \"ch_area\": \"阿尔伯克基\", \"ch_nation\": \"美国\", \"en_area\": \"Albuquerque, NM\", \"en_nation\": \"U.S.A.\", \"latitude\": \"35.0843859\", \"longitude\": \"-106.650422\", \"timeZone\": \"US/Mountain\" }, { \"city_id\": \"7\", \"ch_area\": \"阿尔及尔\", \"ch_nation\": \"阿尔及利亚\", \"en_area\": \"Algiers\", \"en_nation\": \"Algeria\", \"latitude\": \"36.753768\", \"longitude\": \"3.0587561\", \"timeZone\": \"Africa/Algiers\" }, { \"city_id\": \"562\", \"ch_area\": \"阿瓜斯卡连特斯\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Aguascalientes\", \"en_nation\": \"Mexico\", \"latitude\": \"21.8852562\", \"longitude\": \"-102.2915677\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"561\", \"ch_area\": \"阿卡普尔科\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Acapulco\", \"en_nation\": \"Mexico\", \"latitude\": \"16.8531086\", \"longitude\": \"-99.8236533\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"337\", \"ch_area\": \"阿克顿\", \"ch_nation\": \"美国\", \"en_area\": \"Acton, Massachusetts\", \"en_nation\": \"U.S.A.\", \"latitude\": \"42.4850931\", \"longitude\": \"-71.43284\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"2\", \"ch_area\": \"阿克拉\", \"ch_nation\": \"加纳\", \"en_area\": \"Accra\", \"en_nation\": \"Ghana\", \"latitude\": \"5.6037168\", \"longitude\": \"-0.1869644\", \"timeZone\": \"Africa/Accra\" }, { \"city_id\": \"888\", \"ch_area\": \"阿克套\", \"ch_nation\": \"哈萨克斯坦\", \"en_area\": \"Aktau\", \"en_nation\": \"Kazakhstan\", \"latitude\": \"43.6588079\", \"longitude\": \"51.1974563\", \"timeZone\": \"Asia/Aqtobe\" }, { \"city_id\": \"478\", \"ch_area\": \"阿克托别\", \"ch_nation\": \"哈萨克斯坦\", \"en_area\": \"Aqtobe\", \"en_nation\": \"Kazakhstan\", \"latitude\": \"50.2839339\", \"longitude\": \"57.166978\", \"timeZone\": \"Asia/Aqtobe\" }, { \"city_id\": \"404\", \"ch_area\": \"阿拉瓜伊纳\", \"ch_nation\": \"巴西\", \"en_area\": \"Araguaina\", \"en_nation\": \"Brazil\", \"latitude\": \"-7.1915633\", \"longitude\": \"-48.2094801\", \"timeZone\": \"America/Araguaina\" }, { \"city_id\": \"501\", \"ch_area\": \"阿洛菲\", \"ch_nation\": \"纽埃岛\", \"en_area\": \"Alofi\", \"en_nation\": \"Niue\", \"latitude\": \"-19.0553711\", \"longitude\": \"-169.9178709\", \"timeZone\": \"Pacific/Niue\" }, { \"city_id\": \"370\", \"ch_area\": \"阿蒙森 - 斯科特站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Amundsen-Scott Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"42.0566295\", \"longitude\": \"-87.6750834\", \"timeZone\": \"Antarctica/South_Pole\" }, { \"city_id\": \"9\", \"ch_area\": \"阿姆斯特丹\", \"ch_nation\": \"荷兰\", \"en_area\": \"Amsterdam\", \"en_nation\": \"the Netherlands\", \"latitude\": \"52.3675734\", \"longitude\": \"4.9041389\", \"timeZone\": \"Europe/Amsterdam\" }, { \"city_id\": \"10\", \"ch_area\": \"阿纳德尔\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Anadyr\", \"en_nation\": \"Russia\", \"latitude\": \"64.7336613\", \"longitude\": \"177.4968265\", \"timeZone\": \"Asia/Anadyr\" }, { \"city_id\": \"365\", \"ch_area\": \"阿皮亚\", \"ch_nation\": \"萨摩亚\", \"en_area\": \"Apia\", \"en_nation\": \"Samoa\", \"latitude\": \"-13.8506958\", \"longitude\": \"-171.7513551\", \"timeZone\": \"Pacific/Apia\" }, { \"city_id\": \"14\", \"ch_area\": \"阿什喀巴德\", \"ch_nation\": \"土库曼斯坦\", \"en_area\": \"Ashgabat\", \"en_nation\": \"Turkmenistan\", \"latitude\": \"37.9600766\", \"longitude\": \"58.3260629\", \"timeZone\": \"Asia/Ashgabat\" }, { \"city_id\": \"15\", \"ch_area\": \"阿斯马拉\", \"ch_nation\": \"厄立特里亚\", \"en_area\": \"Asmera\", \"en_nation\": \"Eritrea\", \"latitude\": \"15.3228767\", \"longitude\": \"38.9250517\", \"timeZone\": \"Africa/Asmara\" }, { \"city_id\": \"16\", \"ch_area\": \"阿斯塔纳\", \"ch_nation\": \"哈萨克斯坦\", \"en_area\": \"Astana\", \"en_nation\": \"Kazakhstan\", \"latitude\": \"51.1605227\", \"longitude\": \"71.4703558\", \"timeZone\": \"Asia/Almaty\" }, { \"city_id\": \"479\", \"ch_area\": \"阿特劳\", \"ch_nation\": \"哈萨克斯坦\", \"en_area\": \"Atyrau\", \"en_nation\": \"Kazakhstan\", \"latitude\": \"47.0944959\", \"longitude\": \"51.9238373\", \"timeZone\": \"Asia/Aqtobe\" }, { \"city_id\": \"446\", \"ch_area\": \"阿尤恩\", \"ch_nation\": \"西撒哈拉\", \"en_area\": \"El-Aaiun\", \"en_nation\": \"Western Sahara\", \"latitude\": \"27.1500384\", \"longitude\": \"-13.1990758\", \"timeZone\": \"Africa/El_Aaiun\" }, { \"city_id\": \"427\", \"ch_area\": \"埃德蒙顿\", \"ch_nation\": \"加拿大\", \"en_area\": \"Edmonton\", \"en_nation\": \"Canada\", \"latitude\": \"53.5461245\", \"longitude\": \"-113.4938229\", \"timeZone\": \"America/Edmonton\" }, { \"city_id\": \"94\", \"ch_area\": \"埃尔帕索\", \"ch_nation\": \"美国\", \"en_area\": \"El Paso, TX\", \"en_nation\": \"U.S.A.\", \"latitude\": \"31.7618778\", \"longitude\": \"-106.4850217\", \"timeZone\": \"US/Mountain\" }, { \"city_id\": \"550\", \"ch_area\": \"埃法特岛\", \"ch_nation\": \"瓦努阿图\", \"en_area\": \"Efate\", \"en_nation\": \"Vanuatu\", \"latitude\": \"-17.6577479\", \"longitude\": \"168.4297187\", \"timeZone\": \"Pacific/Efate\" }, { \"city_id\": \"322\", \"ch_area\": \"埃里温\", \"ch_nation\": \"亚美尼亚\", \"en_area\": \"Yerevan\", \"en_nation\": \"Armenia\", \"latitude\": \"40.1872023\", \"longitude\": \"44.515209\", \"timeZone\": \"Asia/Yerevan\" }, { \"city_id\": \"495\", \"ch_area\": \"埃莫西约\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Hermosillo\", \"en_nation\": \"Mexico\", \"latitude\": \"29.0729673\", \"longitude\": \"-110.9559192\", \"timeZone\": \"America/Hermosillo\" }, { \"city_id\": \"3\", \"ch_area\": \"艾德克岛\", \"ch_nation\": \"美国\", \"en_area\": \"Adak\", \"en_nation\": \"U.S.A.\", \"latitude\": \"51.88\", \"longitude\": \"-176.6580556\", \"timeZone\": \"America/Adak\" }, { \"city_id\": \"412\", \"ch_area\": \"艾鲁内佩\", \"ch_nation\": \"巴西\", \"en_area\": \"Eirunepe\", \"en_nation\": \"Brazil\", \"latitude\": \"-6.6623703\", \"longitude\": \"-69.8674302\", \"timeZone\": \"America/Eirunepe\" }, { \"city_id\": \"93\", \"ch_area\": \"爱丁堡\", \"ch_nation\": \"苏格兰\", \"en_area\": \"Edinburgh\", \"en_nation\": \"Scotland U.K.\", \"latitude\": \"55.953252\", \"longitude\": \"-3.188267\", \"timeZone\": \"Europe/London\" }, { \"city_id\": \"331\", \"ch_area\": \"安道尔城\", \"ch_nation\": \"安道尔\", \"en_area\": \"Andorra la Vella\", \"en_nation\": \"Andorra\", \"latitude\": \"42.5063174\", \"longitude\": \"1.5218355\", \"timeZone\": \"Europe/Andorra\" }, { \"city_id\": \"13\", \"ch_area\": \"安卡拉\", \"ch_nation\": \"土耳其\", \"en_area\": \"Ankara\", \"en_nation\": \"Turkey\", \"latitude\": \"39.9333635\", \"longitude\": \"32.8597419\", \"timeZone\": \"Europe/Istanbul\" }, { \"city_id\": \"12\", \"ch_area\": \"安克雷奇\", \"ch_nation\": \"美国\", \"en_area\": \"Anchorage\", \"en_nation\": \"U.S.A.\", \"latitude\": \"61.2180556\", \"longitude\": \"-149.9002778\", \"timeZone\": \"America/Anchorage\" }, { \"city_id\": \"8\", \"ch_area\": \"安曼\", \"ch_nation\": \"约旦\", \"en_area\": \"Amman\", \"en_nation\": \"Jordan\", \"latitude\": \"31.9539494\", \"longitude\": \"35.910635\", \"timeZone\": \"Asia/Amman\" }, { \"city_id\": \"11\", \"ch_area\": \"安塔那那利佛\", \"ch_nation\": \"马达加斯加\", \"en_area\": \"Antananarivo\", \"en_nation\": \"Madagascar\", \"latitude\": \"-18.8791902\", \"longitude\": \"47.5079055\", \"timeZone\": \"Indian/Antananarivo\" }, { \"city_id\": \"357\", \"ch_area\": \"安特卫普\", \"ch_nation\": \"比利时\", \"en_area\": \"Antwerp\", \"en_nation\": \"Belgium\", \"latitude\": \"51.2194475\", \"longitude\": \"4.4024643\", \"timeZone\": \"Europe/Brussels\" }, { \"city_id\": \"574\", \"ch_area\": \"敖德萨\", \"ch_nation\": \"乌克兰\", \"en_area\": \"Odessa\", \"en_nation\": \"Ukraine\", \"latitude\": \"46.482526\", \"longitude\": \"30.7233095\", \"timeZone\": \"Europe/Kiev\" }, { \"city_id\": \"20\", \"ch_area\": \"奥克兰\", \"ch_nation\": \"新西兰\", \"en_area\": \"Auckland\", \"en_nation\": \"New Zealand\", \"latitude\": \"-36.8508827\", \"longitude\": \"174.7644881\", \"timeZone\": \"Pacific/Auckland\" }, { \"city_id\": \"205\", \"ch_area\": \"奥克兰\", \"ch_nation\": \"美国\", \"en_area\": \"Oakland\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.8043514\", \"longitude\": \"-122.2711639\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"396\", \"ch_area\": \"奥拉涅斯塔德\", \"ch_nation\": \"阿鲁巴\", \"en_area\": \"Oranjestad\", \"en_nation\": \"Aruba\", \"latitude\": \"12.5092044\", \"longitude\": \"-70.0086306\", \"timeZone\": \"America/Aruba\" }, { \"city_id\": \"207\", \"ch_area\": \"奥马哈\", \"ch_nation\": \"美国\", \"en_area\": \"Omaha, NE\", \"en_nation\": \"U.S.A.\", \"latitude\": \"41.2565369\", \"longitude\": \"-95.9345034\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"210\", \"ch_area\": \"奥斯陆\", \"ch_nation\": \"挪威\", \"en_area\": \"Oslo\", \"en_nation\": \"Norway\", \"latitude\": \"59.9138688\", \"longitude\": \"10.7522454\", \"timeZone\": \"Europe/Oslo\" }, { \"city_id\": \"21\", \"ch_area\": \"奥斯汀\", \"ch_nation\": \"美国\", \"en_area\": \"Austin, TX\", \"en_nation\": \"U.S.A.\", \"latitude\": \"30.267153\", \"longitude\": \"-97.7430608\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"345\", \"ch_area\": \"奥希纳加\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Ojinaga\", \"en_nation\": \"Mexico\", \"latitude\": \"29.5458844\", \"longitude\": \"-104.4082908\", \"timeZone\": \"America/Ojinaga\" }, { \"city_id\": \"156\", \"ch_area\": \"澳门特别行政区\", \"ch_nation\": \"中国\", \"en_area\": \"Macao\", \"en_nation\": \"China\", \"latitude\": \"22.198745\", \"longitude\": \"113.543873\", \"timeZone\": \"Asia/Macau\" }, { \"city_id\": \"24\", \"ch_area\": \"巴尔的摩\", \"ch_nation\": \"美国\", \"en_area\": \"Baltimore, MD\", \"en_nation\": \"U.S.A.\", \"latitude\": \"39.2903848\", \"longitude\": \"-76.6121893\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"22\", \"ch_area\": \"巴格达\", \"ch_nation\": \"伊拉克\", \"en_area\": \"Baghdad\", \"en_nation\": \"Iraq\", \"latitude\": \"33.315241\", \"longitude\": \"44.3660671\", \"timeZone\": \"Asia/Baghdad\" }, { \"city_id\": \"23\", \"ch_area\": \"巴库\", \"ch_nation\": \"阿塞拜疆\", \"en_area\": \"Baku\", \"en_nation\": \"Azerbaijan\", \"latitude\": \"40.4092617\", \"longitude\": \"49.8670924\", \"timeZone\": \"Asia/Baku\" }, { \"city_id\": \"215\", \"ch_area\": \"巴勒莫\", \"ch_nation\": \"意大利\", \"en_area\": \"Palermo\", \"en_nation\": \"Italy\", \"latitude\": \"38.11569\", \"longitude\": \"13.3614868\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"221\", \"ch_area\": \"巴黎\", \"ch_nation\": \"法国\", \"en_area\": \"Paris\", \"en_nation\": \"France\", \"latitude\": \"48.856614\", \"longitude\": \"2.3522219\", \"timeZone\": \"Europe/Paris\" }, { \"city_id\": \"29\", \"ch_area\": \"巴里\", \"ch_nation\": \"意大利\", \"en_area\": \"Bari\", \"en_nation\": \"Italy\", \"latitude\": \"41.1171432\", \"longitude\": \"16.8718715\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"25\", \"ch_area\": \"巴马科\", \"ch_nation\": \"马里\", \"en_area\": \"Bamako\", \"en_nation\": \"Mali\", \"latitude\": \"12.6392316\", \"longitude\": \"-8.0028892\", \"timeZone\": \"Africa/Bamako\" }, { \"city_id\": \"217\", \"ch_area\": \"巴拿马城\", \"ch_nation\": \"巴拿马\", \"en_area\": \"Panama City\", \"en_nation\": \"Panama\", \"latitude\": \"30.1588129\", \"longitude\": \"-85.6602058\", \"timeZone\": \"America/Panama\" }, { \"city_id\": \"28\", \"ch_area\": \"巴塞罗那\", \"ch_nation\": \"西班牙\", \"en_area\": \"Barcelona\", \"en_nation\": \"Spain\", \"latitude\": \"41.3850639\", \"longitude\": \"2.1734035\", \"timeZone\": \"Europe/Madrid\" }, { \"city_id\": \"30\", \"ch_area\": \"巴斯特尔\", \"ch_nation\": \"瓜德罗普岛\", \"en_area\": \"Basse-Terre\", \"en_nation\": \"Guadeloupe\", \"latitude\": \"15.9965761\", \"longitude\": \"-61.731699\", \"timeZone\": \"America/Guadeloupe\" }, { \"city_id\": \"475\", \"ch_area\": \"巴斯特尔\", \"ch_nation\": \"圣基茨和尼维斯\", \"en_area\": \"Basseterre\", \"en_nation\": \"France\", \"latitude\": \"17.3026058\", \"longitude\": \"-62.7176924\", \"timeZone\": \"America/St_Kitts\" }, { \"city_id\": \"46\", \"ch_area\": \"巴西利亚\", \"ch_nation\": \"巴西\", \"en_area\": \"Brasília\", \"en_nation\": \"Brazil\", \"latitude\": \"-15.7975174\", \"longitude\": \"-47.8918881\", \"timeZone\": \"America/Sao_Paulo\" }, { \"city_id\": \"497\", \"ch_area\": \"巴亚尔塔港\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Puerto Vallarta\", \"en_nation\": \"Mexico\", \"latitude\": \"20.653407\", \"longitude\": \"-105.2253316\", \"timeZone\": \"America/Bahia_Banderas\" }, { \"city_id\": \"37\", \"ch_area\": \"柏林\", \"ch_nation\": \"德国\", \"en_area\": \"Berlin\", \"en_nation\": \"Germany\", \"latitude\": \"52.5200066\", \"longitude\": \"13.404954\", \"timeZone\": \"Europe/Berlin\" }, { \"city_id\": \"27\", \"ch_area\": \"班吉\", \"ch_nation\": \"中非共和国\", \"en_area\": \"Bangui\", \"en_nation\": \"Central African Republic\", \"latitude\": \"4.3946735\", \"longitude\": \"18.5581899\", \"timeZone\": \"Africa/Bangui\" }, { \"city_id\": \"434\", \"ch_area\": \"班坦村\", \"ch_nation\": \"科科斯（基林）群岛\", \"en_area\": \"Bantam Village\", \"en_nation\": \"Cocos (Keeling) Islands\", \"latitude\": \"-12.116787\", \"longitude\": \"96.8965765\", \"timeZone\": \"Indian/Cocos\" }, { \"city_id\": \"466\", \"ch_area\": \"班珠尔\", \"ch_nation\": \"冈比亚\", \"en_area\": \"Banjul\", \"en_nation\": \"Gambia\", \"latitude\": \"13.454375\", \"longitude\": \"-16.5753186\", \"timeZone\": \"Africa/Banjul\" }, { \"city_id\": \"31\", \"ch_area\": \"北京\", \"ch_nation\": \"中国\", \"en_area\": \"Beijing\", \"en_nation\": \"China\", \"latitude\": \"39.9041999\", \"longitude\": \"116.4073963\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"33\", \"ch_area\": \"贝尔格莱德\", \"ch_nation\": \"塞尔维亚\", \"en_area\": \"Belgrade\", \"en_nation\": \"Serbia\", \"latitude\": \"44.8125449\", \"longitude\": \"20.4612299\", \"timeZone\": \"Europe/Belgrade\" }, { \"city_id\": \"32\", \"ch_area\": \"贝鲁特\", \"ch_nation\": \"黎巴嫩\", \"en_area\": \"Beirut\", \"en_nation\": \"Lebanon\", \"latitude\": \"33.8937913\", \"longitude\": \"35.5017767\", \"timeZone\": \"Asia/Beirut\" }, { \"city_id\": \"402\", \"ch_area\": \"贝伦\", \"ch_nation\": \"巴西\", \"en_area\": \"Belem\", \"en_nation\": \"Brazil\", \"latitude\": \"-1.4563073\", \"longitude\": \"-48.5012804\", \"timeZone\": \"America/Belem\" }, { \"city_id\": \"35\", \"ch_area\": \"贝尼西亚\", \"ch_nation\": \"美国\", \"en_area\": \"Benicia\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.049365\", \"longitude\": \"-122.1585777\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"40\", \"ch_area\": \"比绍\", \"ch_nation\": \"几内亚比绍\", \"en_area\": \"Bissau\", \"en_nation\": \"Guinea-Bissau\", \"latitude\": \"11.8632196\", \"longitude\": \"-15.5843227\", \"timeZone\": \"Africa/Bissau\" }, { \"city_id\": \"39\", \"ch_area\": \"比什凯克\", \"ch_nation\": \"吉尔吉斯斯坦\", \"en_area\": \"Bishkek\", \"en_nation\": \"Kyrgyzstan\", \"latitude\": \"42.8746212\", \"longitude\": \"74.5697617\", \"timeZone\": \"Asia/Bishkek\" }, { \"city_id\": \"537\", \"ch_area\": \"比尤拉\", \"ch_nation\": \"美国\", \"en_area\": \"Beulah\", \"en_nation\": \"U.S.A.\", \"latitude\": \"47.2633403\", \"longitude\": \"-101.7779462\", \"timeZone\": \"America/North_Dakota/Beulah\" }, { \"city_id\": \"531\", \"ch_area\": \"彼得斯堡\", \"ch_nation\": \"美国\", \"en_area\": \"Petersburg\", \"en_nation\": \"U.S.A.\", \"latitude\": \"59.9310584\", \"longitude\": \"30.3609096\", \"timeZone\": \"America/Indiana/Petersburg\" }, { \"city_id\": \"222\", \"ch_area\": \"彼尔姆\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Perm\", \"en_nation\": \"Russia\", \"latitude\": \"36.1128817\", \"longitude\": \"-95.9754497\", \"timeZone\": \"Asia/Yekaterinburg\" }, { \"city_id\": \"230\", \"ch_area\": \"波德戈里察\", \"ch_nation\": \"黑山\", \"en_area\": \"Podgorica\", \"en_nation\": \"Montenegro\", \"latitude\": \"42.4304196\", \"longitude\": \"19.2593642\", \"timeZone\": \"Europe/Podgorica\" }, { \"city_id\": \"399\", \"ch_area\": \"波多诺伏\", \"ch_nation\": \"贝宁\", \"en_area\": \"Porto-Novo\", \"en_nation\": \"Benin\", \"latitude\": \"6.4968574\", \"longitude\": \"2.6288523\", \"timeZone\": \"Africa/Porto-Novo\" }, { \"city_id\": \"409\", \"ch_area\": \"波多韦柳\", \"ch_nation\": \"巴西\", \"en_area\": \"Porto Velho\", \"en_nation\": \"Brazil\", \"latitude\": \"-8.7635576\", \"longitude\": \"-63.8971704\", \"timeZone\": \"America/Porto_Velho\" }, { \"city_id\": \"42\", \"ch_area\": \"波哥大\", \"ch_nation\": \"哥伦比亚\", \"en_area\": \"Bogotá\", \"en_nation\": \"Colombia\", \"latitude\": \"4.7109886\", \"longitude\": \"-74.072092\", \"timeZone\": \"America/Bogota\" }, { \"city_id\": \"450\", \"ch_area\": \"波纳佩\", \"ch_nation\": \"密克罗尼西亚\", \"en_area\": \"Pohnpei\", \"en_nation\": \"Micronesia\", \"latitude\": \"6.8541254\", \"longitude\": \"158.2623822\", \"timeZone\": \"Pacific/Pohnpei\" }, { \"city_id\": \"44\", \"ch_area\": \"波士顿\", \"ch_nation\": \"美国\", \"en_area\": \"Boston, MA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"42.3600825\", \"longitude\": \"-71.0588801\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"234\", \"ch_area\": \"波特兰\", \"ch_nation\": \"美国\", \"en_area\": \"Portland, OR\", \"en_nation\": \"U.S.A.\", \"latitude\": \"45.5051064\", \"longitude\": \"-122.6750261\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"38\", \"ch_area\": \"伯尔尼\", \"ch_nation\": \"瑞士\", \"en_area\": \"Bern\", \"en_nation\": \"Switzerland\", \"latitude\": \"46.9479739\", \"longitude\": \"7.4474468\", \"timeZone\": \"Europe/Zurich\" }, { \"city_id\": \"36\", \"ch_area\": \"伯克利\", \"ch_nation\": \"美国\", \"en_area\": \"Berkeley\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.8715226\", \"longitude\": \"-122.273042\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"336\", \"ch_area\": \"伯克利高地\", \"ch_nation\": \"美国\", \"en_area\": \"Berkeley Heights\", \"en_nation\": \"U.S.A.\", \"latitude\": \"40.6808726\", \"longitude\": \"-74.4310524\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"34\", \"ch_area\": \"伯利兹城\", \"ch_nation\": \"伯利兹\", \"en_area\": \"Belize City\", \"en_nation\": \"Belize\", \"latitude\": \"17.5045661\", \"longitude\": \"-88.1962133\", \"timeZone\": \"America/Belize\" }, { \"city_id\": \"53\", \"ch_area\": \"伯灵格姆\", \"ch_nation\": \"美国\", \"en_area\": \"Burlingame\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.5778696\", \"longitude\": \"-122.34809\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"410\", \"ch_area\": \"博阿维斯塔\", \"ch_nation\": \"巴西\", \"en_area\": \"Boa Vista\", \"en_nation\": \"Brazil\", \"latitude\": \"16.0950108\", \"longitude\": \"-22.8078335\", \"timeZone\": \"America/Boa_Vista\" }, { \"city_id\": \"43\", \"ch_area\": \"博洛尼亚\", \"ch_nation\": \"意大利\", \"en_area\": \"Bologna\", \"en_nation\": \"Italy\", \"latitude\": \"44.494887\", \"longitude\": \"11.3426162\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"401\", \"ch_area\": \"博内尔\", \"ch_nation\": \"博内尔\", \"en_area\": \"Kralendijk\", \"en_nation\": \"Bonaire\", \"latitude\": \"12.1443491\", \"longitude\": \"-68.2655456\", \"timeZone\": \"America/Kralendijk\" }, { \"city_id\": \"538\", \"ch_area\": \"博伊西\", \"ch_nation\": \"美国\", \"en_area\": \"Boise\", \"en_nation\": \"U.S.A.\", \"latitude\": \"43.6150186\", \"longitude\": \"-116.2023137\", \"timeZone\": \"America/Boise\" }, { \"city_id\": \"51\", \"ch_area\": \"布达佩斯\", \"ch_nation\": \"匈牙利\", \"en_area\": \"Budapest\", \"en_nation\": \"Hungary\", \"latitude\": \"47.497912\", \"longitude\": \"19.040235\", \"timeZone\": \"Europe/Budapest\" }, { \"city_id\": \"50\", \"ch_area\": \"布加勒斯特\", \"ch_nation\": \"罗马尼亚\", \"en_area\": \"Bucharest\", \"en_nation\": \"Romania\", \"latitude\": \"44.4267674\", \"longitude\": \"26.1025384\", \"timeZone\": \"Europe/Bucharest\" }, { \"city_id\": \"328\", \"ch_area\": \"布拉柴维尔\", \"ch_nation\": \"刚果\", \"en_area\": \"Brazzaville\", \"en_nation\": \"Congo\", \"latitude\": \"-4.2633597\", \"longitude\": \"15.2428853\", \"timeZone\": \"Africa/Ndjamena\" }, { \"city_id\": \"45\", \"ch_area\": \"布拉迪斯拉瓦\", \"ch_nation\": \"斯洛伐克\", \"en_area\": \"Bratislava\", \"en_nation\": \"Slovakia\", \"latitude\": \"48.1485965\", \"longitude\": \"17.1077478\", \"timeZone\": \"Europe/Bratislava\" }, { \"city_id\": \"235\", \"ch_area\": \"布拉格\", \"ch_nation\": \"捷克共和国\", \"en_area\": \"Prague\", \"en_nation\": \"Czech Republic\", \"latitude\": \"50.0755381\", \"longitude\": \"14.4378005\", \"timeZone\": \"Europe/Prague\" }, { \"city_id\": \"41\", \"ch_area\": \"布莱克斯堡\", \"ch_nation\": \"美国\", \"en_area\": \"Blacksburg\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.2295733\", \"longitude\": \"-80.4139393\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"489\", \"ch_area\": \"布兰太尔\", \"ch_nation\": \"马拉维\", \"en_area\": \"Blantyre\", \"en_nation\": \"Malawi\", \"latitude\": \"42.3360623\", \"longitude\": \"-73.2588767\", \"timeZone\": \"Africa/Blantyre\" }, { \"city_id\": \"417\", \"ch_area\": \"布朗-萨布隆\", \"ch_nation\": \"加拿大\", \"en_area\": \"Blanc-Sablon\", \"en_nation\": \"Canada\", \"latitude\": \"51.4264451\", \"longitude\": \"-57.1313148\", \"timeZone\": \"America/Blanc-Sablon\" }, { \"city_id\": \"47\", \"ch_area\": \"布里奇顿\", \"ch_nation\": \"巴巴多斯岛\", \"en_area\": \"Bridgetown\", \"en_nation\": \"Barbados\", \"latitude\": \"13.1059816\", \"longitude\": \"-59.6131741\", \"timeZone\": \"America/Barbados\" }, { \"city_id\": \"48\", \"ch_area\": \"布里斯班\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Brisbane\", \"en_nation\": \"Australia\", \"latitude\": \"-27.4704528\", \"longitude\": \"153.0260341\", \"timeZone\": \"Australia/Brisbane\" }, { \"city_id\": \"49\", \"ch_area\": \"布鲁塞尔\", \"ch_nation\": \"比利时\", \"en_area\": \"Brussels\", \"en_nation\": \"Belgium\", \"latitude\": \"50.8503396\", \"longitude\": \"4.3517103\", \"timeZone\": \"Europe/Brussels\" }, { \"city_id\": \"393\", \"ch_area\": \"布洛肯希尔\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Broken Hill\", \"en_nation\": \"Australia\", \"latitude\": \"-31.9595859\", \"longitude\": \"141.4608138\", \"timeZone\": \"Australia/Broken_Hill\" }, { \"city_id\": \"398\", \"ch_area\": \"布琼布拉\", \"ch_nation\": \"布隆迪\", \"en_area\": \"Bujumbura\", \"en_nation\": \"Burundi\", \"latitude\": \"-3.361378\", \"longitude\": \"29.3598782\", \"timeZone\": \"Africa/Bujumbura\" }, { \"city_id\": \"52\", \"ch_area\": \"布宜诺斯艾利斯\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Buenos Aires\", \"en_nation\": \"Argentina\", \"latitude\": \"-34.6036844\", \"longitude\": \"-58.3815591\", \"timeZone\": \"America/Buenos_Aires\" }, { \"city_id\": \"502\", \"ch_area\": \"查塔姆岛\", \"ch_nation\": \"新西兰\", \"en_area\": \"Chatham Island\", \"en_nation\": \"New Zealand\", \"latitude\": \"-44.0057523\", \"longitude\": \"-176.5400674\", \"timeZone\": \"Pacific/Chatham\" }, { \"city_id\": \"356\", \"ch_area\": \"查亚普拉\", \"ch_nation\": \"印度尼西亚\", \"en_area\": \"Jayapura\", \"en_nation\": \"Indonesia\", \"latitude\": \"-2.5916025\", \"longitude\": \"140.6689995\", \"timeZone\": \"Asia/Jayapura\" }, { \"city_id\": \"462\", \"ch_area\": \"沈阳\", \"ch_nation\": \"中国\", \"en_area\": \"Shenyang\", \"en_nation\": \"China\", \"latitude\": \"41.805699\", \"longitude\": \"123.431472\", \"timeZone\": \"Asia/Harbin\" }, { \"city_id\": \"66\", \"ch_area\": \"陈奈\", \"ch_nation\": \"印度\", \"en_area\": \"Chennai\", \"en_nation\": \"India\", \"latitude\": \"13.0826802\", \"longitude\": \"80.2707184\", \"timeZone\": \"Asia/Kolkata\" }, { \"city_id\": \"456\", \"ch_area\": \"成都\", \"ch_nation\": \"中国\", \"en_area\": \"Chengdu\", \"en_nation\": \"China\", \"latitude\": \"30.572815\", \"longitude\": \"104.066801\", \"timeZone\": \"Asia/Chongqing\" }, { \"city_id\": \"69\", \"ch_area\": \"赤塔\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Chita\", \"en_nation\": \"Russia\", \"latitude\": \"52.0515032\", \"longitude\": \"113.4711906\", \"timeZone\": \"Asia/Yakutsk\" }, { \"city_id\": \"449\", \"ch_area\": \"楚克\", \"ch_nation\": \"密克罗尼西亚\", \"en_area\": \"Chuuk\", \"en_nation\": \"Micronesia\", \"latitude\": \"7.1386759\", \"longitude\": \"151.5593065\", \"timeZone\": \"Pacific/Chuuk\" }, { \"city_id\": \"539\", \"ch_area\": \"船岩峰\", \"ch_nation\": \"美国\", \"en_area\": \"Shiprock\", \"en_nation\": \"U.S.A.\", \"latitude\": \"36.6866691\", \"longitude\": \"-108.8364343\", \"timeZone\": \"America/Shiprock\" }, { \"city_id\": \"84\", \"ch_area\": \"达尔文\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Darwin\", \"en_nation\": \"Australia\", \"latitude\": \"37.0929586\", \"longitude\": \"-95.5828336\", \"timeZone\": \"Australia/Darwin\" }, { \"city_id\": \"79\", \"ch_area\": \"达喀尔\", \"ch_nation\": \"塞内加尔\", \"en_area\": \"Dakar\", \"en_nation\": \"Senegal\", \"latitude\": \"14.716677\", \"longitude\": \"-17.4676861\", \"timeZone\": \"Africa/Dakar\" }, { \"city_id\": \"78\", \"ch_area\": \"达卡\", \"ch_nation\": \"孟加拉国\", \"en_area\": \"Dhaka\", \"en_nation\": \"Bangladesh\", \"latitude\": \"23.810332\", \"longitude\": \"90.4125181\", \"timeZone\": \"Asia/Dhaka\" }, { \"city_id\": \"80\", \"ch_area\": \"达拉斯\", \"ch_nation\": \"美国\", \"en_area\": \"Dallas, TX\", \"en_nation\": \"U.S.A.\", \"latitude\": \"32.7766642\", \"longitude\": \"-96.7969879\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"83\", \"ch_area\": \"达累斯萨拉姆\", \"ch_nation\": \"坦桑尼亚\", \"en_area\": \"Dar es Salaam\", \"en_nation\": \"Tanzania\", \"latitude\": \"-6.792354\", \"longitude\": \"39.2083284\", \"timeZone\": \"Africa/Dar_es_Salaam\" }, { \"city_id\": \"81\", \"ch_area\": \"达利城\", \"ch_nation\": \"美国\", \"en_area\": \"Daly City\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.6879241\", \"longitude\": \"-122.4702079\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"209\", \"ch_area\": \"大阪\", \"ch_nation\": \"日本\", \"en_area\": \"Osaka\", \"en_nation\": \"Japan\", \"latitude\": \"34.6937249\", \"longitude\": \"135.5022535\", \"timeZone\": \"Asia/Tokyo\" }, { \"city_id\": \"406\", \"ch_area\": \"大坎普\", \"ch_nation\": \"巴西\", \"en_area\": \"Campo Grande\", \"en_nation\": \"Brazil\", \"latitude\": \"-20.4648517\", \"longitude\": \"-54.6218477\", \"timeZone\": \"America/Campo_Grande\" }, { \"city_id\": \"457\", \"ch_area\": \"大连\", \"ch_nation\": \"中国\", \"en_area\": \"Dalian\", \"en_nation\": \"China\", \"latitude\": \"38.914003\", \"longitude\": \"121.614682\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"82\", \"ch_area\": \"大马士革\", \"ch_nation\": \"叙利亚\", \"en_area\": \"Damascus\", \"en_nation\": \"Syria\", \"latitude\": \"33.5138073\", \"longitude\": \"36.2765279\", \"timeZone\": \"Asia/Damascus\" }, { \"city_id\": \"374\", \"ch_area\": \"戴维斯站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Davis Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-68.5762466\", \"longitude\": \"77.9696243\", \"timeZone\": \"Antarctica/Davis\" }, { \"city_id\": \"85\", \"ch_area\": \"丹佛\", \"ch_nation\": \"美国\", \"en_area\": \"Denver, CO\", \"en_nation\": \"U.S.A.\", \"latitude\": \"39.7392358\", \"longitude\": \"-104.990251\", \"timeZone\": \"America/Denver\" }, { \"city_id\": \"463\", \"ch_area\": \"丹马沙文\", \"ch_nation\": \"格陵兰\", \"en_area\": \"Danmarkshavn\", \"en_nation\": \"Greenland\", \"latitude\": \"76.8142001\", \"longitude\": \"-19.0050866\", \"timeZone\": \"America/Danmarkshavn\" }, { \"city_id\": \"468\", \"ch_area\": \"道格拉斯\", \"ch_nation\": \"马恩岛\", \"en_area\": \"Douglas\", \"en_nation\": \"Isle of Man\", \"latitude\": \"36.1837061\", \"longitude\": \"-95.8808246\", \"timeZone\": \"Europe/Isle_of_Man\" }, { \"city_id\": \"433\", \"ch_area\": \"道森城\", \"ch_nation\": \"加拿大\", \"en_area\": \"Dawson City\", \"en_nation\": \"Canada\", \"latitude\": \"64.0600696\", \"longitude\": \"-139.4320347\", \"timeZone\": \"America/Dawson\" }, { \"city_id\": \"431\", \"ch_area\": \"道森克里克\", \"ch_nation\": \"加拿大\", \"en_area\": \"Dawson Creek\", \"en_nation\": \"Canada\", \"latitude\": \"55.7596274\", \"longitude\": \"-120.2376623\", \"timeZone\": \"America/Dawson_Creek\" }, { \"city_id\": \"292\", \"ch_area\": \"德黑兰\", \"ch_nation\": \"伊朗\", \"en_area\": \"Tehran\", \"en_nation\": \"Iran\", \"latitude\": \"35.6891975\", \"longitude\": \"51.3889736\", \"timeZone\": \"Asia/Tehran\" }, { \"city_id\": \"362\", \"ch_area\": \"地拉那\", \"ch_nation\": \"阿尔巴尼亚\", \"en_area\": \"Tirana\", \"en_nation\": \"Albania\", \"latitude\": \"41.3275459\", \"longitude\": \"19.8186982\", \"timeZone\": \"Europe/Tirane\" }, { \"city_id\": \"298\", \"ch_area\": \"的黎波里\", \"ch_nation\": \"利比亚\", \"en_area\": \"Tripoli\", \"en_nation\": \"Libya\", \"latitude\": \"32.8872094\", \"longitude\": \"13.1913383\", \"timeZone\": \"Africa/Tripoli\" }, { \"city_id\": \"90\", \"ch_area\": \"迪拜\", \"ch_nation\": \"阿拉伯联合大公国\", \"en_area\": \"Dubai\", \"en_nation\": \"U.A.E.\", \"latitude\": \"25.2048493\", \"longitude\": \"55.2707828\", \"timeZone\": \"Asia/Dubai\" }, { \"city_id\": \"469\", \"ch_area\": \"迪戈加西亚岛\", \"ch_nation\": \"查戈斯群岛\", \"en_area\": \"Diego Garcia\", \"en_nation\": \"British Indian Ocean Territory\", \"latitude\": \"-7.3195005\", \"longitude\": \"72.4228556\", \"timeZone\": \"Indian/Chagos\" }, { \"city_id\": \"325\", \"ch_area\": \"迪凯特\", \"ch_nation\": \"美国\", \"en_area\": \"Decatur\", \"en_nation\": \"U.S.A.\", \"latitude\": \"33.7748275\", \"longitude\": \"-84.2963123\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"377\", \"ch_area\": \"迪蒙迪维尔站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Dumont-d'Urville Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-66.663045\", \"longitude\": \"140.0019472\", \"timeZone\": \"Antarctica/DumontDUrville\" }, { \"city_id\": \"86\", \"ch_area\": \"底特律\", \"ch_nation\": \"美国\", \"en_area\": \"Detroit, MI\", \"en_nation\": \"U.S.A.\", \"latitude\": \"42.331427\", \"longitude\": \"-83.0457538\", \"timeZone\": \"America/Detroit\" }, { \"city_id\": \"528\", \"ch_area\": \"帝力\", \"ch_nation\": \"东帝汶\", \"en_area\": \"Dili\", \"en_nation\": \"East Timor\", \"latitude\": \"-8.5568557\", \"longitude\": \"125.5603143\", \"timeZone\": \"Asia/Dili\" }, { \"city_id\": \"351\", \"ch_area\": \"第比利斯\", \"ch_nation\": \"格鲁吉亚\", \"en_area\": \"Tbilisi\", \"en_nation\": \"Georgia\", \"latitude\": \"41.7151377\", \"longitude\": \"44.827096\", \"timeZone\": \"Asia/Tbilisi\" }, { \"city_id\": \"496\", \"ch_area\": \"蒂华纳\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Tijuana\", \"en_nation\": \"Mexico\", \"latitude\": \"32.5149469\", \"longitude\": \"-117.0382471\", \"timeZone\": \"America/Tijuana\" }, { \"city_id\": \"295\", \"ch_area\": \"东京\", \"ch_nation\": \"日本\", \"en_area\": \"Tokyo\", \"en_nation\": \"Japan\", \"latitude\": \"35.6761919\", \"longitude\": \"139.6503106\", \"timeZone\": \"Asia/Tokyo\" }, { \"city_id\": \"91\", \"ch_area\": \"都柏林\", \"ch_nation\": \"爱尔兰\", \"en_area\": \"Dublin\", \"en_nation\": \"Ireland\", \"latitude\": \"53.3498053\", \"longitude\": \"-6.2603097\", \"timeZone\": \"Europe/Dublin\" }, { \"city_id\": \"300\", \"ch_area\": \"都灵\", \"ch_nation\": \"意大利\", \"en_area\": \"Torino\", \"en_nation\": \"Italy\", \"latitude\": \"45.0703393\", \"longitude\": \"7.686864\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"89\", \"ch_area\": \"杜阿拉\", \"ch_nation\": \"喀麦隆\", \"en_area\": \"Douala\", \"en_nation\": \"Cameroon\", \"latitude\": \"4.0510564\", \"longitude\": \"9.7678687\", \"timeZone\": \"Africa/Douala\" }, { \"city_id\": \"92\", \"ch_area\": \"杜尚别\", \"ch_nation\": \"塔吉克斯坦\", \"en_area\": \"Dushanbe\", \"en_nation\": \"Tajikistan\", \"latitude\": \"38.5597722\", \"longitude\": \"68.7870384\", \"timeZone\": \"Asia/Dushanbe\" }, { \"city_id\": \"575\", \"ch_area\": \"顿涅茨克\", \"ch_nation\": \"乌克兰\", \"en_area\": \"Donetsk\", \"en_nation\": \"Ukraine\", \"latitude\": \"48.015883\", \"longitude\": \"37.80285\", \"timeZone\": \"Europe/Kiev\" }, { \"city_id\": \"88\", \"ch_area\": \"多哈\", \"ch_nation\": \"卡塔尔\", \"en_area\": \"Doha\", \"en_nation\": \"Qatar\", \"latitude\": \"25.2854473\", \"longitude\": \"51.5310398\", \"timeZone\": \"Asia/Qatar\" }, { \"city_id\": \"296\", \"ch_area\": \"多伦多\", \"ch_nation\": \"加拿大\", \"en_area\": \"Toronto\", \"en_nation\": \"Canada\", \"latitude\": \"43.653226\", \"longitude\": \"-79.3831843\", \"timeZone\": \"America/Toronto\" }, { \"city_id\": \"206\", \"ch_area\": \"俄克拉荷马城\", \"ch_nation\": \"美国\", \"en_area\": \"Oklahoma City, OK\", \"en_nation\": \"U.S.A.\", \"latitude\": \"35.4675602\", \"longitude\": \"-97.5164276\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"208\", \"ch_area\": \"鄂木斯克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Omsk\", \"en_nation\": \"Russia\", \"latitude\": \"54.9913545\", \"longitude\": \"73.3645204\", \"timeZone\": \"Asia/Omsk\" }, { \"city_id\": \"194\", \"ch_area\": \"恩贾梅纳\", \"ch_nation\": \"乍得\", \"en_area\": \"Ndjamena\", \"en_nation\": \"Chad\", \"latitude\": \"12.1348457\", \"longitude\": \"15.0557415\", \"timeZone\": \"Africa/Ndjamena\" }, { \"city_id\": \"341\", \"ch_area\": \"法兰克福\", \"ch_nation\": \"德国\", \"en_area\": \"Frankfurt\", \"en_nation\": \"Germany\", \"latitude\": \"50.1109221\", \"longitude\": \"8.6821267\", \"timeZone\": \"Europe/Berlin\" }, { \"city_id\": \"97\", \"ch_area\": \"法兰西堡\", \"ch_nation\": \"马提尼克\", \"en_area\": \"Fort-de-France\", \"en_nation\": \"Martinique\", \"latitude\": \"14.6160647\", \"longitude\": \"-61.0587804\", \"timeZone\": \"America/Martinique\" }, { \"city_id\": \"526\", \"ch_area\": \"法兰西港\", \"ch_nation\": \"法国南部和南极地区\", \"en_area\": \"Port-aux-Français\", \"en_nation\": \"French Southern & Antarctic Lands\", \"latitude\": \"-49.3496422\", \"longitude\": \"70.218004\", \"timeZone\": \"Indian/Kerguelen\" }, { \"city_id\": \"527\", \"ch_area\": \"法勒\", \"ch_nation\": \"托克劳\", \"en_area\": \"Fale\", \"en_nation\": \"Tokelau\", \"latitude\": \"42.287204\", \"longitude\": \"-71.425426\", \"timeZone\": \"Pacific/Fakaofo\" }, { \"city_id\": \"1805\", \"ch_area\": \"法马古斯塔\", \"ch_nation\": \"塞浦路斯\", \"en_area\": \"Famagusta\", \"en_nation\": \"Cyprus\", \"latitude\": \"35.1149116\", \"longitude\": \"33.919245\", \"timeZone\": \"Asia/Famagusta\" }, { \"city_id\": \"546\", \"ch_area\": \"梵蒂冈\", \"ch_nation\": \"梵蒂冈\", \"en_area\": \"Vatican\", \"en_nation\": \"Vatican\", \"latitude\": \"41.902916\", \"longitude\": \"12.453389\", \"timeZone\": \"Europe/Vatican\" }, { \"city_id\": \"227\", \"ch_area\": \"菲尼克斯\", \"ch_nation\": \"美国\", \"en_area\": \"Phoenix, AZ\", \"en_nation\": \"U.S.A.\", \"latitude\": \"33.4483771\", \"longitude\": \"-112.0740373\", \"timeZone\": \"America/Phoenix\" }, { \"city_id\": \"225\", \"ch_area\": \"费城\", \"ch_nation\": \"美国\", \"en_area\": \"Philadelphia, PA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"39.9525839\", \"longitude\": \"-75.1652215\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"333\", \"ch_area\": \"费尔南多德诺罗尼亚\", \"ch_nation\": \"巴西\", \"en_area\": \"Fernando de Noronha\", \"en_nation\": \"Brazil\", \"latitude\": \"-3.8566736\", \"longitude\": \"-32.4295165\", \"timeZone\": \"America/Noronha\" }, { \"city_id\": \"511\", \"ch_area\": \"丰沙尔\", \"ch_nation\": \"马德拉\", \"en_area\": \"Funchal\", \"en_nation\": \"Madeira\", \"latitude\": \"32.6669328\", \"longitude\": \"-16.9240554\", \"timeZone\": \"Atlantic/Madeira\" }, { \"city_id\": \"99\", \"ch_area\": \"弗里敦\", \"ch_nation\": \"塞拉利昂\", \"en_area\": \"Freetown\", \"en_nation\": \"Sierra Leone\", \"latitude\": \"41.7619708\", \"longitude\": \"-71.014118\", \"timeZone\": \"Africa/Freetown\" }, { \"city_id\": \"96\", \"ch_area\": \"弗里蒙特\", \"ch_nation\": \"美国\", \"en_area\": \"Fremont\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.5485396\", \"longitude\": \"-121.988583\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"312\", \"ch_area\": \"伏尔加格勒\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Volgograd\", \"en_nation\": \"Russia\", \"latitude\": \"48.708048\", \"longitude\": \"44.5133035\", \"timeZone\": \"Europe/Moscow\" }, { \"city_id\": \"95\", \"ch_area\": \"佛罗伦萨\", \"ch_nation\": \"意大利\", \"en_area\": \"Florence\", \"en_nation\": \"Italy\", \"latitude\": \"43.7695604\", \"longitude\": \"11.2558136\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"311\", \"ch_area\": \"符拉迪沃斯托克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Vladivostok\", \"en_nation\": \"Russia\", \"latitude\": \"43.1332484\", \"longitude\": \"131.9112975\", \"timeZone\": \"Asia/Vladivostok\" }, { \"city_id\": \"98\", \"ch_area\": \"福斯特城\", \"ch_nation\": \"美国\", \"en_area\": \"Foster City\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.5570725\", \"longitude\": \"-122.2702091\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"403\", \"ch_area\": \"福塔莱萨\", \"ch_nation\": \"巴西\", \"en_area\": \"Fortaleza\", \"en_nation\": \"Brazil\", \"latitude\": \"-3.7327203\", \"longitude\": \"-38.5270134\", \"timeZone\": \"America/Fortaleza\" }, { \"city_id\": \"111\", \"ch_area\": \"复活岛\", \"ch_nation\": \"智利\", \"en_area\": \"Easter Island\", \"en_nation\": \"Chile\", \"latitude\": \"-27.112723\", \"longitude\": \"-109.3496865\", \"timeZone\": \"Pacific/Easter\" }, { \"city_id\": \"74\", \"ch_area\": \"哥本哈根\", \"ch_nation\": \"丹麦\", \"en_area\": \"Copenhagen\", \"en_nation\": \"Denmark\", \"latitude\": \"55.6760968\", \"longitude\": \"12.5683372\", \"timeZone\": \"Europe/Copenhagen\" }, { \"city_id\": \"554\", \"ch_area\": \"哥德堡\", \"ch_nation\": \"瑞典\", \"en_area\": \"Gothenburg\", \"en_nation\": \"Sweden\", \"latitude\": \"57.70887\", \"longitude\": \"11.97456\", \"timeZone\": \"Europe/Stockholm\" }, { \"city_id\": \"72\", \"ch_area\": \"哥伦布\", \"ch_nation\": \"美国\", \"en_area\": \"Columbus, Ohio\", \"en_nation\": \"U.S.A.\", \"latitude\": \"39.9611755\", \"longitude\": \"-82.9987942\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"414\", \"ch_area\": \"格莱斯贝\", \"ch_nation\": \"加拿大\", \"en_area\": \"Glace Bay\", \"en_nation\": \"Canada\", \"latitude\": \"46.1969191\", \"longitude\": \"-59.9570044\", \"timeZone\": \"America/Glace_Bay\" }, { \"city_id\": \"560\", \"ch_area\": \"格林湾\", \"ch_nation\": \"美国\", \"en_area\": \"Green Bay\", \"en_nation\": \"U.S.A.\", \"latitude\": \"44.5133188\", \"longitude\": \"-88.0132958\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"105\", \"ch_area\": \"葛利特维根\", \"ch_nation\": \"南乔治亚岛\", \"en_area\": \"Grytviken\", \"en_nation\": \"South Georgia\", \"latitude\": \"-54.281149\", \"longitude\": \"-36.5087385\", \"timeZone\": \"Atlantic/South_Georgia\" }, { \"city_id\": \"498\", \"ch_area\": \"古晋\", \"ch_nation\": \"马来西亚\", \"en_area\": \"Kuching\", \"en_nation\": \"Malaysia\", \"latitude\": \"1.553504\", \"longitude\": \"110.3592927\", \"timeZone\": \"Asia/Kuching\" }, { \"city_id\": \"108\", \"ch_area\": \"古斯塔维亚\", \"ch_nation\": \"圣巴泰勒米岛\", \"en_area\": \"Gustavia\", \"en_nation\": \"Saint Barthelemy\", \"latitude\": \"17.8964345\", \"longitude\": \"-62.852201\", \"timeZone\": \"America/St_Barthelemy\" }, { \"city_id\": \"565\", \"ch_area\": \"瓜达拉哈拉\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Guadalajara\", \"en_nation\": \"Mexico\", \"latitude\": \"20.6596988\", \"longitude\": \"-103.3496092\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"566\", \"ch_area\": \"瓜纳华托\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Guanajuato\", \"en_nation\": \"Mexico\", \"latitude\": \"21.0190145\", \"longitude\": \"-101.2573586\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"445\", \"ch_area\": \"瓜亚基尔\", \"ch_nation\": \"厄瓜多尔\", \"en_area\": \"Guayaquil\", \"en_nation\": \"Ecuador\", \"latitude\": \"-2.1894128\", \"longitude\": \"-79.8890662\", \"timeZone\": \"America/Guayaquil\" }, { \"city_id\": \"106\", \"ch_area\": \"关岛\", \"ch_nation\": \"关岛\", \"en_area\": \"Guam\", \"en_nation\": \"Guam\", \"latitude\": \"13.444304\", \"longitude\": \"144.793731\", \"timeZone\": \"Pacific/Guam\" }, { \"city_id\": \"58\", \"ch_area\": \"广州\", \"ch_nation\": \"中国\", \"en_area\": \"Canton\", \"en_nation\": \"China\", \"latitude\": \"44.5956163\", \"longitude\": \"-75.1690942\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"100\", \"ch_area\": \"哈博罗内\", \"ch_nation\": \"博茨瓦纳\", \"en_area\": \"Gaborone\", \"en_nation\": \"Botswana\", \"latitude\": \"-24.6282079\", \"longitude\": \"25.9231471\", \"timeZone\": \"Africa/Gaborone\" }, { \"city_id\": \"437\", \"ch_area\": \"哈尔滨\", \"ch_nation\": \"中国\", \"en_area\": \"Harbin\", \"en_nation\": \"China\", \"latitude\": \"45.803775\", \"longitude\": \"126.534967\", \"timeZone\": \"Asia/Harbin\" }, { \"city_id\": \"113\", \"ch_area\": \"哈拉雷\", \"ch_nation\": \"津巴布韦\", \"en_area\": \"Harare\", \"en_nation\": \"Zimbabwe\", \"latitude\": \"-17.8216288\", \"longitude\": \"31.0492259\", \"timeZone\": \"Africa/Harare\" }, { \"city_id\": \"109\", \"ch_area\": \"哈利法克斯\", \"ch_nation\": \"加拿大\", \"en_area\": \"Halifax\", \"en_nation\": \"Canada\", \"latitude\": \"44.6487635\", \"longitude\": \"-63.5752387\", \"timeZone\": \"America/Halifax\" }, { \"city_id\": \"114\", \"ch_area\": \"哈瓦那\", \"ch_nation\": \"古巴\", \"en_area\": \"Havana\", \"en_nation\": \"Cuba\", \"latitude\": \"23.1135925\", \"longitude\": \"-82.3665956\", \"timeZone\": \"America/Havana\" }, { \"city_id\": \"110\", \"ch_area\": \"汉堡\", \"ch_nation\": \"德国\", \"en_area\": \"Hamburg\", \"en_nation\": \"Germany\", \"latitude\": \"53.5510846\", \"longitude\": \"9.9936819\", \"timeZone\": \"Europe/Berlin\" }, { \"city_id\": \"360\", \"ch_area\": \"汉密尔顿\", \"ch_nation\": \"百慕大\", \"en_area\": \"Hamilton\", \"en_nation\": \"Bermuda\", \"latitude\": \"37.1929578\", \"longitude\": \"-95.7175467\", \"timeZone\": \"Atlantic/Bermuda\" }, { \"city_id\": \"391\", \"ch_area\": \"豪勋爵岛\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Lord Howe Island\", \"en_nation\": \"Australia\", \"latitude\": \"-31.5553263\", \"longitude\": \"159.0821211\", \"timeZone\": \"Australia/Lord_Howe\" }, { \"city_id\": \"458\", \"ch_area\": \"合肥\", \"ch_nation\": \"中国\", \"en_area\": \"Hefei\", \"en_nation\": \"China\", \"latitude\": \"31.820591\", \"longitude\": \"117.227219\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"112\", \"ch_area\": \"河内\", \"ch_nation\": \"越南\", \"en_area\": \"Hanoi\", \"en_nation\": \"Vietnam\", \"latitude\": \"21.0277644\", \"longitude\": \"105.8341598\", \"timeZone\": \"Asia/Saigon\" }, { \"city_id\": \"116\", \"ch_area\": \"赫尔辛基\", \"ch_nation\": \"芬兰\", \"en_area\": \"Helsinki\", \"en_nation\": \"Finland\", \"latitude\": \"60.1698557\", \"longitude\": \"24.9383791\", \"timeZone\": \"Europe/Helsinki\" }, { \"city_id\": \"241\", \"ch_area\": \"红木城\", \"ch_nation\": \"美国\", \"en_area\": \"Redwood City\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.4847955\", \"longitude\": \"-122.228141\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"293\", \"ch_area\": \"胡志明市\", \"ch_nation\": \"越南\", \"en_area\": \"Ho Chi Minh City\", \"en_nation\": \"Vietnam\", \"latitude\": \"10.746903\", \"longitude\": \"106.676292\", \"timeZone\": \"Asia/Saigon\" }, { \"city_id\": \"563\", \"ch_area\": \"华雷斯城\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Ciudad Juárez\", \"en_nation\": \"Mexico\", \"latitude\": \"31.6903638\", \"longitude\": \"-106.4245478\", \"timeZone\": \"America/Chihuahua\" }, { \"city_id\": \"314\", \"ch_area\": \"华沙\", \"ch_nation\": \"波兰\", \"en_area\": \"Warsaw\", \"en_nation\": \"Poland\", \"latitude\": \"52.2296756\", \"longitude\": \"21.0122287\", \"timeZone\": \"Europe/Warsaw\" }, { \"city_id\": \"315\", \"ch_area\": \"华盛顿特区\", \"ch_nation\": \"美国\", \"en_area\": \"Washington, D.C.\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.9071923\", \"longitude\": \"-77.0368707\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"354\", \"ch_area\": \"怀唐伊\", \"ch_nation\": \"新西兰\", \"en_area\": \"Waitangi\", \"en_nation\": \"New Zealand\", \"latitude\": \"-35.2683273\", \"longitude\": \"174.0801182\", \"timeZone\": \"Pacific/Chatham\" }, { \"city_id\": \"432\", \"ch_area\": \"怀特霍斯\", \"ch_nation\": \"加拿大\", \"en_area\": \"Whitehorse\", \"en_nation\": \"Canada\", \"latitude\": \"60.7211871\", \"longitude\": \"-135.0568448\", \"timeZone\": \"America/Whitehorse\" }, { \"city_id\": \"316\", \"ch_area\": \"惠灵顿\", \"ch_nation\": \"新西兰\", \"en_area\": \"Wellington\", \"en_nation\": \"New Zealand\", \"latitude\": \"37.2653004\", \"longitude\": \"-97.3717118\", \"timeZone\": \"Pacific/Auckland\" }, { \"city_id\": \"117\", \"ch_area\": \"霍巴特\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Hobart\", \"en_nation\": \"Australia\", \"latitude\": \"37.6055325\", \"longitude\": \"-97.3222068\", \"timeZone\": \"Australia/Hobart\" }, { \"city_id\": \"519\", \"ch_area\": \"霍尼亚拉\", \"ch_nation\": \"所罗门群岛\", \"en_area\": \"Honiara\", \"en_nation\": \"Solomon Islands\", \"latitude\": \"-9.4456381\", \"longitude\": \"159.9728999\", \"timeZone\": \"Pacific/Guadalcanal\" }, { \"city_id\": \"237\", \"ch_area\": \"基多\", \"ch_nation\": \"厄瓜多尔\", \"en_area\": \"Quito\", \"en_nation\": \"Ecuador\", \"latitude\": \"-0.1806532\", \"longitude\": \"-78.4678382\", \"timeZone\": \"America/Guayaquil\" }, { \"city_id\": \"133\", \"ch_area\": \"基辅\", \"ch_nation\": \"乌克兰\", \"en_area\": \"Kiev\", \"en_nation\": \"Ukraine\", \"latitude\": \"50.4501\", \"longitude\": \"30.5234\", \"timeZone\": \"Europe/Kiev\" }, { \"city_id\": \"518\", \"ch_area\": \"基加利\", \"ch_nation\": \"卢旺达\", \"en_area\": \"Kigali\", \"en_nation\": \"Rwanda\", \"latitude\": \"-1.9440727\", \"longitude\": \"30.0618851\", \"timeZone\": \"Africa/Kigali\" }, { \"city_id\": \"68\", \"ch_area\": \"基希纳乌\", \"ch_nation\": \"摩尔多瓦\", \"en_area\": \"Chisinau\", \"en_nation\": \"Moldova\", \"latitude\": \"47.0104529\", \"longitude\": \"28.8638102\", \"timeZone\": \"Europe/Chisinau\" }, { \"city_id\": \"87\", \"ch_area\": \"吉布提\", \"ch_nation\": \"吉布提\", \"en_area\": \"Djibouti\", \"en_nation\": \"Djibouti\", \"latitude\": \"11.5720765\", \"longitude\": \"43.1456475\", \"timeZone\": \"Africa/Djibouti\" }, { \"city_id\": \"139\", \"ch_area\": \"吉隆坡\", \"ch_nation\": \"马来西亚\", \"en_area\": \"Kuala Lumpur\", \"en_nation\": \"Malaysia\", \"latitude\": \"3.139003\", \"longitude\": \"101.686855\", \"timeZone\": \"Asia/Kuala_Lumpur\" }, { \"city_id\": \"131\", \"ch_area\": \"加德满都\", \"ch_nation\": \"尼泊尔\", \"en_area\": \"Kathmandu\", \"en_nation\": \"Nepal\", \"latitude\": \"27.7172453\", \"longitude\": \"85.3239605\", \"timeZone\": \"Asia/Katmandu\" }, { \"city_id\": \"61\", \"ch_area\": \"加的夫\", \"ch_nation\": \"威尔士\", \"en_area\": \"Cardiff\", \"en_nation\": \"Wales U.K.\", \"latitude\": \"51.481581\", \"longitude\": \"-3.17909\", \"timeZone\": \"Europe/London\" }, { \"city_id\": \"137\", \"ch_area\": \"加尔各答\", \"ch_nation\": \"印度\", \"en_area\": \"Kolkata\", \"en_nation\": \"India\", \"latitude\": \"22.572646\", \"longitude\": \"88.363895\", \"timeZone\": \"Asia/Kolkata\" }, { \"city_id\": \"60\", \"ch_area\": \"加拉加斯\", \"ch_nation\": \"委内瑞拉\", \"en_area\": \"Caracas\", \"en_nation\": \"Venezuela\", \"latitude\": \"10.4805937\", \"longitude\": \"-66.9036063\", \"timeZone\": \"America/Caracas\" }, { \"city_id\": \"101\", \"ch_area\": \"加拉帕戈斯群岛\", \"ch_nation\": \"厄瓜多尔\", \"en_area\": \"Galápagos Islands\", \"en_nation\": \"Ecuador\", \"latitude\": \"-0.383106\", \"longitude\": \"-90.4233344\", \"timeZone\": \"Pacific/Galapagos\" }, { \"city_id\": \"129\", \"ch_area\": \"加里宁格勒\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Kaliningrad\", \"en_nation\": \"Russia\", \"latitude\": \"54.7104264\", \"longitude\": \"20.4522144\", \"timeZone\": \"Europe/Kaliningrad\" }, { \"city_id\": \"56\", \"ch_area\": \"加那利群岛\", \"ch_nation\": \"西班牙\", \"en_area\": \"Canary Islands\", \"en_nation\": \"Spain\", \"latitude\": \"28.2915637\", \"longitude\": \"-16.6291304\", \"timeZone\": \"Atlantic/Canary\" }, { \"city_id\": \"509\", \"ch_area\": \"加沙\", \"ch_nation\": \"巴勒斯坦领土\", \"en_area\": \"Gaza\", \"en_nation\": \"Palestinian Territories\", \"latitude\": \"31.3546763\", \"longitude\": \"34.3088255\", \"timeZone\": \"Asia/Gaza\" }, { \"city_id\": \"428\", \"ch_area\": \"剑桥湾\", \"ch_nation\": \"加拿大\", \"en_area\": \"Cambridge Bay\", \"en_nation\": \"Canada\", \"latitude\": \"69.1168641\", \"longitude\": \"-105.0596814\", \"timeZone\": \"America/Cambridge_Bay\" }, { \"city_id\": \"226\", \"ch_area\": \"金边\", \"ch_nation\": \"柬埔寨\", \"en_area\": \"Phnom Penh\", \"en_nation\": \"Cambodia\", \"latitude\": \"11.5563738\", \"longitude\": \"104.9282099\", \"timeZone\": \"Asia/Phnom_Penh\" }, { \"city_id\": \"135\", \"ch_area\": \"金沙萨\", \"ch_nation\": \"刚果民主共和国\", \"en_area\": \"Kinshasa\", \"en_nation\": \"Democratic Republic of the Congo\", \"latitude\": \"-4.4419311\", \"longitude\": \"15.2662931\", \"timeZone\": \"Africa/Kinshasa\" }, { \"city_id\": \"547\", \"ch_area\": \"金斯敦\", \"ch_nation\": \"圣文森特和格林纳丁斯\", \"en_area\": \"Kingstown\", \"en_nation\": \"Saint Vincent and the Grenadines\", \"latitude\": \"13.1600249\", \"longitude\": \"-61.2248157\", \"timeZone\": \"America/St_Vincent\" }, { \"city_id\": \"134\", \"ch_area\": \"金斯顿\", \"ch_nation\": \"牙买加\", \"en_area\": \"Kingston\", \"en_nation\": \"Jamaica\", \"latitude\": \"35.8809084\", \"longitude\": \"-84.5085447\", \"timeZone\": \"America/Jamaica\" }, { \"city_id\": \"499\", \"ch_area\": \"金斯顿\", \"ch_nation\": \"诺福克岛\", \"en_area\": \"Kingston\", \"en_nation\": \"Norfolk Island\", \"latitude\": \"35.8809084\", \"longitude\": \"-84.5085447\", \"timeZone\": \"Pacific/Norfolk\" }, { \"city_id\": \"255\", \"ch_area\": \"旧金山\", \"ch_nation\": \"美国\", \"en_area\": \"San Francisco, CA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.7749295\", \"longitude\": \"-122.4194155\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"128\", \"ch_area\": \"喀布尔\", \"ch_nation\": \"阿富汗\", \"en_area\": \"Kabul\", \"en_nation\": \"Afghanistan\", \"latitude\": \"34.5553494\", \"longitude\": \"69.207486\", \"timeZone\": \"Asia/Kabul\" }, { \"city_id\": \"440\", \"ch_area\": \"喀什\", \"ch_nation\": \"中国\", \"en_area\": \"Kashgar\", \"en_nation\": \"China\", \"latitude\": \"39.467685\", \"longitude\": \"75.99379\", \"timeZone\": \"Asia/Kashgar\" }, { \"city_id\": \"132\", \"ch_area\": \"喀土穆\", \"ch_nation\": \"苏丹\", \"en_area\": \"Khartoum\", \"en_nation\": \"Sudan\", \"latitude\": \"15.5006544\", \"longitude\": \"32.5598994\", \"timeZone\": \"Africa/Khartoum\" }, { \"city_id\": \"55\", \"ch_area\": \"卡尔加里\", \"ch_nation\": \"加拿大\", \"en_area\": \"Calgary\", \"en_nation\": \"Canada\", \"latitude\": \"51.0447331\", \"longitude\": \"-114.0718831\", \"timeZone\": \"America/Edmonton\" }, { \"city_id\": \"506\", \"ch_area\": \"卡拉奇\", \"ch_nation\": \"巴基斯坦\", \"en_area\": \"Karachi\", \"en_nation\": \"Pakistan\", \"latitude\": \"24.8607343\", \"longitude\": \"67.0011364\", \"timeZone\": \"Asia/Karachi\" }, { \"city_id\": \"576\", \"ch_area\": \"卡萨布兰卡\", \"ch_nation\": \"摩洛哥\", \"en_area\": \"Casablanca\", \"en_nation\": \"Morocco\", \"latitude\": \"35.1359166\", \"longitude\": \"-78.9690787\", \"timeZone\": \"Africa/Casablanca\" }, { \"city_id\": \"481\", \"ch_area\": \"卡斯特里\", \"ch_nation\": \"圣卢西亚\", \"en_area\": \"Castries\", \"en_nation\": \"Saint Lucia\", \"latitude\": \"14.0101094\", \"longitude\": \"-60.9874687\", \"timeZone\": \"America/St_Lucia\" }, { \"city_id\": \"384\", \"ch_area\": \"卡塔马卡\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Catamarca\", \"en_nation\": \"Argentina\", \"latitude\": \"-28.469581\", \"longitude\": \"-65.7795441\", \"timeZone\": \"America/Argentina/Catamarca\" }, { \"city_id\": \"62\", \"ch_area\": \"卡坦扎罗\", \"ch_nation\": \"意大利\", \"en_area\": \"Catanzaro\", \"en_nation\": \"Italy\", \"latitude\": \"38.9097919\", \"longitude\": \"16.5876516\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"63\", \"ch_area\": \"卡宴\", \"ch_nation\": \"法属圭亚那\", \"en_area\": \"Cayenne\", \"en_nation\": \"French Guiana\", \"latitude\": \"33.5171553\", \"longitude\": \"-86.7883313\", \"timeZone\": \"America/Cayenne\" }, { \"city_id\": \"54\", \"ch_area\": \"开罗\", \"ch_nation\": \"埃及\", \"en_area\": \"Cairo\", \"en_nation\": \"Egypt\", \"latitude\": \"30.0444196\", \"longitude\": \"31.2357116\", \"timeZone\": \"Africa/Cairo\" }, { \"city_id\": \"59\", \"ch_area\": \"开普敦\", \"ch_nation\": \"南非\", \"en_area\": \"Cape Town\", \"en_nation\": \"South Africa\", \"latitude\": \"-33.9248685\", \"longitude\": \"18.4240553\", \"timeZone\": \"Africa/Johannesburg\" }, { \"city_id\": \"375\", \"ch_area\": \"凯西站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Casey Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-66.2821342\", \"longitude\": \"110.5285466\", \"timeZone\": \"Antarctica/Casey\" }, { \"city_id\": \"516\", \"ch_area\": \"堪察加彼得罗巴甫洛夫斯克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Petropavlovsk-Kamchatsky\", \"en_nation\": \"Russia\", \"latitude\": \"53.0583997\", \"longitude\": \"158.6320734\", \"timeZone\": \"Asia/Kamchatka\" }, { \"city_id\": \"57\", \"ch_area\": \"堪培拉\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Canberra\", \"en_nation\": \"Australia\", \"latitude\": \"-35.2809368\", \"longitude\": \"149.1300092\", \"timeZone\": \"Australia/Canberra\" }, { \"city_id\": \"472\", \"ch_area\": \"坎顿岛\", \"ch_nation\": \"基里巴斯\", \"en_area\": \"Kanton Island\", \"en_nation\": \"Kiribati\", \"latitude\": \"-2.8039843\", \"longitude\": \"-171.6432353\", \"timeZone\": \"Pacific/Enderbury\" }, { \"city_id\": \"490\", \"ch_area\": \"坎昆\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Cancun\", \"en_nation\": \"Mexico\", \"latitude\": \"21.161908\", \"longitude\": \"-86.8515279\", \"timeZone\": \"America/Cancun\" }, { \"city_id\": \"130\", \"ch_area\": \"坎帕拉\", \"ch_nation\": \"乌干达\", \"en_area\": \"Kampala\", \"en_nation\": \"Uganda\", \"latitude\": \"0.3475964\", \"longitude\": \"32.5825197\", \"timeZone\": \"Africa/Kampala\" }, { \"city_id\": \"392\", \"ch_area\": \"柯里\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Currie\", \"en_nation\": \"Australia\", \"latitude\": \"30.4331529\", \"longitude\": \"-91.1137724\", \"timeZone\": \"Australia/Currie\" }, { \"city_id\": \"525\", \"ch_area\": \"科伯恩城\", \"ch_nation\": \"特克斯和凯科斯群岛\", \"en_area\": \"Cockburn Town\", \"en_nation\": \"Turks and Caicos Islands\", \"latitude\": \"21.4674584\", \"longitude\": \"-71.1389101\", \"timeZone\": \"America/Grand_Turk\" }, { \"city_id\": \"485\", \"ch_area\": \"科布多\", \"ch_nation\": \"蒙古\", \"en_area\": \"Hovd\", \"en_nation\": \"Mongolia\", \"latitude\": \"47.9795218\", \"longitude\": \"91.634756\", \"timeZone\": \"Asia/Hovd\" }, { \"city_id\": \"380\", \"ch_area\": \"科尔多瓦\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Cordoba\", \"en_nation\": \"Argentina\", \"latitude\": \"37.8881751\", \"longitude\": \"-4.7793835\", \"timeZone\": \"America/Argentina/Cordoba\" }, { \"city_id\": \"76\", \"ch_area\": \"科克\", \"ch_nation\": \"爱尔兰\", \"en_area\": \"Cork\", \"en_nation\": \"Ireland\", \"latitude\": \"38.9418991\", \"longitude\": \"-95.2564118\", \"timeZone\": \"Europe/Dublin\" }, { \"city_id\": \"71\", \"ch_area\": \"科伦坡\", \"ch_nation\": \"斯里兰卡\", \"en_area\": \"Colombo\", \"en_nation\": \"Sri Lanka\", \"latitude\": \"6.9270786\", \"longitude\": \"79.861243\", \"timeZone\": \"Asia/Colombo\" }, { \"city_id\": \"513\", \"ch_area\": \"科罗尔\", \"ch_nation\": \"帕劳\", \"en_area\": \"Koror\", \"en_nation\": \"Palau\", \"latitude\": \"7.3410628\", \"longitude\": \"134.4771596\", \"timeZone\": \"Pacific/Palau\" }, { \"city_id\": \"73\", \"ch_area\": \"科纳克里\", \"ch_nation\": \"几内亚\", \"en_area\": \"Conakry\", \"en_nation\": \"Guinea\", \"latitude\": \"9.6411855\", \"longitude\": \"-13.5784012\", \"timeZone\": \"Africa/Conakry\" }, { \"city_id\": \"451\", \"ch_area\": \"科斯雷\", \"ch_nation\": \"密克罗尼西亚\", \"en_area\": \"Kosrae\", \"en_nation\": \"Micronesia\", \"latitude\": \"5.2991829\", \"longitude\": \"162.9696779\", \"timeZone\": \"Pacific/Kosrae\" }, { \"city_id\": \"140\", \"ch_area\": \"科威特\", \"ch_nation\": \"科威特\", \"en_area\": \"Kuwait\", \"en_nation\": \"Kuwait\", \"latitude\": \"29.31166\", \"longitude\": \"47.481766\", \"timeZone\": \"Asia/Kuwait\" }, { \"city_id\": \"361\", \"ch_area\": \"克拉科夫\", \"ch_nation\": \"波兰\", \"en_area\": \"Kraków\", \"en_nation\": \"Poland\", \"latitude\": \"50.0646501\", \"longitude\": \"19.9449799\", \"timeZone\": \"Europe/Warsaw\" }, { \"city_id\": \"138\", \"ch_area\": \"克拉斯诺亚尔斯克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Krasnoyarsk\", \"en_nation\": \"Russia\", \"latitude\": \"56.0152834\", \"longitude\": \"92.8932476\", \"timeZone\": \"Asia/Krasnoyarsk\" }, { \"city_id\": \"557\", \"ch_area\": \"克雷斯顿\", \"ch_nation\": \"加拿大\", \"en_area\": \"Creston\", \"en_nation\": \"Canada\", \"latitude\": \"41.0586002\", \"longitude\": \"-94.3613474\", \"timeZone\": \"America/Creston\" }, { \"city_id\": \"570\", \"ch_area\": \"克雷塔罗\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Querétaro\", \"en_nation\": \"Mexico\", \"latitude\": \"20.5887932\", \"longitude\": \"-100.3898881\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"549\", \"ch_area\": \"克里斯琴斯特德\", \"ch_nation\": \"美属维尔京群岛\", \"en_area\": \"Christiansted\", \"en_nation\": \"U.S. Virgin Islands\", \"latitude\": \"17.7466397\", \"longitude\": \"-64.7031977\", \"timeZone\": \"America/Virgin\" }, { \"city_id\": \"70\", \"ch_area\": \"克利夫兰\", \"ch_nation\": \"美国\", \"en_area\": \"Cleveland\", \"en_nation\": \"U.S.A.\", \"latitude\": \"41.49932\", \"longitude\": \"-81.6943605\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"77\", \"ch_area\": \"克罗托内\", \"ch_nation\": \"意大利\", \"en_area\": \"Crotone\", \"en_nation\": \"Italy\", \"latitude\": \"39.0807932\", \"longitude\": \"17.1271102\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"477\", \"ch_area\": \"克孜勒奥尔达\", \"ch_nation\": \"哈萨克斯坦\", \"en_area\": \"Kyzylorda\", \"en_nation\": \"Kazakhstan\", \"latitude\": \"44.8488314\", \"longitude\": \"65.4822686\", \"timeZone\": \"Asia/Qyzylorda\" }, { \"city_id\": \"564\", \"ch_area\": \"库埃纳瓦卡\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Cuernavaca\", \"en_nation\": \"Mexico\", \"latitude\": \"18.9242095\", \"longitude\": \"-99.2215659\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"75\", \"ch_area\": \"库比提诺\", \"ch_nation\": \"美国\", \"en_area\": \"Cupertino, California\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.3229978\", \"longitude\": \"-122.0321823\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"407\", \"ch_area\": \"库亚巴\", \"ch_nation\": \"巴西\", \"en_area\": \"Cuiaba\", \"en_nation\": \"Brazil\", \"latitude\": \"-15.5954142\", \"longitude\": \"-56.0925824\", \"timeZone\": \"America/Cuiaba\" }, { \"city_id\": \"484\", \"ch_area\": \"夸贾林环礁\", \"ch_nation\": \"马绍尔群岛\", \"en_area\": \"Kwajalein Atoll\", \"en_nation\": \"Marshall Islands\", \"latitude\": \"8.716667\", \"longitude\": \"167.733333\", \"timeZone\": \"Pacific/Kwajalein\" }, { \"city_id\": \"416\", \"ch_area\": \"快乐谷 - 鹅湾\", \"ch_nation\": \"加拿大\", \"en_area\": \"Happy Valley-Goose Bay\", \"en_nation\": \"Canada\", \"latitude\": \"53.3016826\", \"longitude\": \"-60.3260842\", \"timeZone\": \"America/Goose_Bay\" }, { \"city_id\": \"558\", \"ch_area\": \"魁北克市\", \"ch_nation\": \"加拿大\", \"en_area\": \"Quebec City\", \"en_nation\": \"Canada\", \"latitude\": \"46.8138783\", \"longitude\": \"-71.2079809\", \"timeZone\": \"America/Montreal\" }, { \"city_id\": \"467\", \"ch_area\": \"坤甸\", \"ch_nation\": \"印度尼西亚\", \"en_area\": \"Pontianak\", \"en_nation\": \"Indonesia\", \"latitude\": \"-0.0263303\", \"longitude\": \"109.3425039\", \"timeZone\": \"Asia/Pontianak\" }, { \"city_id\": \"141\", \"ch_area\": \"拉巴斯\", \"ch_nation\": \"玻利维亚\", \"en_area\": \"La Paz\", \"en_nation\": \"Bolivia\", \"latitude\": \"-16.489689\", \"longitude\": \"-68.1192936\", \"timeZone\": \"America/La_Paz\" }, { \"city_id\": \"238\", \"ch_area\": \"拉巴特\", \"ch_nation\": \"摩洛哥\", \"en_area\": \"Rabat\", \"en_nation\": \"Morocco\", \"latitude\": \"33.9715904\", \"longitude\": \"-6.8498129\", \"timeZone\": \"Africa/Casablanca\" }, { \"city_id\": \"142\", \"ch_area\": \"拉各斯\", \"ch_nation\": \"尼日利亚\", \"en_area\": \"Lagos\", \"en_nation\": \"Nigeria\", \"latitude\": \"6.5243793\", \"longitude\": \"3.3792057\", \"timeZone\": \"Africa/Lagos\" }, { \"city_id\": \"385\", \"ch_area\": \"拉里奥哈\", \"ch_nation\": \"阿根廷\", \"en_area\": \"La Rioja\", \"en_nation\": \"Argentina\", \"latitude\": \"42.2870733\", \"longitude\": \"-2.539603\", \"timeZone\": \"America/Argentina/La_Rioja\" }, { \"city_id\": \"436\", \"ch_area\": \"拉罗汤加岛\", \"ch_nation\": \"库克群岛\", \"en_area\": \"Rarotonga\", \"en_nation\": \"Cook Islands\", \"latitude\": \"-21.2292371\", \"longitude\": \"-159.7763491\", \"timeZone\": \"Pacific/Rarotonga\" }, { \"city_id\": \"459\", \"ch_area\": \"拉萨\", \"ch_nation\": \"中国\", \"en_area\": \"Lhasa\", \"en_nation\": \"China\", \"latitude\": \"29.654838\", \"longitude\": \"91.140552\", \"timeZone\": \"Asia/Chongqing\" }, { \"city_id\": \"143\", \"ch_area\": \"拉斯维加斯\", \"ch_nation\": \"美国\", \"en_area\": \"Las Vegas, NV\", \"en_nation\": \"U.S.A.\", \"latitude\": \"36.1699412\", \"longitude\": \"-115.1398296\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"567\", \"ch_area\": \"莱昂\", \"ch_nation\": \"墨西哥\", \"en_area\": \"León\", \"en_nation\": \"Mexico\", \"latitude\": \"42.5987263\", \"longitude\": \"-5.5670959\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"424\", \"ch_area\": \"兰金因雷特\", \"ch_nation\": \"加拿大\", \"en_area\": \"Rankin Inlet\", \"en_nation\": \"Canada\", \"latitude\": \"62.808375\", \"longitude\": \"-92.0852853\", \"timeZone\": \"America/Rankin_Inlet\" }, { \"city_id\": \"521\", \"ch_area\": \"朗伊尔城\", \"ch_nation\": \"挪威\", \"en_area\": \"Longyearbyen\", \"en_nation\": \"Norway\", \"latitude\": \"78.2231722\", \"longitude\": \"15.6267229\", \"timeZone\": \"Arctic/Longyearbyen\" }, { \"city_id\": \"243\", \"ch_area\": \"雷克雅未克\", \"ch_nation\": \"冰岛\", \"en_area\": \"Reykjavik\", \"en_nation\": \"Iceland\", \"latitude\": \"64.146582\", \"longitude\": \"-21.9426354\", \"timeZone\": \"Atlantic/Reykjavik\" }, { \"city_id\": \"422\", \"ch_area\": \"雷索卢特\", \"ch_nation\": \"加拿大\", \"en_area\": \"Resolute\", \"en_nation\": \"Canada\", \"latitude\": \"39.5845123\", \"longitude\": \"-104.8848008\", \"timeZone\": \"America/Resolute\" }, { \"city_id\": \"240\", \"ch_area\": \"累西腓\", \"ch_nation\": \"巴西\", \"en_area\": \"Recife\", \"en_nation\": \"Brazil\", \"latitude\": \"-8.0577401\", \"longitude\": \"-34.8829629\", \"timeZone\": \"America/Recife\" }, { \"city_id\": \"349\", \"ch_area\": \"里昂\", \"ch_nation\": \"法国\", \"en_area\": \"Lyon\", \"en_nation\": \"France\", \"latitude\": \"45.764043\", \"longitude\": \"4.835659\", \"timeZone\": \"Europe/Paris\" }, { \"city_id\": \"332\", \"ch_area\": \"里奥布朗库\", \"ch_nation\": \"巴西\", \"en_area\": \"Rio Branco\", \"en_nation\": \"Brazil\", \"latitude\": \"-9.9740282\", \"longitude\": \"-67.8098124\", \"timeZone\": \"America/La_Paz\" }, { \"city_id\": \"389\", \"ch_area\": \"里奥加耶戈斯\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Rio Gallegos\", \"en_nation\": \"Argentina\", \"latitude\": \"-51.6230485\", \"longitude\": \"-69.2168291\", \"timeZone\": \"America/Argentina/Rio_Gallegos\" }, { \"city_id\": \"504\", \"ch_area\": \"里基提亚\", \"ch_nation\": \"法属波利尼西亚\", \"en_area\": \"Rikitea\", \"en_nation\": \"French Polynesia\", \"latitude\": \"-23.1223034\", \"longitude\": \"-134.9691543\", \"timeZone\": \"Pacific/Gambier\" }, { \"city_id\": \"244\", \"ch_area\": \"里加\", \"ch_nation\": \"拉脱维亚\", \"en_area\": \"Riga\", \"en_nation\": \"Latvia\", \"latitude\": \"56.9496487\", \"longitude\": \"24.1051865\", \"timeZone\": \"Europe/Riga\" }, { \"city_id\": \"242\", \"ch_area\": \"里贾纳\", \"ch_nation\": \"加拿大\", \"en_area\": \"Regina\", \"en_nation\": \"Canada\", \"latitude\": \"50.4452112\", \"longitude\": \"-104.6188943\", \"timeZone\": \"America/Regina\" }, { \"city_id\": \"145\", \"ch_area\": \"里斯本\", \"ch_nation\": \"葡萄牙\", \"en_area\": \"Lisbon\", \"en_nation\": \"Portugal\", \"latitude\": \"38.7222524\", \"longitude\": \"-9.1393366\", \"timeZone\": \"Europe/Lisbon\" }, { \"city_id\": \"245\", \"ch_area\": \"里约热内卢\", \"ch_nation\": \"巴西\", \"en_area\": \"Rio de Janeiro\", \"en_nation\": \"Brazil\", \"latitude\": \"-22.9068467\", \"longitude\": \"-43.1728965\", \"timeZone\": \"America/Sao_Paulo\" }, { \"city_id\": \"452\", \"ch_area\": \"利伯维尔\", \"ch_nation\": \"加蓬\", \"en_area\": \"Libreville\", \"en_nation\": \"Gabon\", \"latitude\": \"0.4161976\", \"longitude\": \"9.4672676\", \"timeZone\": \"Africa/Libreville\" }, { \"city_id\": \"144\", \"ch_area\": \"利马\", \"ch_nation\": \"秘鲁\", \"en_area\": \"Lima\", \"en_nation\": \"Peru\", \"latitude\": \"-12.0463731\", \"longitude\": \"-77.042754\", \"timeZone\": \"America/Lima\" }, { \"city_id\": \"246\", \"ch_area\": \"利雅得\", \"ch_nation\": \"沙特阿拉伯\", \"en_area\": \"Riyadh\", \"en_nation\": \"Saudi Arabia\", \"latitude\": \"24.7135517\", \"longitude\": \"46.6752957\", \"timeZone\": \"Asia/Riyadh\" }, { \"city_id\": \"394\", \"ch_area\": \"林德曼岛\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Lindeman Island\", \"en_nation\": \"Australia\", \"latitude\": \"-20.4447841\", \"longitude\": \"149.0410504\", \"timeZone\": \"Australia/Lindeman\" }, { \"city_id\": \"435\", \"ch_area\": \"卢本巴希\", \"ch_nation\": \"刚果民主共和国\", \"en_area\": \"Lubumbashi\", \"en_nation\": \"Democratic Republic of the Congo\", \"latitude\": \"-11.6876026\", \"longitude\": \"27.5026174\", \"timeZone\": \"Africa/Lubumbashi\" }, { \"city_id\": \"147\", \"ch_area\": \"卢布尔雅那\", \"ch_nation\": \"斯洛文尼亚\", \"en_area\": \"Ljubljana\", \"en_nation\": \"Slovenia\", \"latitude\": \"46.0569465\", \"longitude\": \"14.5057515\", \"timeZone\": \"Europe/Ljubljana\" }, { \"city_id\": \"154\", \"ch_area\": \"卢萨卡\", \"ch_nation\": \"赞比亚\", \"en_area\": \"Lusaka\", \"en_nation\": \"Zambia\", \"latitude\": \"-15.3875259\", \"longitude\": \"28.3228165\", \"timeZone\": \"Africa/Lusaka\" }, { \"city_id\": \"155\", \"ch_area\": \"卢森堡\", \"ch_nation\": \"卢森堡\", \"en_area\": \"Luxembourg\", \"en_nation\": \"Luxembourg\", \"latitude\": \"49.815273\", \"longitude\": \"6.129583\", \"timeZone\": \"Europe/Luxembourg\" }, { \"city_id\": \"232\", \"ch_area\": \"路易港\", \"ch_nation\": \"毛里求斯\", \"en_area\": \"Port Louis\", \"en_nation\": \"Mauritius\", \"latitude\": \"-20.1608912\", \"longitude\": \"57.5012222\", \"timeZone\": \"Indian/Mauritius\" }, { \"city_id\": \"152\", \"ch_area\": \"路易斯维尔\", \"ch_nation\": \"美国\", \"en_area\": \"Louisville, KY\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.2526647\", \"longitude\": \"-85.7584557\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"148\", \"ch_area\": \"伦敦\", \"ch_nation\": \"英国\", \"en_area\": \"London\", \"en_nation\": \"England U.K.\", \"latitude\": \"51.5073509\", \"longitude\": \"-0.1277583\", \"timeZone\": \"Europe/London\" }, { \"city_id\": \"153\", \"ch_area\": \"罗安达\", \"ch_nation\": \"安哥拉\", \"en_area\": \"Luanda\", \"en_nation\": \"Angola\", \"latitude\": \"-8.8146556\", \"longitude\": \"13.2301756\", \"timeZone\": \"Africa/Luanda\" }, { \"city_id\": \"548\", \"ch_area\": \"罗德城\", \"ch_nation\": \"英属维尔京群岛\", \"en_area\": \"Road Town\", \"en_nation\": \"British Virgin Islands\", \"latitude\": \"18.4286115\", \"longitude\": \"-64.6184657\", \"timeZone\": \"America/Tortola\" }, { \"city_id\": \"247\", \"ch_area\": \"罗马\", \"ch_nation\": \"意大利\", \"en_area\": \"Rome\", \"en_nation\": \"Italy\", \"latitude\": \"41.9027835\", \"longitude\": \"12.4963655\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"371\", \"ch_area\": \"罗瑟拉研究站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Rothera Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-75.5674124\", \"longitude\": \"-25.5165286\", \"timeZone\": \"Antarctica/Rothera\" }, { \"city_id\": \"444\", \"ch_area\": \"罗佐\", \"ch_nation\": \"多米尼克\", \"en_area\": \"Roseau\", \"en_nation\": \"Dominica\", \"latitude\": \"48.8460926\", \"longitude\": \"-95.762766\", \"timeZone\": \"America/Dominica\" }, { \"city_id\": \"327\", \"ch_area\": \"洛美\", \"ch_nation\": \"多哥\", \"en_area\": \"Lomé\", \"en_nation\": \"Togo\", \"latitude\": \"6.1256261\", \"longitude\": \"1.2254183\", \"timeZone\": \"Africa/Accra\" }, { \"city_id\": \"150\", \"ch_area\": \"洛杉矶\", \"ch_nation\": \"美国\", \"en_area\": \"Los Angeles, CA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"34.0522342\", \"longitude\": \"-118.2436849\", \"timeZone\": \"America/Los_Angeles\" }, { \"city_id\": \"149\", \"ch_area\": \"洛斯阿尔托斯\", \"ch_nation\": \"美国\", \"en_area\": \"Los Altos\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.3852183\", \"longitude\": \"-122.1141298\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"151\", \"ch_area\": \"洛斯加托斯\", \"ch_nation\": \"美国\", \"en_area\": \"Los Gatos\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.2358078\", \"longitude\": \"-121.9623751\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"158\", \"ch_area\": \"马德里\", \"ch_nation\": \"西班牙\", \"en_area\": \"Madrid\", \"en_nation\": \"Spain\", \"latitude\": \"40.4167754\", \"longitude\": \"-3.7037902\", \"timeZone\": \"Europe/Madrid\" }, { \"city_id\": \"555\", \"ch_area\": \"马尔默\", \"ch_nation\": \"瑞典\", \"en_area\": \"Malmö\", \"en_nation\": \"Sweden\", \"latitude\": \"55.604981\", \"longitude\": \"13.003822\", \"timeZone\": \"Europe/Stockholm\" }, { \"city_id\": \"178\", \"ch_area\": \"马加丹\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Magadan\", \"en_nation\": \"Russia\", \"latitude\": \"59.5594397\", \"longitude\": \"150.8127537\", \"timeZone\": \"Asia/Magadan\" }, { \"city_id\": \"355\", \"ch_area\": \"马卡萨\", \"ch_nation\": \"印度尼西亚\", \"en_area\": \"Makassar\", \"en_nation\": \"Indonesia\", \"latitude\": \"-5.1476651\", \"longitude\": \"119.4327314\", \"timeZone\": \"Asia/Makassar\" }, { \"city_id\": \"159\", \"ch_area\": \"马拉博\", \"ch_nation\": \"赤道几内亚\", \"en_area\": \"Malabo\", \"en_nation\": \"Equatorial Guinea\", \"latitude\": \"3.7549606\", \"longitude\": \"8.7821344\", \"timeZone\": \"Africa/Malabo\" }, { \"city_id\": \"577\", \"ch_area\": \"马拉喀什\", \"ch_nation\": \"摩洛哥\", \"en_area\": \"Marrakesh\", \"en_nation\": \"Morocco\", \"latitude\": \"31.6294723\", \"longitude\": \"-7.9810845\", \"timeZone\": \"Africa/Casablanca\" }, { \"city_id\": \"160\", \"ch_area\": \"马累\", \"ch_nation\": \"马尔代夫\", \"en_area\": \"Male\", \"en_nation\": \"Maldives\", \"latitude\": \"4.1754959\", \"longitude\": \"73.5093474\", \"timeZone\": \"Indian/Maldives\" }, { \"city_id\": \"163\", \"ch_area\": \"马里戈特\", \"ch_nation\": \"圣马丁\", \"en_area\": \"Marigot\", \"en_nation\": \"Saint Martin\", \"latitude\": \"18.0675189\", \"longitude\": \"-63.0824656\", \"timeZone\": \"America/Marigot\" }, { \"city_id\": \"530\", \"ch_area\": \"马伦戈\", \"ch_nation\": \"美国\", \"en_area\": \"Marengo\", \"en_nation\": \"U.S.A.\", \"latitude\": \"41.7927817\", \"longitude\": \"-92.0696253\", \"timeZone\": \"America/Indiana/Marengo\" }, { \"city_id\": \"553\", \"ch_area\": \"马穆楚\", \"ch_nation\": \"马约特岛\", \"en_area\": \"Mamoudzou\", \"en_nation\": \"Mayotte\", \"latitude\": \"-12.7809488\", \"longitude\": \"45.227872\", \"timeZone\": \"Indian/Mayotte\" }, { \"city_id\": \"161\", \"ch_area\": \"马那瓜\", \"ch_nation\": \"尼加拉瓜\", \"en_area\": \"Managua\", \"en_nation\": \"Nicaragua\", \"latitude\": \"12.1149926\", \"longitude\": \"-86.2361744\", \"timeZone\": \"America/Managua\" }, { \"city_id\": \"411\", \"ch_area\": \"马瑙斯\", \"ch_nation\": \"巴西\", \"en_area\": \"Manaus\", \"en_nation\": \"Brazil\", \"latitude\": \"-3.1190275\", \"longitude\": \"-60.0217314\", \"timeZone\": \"America/Manaus\" }, { \"city_id\": \"164\", \"ch_area\": \"马尼拉\", \"ch_nation\": \"菲律宾\", \"en_area\": \"Manila\", \"en_nation\": \"the Philippines\", \"latitude\": \"14.5995124\", \"longitude\": \"120.9842195\", \"timeZone\": \"Asia/Manila\" }, { \"city_id\": \"165\", \"ch_area\": \"马普托\", \"ch_nation\": \"莫桑比克\", \"en_area\": \"Maputo\", \"en_nation\": \"Mozambique\", \"latitude\": \"-25.969248\", \"longitude\": \"32.5731746\", \"timeZone\": \"Africa/Maputo\" }, { \"city_id\": \"493\", \"ch_area\": \"马萨特兰\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Mazatlán\", \"en_nation\": \"Mexico\", \"latitude\": \"23.2494148\", \"longitude\": \"-106.4111425\", \"timeZone\": \"America/Mazatlan\" }, { \"city_id\": \"330\", \"ch_area\": \"马塞卢\", \"ch_nation\": \"莱索托\", \"en_area\": \"Maseru\", \"en_nation\": \"Lesotho\", \"latitude\": \"-29.3150767\", \"longitude\": \"27.4869229\", \"timeZone\": \"Africa/Maseru\" }, { \"city_id\": \"405\", \"ch_area\": \"马塞约\", \"ch_nation\": \"巴西\", \"en_area\": \"Maceio\", \"en_nation\": \"Brazil\", \"latitude\": \"-9.6660417\", \"longitude\": \"-35.7352167\", \"timeZone\": \"America/Maceio\" }, { \"city_id\": \"350\", \"ch_area\": \"马赛\", \"ch_nation\": \"法国\", \"en_area\": \"Marseille\", \"en_nation\": \"France\", \"latitude\": \"43.296482\", \"longitude\": \"5.36978\", \"timeZone\": \"Europe/Paris\" }, { \"city_id\": \"189\", \"ch_area\": \"马斯喀特\", \"ch_nation\": \"阿曼\", \"en_area\": \"Muscat\", \"en_nation\": \"Oman\", \"latitude\": \"23.5880307\", \"longitude\": \"58.3828717\", \"timeZone\": \"Asia/Muscat\" }, { \"city_id\": \"344\", \"ch_area\": \"马塔莫罗斯\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Matamoros\", \"en_nation\": \"Mexico\", \"latitude\": \"25.8690294\", \"longitude\": \"-97.5027376\", \"timeZone\": \"America/Matamoros\" }, { \"city_id\": \"551\", \"ch_area\": \"马塔乌图\", \"ch_nation\": \"瓦利斯和富图纳群岛\", \"en_area\": \"Mata-Utu\", \"en_nation\": \"Wallis and Futuna\", \"latitude\": \"-13.2825091\", \"longitude\": \"-176.1764475\", \"timeZone\": \"Pacific/Wallis\" }, { \"city_id\": \"483\", \"ch_area\": \"马朱罗\", \"ch_nation\": \"马绍尔群岛\", \"en_area\": \"Majuro\", \"en_nation\": \"Marshall Islands\", \"latitude\": \"7.066667\", \"longitude\": \"171.266667\", \"timeZone\": \"Pacific/Majuro\" }, { \"city_id\": \"397\", \"ch_area\": \"玛丽港\", \"ch_nation\": \"奥兰群岛\", \"en_area\": \"Mariehamn\", \"en_nation\": \"Åland Islands\", \"latitude\": \"60.0970945\", \"longitude\": \"19.9348339\", \"timeZone\": \"Europe/Mariehamn\" }, { \"city_id\": \"172\", \"ch_area\": \"迈阿密\", \"ch_nation\": \"美国\", \"en_area\": \"Miami, FL\", \"en_nation\": \"U.S.A.\", \"latitude\": \"25.7616798\", \"longitude\": \"-80.1917902\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"157\", \"ch_area\": \"麦迪逊\", \"ch_nation\": \"美国\", \"en_area\": \"Madison\", \"en_nation\": \"U.S.A.\", \"latitude\": \"43.0730517\", \"longitude\": \"-89.4012302\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"166\", \"ch_area\": \"麦加\", \"ch_nation\": \"沙特阿拉伯\", \"en_area\": \"Mecca\", \"en_nation\": \"Saudi Arabia\", \"latitude\": \"21.3890824\", \"longitude\": \"39.8579118\", \"timeZone\": \"Asia/Riyadh\" }, { \"city_id\": \"369\", \"ch_area\": \"麦克默多站\", \"ch_nation\": \"南极洲\", \"en_area\": \"McMurdo Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"35.8546135\", \"longitude\": \"-78.7126469\", \"timeZone\": \"Antarctica/McMurdo\" }, { \"city_id\": \"379\", \"ch_area\": \"麦夸理岛站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Macquarie Island Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-54.4997485\", \"longitude\": \"158.9364023\", \"timeZone\": \"Antarctica/Macquarie\" }, { \"city_id\": \"162\", \"ch_area\": \"麦纳麦\", \"ch_nation\": \"巴林\", \"en_area\": \"Manama\", \"en_nation\": \"Bahrain\", \"latitude\": \"26.2235305\", \"longitude\": \"50.5875935\", \"timeZone\": \"Asia/Bahrain\" }, { \"city_id\": \"26\", \"ch_area\": \"曼谷\", \"ch_nation\": \"泰国\", \"en_area\": \"Bangkok\", \"en_nation\": \"Thailand\", \"latitude\": \"13.7563309\", \"longitude\": \"100.5017651\", \"timeZone\": \"Asia/Bangkok\" }, { \"city_id\": \"491\", \"ch_area\": \"梅里达\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Mérida\", \"en_nation\": \"Mexico\", \"latitude\": \"42.3444552\", \"longitude\": \"-71.0310225\", \"timeZone\": \"America/Merida\" }, { \"city_id\": \"535\", \"ch_area\": \"梅诺米尼\", \"ch_nation\": \"美国\", \"en_area\": \"Menominee\", \"en_nation\": \"U.S.A.\", \"latitude\": \"45.1077627\", \"longitude\": \"-87.6142737\", \"timeZone\": \"America/Menominee\" }, { \"city_id\": \"544\", \"ch_area\": \"梅特拉卡特拉\", \"ch_nation\": \"美国\", \"en_area\": \"Metlakatla\", \"en_nation\": \"U.S.A.\", \"latitude\": \"55.1291667\", \"longitude\": \"-131.5722222\", \"timeZone\": \"America/Metlakatla\" }, { \"city_id\": \"387\", \"ch_area\": \"门多萨\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Mendoza\", \"en_nation\": \"Argentina\", \"latitude\": \"-32.8894587\", \"longitude\": \"-68.8458386\", \"timeZone\": \"America/Argentina/Mendoza\" }, { \"city_id\": \"169\", \"ch_area\": \"门洛帕克\", \"ch_nation\": \"美国\", \"en_area\": \"Menlo Park\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.4529598\", \"longitude\": \"-122.1817252\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"182\", \"ch_area\": \"蒙彼利埃\", \"ch_nation\": \"美国\", \"en_area\": \"Montpelier\", \"en_nation\": \"U.S.A.\", \"latitude\": \"44.2600593\", \"longitude\": \"-72.5753869\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"181\", \"ch_area\": \"蒙得维的亚\", \"ch_nation\": \"乌拉圭\", \"en_area\": \"Montevideo\", \"en_nation\": \"Uruguay\", \"latitude\": \"-34.9011127\", \"longitude\": \"-56.1645314\", \"timeZone\": \"America/Montevideo\" }, { \"city_id\": \"517\", \"ch_area\": \"蒙蒂塞洛\", \"ch_nation\": \"美国\", \"en_area\": \"Monticello\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.0086043\", \"longitude\": \"-78.4531994\", \"timeZone\": \"America/Kentucky/Monticello\" }, { \"city_id\": \"415\", \"ch_area\": \"蒙克顿\", \"ch_nation\": \"加拿大\", \"en_area\": \"Moncton\", \"en_nation\": \"Canada\", \"latitude\": \"46.0878165\", \"longitude\": \"-64.7782313\", \"timeZone\": \"America/Moncton\" }, { \"city_id\": \"180\", \"ch_area\": \"蒙罗维亚\", \"ch_nation\": \"利比里亚\", \"en_area\": \"Monrovia\", \"en_nation\": \"Liberia\", \"latitude\": \"34.1442616\", \"longitude\": \"-118.0019482\", \"timeZone\": \"Africa/Monrovia\" }, { \"city_id\": \"492\", \"ch_area\": \"蒙特雷\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Monterrey\", \"en_nation\": \"Mexico\", \"latitude\": \"25.6866142\", \"longitude\": \"-100.3161126\", \"timeZone\": \"America/Monterrey\" }, { \"city_id\": \"185\", \"ch_area\": \"蒙特里\", \"ch_nation\": \"美国\", \"en_area\": \"Monterey\", \"en_nation\": \"U.S.A.\", \"latitude\": \"36.6002378\", \"longitude\": \"-121.8946761\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"183\", \"ch_area\": \"蒙特利尔\", \"ch_nation\": \"加拿大\", \"en_area\": \"Montreal\", \"en_nation\": \"Canada\", \"latitude\": \"45.5016889\", \"longitude\": \"-73.567256\", \"timeZone\": \"America/Montreal\" }, { \"city_id\": \"168\", \"ch_area\": \"孟斐斯\", \"ch_nation\": \"美国\", \"en_area\": \"Memphis, TN\", \"en_nation\": \"U.S.A.\", \"latitude\": \"35.1495343\", \"longitude\": \"-90.0489801\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"187\", \"ch_area\": \"孟买\", \"ch_nation\": \"印度\", \"en_area\": \"Mumbai\", \"en_nation\": \"India\", \"latitude\": \"19.0759837\", \"longitude\": \"72.8776559\", \"timeZone\": \"Asia/Kolkata\" }, { \"city_id\": \"174\", \"ch_area\": \"米尔班克\", \"ch_nation\": \"美国\", \"en_area\": \"Milbank\", \"en_nation\": \"U.S.A.\", \"latitude\": \"39.137916\", \"longitude\": \"-94.52244\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"173\", \"ch_area\": \"米兰\", \"ch_nation\": \"意大利\", \"en_area\": \"Milano\", \"en_nation\": \"Italy\", \"latitude\": \"29.5968704\", \"longitude\": \"-90.7228164\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"175\", \"ch_area\": \"密尔沃基\", \"ch_nation\": \"美国\", \"en_area\": \"Milwaukee, WI\", \"en_nation\": \"U.S.A.\", \"latitude\": \"43.0389025\", \"longitude\": \"-87.9064736\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"176\", \"ch_area\": \"明尼阿波利斯\", \"ch_nation\": \"美国\", \"en_area\": \"Minneapolis\", \"en_nation\": \"U.S.A.\", \"latitude\": \"44.977753\", \"longitude\": \"-93.2650108\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"177\", \"ch_area\": \"明斯克\", \"ch_nation\": \"白俄罗斯\", \"en_area\": \"Minsk\", \"en_nation\": \"Belarus\", \"latitude\": \"53.9006011\", \"longitude\": \"27.558972\", \"timeZone\": \"Europe/Minsk\" }, { \"city_id\": \"179\", \"ch_area\": \"摩加迪沙\", \"ch_nation\": \"索马里\", \"en_area\": \"Mogadishu\", \"en_nation\": \"Somalia\", \"latitude\": \"2.0469343\", \"longitude\": \"45.3181623\", \"timeZone\": \"Africa/Mogadishu\" }, { \"city_id\": \"482\", \"ch_area\": \"摩纳哥\", \"ch_nation\": \"摩纳哥\", \"en_area\": \"Monaco\", \"en_nation\": \"Monaco\", \"latitude\": \"43.7384176\", \"longitude\": \"7.4246158\", \"timeZone\": \"Europe/Monaco\" }, { \"city_id\": \"505\", \"ch_area\": \"莫尔兹比港\", \"ch_nation\": \"巴布亚新几内亚\", \"en_area\": \"Port Moresby\", \"en_nation\": \"Papua New Guinea\", \"latitude\": \"-9.4438004\", \"longitude\": \"147.1802671\", \"timeZone\": \"Pacific/Port_Moresby\" }, { \"city_id\": \"474\", \"ch_area\": \"莫罗尼\", \"ch_nation\": \"科摩罗\", \"en_area\": \"Moroni\", \"en_nation\": \"Comoros\", \"latitude\": \"39.5249615\", \"longitude\": \"-111.5904725\", \"timeZone\": \"Indian/Comoro\" }, { \"city_id\": \"373\", \"ch_area\": \"莫森站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Mawson Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-67.6032742\", \"longitude\": \"62.8741649\", \"timeZone\": \"Antarctica/Mawson\" }, { \"city_id\": \"184\", \"ch_area\": \"莫斯科\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Moscow\", \"en_nation\": \"Russia\", \"latitude\": \"55.755826\", \"longitude\": \"37.6172999\", \"timeZone\": \"Europe/Moscow\" }, { \"city_id\": \"167\", \"ch_area\": \"墨尔本\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Melbourne\", \"en_nation\": \"Australia\", \"latitude\": \"-37.8136276\", \"longitude\": \"144.9630576\", \"timeZone\": \"Australia/Melbourne\" }, { \"city_id\": \"171\", \"ch_area\": \"墨西哥城\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Mexico City\", \"en_nation\": \"Mexico\", \"latitude\": \"19.4326077\", \"longitude\": \"-99.133208\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"568\", \"ch_area\": \"墨西卡利\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Mexicali\", \"en_nation\": \"Mexico\", \"latitude\": \"32.6245389\", \"longitude\": \"-115.4522623\", \"timeZone\": \"America/Tijuana\" }, { \"city_id\": \"170\", \"ch_area\": \"墨西拿\", \"ch_nation\": \"意大利\", \"en_area\": \"Messina\", \"en_nation\": \"Italy\", \"latitude\": \"38.1937335\", \"longitude\": \"15.5542057\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"329\", \"ch_area\": \"姆巴巴内\", \"ch_nation\": \"斯威士兰\", \"en_area\": \"Mbabane\", \"en_nation\": \"Eswatini\", \"latitude\": \"-26.3054482\", \"longitude\": \"31.1366715\", \"timeZone\": \"Africa/Mbabane\" }, { \"city_id\": \"188\", \"ch_area\": \"慕尼黑\", \"ch_nation\": \"德国\", \"en_area\": \"Munich\", \"en_nation\": \"Germany\", \"latitude\": \"48.1351253\", \"longitude\": \"11.5819805\", \"timeZone\": \"Europe/Berlin\" }, { \"city_id\": \"413\", \"ch_area\": \"拿骚\", \"ch_nation\": \"巴哈马\", \"en_area\": \"Nassau\", \"en_nation\": \"Bahamas\", \"latitude\": \"25.0443312\", \"longitude\": \"-77.3503609\", \"timeZone\": \"America/Nassau\" }, { \"city_id\": \"191\", \"ch_area\": \"那不勒斯\", \"ch_nation\": \"意大利\", \"en_area\": \"Napoli\", \"en_nation\": \"Italy\", \"latitude\": \"34.0325366\", \"longitude\": \"-84.1851525\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"190\", \"ch_area\": \"纳帕\", \"ch_nation\": \"美国\", \"en_area\": \"Napa\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.2975381\", \"longitude\": \"-122.286865\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"559\", \"ch_area\": \"纳什维尔\", \"ch_nation\": \"美国\", \"en_area\": \"Nashville, TN\", \"en_nation\": \"U.S.A.\", \"latitude\": \"36.1626638\", \"longitude\": \"-86.7816016\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"193\", \"ch_area\": \"纳特尔斯\", \"ch_nation\": \"瑞士\", \"en_area\": \"Naters\", \"en_nation\": \"Switzerland\", \"latitude\": \"46.3239282\", \"longitude\": \"7.9916569\", \"timeZone\": \"Europe/Zurich\" }, { \"city_id\": \"460\", \"ch_area\": \"南京\", \"ch_nation\": \"中国\", \"en_area\": \"Nanjing\", \"en_nation\": \"China\", \"latitude\": \"32.060255\", \"longitude\": \"118.796877\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"515\", \"ch_area\": \"南萨哈林斯克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Yuzhno-Sakhalinsk\", \"en_nation\": \"Russia\", \"latitude\": \"46.9640949\", \"longitude\": \"142.7284716\", \"timeZone\": \"Asia/Sakhalin\" }, { \"city_id\": \"500\", \"ch_area\": \"瑙鲁\", \"ch_nation\": \"密克罗尼西亚\", \"en_area\": \"Nauru\", \"en_nation\": \"Micronesia\", \"latitude\": \"-0.522778\", \"longitude\": \"166.931503\", \"timeZone\": \"Pacific/Nauru\" }, { \"city_id\": \"192\", \"ch_area\": \"内罗毕\", \"ch_nation\": \"肯尼亚\", \"en_area\": \"Nairobi\", \"en_nation\": \"Kenya\", \"latitude\": \"-1.2920659\", \"longitude\": \"36.8219462\", \"timeZone\": \"Africa/Nairobi\" }, { \"city_id\": \"364\", \"ch_area\": \"尼科西亚\", \"ch_nation\": \"塞浦路斯\", \"en_area\": \"Nicosia\", \"en_nation\": \"Cyprus\", \"latitude\": \"35.1855659\", \"longitude\": \"33.3822764\", \"timeZone\": \"Asia/Nicosia\" }, { \"city_id\": \"418\", \"ch_area\": \"尼皮贡\", \"ch_nation\": \"加拿大\", \"en_area\": \"Nipigon\", \"en_nation\": \"Canada\", \"latitude\": \"49.0125155\", \"longitude\": \"-88.2632805\", \"timeZone\": \"America/Nipigon\" }, { \"city_id\": \"198\", \"ch_area\": \"尼亚美\", \"ch_nation\": \"尼日尔\", \"en_area\": \"Niamey\", \"en_nation\": \"Niger\", \"latitude\": \"13.5115963\", \"longitude\": \"2.1253854\", \"timeZone\": \"Africa/Niamey\" }, { \"city_id\": \"197\", \"ch_area\": \"纽约\", \"ch_nation\": \"美国\", \"en_area\": \"New York\", \"en_nation\": \"U.S.A.\", \"latitude\": \"40.7127753\", \"longitude\": \"-74.0059728\", \"timeZone\": \"America/New_York\" }, { \"city_id\": \"204\", \"ch_area\": \"努克\", \"ch_nation\": \"格陵兰\", \"en_area\": \"Nuuk\", \"en_nation\": \"Greenland\", \"latitude\": \"64.1814099\", \"longitude\": \"-51.6941381\", \"timeZone\": \"America/Godthab\" }, { \"city_id\": \"203\", \"ch_area\": \"努库阿洛法\", \"ch_nation\": \"汤加\", \"en_area\": \"Nukuʻalofa\", \"en_nation\": \"Tonga\", \"latitude\": \"-21.1393418\", \"longitude\": \"-175.204947\", \"timeZone\": \"Pacific/Tongatapu\" }, { \"city_id\": \"200\", \"ch_area\": \"努美阿\", \"ch_nation\": \"新喀里多尼亚\", \"en_area\": \"Noumea\", \"en_nation\": \"New Caledonia\", \"latitude\": \"-22.2734912\", \"longitude\": \"166.4480887\", \"timeZone\": \"Pacific/Noumea\" }, { \"city_id\": \"199\", \"ch_area\": \"努瓦克肖特\", \"ch_nation\": \"毛里塔尼亚\", \"en_area\": \"Nouakchott\", \"en_nation\": \"Mauritania\", \"latitude\": \"18.0735299\", \"longitude\": \"-15.9582372\", \"timeZone\": \"Africa/Nouakchott\" }, { \"city_id\": \"514\", \"ch_area\": \"诺弗库兹尼特斯克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Novokuznetsk\", \"en_nation\": \"Russia\", \"latitude\": \"53.7595935\", \"longitude\": \"87.1215705\", \"timeZone\": \"Asia/Novokuznetsk\" }, { \"city_id\": \"534\", \"ch_area\": \"诺克斯\", \"ch_nation\": \"美国\", \"en_area\": \"Knox\", \"en_nation\": \"U.S.A.\", \"latitude\": \"40.9433331\", \"longitude\": \"-90.3704499\", \"timeZone\": \"America/Indiana/Knox\" }, { \"city_id\": \"136\", \"ch_area\": \"诺克斯维尔\", \"ch_nation\": \"美国\", \"en_area\": \"Knoxville\", \"en_nation\": \"U.S.A.\", \"latitude\": \"35.9606384\", \"longitude\": \"-83.9207392\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"543\", \"ch_area\": \"诺姆\", \"ch_nation\": \"美国\", \"en_area\": \"Nome\", \"en_nation\": \"U.S.A.\", \"latitude\": \"64.5011111\", \"longitude\": \"-165.4063889\", \"timeZone\": \"America/Nome\" }, { \"city_id\": \"201\", \"ch_area\": \"诺瓦托\", \"ch_nation\": \"美国\", \"en_area\": \"Novato\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.1074198\", \"longitude\": \"-122.5697032\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"480\", \"ch_area\": \"欧罗尔\", \"ch_nation\": \"哈萨克斯坦\", \"en_area\": \"Oral\", \"en_nation\": \"Kazakhstan\", \"latitude\": \"37.7098505\", \"longitude\": \"-97.442637\", \"timeZone\": \"Asia/Oral\" }, { \"city_id\": \"372\", \"ch_area\": \"帕尔默站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Palmer Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-64.7742513\", \"longitude\": \"-64.0538299\", \"timeZone\": \"Antarctica/Palmer\" }, { \"city_id\": \"214\", \"ch_area\": \"帕果帕果\", \"ch_nation\": \"美属萨摩亚群岛\", \"en_area\": \"Pago Pago\", \"en_nation\": \"American Samoa\", \"latitude\": \"-14.2756319\", \"longitude\": \"-170.7020359\", \"timeZone\": \"Pacific/Pago_Pago\" }, { \"city_id\": \"220\", \"ch_area\": \"帕拉马里博\", \"ch_nation\": \"苏里南\", \"en_area\": \"Paramaribo\", \"en_nation\": \"Surinam\", \"latitude\": \"5.8520355\", \"longitude\": \"-55.2038278\", \"timeZone\": \"America/Paramaribo\" }, { \"city_id\": \"216\", \"ch_area\": \"帕洛阿尔托\", \"ch_nation\": \"美国\", \"en_area\": \"Palo Alto\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.4418834\", \"longitude\": \"-122.1430195\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"213\", \"ch_area\": \"帕西非卡\", \"ch_nation\": \"美国\", \"en_area\": \"Pacifica\", \"en_nation\": \"U.S.A.\", \"latitude\": \"36.9770252\", \"longitude\": \"-120.073758\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"421\", \"ch_area\": \"潘尼尔东\", \"ch_nation\": \"加拿大\", \"en_area\": \"Pangnirtung\", \"en_nation\": \"Canada\", \"latitude\": \"66.1465578\", \"longitude\": \"-65.7012182\", \"timeZone\": \"America/Pangnirtung\" }, { \"city_id\": \"224\", \"ch_area\": \"佩塔卢马\", \"ch_nation\": \"美国\", \"en_area\": \"Petaluma\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.232417\", \"longitude\": \"-122.6366524\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"578\", \"ch_area\": \"蓬塔阿雷纳斯\", \"ch_nation\": \"智利\", \"en_area\": \"Punta Arenas\", \"en_nation\": \"Chile\", \"latitude\": \"-53.1638329\", \"longitude\": \"-70.9170683\", \"timeZone\": \"America/Punta_Arenas\" }, { \"city_id\": \"231\", \"ch_area\": \"蓬塔德尔加达\", \"ch_nation\": \"葡萄牙\", \"en_area\": \"Ponta Delgada\", \"en_nation\": \"Portugal\", \"latitude\": \"37.7394207\", \"longitude\": \"-25.6686725\", \"timeZone\": \"Atlantic/Azores\" }, { \"city_id\": \"228\", \"ch_area\": \"匹兹堡\", \"ch_nation\": \"美国\", \"en_area\": \"Pittsburgh\", \"en_nation\": \"U.S.A.\", \"latitude\": \"40.4406248\", \"longitude\": \"-79.9958864\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"236\", \"ch_area\": \"平壤\", \"ch_nation\": \"朝鲜\", \"en_area\": \"Pyongyang\", \"en_nation\": \"North Korea\", \"latitude\": \"39.0392193\", \"longitude\": \"125.7625241\", \"timeZone\": \"Asia/Pyongyang\" }, { \"city_id\": \"223\", \"ch_area\": \"珀斯\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Perth\", \"en_nation\": \"Australia\", \"latitude\": \"-31.9523123\", \"longitude\": \"115.861309\", \"timeZone\": \"Australia/Perth\" }, { \"city_id\": \"569\", \"ch_area\": \"普埃布拉\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Puebla\", \"en_nation\": \"Mexico\", \"latitude\": \"19.0414398\", \"longitude\": \"-98.2062727\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"441\", \"ch_area\": \"普拉亚\", \"ch_nation\": \"佛得角\", \"en_area\": \"Praia\", \"en_nation\": \"Cape Verde\", \"latitude\": \"14.93305\", \"longitude\": \"-23.5133267\", \"timeZone\": \"Atlantic/Cape_Verde\" }, { \"city_id\": \"229\", \"ch_area\": \"普莱森顿\", \"ch_nation\": \"美国\", \"en_area\": \"Pleasanton\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.6604484\", \"longitude\": \"-121.8757968\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"334\", \"ch_area\": \"普里什蒂纳\", \"ch_nation\": \"科索沃\", \"en_area\": \"Pristina\", \"en_nation\": \"Kosovo\", \"latitude\": \"42.6629138\", \"longitude\": \"21.1655028\", \"timeZone\": \"Europe/Belgrade\" }, { \"city_id\": \"488\", \"ch_area\": \"普利茅斯\", \"ch_nation\": \"蒙特塞拉特\", \"en_area\": \"Plymouth\", \"en_nation\": \"Montserrat\", \"latitude\": \"41.9584457\", \"longitude\": \"-70.6672621\", \"timeZone\": \"America/Montserrat\" }, { \"city_id\": \"494\", \"ch_area\": \"奇瓦瓦\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Chihuahua\", \"en_nation\": \"Mexico\", \"latitude\": \"28.6329957\", \"longitude\": \"-106.0691004\", \"timeZone\": \"America/Chihuahua\" }, { \"city_id\": \"486\", \"ch_area\": \"乔巴山\", \"ch_nation\": \"蒙古\", \"en_area\": \"Choibalsan\", \"en_nation\": \"Mongolia\", \"latitude\": \"48.0951271\", \"longitude\": \"114.5356247\", \"timeZone\": \"Asia/Choibalsan\" }, { \"city_id\": \"476\", \"ch_area\": \"乔治城\", \"ch_nation\": \"开曼群岛\", \"en_area\": \"George Town\", \"en_nation\": \"Cayman Islands\", \"latitude\": \"38.9097057\", \"longitude\": \"-77.0653565\", \"timeZone\": \"America/Cayman\" }, { \"city_id\": \"104\", \"ch_area\": \"乔治敦\", \"ch_nation\": \"圭亚那\", \"en_area\": \"Georgetown\", \"en_nation\": \"Guyana\", \"latitude\": \"41.4818543\", \"longitude\": \"-81.8263727\", \"timeZone\": \"America/Guyana\" }, { \"city_id\": \"461\", \"ch_area\": \"青岛\", \"ch_nation\": \"中国\", \"en_area\": \"Qingdao\", \"en_nation\": \"China\", \"latitude\": \"36.067108\", \"longitude\": \"120.382609\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"359\", \"ch_area\": \"清迈\", \"ch_nation\": \"泰国\", \"en_area\": \"Chiang Mai\", \"en_nation\": \"Thailand\", \"latitude\": \"18.7883439\", \"longitude\": \"98.9853008\", \"timeZone\": \"Asia/Bangkok\" }, { \"city_id\": \"103\", \"ch_area\": \"热那亚\", \"ch_nation\": \"意大利\", \"en_area\": \"Genoa\", \"en_nation\": \"Italy\", \"latitude\": \"44.4056499\", \"longitude\": \"8.946256\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"102\", \"ch_area\": \"日内瓦\", \"ch_nation\": \"瑞士\", \"en_area\": \"Geneva\", \"en_nation\": \"Switzerland\", \"latitude\": \"46.2043907\", \"longitude\": \"6.1431577\", \"timeZone\": \"Europe/Zurich\" }, { \"city_id\": \"545\", \"ch_area\": \"撒马尔罕\", \"ch_nation\": \"乌兹别克斯坦\", \"en_area\": \"Samarkand\", \"en_nation\": \"Uzbekistan\", \"latitude\": \"39.627012\", \"longitude\": \"66.9749731\", \"timeZone\": \"Asia/Samarkand\" }, { \"city_id\": \"381\", \"ch_area\": \"萨尔塔\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Salta\", \"en_nation\": \"Argentina\", \"latitude\": \"-24.7821269\", \"longitude\": \"-65.4231976\", \"timeZone\": \"America/Argentina/Jujuy\" }, { \"city_id\": \"366\", \"ch_area\": \"萨尔瓦多\", \"ch_nation\": \"巴西\", \"en_area\": \"Salvador\", \"en_nation\": \"Brazil\", \"latitude\": \"13.794185\", \"longitude\": \"-88.89653\", \"timeZone\": \"America/Bahia\" }, { \"city_id\": \"348\", \"ch_area\": \"萨尔兹堡\", \"ch_nation\": \"奥地利\", \"en_area\": \"Salzburg\", \"en_nation\": \"Austria\", \"latitude\": \"47.80949\", \"longitude\": \"13.05501\", \"timeZone\": \"Europe/Vienna\" }, { \"city_id\": \"323\", \"ch_area\": \"萨格勒布\", \"ch_nation\": \"克罗地亚\", \"en_area\": \"Zagreb\", \"en_nation\": \"Croatia\", \"latitude\": \"45.8150108\", \"longitude\": \"15.9819189\", \"timeZone\": \"Europe/Zagreb\" }, { \"city_id\": \"347\", \"ch_area\": \"萨拉热窝\", \"ch_nation\": \"波斯尼亚和黑塞哥维那\", \"en_area\": \"Sarajevo\", \"en_nation\": \"Bosnia and Herzegovina\", \"latitude\": \"43.8562586\", \"longitude\": \"18.4130763\", \"timeZone\": \"Europe/Sarajevo\" }, { \"city_id\": \"1941\", \"ch_area\": \"萨拉托夫\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Saratov\", \"en_nation\": \"Russia\", \"latitude\": \"51.5461754\", \"longitude\": \"46.0154123\", \"timeZone\": \"Europe/Saratov\" }, { \"city_id\": \"250\", \"ch_area\": \"萨马拉\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Samara\", \"en_nation\": \"Russia\", \"latitude\": \"53.203772\", \"longitude\": \"50.1606382\", \"timeZone\": \"Europe/Samara\" }, { \"city_id\": \"268\", \"ch_area\": \"萨那\", \"ch_nation\": \"也门\", \"en_area\": \"Sanaa\", \"en_nation\": \"Yemen\", \"latitude\": \"15.3694451\", \"longitude\": \"44.1910066\", \"timeZone\": \"Asia/Aden\" }, { \"city_id\": \"352\", \"ch_area\": \"萨斯卡通\", \"ch_nation\": \"加拿大\", \"en_area\": \"Saskatoon\", \"en_nation\": \"Canada\", \"latitude\": \"52.157902\", \"longitude\": \"-106.6701577\", \"timeZone\": \"America/Regina\" }, { \"city_id\": \"487\", \"ch_area\": \"塞班\", \"ch_nation\": \"北马里亚纳群岛\", \"en_area\": \"Saipan\", \"en_nation\": \"Northern Mariana Islands\", \"latitude\": \"15.1850483\", \"longitude\": \"145.7467259\", \"timeZone\": \"Pacific/Saipan\" }, { \"city_id\": \"338\", \"ch_area\": \"塞萨洛尼基\", \"ch_nation\": \"希腊\", \"en_area\": \"Thessaloniki\", \"en_nation\": \"Greece\", \"latitude\": \"40.6400629\", \"longitude\": \"22.9444191\", \"timeZone\": \"Europe/Athens\" }, { \"city_id\": \"419\", \"ch_area\": \"桑德贝\", \"ch_nation\": \"加拿大\", \"en_area\": \"Thunder Bay\", \"en_nation\": \"Canada\", \"latitude\": \"48.3808951\", \"longitude\": \"-89.2476823\", \"timeZone\": \"America/Thunder_Bay\" }, { \"city_id\": \"284\", \"ch_area\": \"桑尼维尔\", \"ch_nation\": \"美国\", \"en_area\": \"Sunnyvale\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.36883\", \"longitude\": \"-122.0363496\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"368\", \"ch_area\": \"山谷\", \"ch_nation\": \"安圭拉\", \"en_area\": \"The Valley\", \"en_nation\": \"Anguilla\", \"latitude\": \"34.0875122\", \"longitude\": \"-117.3107634\", \"timeZone\": \"America/Anguilla\" }, { \"city_id\": \"186\", \"ch_area\": \"山景城\", \"ch_nation\": \"美国\", \"en_area\": \"Mountain View\", \"en_nation\": \"U.S.A.\", \"latitude\": \"35.3266274\", \"longitude\": \"-106.5871328\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"274\", \"ch_area\": \"上海\", \"ch_nation\": \"中国\", \"en_area\": \"Shanghai\", \"en_nation\": \"China\", \"latitude\": \"31.230416\", \"longitude\": \"121.473701\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"536\", \"ch_area\": \"申特城\", \"ch_nation\": \"美国\", \"en_area\": \"Center\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.094575\", \"longitude\": \"-95.7099047\", \"timeZone\": \"America/North_Dakota/Center\" }, { \"city_id\": \"276\", \"ch_area\": \"深圳\", \"ch_nation\": \"中国\", \"en_area\": \"Shenzhen\", \"en_nation\": \"China\", \"latitude\": \"22.543096\", \"longitude\": \"114.057865\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"252\", \"ch_area\": \"圣安东尼奥\", \"ch_nation\": \"美国\", \"en_area\": \"San Antonio, TX\", \"en_nation\": \"U.S.A.\", \"latitude\": \"29.4241219\", \"longitude\": \"-98.4936282\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"263\", \"ch_area\": \"圣巴勃罗\", \"ch_nation\": \"美国\", \"en_area\": \"San Pablo\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.9621457\", \"longitude\": \"-122.3455263\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"271\", \"ch_area\": \"圣保罗\", \"ch_nation\": \"巴西\", \"en_area\": \"São Paulo\", \"en_nation\": \"Brazil\", \"latitude\": \"-21.2922457\", \"longitude\": \"-50.3428431\", \"timeZone\": \"America/Sao_Paulo\" }, { \"city_id\": \"283\", \"ch_area\": \"圣彼得堡\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"St. Petersburg\", \"en_nation\": \"Russia\", \"latitude\": \"27.7676008\", \"longitude\": \"-82.6402915\", \"timeZone\": \"Europe/Moscow\" }, { \"city_id\": \"454\", \"ch_area\": \"圣彼得港\", \"ch_nation\": \"格恩西岛\", \"en_area\": \"Saint Peter Port\", \"en_nation\": \"Guernsey\", \"latitude\": \"49.4541677\", \"longitude\": \"-2.5497069\", \"timeZone\": \"Europe/Guernsey\" }, { \"city_id\": \"253\", \"ch_area\": \"圣布鲁诺\", \"ch_nation\": \"美国\", \"en_area\": \"San Bruno\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.6304904\", \"longitude\": \"-122.4110835\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"248\", \"ch_area\": \"圣但尼\", \"ch_nation\": \"留尼汪\", \"en_area\": \"Saint-Denis\", \"en_nation\": \"Reunion Island\", \"latitude\": \"48.936181\", \"longitude\": \"2.357443\", \"timeZone\": \"Indian/Reunion\" }, { \"city_id\": \"473\", \"ch_area\": \"圣诞岛\", \"ch_nation\": \"基里巴斯\", \"en_area\": \"Kiritimati\", \"en_nation\": \"Kiribati\", \"latitude\": \"1.8721347\", \"longitude\": \"-157.4278119\", \"timeZone\": \"Pacific/Kiritimati\" }, { \"city_id\": \"251\", \"ch_area\": \"圣地亚哥\", \"ch_nation\": \"美国\", \"en_area\": \"San Diego, CA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"32.715738\", \"longitude\": \"-117.1610838\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"269\", \"ch_area\": \"圣地亚哥\", \"ch_nation\": \"智利\", \"en_area\": \"Santiago\", \"en_nation\": \"Chile\", \"latitude\": \"-33.4488897\", \"longitude\": \"-70.6692655\", \"timeZone\": \"America/Santiago\" }, { \"city_id\": \"523\", \"ch_area\": \"圣多美\", \"ch_nation\": \"圣多美和普林西比\", \"en_area\": \"São Tomé\", \"en_nation\": \"São Tomé and Príncipe\", \"latitude\": \"0.3301924\", \"longitude\": \"6.733343\", \"timeZone\": \"Africa/Sao_Tome\" }, { \"city_id\": \"270\", \"ch_area\": \"圣多明各\", \"ch_nation\": \"多米尼加共和国\", \"en_area\": \"Santo Domingo\", \"en_nation\": \"Dominican Republic\", \"latitude\": \"18.4860575\", \"longitude\": \"-69.9312117\", \"timeZone\": \"America/Santo_Domingo\" }, { \"city_id\": \"256\", \"ch_area\": \"圣何塞\", \"ch_nation\": \"美国\", \"en_area\": \"San Jose, CA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.3382082\", \"longitude\": \"-121.8863286\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"257\", \"ch_area\": \"圣何塞\", \"ch_nation\": \"哥斯达黎加\", \"en_area\": \"San José\", \"en_nation\": \"Costa Rica\", \"latitude\": \"37.3382082\", \"longitude\": \"-121.8863286\", \"timeZone\": \"America/Costa_Rica\" }, { \"city_id\": \"470\", \"ch_area\": \"圣赫利尔\", \"ch_nation\": \"泽西行政区\", \"en_area\": \"St. Helier\", \"en_nation\": \"Bailiwick of Jersey\", \"latitude\": \"49.1805019\", \"longitude\": \"-2.103233\", \"timeZone\": \"Europe/Jersey\" }, { \"city_id\": \"258\", \"ch_area\": \"圣胡安\", \"ch_nation\": \"波多黎各\", \"en_area\": \"San Juan\", \"en_nation\": \"Puerto Rico\", \"latitude\": \"18.4655394\", \"longitude\": \"-66.1057355\", \"timeZone\": \"America/Puerto_Rico\" }, { \"city_id\": \"386\", \"ch_area\": \"圣胡安\", \"ch_nation\": \"阿根廷\", \"en_area\": \"San Juan\", \"en_nation\": \"Argentina\", \"latitude\": \"18.4655394\", \"longitude\": \"-66.1057355\", \"timeZone\": \"America/Argentina/San_Juan\" }, { \"city_id\": \"254\", \"ch_area\": \"圣卡洛斯\", \"ch_nation\": \"美国\", \"en_area\": \"San Carlos\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.5071591\", \"longitude\": \"-122.2605222\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"266\", \"ch_area\": \"圣克拉拉\", \"ch_nation\": \"美国\", \"en_area\": \"Santa Clara\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.3541079\", \"longitude\": \"-121.9552356\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"267\", \"ch_area\": \"圣克鲁斯\", \"ch_nation\": \"美国\", \"en_area\": \"Santa Cruz\", \"en_nation\": \"U.S.A.\", \"latitude\": \"36.9741171\", \"longitude\": \"-122.0307963\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"264\", \"ch_area\": \"圣拉菲尔\", \"ch_nation\": \"美国\", \"en_area\": \"San Rafael\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.9735346\", \"longitude\": \"-122.5310874\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"265\", \"ch_area\": \"圣拉蒙\", \"ch_nation\": \"美国\", \"en_area\": \"San Ramon\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.7643595\", \"longitude\": \"-121.9539616\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"259\", \"ch_area\": \"圣莱安德罗\", \"ch_nation\": \"美国\", \"en_area\": \"San Leandro\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.7257663\", \"longitude\": \"-122.1568554\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"282\", \"ch_area\": \"圣路易斯\", \"ch_nation\": \"美国\", \"en_area\": \"St. Louis\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.6270025\", \"longitude\": \"-90.1994042\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"388\", \"ch_area\": \"圣路易斯\", \"ch_nation\": \"阿根廷\", \"en_area\": \"San Luis\", \"en_nation\": \"Argentina\", \"latitude\": \"29.2725405\", \"longitude\": \"-94.8182391\", \"timeZone\": \"America/Argentina/San_Luis\" }, { \"city_id\": \"571\", \"ch_area\": \"圣路易斯波托西\", \"ch_nation\": \"墨西哥\", \"en_area\": \"San Luis Potosí\", \"en_nation\": \"Mexico\", \"latitude\": \"22.1564699\", \"longitude\": \"-100.9855409\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"261\", \"ch_area\": \"圣马力诺\", \"ch_nation\": \"意大利\", \"en_area\": \"San Marino\", \"en_nation\": \"San Marino\", \"latitude\": \"43.94236\", \"longitude\": \"12.457777\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"262\", \"ch_area\": \"圣马特奥\", \"ch_nation\": \"美国\", \"en_area\": \"San Mateo\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.5629917\", \"longitude\": \"-122.3255254\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"507\", \"ch_area\": \"圣皮埃尔\", \"ch_nation\": \"圣皮埃尔和密克隆\", \"en_area\": \"Saint-Pierre\", \"en_nation\": \"Saint Pierre and Miquelon\", \"latitude\": \"46.7758459\", \"longitude\": \"-56.1806363\", \"timeZone\": \"America/Miquelon\" }, { \"city_id\": \"453\", \"ch_area\": \"圣乔治\", \"ch_nation\": \"格林纳达\", \"en_area\": \"St. Georges\", \"en_nation\": \"Grenada\", \"latitude\": \"36.1197257\", \"longitude\": \"-86.8531678\", \"timeZone\": \"America/Grenada\" }, { \"city_id\": \"260\", \"ch_area\": \"圣萨尔瓦多\", \"ch_nation\": \"萨尔瓦多\", \"en_area\": \"San Salvador\", \"en_nation\": \"El Salvador\", \"latitude\": \"13.6929403\", \"longitude\": \"-89.2181911\", \"timeZone\": \"America/El_Salvador\" }, { \"city_id\": \"382\", \"ch_area\": \"圣萨尔瓦多德胡胡伊\", \"ch_nation\": \"阿根廷\", \"en_area\": \"San Salvador de Jujuy\", \"en_nation\": \"Argentina\", \"latitude\": \"-24.1857864\", \"longitude\": \"-65.2994767\", \"timeZone\": \"America/Argentina/Jujuy\" }, { \"city_id\": \"408\", \"ch_area\": \"圣塔伦\", \"ch_nation\": \"巴西\", \"en_area\": \"Santarém\", \"en_nation\": \"Brazil\", \"latitude\": \"39.2366618\", \"longitude\": \"-8.6860119\", \"timeZone\": \"America/Santarem\" }, { \"city_id\": \"346\", \"ch_area\": \"圣伊萨贝尔\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Santa Isabel\", \"en_nation\": \"Mexico\", \"latitude\": \"32.6326872\", \"longitude\": \"-115.5774649\", \"timeZone\": \"America/Santa_Isabel\" }, { \"city_id\": \"342\", \"ch_area\": \"圣约翰堡\", \"ch_nation\": \"加拿大\", \"en_area\": \"Fort St. John\", \"en_nation\": \"Canada\", \"latitude\": \"56.252423\", \"longitude\": \"-120.846409\", \"timeZone\": \"America/Dawson_Creek\" }, { \"city_id\": \"281\", \"ch_area\": \"圣约翰斯\", \"ch_nation\": \"加拿大\", \"en_area\": \"St. John's\", \"en_nation\": \"Canada\", \"latitude\": \"47.5615096\", \"longitude\": \"-52.7125768\", \"timeZone\": \"America/St_Johns\" }, { \"city_id\": \"367\", \"ch_area\": \"圣约翰斯\", \"ch_nation\": \"安提瓜和巴布达\", \"en_area\": \"St. John's\", \"en_nation\": \"Antigua and Barbuda\", \"latitude\": \"47.5615096\", \"longitude\": \"-52.7125768\", \"timeZone\": \"America/Antigua\" }, { \"city_id\": \"302\", \"ch_area\": \"世界标准时间\", \"ch_nation\": \"\", \"en_area\": \"UTC\", \"en_nation\": \"\", \"latitude\": \"\", \"longitude\": \"\", \"timeZone\": \"UTC\" }, { \"city_id\": \"273\", \"ch_area\": \"首尔\", \"ch_nation\": \"韩国\", \"en_area\": \"Seoul\", \"en_nation\": \"South Korea\", \"latitude\": \"37.566535\", \"longitude\": \"126.9779692\", \"timeZone\": \"Asia/Seoul\" }, { \"city_id\": \"285\", \"ch_area\": \"斯德哥尔摩\", \"ch_nation\": \"瑞典\", \"en_area\": \"Stockholm\", \"en_nation\": \"Sweden\", \"latitude\": \"59.3293235\", \"longitude\": \"18.0685808\", \"timeZone\": \"Europe/Stockholm\" }, { \"city_id\": \"279\", \"ch_area\": \"斯科里普\", \"ch_nation\": \"北马其顿\", \"en_area\": \"Skopje\", \"en_nation\": \"Macedonia\", \"latitude\": \"41.9981294\", \"longitude\": \"21.4254355\", \"timeZone\": \"Europe/Skopje\" }, { \"city_id\": \"400\", \"ch_area\": \"斯里巴加湾\", \"ch_nation\": \"文莱\", \"en_area\": \"Bandar Seri Begawan\", \"en_nation\": \"Brunei\", \"latitude\": \"4.9030522\", \"longitude\": \"114.939821\", \"timeZone\": \"Asia/Brunei\" }, { \"city_id\": \"448\", \"ch_area\": \"斯坦利\", \"ch_nation\": \"福克兰群岛\", \"en_area\": \"Stanley\", \"en_nation\": \"Falkland Islands\", \"latitude\": \"36.1304285\", \"longitude\": \"-95.9654332\", \"timeZone\": \"Atlantic/Stanley\" }, { \"city_id\": \"426\", \"ch_area\": \"斯威夫特卡伦特\", \"ch_nation\": \"加拿大\", \"en_area\": \"Swift Current\", \"en_nation\": \"Canada\", \"latitude\": \"50.285069\", \"longitude\": \"-107.7971722\", \"timeZone\": \"America/Swift_Current\" }, { \"city_id\": \"278\", \"ch_area\": \"苏福尔斯\", \"ch_nation\": \"美国\", \"en_area\": \"Sioux Falls\", \"en_nation\": \"U.S.A.\", \"latitude\": \"43.5460223\", \"longitude\": \"-96.731265\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"324\", \"ch_area\": \"苏黎世\", \"ch_nation\": \"瑞士\", \"en_area\": \"Zurich\", \"en_nation\": \"Switzerland\", \"latitude\": \"38.924251\", \"longitude\": \"-94.665666\", \"timeZone\": \"Europe/Zurich\" }, { \"city_id\": \"286\", \"ch_area\": \"苏瓦\", \"ch_nation\": \"斐济\", \"en_area\": \"Suva\", \"en_nation\": \"Fiji\", \"latitude\": \"-18.1405049\", \"longitude\": \"178.4232507\", \"timeZone\": \"Pacific/Fiji\" }, { \"city_id\": \"280\", \"ch_area\": \"索菲亚\", \"ch_nation\": \"保加利亚\", \"en_area\": \"Sofia\", \"en_nation\": \"Bulgaria\", \"latitude\": \"42.6977082\", \"longitude\": \"23.3218675\", \"timeZone\": \"Europe/Sofia\" }, { \"city_id\": \"471\", \"ch_area\": \"塔拉瓦\", \"ch_nation\": \"基里巴斯\", \"en_area\": \"Tarawa\", \"en_nation\": \"Kiribati\", \"latitude\": \"1.4518171\", \"longitude\": \"172.9716617\", \"timeZone\": \"Pacific/Tarawa\" }, { \"city_id\": \"289\", \"ch_area\": \"塔林\", \"ch_nation\": \"爱沙尼亚\", \"en_area\": \"Tallinn\", \"en_nation\": \"Estonia\", \"latitude\": \"59.4369608\", \"longitude\": \"24.7535747\", \"timeZone\": \"Europe/Tallinn\" }, { \"city_id\": \"290\", \"ch_area\": \"塔什干\", \"ch_nation\": \"乌兹别克斯坦\", \"en_area\": \"Tashkent\", \"en_nation\": \"Uzbekistan\", \"latitude\": \"41.2994958\", \"longitude\": \"69.2400734\", \"timeZone\": \"Asia/Tashkent\" }, { \"city_id\": \"219\", \"ch_area\": \"塔希提岛\", \"ch_nation\": \"法属波利尼西亚\", \"en_area\": \"Tahiti\", \"en_nation\": \"French Polynesia\", \"latitude\": \"-17.6509195\", \"longitude\": \"-149.4260421\", \"timeZone\": \"Pacific/Tahiti\" }, { \"city_id\": \"503\", \"ch_area\": \"塔伊奥哈\", \"ch_nation\": \"法属波利尼西亚\", \"en_area\": \"Taiohae\", \"en_nation\": \"French Polynesia\", \"latitude\": \"-8.9118982\", \"longitude\": \"-140.098379\", \"timeZone\": \"Pacific/Marquesas\" }, { \"city_id\": \"288\", \"ch_area\": \"台湾台北\", \"ch_nation\": \"中国\", \"en_area\": \"Taipei\", \"en_nation\": \"China\", \"latitude\": \"25.0329636\", \"longitude\": \"121.5654268\", \"timeZone\": \"Asia/Taipei\" }, { \"city_id\": \"233\", \"ch_area\": \"太子港\", \"ch_nation\": \"海地\", \"en_area\": \"Port-au-Prince\", \"en_nation\": \"Haiti\", \"latitude\": \"18.594395\", \"longitude\": \"-72.3074326\", \"timeZone\": \"America/Port-au-Prince\" }, { \"city_id\": \"119\", \"ch_area\": \"檀香山\", \"ch_nation\": \"美国\", \"en_area\": \"Honolulu\", \"en_nation\": \"U.S.A.\", \"latitude\": \"21.3069444\", \"longitude\": \"-157.8583333\", \"timeZone\": \"Pacific/Honolulu\" }, { \"city_id\": \"533\", \"ch_area\": \"特尔城\", \"ch_nation\": \"美国\", \"en_area\": \"Tell City\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.9514447\", \"longitude\": \"-86.7677663\", \"timeZone\": \"America/Indiana/Tell_City\" }, { \"city_id\": \"291\", \"ch_area\": \"特古西加尔巴\", \"ch_nation\": \"洪都拉斯\", \"en_area\": \"Tegucigalpa\", \"en_nation\": \"Honduras\", \"latitude\": \"14.065049\", \"longitude\": \"-87.1715002\", \"timeZone\": \"America/Tegucigalpa\" }, { \"city_id\": \"340\", \"ch_area\": \"特拉维夫\", \"ch_nation\": \"以色列\", \"en_area\": \"Tel Aviv\", \"en_nation\": \"Israel\", \"latitude\": \"32.0852999\", \"longitude\": \"34.7817676\", \"timeZone\": \"Asia/Jerusalem\" }, { \"city_id\": \"297\", \"ch_area\": \"特雷埃\", \"ch_nation\": \"法国\", \"en_area\": \"Tréhet\", \"en_nation\": \"France\", \"latitude\": \"47.733106\", \"longitude\": \"0.622018\", \"timeZone\": \"Europe/Paris\" }, { \"city_id\": \"294\", \"ch_area\": \"天津\", \"ch_nation\": \"中国\", \"en_area\": \"Tianjin\", \"en_nation\": \"China\", \"latitude\": \"42.439344\", \"longitude\": \"-76.49695\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"335\", \"ch_area\": \"廷布\", \"ch_nation\": \"不丹\", \"en_area\": \"Thimphu\", \"en_nation\": \"Bhutan\", \"latitude\": \"27.4712216\", \"longitude\": \"89.6339041\", \"timeZone\": \"Asia/Dhaka\" }, { \"city_id\": \"299\", \"ch_area\": \"突尼斯\", \"ch_nation\": \"突尼斯\", \"en_area\": \"Tunis\", \"en_nation\": \"Tunisia\", \"latitude\": \"36.8064948\", \"longitude\": \"10.1815316\", \"timeZone\": \"Africa/Tunis\" }, { \"city_id\": \"383\", \"ch_area\": \"图库曼\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Tucaman\", \"en_nation\": \"Argentina\", \"latitude\": \"-26.8382241\", \"longitude\": \"-65.1678039\", \"timeZone\": \"America/Argentina/Tucuman\" }, { \"city_id\": \"465\", \"ch_area\": \"图勒\", \"ch_nation\": \"格陵兰\", \"en_area\": \"Qaanaaq, Thule\", \"en_nation\": \"Greenland\", \"latitude\": \"77.4670434\", \"longitude\": \"-69.2284827\", \"timeZone\": \"America/Thule\" }, { \"city_id\": \"353\", \"ch_area\": \"托尔斯港\", \"ch_nation\": \"法罗群岛\", \"en_area\": \"Tórshavn\", \"en_nation\": \"Faroe Islands\", \"latitude\": \"62.0107248\", \"longitude\": \"-6.7740852\", \"timeZone\": \"Atlantic/Faroe\" }, { \"city_id\": \"573\", \"ch_area\": \"托雷翁\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Torreón\", \"en_nation\": \"Mexico\", \"latitude\": \"25.5428443\", \"longitude\": \"-103.4067861\", \"timeZone\": \"America/Monterrey\" }, { \"city_id\": \"572\", \"ch_area\": \"托卢卡\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Toluca\", \"en_nation\": \"Mexico\", \"latitude\": \"19.2826098\", \"longitude\": \"-99.6556653\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"303\", \"ch_area\": \"瓦杜兹\", \"ch_nation\": \"列支敦士登\", \"en_area\": \"Vaduz\", \"en_nation\": \"Liechtenstein\", \"latitude\": \"47.1410303\", \"longitude\": \"9.5209277\", \"timeZone\": \"Europe/Vaduz\" }, { \"city_id\": \"212\", \"ch_area\": \"瓦加杜古\", \"ch_nation\": \"布基纳法索\", \"en_area\": \"Ouagadougou\", \"en_nation\": \"Burkina Faso\", \"latitude\": \"12.3714277\", \"longitude\": \"-1.5196603\", \"timeZone\": \"Africa/Ouagadougou\" }, { \"city_id\": \"305\", \"ch_area\": \"瓦莱塔\", \"ch_nation\": \"马耳他\", \"en_area\": \"Valletta\", \"en_nation\": \"Malta\", \"latitude\": \"35.8989085\", \"longitude\": \"14.5145528\", \"timeZone\": \"Europe/Malta\" }, { \"city_id\": \"304\", \"ch_area\": \"瓦列霍\", \"ch_nation\": \"美国\", \"en_area\": \"Vallejo\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.1040864\", \"longitude\": \"-122.2566367\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"326\", \"ch_area\": \"万象\", \"ch_nation\": \"老挝\", \"en_area\": \"Vientiane\", \"en_nation\": \"Laos\", \"latitude\": \"17.9757058\", \"longitude\": \"102.6331035\", \"timeZone\": \"Asia/Bangkok\" }, { \"city_id\": \"107\", \"ch_area\": \"危地马拉城\", \"ch_nation\": \"危地马拉\", \"en_area\": \"Guatemala City\", \"en_nation\": \"Guatemala\", \"latitude\": \"14.6349149\", \"longitude\": \"-90.5068824\", \"timeZone\": \"America/Guatemala\" }, { \"city_id\": \"442\", \"ch_area\": \"威廉斯塔德\", \"ch_nation\": \"库拉索\", \"en_area\": \"Willemstad\", \"en_nation\": \"Curacao\", \"latitude\": \"12.1224221\", \"longitude\": \"-68.8824233\", \"timeZone\": \"America/Curacao\" }, { \"city_id\": \"529\", \"ch_area\": \"威纳马克\", \"ch_nation\": \"美国\", \"en_area\": \"Winamac\", \"en_nation\": \"U.S.A.\", \"latitude\": \"41.0514299\", \"longitude\": \"-86.6030648\", \"timeZone\": \"America/Indiana/Winamac\" }, { \"city_id\": \"532\", \"ch_area\": \"韦韦\", \"ch_nation\": \"美国\", \"en_area\": \"Vevay\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.7478401\", \"longitude\": \"-85.0671725\", \"timeZone\": \"America/Indiana/Vevay\" }, { \"city_id\": \"308\", \"ch_area\": \"维多利亚\", \"ch_nation\": \"塞舌尔\", \"en_area\": \"Victoria\", \"en_nation\": \"Seychelles\", \"latitude\": \"-36.9847807\", \"longitude\": \"143.3906074\", \"timeZone\": \"Indian/Mahe\" }, { \"city_id\": \"310\", \"ch_area\": \"维尔纽斯\", \"ch_nation\": \"立陶宛\", \"en_area\": \"Vilnius\", \"en_nation\": \"Lithuania\", \"latitude\": \"54.6871555\", \"longitude\": \"25.2796514\", \"timeZone\": \"Europe/Vilnius\" }, { \"city_id\": \"307\", \"ch_area\": \"维罗纳\", \"ch_nation\": \"意大利\", \"en_area\": \"Verona\", \"en_nation\": \"Italy\", \"latitude\": \"45.4383842\", \"longitude\": \"10.9916215\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"309\", \"ch_area\": \"维也纳\", \"ch_nation\": \"奥地利\", \"en_area\": \"Vienna\", \"en_nation\": \"Austria\", \"latitude\": \"48.2081743\", \"longitude\": \"16.3738189\", \"timeZone\": \"Europe/Vienna\" }, { \"city_id\": \"363\", \"ch_area\": \"温得和克\", \"ch_nation\": \"纳米比亚\", \"en_area\": \"Windhoek\", \"en_nation\": \"Namibia\", \"latitude\": \"-22.5608807\", \"longitude\": \"17.0657549\", \"timeZone\": \"Africa/Windhoek\" }, { \"city_id\": \"306\", \"ch_area\": \"温哥华\", \"ch_nation\": \"加拿大\", \"en_area\": \"Vancouver\", \"en_nation\": \"Canada\", \"latitude\": \"49.2827291\", \"longitude\": \"-123.1207375\", \"timeZone\": \"America/Vancouver\" }, { \"city_id\": \"317\", \"ch_area\": \"温尼伯\", \"ch_nation\": \"加拿大\", \"en_area\": \"Winnipeg\", \"en_nation\": \"Canada\", \"latitude\": \"49.895136\", \"longitude\": \"-97.1383744\", \"timeZone\": \"America/Winnipeg\" }, { \"city_id\": \"512\", \"ch_area\": \"温森斯\", \"ch_nation\": \"美国\", \"en_area\": \"Vincennes\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.677269\", \"longitude\": \"-87.5286325\", \"timeZone\": \"America/Indiana/Vincennes\" }, { \"city_id\": \"313\", \"ch_area\": \"沃尔纳特克里克\", \"ch_nation\": \"美国\", \"en_area\": \"Walnut Creek\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.9100783\", \"longitude\": \"-122.0651819\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"376\", \"ch_area\": \"沃斯托站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Vostok Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-78.4644829\", \"longitude\": \"106.83392\", \"timeZone\": \"Antarctica/Vostok\" }, { \"city_id\": \"211\", \"ch_area\": \"渥太华\", \"ch_nation\": \"加拿大\", \"en_area\": \"Ottawa\", \"en_nation\": \"Canada\", \"latitude\": \"45.4215296\", \"longitude\": \"-75.6971931\", \"timeZone\": \"America/Toronto\" }, { \"city_id\": \"301\", \"ch_area\": \"乌兰巴托\", \"ch_nation\": \"蒙古\", \"en_area\": \"Ulaanbaatar\", \"en_nation\": \"Mongolia\", \"latitude\": \"47.8863988\", \"longitude\": \"106.9057439\", \"timeZone\": \"Asia/Ulaanbaatar\" }, { \"city_id\": \"439\", \"ch_area\": \"乌鲁木齐\", \"ch_nation\": \"中国\", \"en_area\": \"Urumqi\", \"en_nation\": \"China\", \"latitude\": \"43.825592\", \"longitude\": \"87.616848\", \"timeZone\": \"Asia/Urumqi\" }, { \"city_id\": \"390\", \"ch_area\": \"乌斯怀亚\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Ushuaia\", \"en_nation\": \"Argentina\", \"latitude\": \"-54.8019121\", \"longitude\": \"-68.3029511\", \"timeZone\": \"America/Argentina/Ushuaia\" }, { \"city_id\": \"272\", \"ch_area\": \"西雅图\", \"ch_nation\": \"美国\", \"en_area\": \"Seattle, WA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"47.6062095\", \"longitude\": \"-122.3320708\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"510\", \"ch_area\": \"希伯伦\", \"ch_nation\": \"巴勒斯坦领土\", \"en_area\": \"Hebron\", \"en_nation\": \"Palestinian Territories\", \"latitude\": \"31.532569\", \"longitude\": \"35.099826\", \"timeZone\": \"Asia/Hebron\" }, { \"city_id\": \"115\", \"ch_area\": \"希尔兹堡\", \"ch_nation\": \"美国\", \"en_area\": \"Healdsburg\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.6104658\", \"longitude\": \"-122.8691609\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"287\", \"ch_area\": \"悉尼\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Sydney\", \"en_nation\": \"Australia\", \"latitude\": \"-33.8688197\", \"longitude\": \"151.2092955\", \"timeZone\": \"Australia/Sydney\" }, { \"city_id\": \"541\", \"ch_area\": \"锡特卡\", \"ch_nation\": \"美国\", \"en_area\": \"Sitka\", \"en_nation\": \"U.S.A.\", \"latitude\": \"57.0530556\", \"longitude\": \"-135.33\", \"timeZone\": \"America/Sitka\" }, { \"city_id\": \"524\", \"ch_area\": \"下太子区\", \"ch_nation\": \"荷属圣马丁\", \"en_area\": \"Lower Prince's Quarter\", \"en_nation\": \"Sint Maarten\", \"latitude\": \"18.0513455\", \"longitude\": \"-63.0471371\", \"timeZone\": \"America/Lower_Princes\" }, { \"city_id\": \"64\", \"ch_area\": \"夏洛特\", \"ch_nation\": \"美国\", \"en_area\": \"Charlotte, NC\", \"en_nation\": \"U.S.A.\", \"latitude\": \"35.2270869\", \"longitude\": \"-80.8431267\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"65\", \"ch_area\": \"夏洛特阿马利亚\", \"ch_nation\": \"美属维尔京群岛\", \"en_area\": \"Charlotte Amalie\", \"en_nation\": \"U.S. Virgin Islands\", \"latitude\": \"18.3419004\", \"longitude\": \"-64.9307007\", \"timeZone\": \"America/St_Thomas\" }, { \"city_id\": \"118\", \"ch_area\": \"香港特别行政区\", \"ch_nation\": \"中国\", \"en_area\": \"Hong Kong\", \"en_nation\": \"China\", \"latitude\": \"22.3193039\", \"longitude\": \"114.1693611\", \"timeZone\": \"Asia/Hong_Kong\" }, { \"city_id\": \"146\", \"ch_area\": \"小石城\", \"ch_nation\": \"美国\", \"en_area\": \"Little Rock\", \"en_nation\": \"U.S.A.\", \"latitude\": \"34.7464809\", \"longitude\": \"-92.2895948\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"196\", \"ch_area\": \"新奥尔良\", \"ch_nation\": \"美国\", \"en_area\": \"New Orleans\", \"en_nation\": \"U.S.A.\", \"latitude\": \"29.9510658\", \"longitude\": \"-90.0715323\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"443\", \"ch_area\": \"新村\", \"ch_nation\": \"圣诞岛\", \"en_area\": \"Flying Fish Cove\", \"en_nation\": \"Christmas Island\", \"latitude\": \"-10.4318725\", \"longitude\": \"105.6735131\", \"timeZone\": \"Indian/Christmas\" }, { \"city_id\": \"195\", \"ch_area\": \"新德里\", \"ch_nation\": \"印度\", \"en_area\": \"New Delhi\", \"en_nation\": \"India\", \"latitude\": \"28.6139391\", \"longitude\": \"77.2090212\", \"timeZone\": \"Asia/Kolkata\" }, { \"city_id\": \"277\", \"ch_area\": \"新加坡\", \"ch_nation\": \"新加坡\", \"en_area\": \"Singapore\", \"en_nation\": \"Singapore\", \"latitude\": \"1.352083\", \"longitude\": \"103.819836\", \"timeZone\": \"Asia/Singapore\" }, { \"city_id\": \"556\", \"ch_area\": \"新塞勒姆\", \"ch_nation\": \"美国\", \"en_area\": \"New Salem\", \"en_nation\": \"U.S.A.\", \"latitude\": \"39.7075473\", \"longitude\": \"-90.8476304\", \"timeZone\": \"America/North_Dakota/New_Salem\" }, { \"city_id\": \"202\", \"ch_area\": \"新西伯利亚\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Novosibirsk\", \"en_nation\": \"Russia\", \"latitude\": \"54.9832693\", \"longitude\": \"82.8963831\", \"timeZone\": \"Asia/Novosibirsk\" }, { \"city_id\": \"447\", \"ch_area\": \"休达\", \"ch_nation\": \"西班牙\", \"en_area\": \"Ceuta\", \"en_nation\": \"Spain\", \"latitude\": \"35.8893874\", \"longitude\": \"-5.3213455\", \"timeZone\": \"Africa/Ceuta\" }, { \"city_id\": \"120\", \"ch_area\": \"休斯顿\", \"ch_nation\": \"美国\", \"en_area\": \"Houston, TX\", \"en_nation\": \"U.S.A.\", \"latitude\": \"29.7604267\", \"longitude\": \"-95.3698028\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"18\", \"ch_area\": \"雅典\", \"ch_nation\": \"希腊\", \"en_area\": \"Athens\", \"en_nation\": \"Greece\", \"latitude\": \"37.9838096\", \"longitude\": \"23.7275388\", \"timeZone\": \"Europe/Athens\" }, { \"city_id\": \"125\", \"ch_area\": \"雅加达\", \"ch_nation\": \"印度尼西亚\", \"en_area\": \"Jakarta\", \"en_nation\": \"Indonesia\", \"latitude\": \"-6.2087634\", \"longitude\": \"106.845599\", \"timeZone\": \"Asia/Jakarta\" }, { \"city_id\": \"318\", \"ch_area\": \"雅库茨克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Yakutsk\", \"en_nation\": \"Russia\", \"latitude\": \"62.0396912\", \"longitude\": \"129.7422192\", \"timeZone\": \"Asia/Yakutsk\" }, { \"city_id\": \"542\", \"ch_area\": \"雅库塔特\", \"ch_nation\": \"美国\", \"en_area\": \"Yakutat\", \"en_nation\": \"U.S.A.\", \"latitude\": \"59.5469878\", \"longitude\": \"-139.7272808\", \"timeZone\": \"America/Yakutat\" }, { \"city_id\": \"320\", \"ch_area\": \"雅温得\", \"ch_nation\": \"喀麦隆\", \"en_area\": \"Yaoundé\", \"en_nation\": \"Cameroon\", \"latitude\": \"3.8480325\", \"longitude\": \"11.5020752\", \"timeZone\": \"Africa/Douala\" }, { \"city_id\": \"508\", \"ch_area\": \"亚当斯敦\", \"ch_nation\": \"皮特凯恩群岛\", \"en_area\": \"Adamstown\", \"en_nation\": \"Pitcairn Islands\", \"latitude\": \"-25.0662897\", \"longitude\": \"-130.1004636\", \"timeZone\": \"Pacific/Pitcairn\" }, { \"city_id\": \"4\", \"ch_area\": \"亚的斯亚贝巴\", \"ch_nation\": \"埃塞俄比亚\", \"en_area\": \"Addis Ababa\", \"en_nation\": \"Ethiopia\", \"latitude\": \"8.9806034\", \"longitude\": \"38.7577605\", \"timeZone\": \"Africa/Addis_Ababa\" }, { \"city_id\": \"552\", \"ch_area\": \"亚丁\", \"ch_nation\": \"也门\", \"en_area\": \"Aden\", \"en_nation\": \"Yemen\", \"latitude\": \"12.7854969\", \"longitude\": \"45.0186548\", \"timeZone\": \"Asia/Aden\" }, { \"city_id\": \"358\", \"ch_area\": \"亚历山大\", \"ch_nation\": \"埃及\", \"en_area\": \"Alexandria\", \"en_nation\": \"Egypt\", \"latitude\": \"38.8048355\", \"longitude\": \"-77.0469214\", \"timeZone\": \"Africa/Cairo\" }, { \"city_id\": \"319\", \"ch_area\": \"亚穆苏克罗\", \"ch_nation\": \"科特迪瓦\", \"en_area\": \"Yamoussoukro\", \"en_nation\": \"Ivory Coast\", \"latitude\": \"6.8276228\", \"longitude\": \"-5.2893433\", \"timeZone\": \"Africa/Abidjan\" }, { \"city_id\": \"17\", \"ch_area\": \"亚松森\", \"ch_nation\": \"巴拉圭\", \"en_area\": \"Asunción\", \"en_nation\": \"Paraguay\", \"latitude\": \"-25.2637399\", \"longitude\": \"-57.575926\", \"timeZone\": \"America/Asuncion\" }, { \"city_id\": \"19\", \"ch_area\": \"亚特兰大\", \"ch_nation\": \"美国\", \"en_area\": \"Atlanta, GA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"33.7489954\", \"longitude\": \"-84.3879824\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"249\", \"ch_area\": \"盐湖城\", \"ch_nation\": \"美国\", \"en_area\": \"Salt Lake City\", \"en_nation\": \"U.S.A.\", \"latitude\": \"40.7607793\", \"longitude\": \"-111.8910474\", \"timeZone\": \"US/Mountain\" }, { \"city_id\": \"239\", \"ch_area\": \"仰光\", \"ch_nation\": \"缅甸\", \"en_area\": \"Rangoon\", \"en_nation\": \"Burma\", \"latitude\": \"16.840939\", \"longitude\": \"96.173526\", \"timeZone\": \"Asia/Rangoon\" }, { \"city_id\": \"343\", \"ch_area\": \"仰光\", \"ch_nation\": \"缅甸\", \"en_area\": \"Yangon\", \"en_nation\": \"Burma\", \"latitude\": \"16.840939\", \"longitude\": \"96.173526\", \"timeZone\": \"Asia/Rangoon\" }, { \"city_id\": \"126\", \"ch_area\": \"耶路撒冷\", \"ch_nation\": \"以色列\", \"en_area\": \"Jerusalem\", \"en_nation\": \"Israel\", \"latitude\": \"31.768319\", \"longitude\": \"35.21371\", \"timeZone\": \"Asia/Jerusalem\" }, { \"city_id\": \"429\", \"ch_area\": \"耶洛奈夫\", \"ch_nation\": \"加拿大\", \"en_area\": \"Yellowknife\", \"en_nation\": \"Canada\", \"latitude\": \"62.4539717\", \"longitude\": \"-114.3717887\", \"timeZone\": \"America/Yellowknife\" }, { \"city_id\": \"321\", \"ch_area\": \"叶卡捷琳堡\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Yekaterinburg\", \"en_nation\": \"Russia\", \"latitude\": \"56.8430993\", \"longitude\": \"60.6454086\", \"timeZone\": \"Asia/Yekaterinburg\" }, { \"city_id\": \"122\", \"ch_area\": \"伊尔库茨克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Irkutsk\", \"en_nation\": \"Russia\", \"latitude\": \"52.2854834\", \"longitude\": \"104.2890222\", \"timeZone\": \"Asia/Irkutsk\" }, { \"city_id\": \"420\", \"ch_area\": \"伊凯鲁特\", \"ch_nation\": \"加拿大\", \"en_area\": \"Iqaluit\", \"en_nation\": \"Canada\", \"latitude\": \"63.746693\", \"longitude\": \"-68.5169669\", \"timeZone\": \"America/Iqaluit\" }, { \"city_id\": \"339\", \"ch_area\": \"伊拉克利翁\", \"ch_nation\": \"希腊\", \"en_area\": \"Heraklion\", \"en_nation\": \"Greece\", \"latitude\": \"35.3387352\", \"longitude\": \"25.1442126\", \"timeZone\": \"Europe/Athens\" }, { \"city_id\": \"430\", \"ch_area\": \"伊努维克\", \"ch_nation\": \"加拿大\", \"en_area\": \"Inuvik\", \"en_nation\": \"Canada\", \"latitude\": \"68.3607437\", \"longitude\": \"-133.7230178\", \"timeZone\": \"America/Inuvik\" }, { \"city_id\": \"123\", \"ch_area\": \"伊斯兰堡\", \"ch_nation\": \"巴基斯坦\", \"en_area\": \"Islamabad\", \"en_nation\": \"Pakistan\", \"latitude\": \"33.6844202\", \"longitude\": \"73.0478848\", \"timeZone\": \"Asia/Karachi\" }, { \"city_id\": \"124\", \"ch_area\": \"伊斯坦布尔\", \"ch_nation\": \"土耳其\", \"en_area\": \"Istanbul\", \"en_nation\": \"Turkey\", \"latitude\": \"41.0082376\", \"longitude\": \"28.9783589\", \"timeZone\": \"Europe/Istanbul\" }, { \"city_id\": \"464\", \"ch_area\": \"依托克托洛米特\", \"ch_nation\": \"格陵兰\", \"en_area\": \"Ittoqqortoormiit\", \"en_nation\": \"Greenland\", \"latitude\": \"70.4855691\", \"longitude\": \"-21.9628757\", \"timeZone\": \"America/Scoresbysund\" }, { \"city_id\": \"121\", \"ch_area\": \"印第安纳波利斯\", \"ch_nation\": \"美国\", \"en_area\": \"Indianapolis, IN\", \"en_nation\": \"U.S.A.\", \"latitude\": \"39.768403\", \"longitude\": \"-86.158068\", \"timeZone\": \"America/Indianapolis\" }, { \"city_id\": \"395\", \"ch_area\": \"尤克拉\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Eucla\", \"en_nation\": \"Australia\", \"latitude\": \"-31.6761605\", \"longitude\": \"128.8891311\", \"timeZone\": \"Australia/Eucla\" }, { \"city_id\": \"425\", \"ch_area\": \"雨河\", \"ch_nation\": \"加拿大\", \"en_area\": \"Rainy River\", \"en_nation\": \"Canada\", \"latitude\": \"48.7216623\", \"longitude\": \"-94.5695247\", \"timeZone\": \"America/Rainy_River\" }, { \"city_id\": \"127\", \"ch_area\": \"约翰内斯堡\", \"ch_nation\": \"南非\", \"en_area\": \"Johannesburg\", \"en_nation\": \"South Africa\", \"latitude\": \"-26.2041028\", \"longitude\": \"28.0473051\", \"timeZone\": \"Africa/Johannesburg\" }, { \"city_id\": \"520\", \"ch_area\": \"詹姆斯敦\", \"ch_nation\": \"圣赫勒拿、阿森松和特里斯坦-达库尼亚\", \"en_area\": \"Jamestown\", \"en_nation\": \"Saint Helena, Ascension and Tristan da Cunha\", \"latitude\": \"37.2116383\", \"longitude\": \"-76.7752102\", \"timeZone\": \"Atlantic/St_Helena\" }, { \"city_id\": \"378\", \"ch_area\": \"昭和站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Syowa Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"39.8607264\", \"longitude\": \"-75.3000876\", \"timeZone\": \"Antarctica/Syowa\" }, { \"city_id\": \"67\", \"ch_area\": \"芝加哥\", \"ch_nation\": \"美国\", \"en_area\": \"Chicago, IL\", \"en_nation\": \"U.S.A.\", \"latitude\": \"41.8781136\", \"longitude\": \"-87.6297982\", \"timeZone\": \"America/Chicago\" }, { \"city_id\": \"455\", \"ch_area\": \"直布罗陀\", \"ch_nation\": \"直布罗陀\", \"en_area\": \"Gibraltar\", \"en_nation\": \"Gibraltar\", \"latitude\": \"36.140751\", \"longitude\": \"-5.353585\", \"timeZone\": \"Europe/Gibraltar\" }, { \"city_id\": \"438\", \"ch_area\": \"重庆\", \"ch_nation\": \"中国\", \"en_area\": \"Chongqing\", \"en_nation\": \"China\", \"latitude\": \"29.4315861\", \"longitude\": \"106.912251\", \"timeZone\": \"Asia/Chongqing\" }, { \"city_id\": \"522\", \"ch_area\": \"朱巴\", \"ch_nation\": \"南苏丹\", \"en_area\": \"Juba\", \"en_nation\": \"South Sudan\", \"latitude\": \"4.859363\", \"longitude\": \"31.57125\", \"timeZone\": \"Africa/Juba\" }, { \"city_id\": \"540\", \"ch_area\": \"朱诺\", \"ch_nation\": \"美国\", \"en_area\": \"Juneau\", \"en_nation\": \"U.S.A.\", \"latitude\": \"58.3019444\", \"longitude\": \"-134.4197221\", \"timeZone\": \"America/Juneau\" }] Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"IDOGetFunction.html":{"url":"IDOGetFunction.html","title":"get command function","keywords":"","body":"get command 7.1 Functional Overview The acquisition command is that the mobile terminal sends data to the bracelet terminal through the command, and the bracelet terminal returns the response status and the structure data to process the parsing data and convert the corresponding model. When successful, the setting data is stored. Prompt, the errorCode of the success is equal to 0 7.2 Main command function Get mac commands Get device information Get a list of features Get real-time data Get notify status Get activity count Get gps status Get version information Get ota authorization Get default sports Get default language Get error log Get flash bin version Get battery information Get menu list Get v3 alarm Get v3 hr mode Get mtu Get overheat log Get activity switch Get calorie distance goal Get bt pair state Get contact data Get hand up gesture Get health switch Get lang lib list Get sport sort Get main ui sort Get not disturb Get v3 notify status Get schedule reminder Get screen brightness Get sport parameter sort Get walk reminder 7.3 Demo Get function entry Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"get/IDOGetMacFunction.html":{"url":"get/IDOGetMacFunction.html","title":"Get mac command","keywords":"","body":"Get Mac Address Mac address model description IDOGetMacAddrInfoBluetoothModel Parameter Description Notes macAddr Mac address str btMacAddr BT Mac address str Command code Objc: [IDOFoundationCommand getMacAddrCommand:^(int errorCode, IDOGetMacAddrInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getMacAddrCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetDeviceInfoFunction.html":{"url":"get/IDOGetDeviceInfoFunction.html","title":"Get device Info","keywords":"","body":"Get Device Info Device info Model Description IDOGetDeviceInfoBluetoothModel Parameter Description Notes mode Device mode int battStatus Battery status 0x0: normal, 0x01: charging, 0x02: full, 0x03: low battery battLevel battery level 0～100 rebootFlag Whether to restart int bindTimeStr Binding timestamp str bindState bind state int bindType Bind type 0x00 default (note that the ID number was customized before), the timeout time is invalid, 0x01(click [button below]), 0x02(for long press [button below]), 0x03(Click on the screen to confirm and cancel horizontally, confirm on the left), 0x04(Click on the screen to confirm and cancel horizontally, confirm on the right)， 0x05(Click on the screen to confirm and cancel vertically, confirm on the top)， 0x06(Click on the screen to confirm and cancel vertically, confirm at the bottom), 0x07click (a button on the right) bindTimeout bind timeout The longest is 15 seconds, 0 means no timeout platform device platform 0:nordic,10:realtek 8762x,20:cypress psoc6,30:Apollo3 40: Goodix, 50: nordic + Tailing Micro, 60: Tailing Micro+5340+no nand flash, 70: Goodix + Fu Ruikun;80:5340 isSyncConfig Whether the configuration has been synchronized bool authCodeError Binding encryption authorization code error bool deviceShapeType Device shape type 0: invalid; 1: circular; 2: square; 3: ellipse deviceType device type 0: invalid; 1: watch; 2: device dialMainVersion Custom watch face master version 从start from 1 0:not supported showBindChoiceUi The hook ui interface is displayed when the firmware is bound 0: not required 1: required masterDevice Primary account device Main account device: 1 Sub account device: 2 deviceBtName Device bt name str Command code Objc: [IDOFoundationCommand getDeviceInfoCommand:^(int errorCode, IDOGetDeviceInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getDeviceInfoCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetFuncListFunction.html":{"url":"get/IDOGetFuncListFunction.html","title":"Get function list","keywords":"","body":"Get Function List Function list model description The current function list has 38 sub-function list. Overall function list object Objc: //Menu macro __IDO_FUNCTABLE__ Swift: //Menu object IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel IDOGetFuncTable1BluetoothModel Parameter Description Notes ch Chinese bool eng English bool french French bool german German bool italian Italian bool spanish Spanish bool japanese Japanese bool czech Czech bool IDOGetFuncTable2BluetoothModel Parameter Description Notes romanian Romanian bool lithuanian Lithuanian bool dutch Dutch bool slovenian Slovenian bool hungarian Hungarian bool polish Polish bool russian Russian bool ukrainian Ukrainian bool IDOGetFuncTable3BluetoothModel Parameter Description Notes slovak Slovak bool danish Danish bool croatian Croatian bool indonesian Indonesian bool korean Korean bool hindi Hindi bool portuguese Portuguese bool turkish Turkish bool IDOGetFuncTable4BluetoothModel Parameter Description Notes stepCalculation Steps bool sleepMonitor Sleep Monitor bool singleSport single sport bool realtimeData Realtime data bool deviceUpdate Device update bool heartRate Heart rate function bool ancs Notification center bool timeLine Timeline bool IDOGetFuncTable5BluetoothModel Parameter Description Notes takePhoto take photo bool music Music bool hidPhoto take photo control bool fiveHrInterval 5 heart rate interval bool bindAuth Bind authorization bool fastSync Fast sync bool exFuncTable Notification center bool bindCodeAuth Bind code authorization bool IDOGetFuncTable6BluetoothModel Parameter Description Notes wakeUp get up bool sleep Sleep bool sport exercise bool medicine take medicine bool dating Dating bool party Party bool metting meeting bool custom customize bool dinner Have a meal bool brushTeeth Brush teeth bool rest Rest bool course Course bool shower Shower bool learning Learning bool playTime Play time bool IDOGetFuncTable7BluetoothModel Parameter Description Notes calling Incoming call bool callingContact caller contact bool callingNum Calling number bool supportFahrenheit Set units to support Fahrenheit bool v3FunctionTable V3 function table bool screenBrightInterval Support app to set screen brightness display interval bool IDOGetFuncTable8BluetoothModel Parameter Description Notes message Message bool email Email bool qq qq bool weixin Wechat bool sinaWeibo Sina bool facebook facebook bool twitter twitter bool IDOGetFuncTable9BluetoothModel Parameter Description Notes whatsapp whatsapp bool messengre messengre bool instagram instagram bool linkedIn linkedIn bool calendar calendar bool skype skype bool alarmClock alarmClock bool otherReminder Other reminder bool IDOGetFuncTable10BluetoothModel Parameter Description Notes vkontakte vkontakte bool line line bool viber viber bool kakaoTalk kakaoTalk bool gmail gmail bool outlook outlook bool snapchat snapchat bool telegram telegram bool IDOGetFuncTable11BluetoothModel Parameter Description Notes sedentariness Sedentary reminder bool antilost Anti-lost reminder bool onetouchCalling One-touch calling bool findPhone Find phone bool findDevice FInd device bool configDefault Default mode bool upHandGesture Gesture bool weather Weather forecast bool IDOGetFuncTable12BluetoothModel Parameter Description Notes tipInfoContact Alert information contact bool tipInfoNum Tip pin number bool tipInfoContent Tip pin content bool setV3HeartInterval Set interval for v3 heart rate bool agpsOnLine Support agps online upgrade bool agpsOffLine Support agps off upgrade bool agpsOffLine Support agps off upgrade bool weatherCity Weather city bool IDOGetFuncTable13BluetoothModel Parameter Description Notes staticHr Resting heart rate bool doNotDisturb Do not disturb bool displayMode Display mode bool heartRateMonitor Heart rate monitor bool bilateralAntiLost Two-way anti-lost bool allAppNotice All notification reminders bool noShowHrInterval Heart rate zone not displayed bool flipScreen Flip screen bool IDOGetFuncTable14BluetoothModel Parameter Description Notes walk Walk bool run Run bool byBike Cycling bool onFoot Hiking bool swim Swim bool mountainClimbing Mountain climbing bool badminton badmiton bool other other bool IDOGetFuncTable15BluetoothModel Parameter Description Notes fitness Fitness bool spinning Spinning bool treadmill Treadmill bool sitUp Sit-up bool pushUp Push-up bool dumbbell Dumbbell bool weightlifting Weighlifting bool IDOGetFuncTable16BluetoothModel Parameter Description Notes bodybuildingExercise Aerobics bool yoga Yoya bool ropeSkipping Rope skipping bool tableTennis Table tennis bool basketball Basketball bool football Football bool volleyball Volleyball bool tennis Tennis bool skateboard Skateboard bool mountaineering Mountaineering bool squat Squat bool IDOGetFuncTable17BluetoothModel Parameter Description Notes golf Golf bool baseball Baseball bool skiing Skiing bool rollerSkating Roller skating bool dance Dance bool IDOGetFuncTable18BluetoothModel Parameter Description Notes logIn Log in bool hidPhoto Device with take photo bool watchDial watch dial bool shortcut Shortcut bool unitSet Unit set separately bool bloodPressure blood pressure bool wechatSport wechat sport bool fineTimeControl Fine time period control bool IDOGetFuncTable19BluetoothModel Parameter Description Notes gps gps bool sleepPeriod Sleep period bool screenBrightness Screen brightness adjustment bool id107Dial id107l watch dial bool dhNewAppNotice Unknown property, consult firmware bool noitice128Byte 128 bytes notification bool activityTimeSync get time sync bool v3Log v3 collect bool IDOGetFuncTable20BluetoothModel Parameter Description Notes menstruation Female menstrual cycle bool calorieGoal Calorie goal bool distanceGoal Distance goal bool spo2Data Blood oxygen data bool pressureData Stress data bool getNoDisturb Get Do Not Disturb bool sportModeSort Sport mode sort bool noticeByte Notification message bytes 250 bool IDOGetFuncTable21BluetoothModel Parameter Description Notes chatwork chatwork bool slack slack bool tumblr tumblr bool youtube youtube bool yahooPinterest yahoo pinterest bool yahooMail yahoo mail bool keep keep bool IDOGetFuncTable22BluetoothModel Parameter Description Notes autoPair 连接后自动配对 bool noDisconnectPair Automatic pairing after connection bool v3HrData v3 heart rate data bool v3SwimData v3 swimming data bool v3ActivityData v3 activity data bool v3GpsData v3 gps data bool drinkWaterReminder Drink water reminder bool IDOGetFuncTable23BluetoothModel Parameter Description Notes level5HrInterval 5 levels heart rate interval bool walkReminder walk reminder bool breatheTrain Breathe trainning bool screenBrightness5Level 5 levels brightness adjustment bool activitySwitch Sport mode switch Automatic recognition bool disturbHaveRangRepeat Do Not Disturb supports selectable time ranges and days of the week bool nightAutoBrightness Automatic brightness at night bool longMtu Transmit long packets bool IDOGetFuncTable24BluetoothModel Parameter Description Notes outdoorRun Outdoor run bool indoorRun Indoor run bool outdoorCycle 户Outdoor cycle bool indoorCycle Indoor cycle bool outdoorWalk Outdoor walk bool indoorWalk Indoor walk bool poolSwim Pool swim bool openWaterSwim Open water swim bool IDOGetFuncTable25BluetoothModel Parameter Description Notes elliptical Elliptical bool rower Rower bool hiit high intensity interval training( HIIT） bool cricket Cricket bool pilates Pilates bool outdoorPlay Outdoor play(custom kr01) bool otherActivity Other sports (custom kr01) bool zumba Zumba (206Lite custom) bool IDOGetFuncTable26BluetoothModel Parameter Description Notes factoryReset Support factory reset for automatic unbinding bool liftingWrisBacklight Raise wrist to turn on the backlight command is the same as raising your hand to turn on the screen,It's just that the app's name is different,cannot be with other.upHandGesture coexistence bool multiActivityNoUseApp Multiple sports can not use App bool multiDial multiDial bool mediumToHighActiveDuration Medium to high active duration bool defaultSportType Get the sports mode of the device bool downloadLanguage Downloadable languages bool flashLog log function bool IDOGetFuncTable27BluetoothModel Parameter Description Notes thai Thai bool vietnamese Vietnamese bool burmese Burmese bool filipino Filipino bool traditionalChinese Traditional Chinese bool greek Greek bool arabic Arabic bool sweden Sweden bool finland Finnish bool persia Persia bool norwegian Norwegian bool IDOGetFuncTable28BluetoothModel Parameter Description Notes chargingTime Charging time bool menuList Menu list bool photoWallpaper Background photo bool voiceTransmission Voice assistant function bool utcTimeZone utc time bool choiceUse New 4-to-2 select function bool heartRateInterval Support heart rate interval setting bool v3SportsType Sport type setting and acquisition for v3 bool IDOGetFuncTable29BluetoothModel Parameter Description Notes v3SyncAlarm Synchronization of v3's alarm clock bool ubloxModel Support ublox module bool v3SyncActivity v3 multi-sport sync data bool getHeatLog Get overheat log bool v3Spo2OffsetChange V3 blood oxygen data offset by minute offset functional table bool screenBrightness3Level 3 levels brightness adjustment The default is 5-level, the watch app displays, the watch does not display bool encryptedAuth Binding authorization code, authorization binding bool v3Sleep v3 sleep eye movement data synchronization bool IDOGetFuncTable30BluetoothModel Parameter Description Notes restoreFactory Reset bool getScreenBrightness Get screen brightness bool getUpHandGesture Raise the wrist to brighten the screen to obtain data bool getNotDisturb Get Do Not Disturb Mode bool (deprecated) fastMsgData quick sms get bool getDeviceUpdateState Get the upgrade status of the device bool v3Sports v3 multi-sport sync bool v3ActivityExchangeData v3 multi-sport synchronous data exchange bool IDOGetFuncTable31BluetoothModel Parameter Description Notes v3GetLangLib v3 language font list bool setPhoneVoice Set phone volume bool getWatchId Get watch face ID bool handWashReminder Hand washing reminder bool clearBleCache clear device cache bool v3VoiceReplyTxt Voice-to-text reply for v3 bool getDevName get device name bool brightScreenTime Bright screen time bool IDOGetFuncTable32BluetoothModel Parameter Description Notes tiktok tiktok bool redbus redbus bool dailyhunt dailyhunt bool hotstar hotstar bool inshorts inshorts bool paytm paytm bool amazon amazon bool flipkart flipkart bool IDOGetFuncTable33BluetoothModel Parameter Description Notes prime prime bool netflix netflix bool gpay gpay bool phonpe phonpe bool swiggy swiggy bool zomato zomato bool makeMyTrip makeMyTrip bool jioTv jioTv bool microsoft microsoft bool whatsappBusiness whatsappBusiness bool nioseFit nioseFit bool missedCall missedCall bool mattersRemind mattersRemind bool ytmusic ytmusic bool uber uber bool ola ola bool googleMeet googleMeet bool mormaiiSmartwatch mormaiiSmartwatch bool technosConnect technosConnect bool enioei enioei bool aliexpress aliexpress bool shopee shopee bool teams teams bool support99Taxi support99Taxi bool uberEats uberEats bool lFood lFood bool rappi rappi bool mercadoLivre mercadoLivre bool magalu magalu bool americanas americanas bool yahoo yahoo bool v2SupportGetAllContact gto1pro The firmware supports the app to obtain the local file of the contactmodification time or upload all the contacts of the address book bool IDOGetFuncTable34BluetoothModel Parameter Description Notes takingMedicine Medicine reminder bool localDial The app supports local dial change, cloud dial picture download bool pressureHighReminder High stress reminder bool notSupportHrHighAlarm V3's high heart rate is not supported bool supportHrHighOrLowBtAlarm V3's heart rate -- 208BT high and low reminder function table bool supportSendOriginalSizeD1 208BT customization Support sending file size command before decompression File transfer --> use of dial bool notSupportPhotoWallpaper BIT1 k6 project does not need a corresponding wallpaper dial，VeryFit is supported by default, and a new unsupported function table is added. It is not necessary to configure this bool supportCalorieUnit Set the unit's add calorie setting bool supportSwimPoolUnit Setting the unit's increase the pool's unit setting bool v3GetSportSortField app side uses V3 to obtain the largest and least default fields in the motion sorting protocol， gt01, before the app did not use the maximum and minimum default fields. To adapt to the k6 project, you need to configure the corresponding data fields and add the function table to be compatible. bool getAlexaDefaultLanguage Get alexa's default language bool setWallpaperColor v3 wallpaper dial color settings bool supportWearFlag Get the wearing mark position of each hour, and get it in the sports data synchronization of the day bool watchDialSort Set the watch face sort bool suppportPing Support ping callback bool supportV3Bp 205L blood pressure v3 health data synchronization support bool v2BpSetOrMeasurement Blood pressure calibration and settings bool wallpaperOnlyTimeColor 206lite Wallpaper watch face only supports moving time, date and modifying color bool supportBreathRate the firmware supports the breathing rate switch setting, and the breathing rate data is returned synchronously bool supportGrade Multi-sport synchronization data supports oxygen uptake level data bool supportSportPlan Supports running plan protocol and running class menu bool IDOGetFuncTable35BluetoothModel Parameter Description Notes scientificSleep Support scientific sleep bool getBatteryLog Support get battery log bool getNewWatchList support get watchface list's interface multipleTimers support multiple timers bool getMenuList Get device menu list bool autoSyncV3HealthData v3 health data synchronization, automatic synchronization within half an hour bool getDeviceLogState App gets restart log error code and flag bit bool dataTranContinue Support breakpoint continue transmission bool notifyIconAdaptive notification reminder icon adaptive bool setScientificSleepSwitch Scientific sleep switch bool pressureNotifyFlagMode Stress switch adds notification type and all-day stress mode settings bool spo2NotifyFlag Blood oxygen switch adds notification type bool menstrualNotifyFlag Blood oxygen switch adds notification type bool drinkWaterNotifyFlag Drink water switch to add notification type bool getHealthSwitchState Get all health monitoring switches bool setTemperatureSwitch Set the night temperature switch bool findPhoneStop Titan customization end of support find phone menu bool permissionsState Titan customization supports app disabled, open permission notification firmware bool IDOGetFuncTable36BluetoothModel Parameter Description Notes alexaSetWeather Alexa set weather bool alexaJumpSportUi alexa Jump sport interface bool alexaJumpUi alexa Jump sport interface bool alexaEasyOperate alexa easy operate bool alexaGetAlarm alexa get alarm bool alexaSetOnOff alexa app set on off bool getWalkReminder get goal of walk reminder bool setMusicName Set music name bool longCityName Long city name bool maxBloodOxygen Algorithmic VO2 max bool systemTakePictures Support system take photo bool walkTimeReminder 207acsutomize Real-time reminder for walking (c library menu is abandoned) bool getHeartRateReminder Support to obtain heart rate data when heart rate is too high or too low bool stepsOneMinute Steps per minute bool showDetectionTime 206boat adds heart rate detection mode to support display detection period bool timeZoneFloat Support world clock device in time setting with this menu time_zone is a floating point with two digits after the decimal point， App's time zone setting value at this time is one hundred times larger than the actual time zone value ，Without this function table, it will be issued according to the actual time zone value bool setAlarmSpecifyType kr01 customization supports v3 alarm clock settings to obtain the specified type and name bool IDOGetFuncTable37BluetoothModel Parameter Description Notes supportCyclingUnit Add unit settings for riding bool supportWalkRunUnit Add unit settings for walking and running bool midHighTimeGoal Set goals to increase the duration of mid-to-high exercise bool walkReminderTimeGoal Set a target time in the reminder to walk bool exchangeDataRealTimePace v3's exercise data exchangeAdd real-time pace field bool supportPairEachConnect Setup supports system pairingThe app does not clear paired devices every time it connects bool supportAppSendVoiceToBle Support app to deliver compressed sbc language files to ble bool setSpo2LowValue Set the hypoxic threshold bool spo2AllDayOnOff Support app to set blood oxygen switch data throughout the day bool smartHeartRate Support app to set smart heart rate bool alexaReminderAddSecond alexa vice reminder add corresponding s clock transmission field bool syncNoise sync noise bool syncTemperature Synchronized temperature bool set100SportSort 100 kinds of sports data sorting bool sportMediumIcon 100 kinds of sports need in the chart function table bool set20SportParamSort 20 kinds of basic sports data sub-parameter sorting bool setMainUiSort Main interface UI controls arrangement bool scheduleReminder Schedule reminder bool autoActivitySwitch Sports mode automatic recognition switch settings bool getCalorieDistanceGoal Sports three-ring target acquisition bool setStressCalibration 206 Added pressure calibration settings bool watchCapacitySizeDisplay Support display dial capacity bool watchCapacitySizeDisplay Support display dial capacity bool watchPhotoPositionMove Support wallpaper dial time position movement、Control icon color modification, control function selection bool chooseOtherOtaMode Firmware upgrade method distinction bool surpportNewRetainData Support new firmware app to delete device without deleting data bool supportWalkGoalSteps Firmware supports setting and getting target steps per hour bool newRetainData Firmware support unbundling does not clear data on the device bool IDOGetFuncTable38BluetoothModel Parameter Description Notes walkReminderAddNotify Walk reminder to add notification type bool setFitnessGuidance Support the distribution of fitness guidance switch bool syncContact Support contact synchronization bool setWeatherSunTime Support weather push to increase sunset and sunrise time bool setV3Weather Support V3 Weather bool setV3WeatherSunrise Support 3 days sunset and sunrise weather settings bool setV3WeatherAddAirGrade gt01pro supports V3 weather to issue air quality level bool setV3WorldTime Support world time setting bool setNotifyAddAppName Notification reminder to add a new agreement for the name of the app in 8 languages bool transferMusicFile Support firmware music transfer bool getActivitySwitch Support sports mode recognition switch acquisition bool historyMenstrual Support historical data distribution of menstrual period bool bleAndBtVersion Get Firmware Level 3 version and BT Level 3 version bool musicAddSingerName Add singer name to music bool menstrualAddPregnancy v2 menstrual reminder settings Add fertile period and end time settings bool alexaControll100sports alexa100 kind sports add new function table bool walkTimeReminder 207a customized real-time reminder to walk around bool (deprecated) setUnreadAppReminder Unread information red dot prompt switch bool alexaControll100brightness 100-level brightness judgment bool getBleMacAddr get bt bluetooth address（gt01 pro） bool setNotificationStatus Notify app status settings bool syncV3ActivityAddParam Synchronous V3 multi-sport adds new parameters bool stressCalibrationThreshold Stress switch threshold setting bool notSurportCalling3SDelay realme wear default is to display，This menu does not support the display of the \"delay three seconds\" switch setting item on the call reminder page bool Command code Objc: [IDOFoundationCommand getFuncTableCommand:^(int errorCode, IDOGetDeviceFuncBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getFuncTableCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetLiveDataFunction.html":{"url":"get/IDOGetLiveDataFunction.html","title":"Get live data","keywords":"","body":"Get Realtime data Function table __IDO_FUNCTABLE__.funcTable4Model.realtimeData Realtime data model description IDOGetLiveDataBluetoothModel Parameter Description Notes step Step int calories Calories int distances distance int activeTime Activity duration int heartRate Heart rate int Command code Objc: [IDOFoundationCommand getLiveDataCommand:^(int errorCode, IDOGetLiveDataBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getLiveDataCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetNoticeFunction.html":{"url":"get/IDOGetNoticeFunction.html","title":"Get notify status","keywords":"","body":"Get Notification Status Function table __IDO_FUNCTABLE__.funcTable4Model.ancs Get Notification Status model Description IDOSetNoticeInfoBuletoothModel Parameter Description Notes isPairing Is it paired bool callDelay call delay The current setting must be greater than or equal to 3 seconds to be effective isOnChild Whether to open the sub switch Only valid for smart reminders, invalid for incoming call reminders isOnCall incalling reminder bool isOnSms SMS reminder bool isOnEmail Email reminder bool isOnWeChat Wechat reminder bool isOnQq qq reminder bool isOnWeibo Weibo reminder bool isOnFaceBook FaceBook reminder bool isOnTwitter Twitter reminder bool isOnWhatsapp Whatsapp reminder bool isOnMessenger Messenger reminder bool isOnInstagram Instagram reminder bool isOnLinkedIn LinkedIn reminder bool isOnCalendar Calendar reminder bool isOnSkype Skype reminder bool isOnAlarm Alarm reminder bool isOnPokeman Pokeman reminder bool isOnVkontakte Vkontakte reminder bool isOnLine Line reminder bool isOnViber Viber reminder bool isOnKakaoTalk KakaoTalk reminder bool isOnGmail Gmail提醒 bool isOnOutlook Outlook提醒 bool isOnSnapchat Snapchat reminder bool isOnTelegram Telegram reminder bool isOnChatwork Chatwork reminder bool isOnSlack Slack reminder bool isOnYahooMail Yahoo Mail reminder bool isOnTumblr Tumblr reminder bool isOnYoutube Youtube reminder bool isOnYahooPinterest Yahoo Pinterest reminder bool isOnKeep Keep reminder bool isOnTikTok TikTok reminder bool isOnRedbus Redbus reminder bool isOnDailyhunt isOnDailyhunt reminder bool isOnHotstar Hotstar reminder bool isOnInshorts Inshorts reminder bool isOnPaytm Paytm reminder bool isOnAmazon Amazon reminder bool isOnFlipkart Flipkart reminder bool isOnPrime Prime reminder bool isOnNetflix Netflix reminder bool isOnGpay Gpay reminder bool isOnPhonpe Phonpe reminder bool isOnSwiggy Swiggy reminder bool isOnZomato Zomato reminder bool isOnMakeMyTrip MakeMyTrip reminder bool isOnJioTv JioTv reminder bool isOnMicrosoft Microsoft reminder bool isOnWhatsAppBusiness WhatsApp Business reminder bool isOnNioseFit NioseFit reminder bool isOnDidNotCall Did no call reminder bool isOnMattersRemind Event reminder bool isOnUber Uber reminder bool isOnOla Ola reminder bool isOnYtMusic Yt music reminder bool isOnGoogleMeet Google meet reminder bool isOnMormaiiSmartwatch Mormaii smartwatch reminder bool isOnTechnosConnect Technos connect reminder bool isOnEnioei Enioei reminder bool isOnAliexpress Aliexpress reminder bool isOnShopee Shopee reminder bool isOnTeams Teams reminder bool isOn99Taxi 99 taxi reminder bool isOnUberEats Uber eats reminder bool isOnLfood l food reminder bool isOnRappi rappi reminder bool isOnMercadoLivre Mercado Livre reminder bool isOnMagalu Magalu reminder bool isOnAmericanas Americanas reminder bool isOnYahoo Yahoo reminder bool Command code Objc: [IDOFoundationCommand getNoticeStatusCommand:^(int errorCode, IDOSetNoticeInfoBuletoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getNoticeStatusCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetActivityCountFunction.html":{"url":"get/IDOGetActivityCountFunction.html","title":"Get activity count","keywords":"","body":"Get Activity count Function table __IDO_FUNCTABLE__.funcTable4Model.timeLine ||[IDOGetDeviceFuncBluetoothModel isHaveMovment] Activity count model description IDOGetActivityCountBluetoothModel Parameter Description Notes activityCount activity count int activityPacketCount activity packet count int gpsCount GPScount int gpsPacketCount GPS packet count int command code Objc: [IDOFoundationCommand getActivityCountCommand:^(int errorCode, IDOGetActivityCountBluetoothModel * _Nullable data) { if (errorCode == 0) { // get success }else if (errorCode == 6) { //device does not support }else { //get failed } }]; Swift: IDOFoundationCommand.getActivityCountCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device does not support }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetGpsStateFunction.html":{"url":"get/IDOGetGpsStateFunction.html","title":"Get gps state","keywords":"","body":"Get GPS Status Function table __IDO_FUNCTABLE__.funcTable19Model.gps GPS Status model Description IDOGetGpsStatusBluetoothModel Parameter Description Notes gpsRunStatus GPS run status 0: Not running, 1: Searching for stars, 2: Tracking isAgpsVaild is AGPS vaild The remaining hours of the validity period, non-0 is valid Command Code Objc: [IDOFoundationCommand getGpsStatusCommand:^(int errorCode, IDOGetGpsStatusBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getGpsStatusCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetVersionFunction.html":{"url":"get/IDOGetVersionFunction.html","title":"Get version info","keywords":"","body":"Get Version info Version info model description IDOGetVersionInfoBluetoothModel Parameter Description Notes sdkVersion SDK version the data is x10,11 means version 1.1 hrAlgorithmVersion heart rate algorithm version the data is x10,11 means version 1.1 sleepAlgorithmVersion sleep Algorithm Version the data is x10,11 means version 1.1 stepAlgorithmVersion step Algorithm Version the data is x10,11 means version 1.1 gestureRecognitionVersion gesture Recognition Version the data is x10,11 means version 1.1 pcbVersion PCB Version the data is x10,11 means version 1.1 spo2Version spo2 Version int stress Algorithm Version stress Algorithm Version int kcalVersion Kcal Algorithm Version int disVersion distance Algorithm Version int axle3SwimVersion axle3Swim Algorithm Version int axle6SwimVersion axle6Swim Algorithm Version int actModeTypeVersion sports automatic recognition algorithm version int allDayHrVersion all day heart rate algorithm version int gpsVersion gpsalgorithm version int gpsVersion gpsalgorithm version int peripheralsVersion Peripheral Version 206 Project Peripheral Version int firmwareVersion1 firmware version1 int firmwareVersion2 Firmware version version2 int firmwareVersion3 Firmware version version3 int btFlag BT version valid flag 0: Invalid, 1: The firmware has corresponding BT firmware btVersion1 BT's version version1 int btVersion2 BT's versionversion2 int btVersion3 BT's version version3 int btMatchVersion1 BT Match version1 int btMatchVersion2 BT Matchversion2 int btMatchVersion3 BT Match version3 int Command code Get software/hardware version info Objc: [IDOFoundationCommand getVersionInfoCommand:^(int errorCode, IDOGetVersionInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not support }else { //get failed } }]; Swift: IDOFoundationCommand.getVersionInfoCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Get firmware 3 level version info Objc: [IDOFoundationCommand get3LevelFirmwareVersionCommand:^(int errorCode, IDOGetVersionInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not support }else { //get failed } }]; Swift: IDOFoundationCommand.get3LevelFirmwareVersionCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetOtaAuthFuncion.html":{"url":"get/IDOGetOtaAuthFuncion.html","title":"Get ota authorization","keywords":"","body":"Get OTA Authorization Authorization Status description Parameter Description Notes stateCode Authorization status 0x00: Verification successful, 0x01: ID verification failed,0x02: Version verification failed, 0x03: Low battery,0x04: Other errors Command code Objc: [IDOFoundationCommand getOtaAuthInfoCommand:^(int errorCode, int stateCode) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getOtaAuthInfoCommand { (errorCode, stateCode) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetDefaultSportsFunction.html":{"url":"get/IDOGetDefaultSportsFunction.html","title":"Get sports type","keywords":"","body":"Get Default sports type Function table __IDO_FUNCTABLE__.funcTable26Model.defaultSportType || __IDO_FUNCTABLE__.funcTable34Model.v3GetSportSortField Sports type model description IDOGetDefaultSportTypeBluetoothModel Parameter Description Notes sportTypeCount kinds of default sport types int minShowNum Minimum supported quantity int maxShowNum Maximum number of supported int isSupportSort Whether to support default sorting bool sportTypes 运Set of motion type values refer to the IDOSportTypes file description for motion types command code Objc: [IDOFoundationCommand getDefaultSportTypeCommand:^(int errorCode, IDOGetDefaultSportTypeBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getDefaultSportTypeCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"get/IDOGetLanguageFunction.html":{"url":"get/IDOGetLanguageFunction.html","title":"Get default language","keywords":"","body":"Get Default Language Function table __IDO_FUNCTABLE__.funcTable26Model.downloadLanguage Default Language model description IDOGetDownLanguageBluetoothModel Parameter Description Notes useLang current language int defaultLang default language int fixedLangCount Fixed number of stored languages int maxStorageLang Maximum number of stored languages int languageValues language set Invalid: 0, Chinese: 1, English: 2, French: 3, German: 4, Italian: 5, Spanish: 6, Japanese: 7, Polish: 8, Czech: 9,Romania: 10, Lithuanian: 11, Dutch: 12, Slovenian: 13, Hungarian: 14, Russian: 15, Ukrainian: 16, Slovak: 17,Danish: 18, Croatia: 19, Indonesian: 20, Korean: 21,Hindi: 22, Portuguese: 23, Turkey: 24, Thai: 25,Vietnamese: 26, Burmese: 27, Filipino: 28,Traditional Chinese: 29, Greek: 30 Arabic: 31, Swedish: 32, Finnish: 33,Persian: 34, Norwegian: 35 Command code Objc: [IDOFoundationCommand getDefaultLanguageCommand:^(int errorCode, IDOGetDownLanguageBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getDefaultLanguageCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetErrorLogFunction.html":{"url":"get/IDOGetErrorLogFunction.html","title":"Get error log","keywords":"","body":"Get Error log Function table __IDO_FUNCTABLE__.funcTable26Model.flashLog Error log model Description IDOGetErrorLogBluetoothModel Parameter Description Notes type Operation type 0x00: query, 0x01: clear record resetFlag reset flag 0x0: Normal, 0x01: Hard Error, 0x02: Watchdog Service, 0x03: Assertion Reset, 0x04: Power Down Service, 0x05: Other Exceptions,This parameter does not need to be assigned a value hwError hardware error code 0x00: normal, 0x01: acceleration error,0x02: Heart rate error, 0x03: TP error,0x04: flash error,This parameter does not need to be assigned a value Command code Objc: IDOGetErrorLogBluetoothModel * model = [[IDOGetErrorLogBluetoothModel alloc]init]; model.type = 0x00; [IDOFoundationCommand getErrorLogRecordCommand:model callback:^(int errorCode, IDOGetErrorLogBluetoothModel * _Nullable model) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: let model = IDOGetErrorLogBluetoothModel.init(); model.type = 0x00; IDOFoundationCommand.getErrorLogRecord(model) { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetFlashBinFunction.html":{"url":"get/IDOGetFlashBinFunction.html","title":"Get font version","keywords":"","body":"Get Flash Bin Version Function table __IDO_FUNCTABLE__.funcTable26Model.flashLog Flash Bin Version model description IDOGetFlashBinInfoBluetoothModel Parameter Description Notes status Status 0x00 normal, 0x01: invalid font, check error,0x02: Version mismatch flashVersion font version int matchVersion Match the version number, the font version number required by the firmware int checkCode font check code int Command code Objc: [IDOFoundationCommand getFlashBinInfoCommand:^(int errorCode, IDOGetFlashBinInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getFlashBinInfoCommand{ (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetBatteryFunction.html":{"url":"get/IDOGetBatteryFunction.html","title":"Get battery info","keywords":"","body":"Get Battery info Function table __IDO_FUNCTABLE__.funcTable28Model.chargingTime Battery info model description IDOGetDeviceBattInfoBluetoothModel Parameter Description Notes voltage voltage, millivolt int status status 0:not charging,1:charging,2:fully charged level battery level 0-100 lastChargingYear Last charge time (years) int lastChargingMonth Last charging time (months) int lastChargingDay Last charging time (days) int lastChargingHour Last charging time (hours) int lastChargingMinute Last charging time (minutes) int lastChargingSecond Last charging time (seconds) int command code Objc: [IDOFoundationCommand getBatteryInfoCommand:^(int errorCode, IDOGetDeviceBattInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getBatteryInfoCommand{ (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetMenuListFunction.html":{"url":"get/IDOGetMenuListFunction.html","title":"Get menu list","keywords":"","body":"Get Menu list Function table __IDO_FUNCTABLE__.funcTable35Model.getMenuList Menu list model description IDOGetMenuListInfoBluetoothModel Parameter Description Notes minShowNum Minimum number of menus displayed int maxShowNum The maximum number of menus displayed int maxNum Maximum number of supported int itemList menu sort currently displayed collection 0: invalid, 1: steps, 2: heart rate, 3: sleep, 4: photo, 5: alarm clock, 6: music, 7: stopwatch, 8: timer, 9: Exercise mode,10: Weather, 11: Breathing exercise, 12: Find phone, 13: Stress, 14: Data ring,15: Time interface, 16: Last activity 17: Health data, 18: Blood oxygen, 19: Menu settings, 20: Alexa voice prompt maxItemList menu sort max display set 0: invalid, 1: steps, 2: heart rate, 3: sleep, 4: photo, 5: alarm clock, 6: music, 7: stopwatch, 8: timer, 9: Exercise mode,10: Weather, 11: Breathing exercise, 12: Find phone, 13: Stress, 14: Data ring,15: Time interface, 16: Last activity 17: Health data, 18: Blood oxygen, 19: Menu settings, 20: Alexa voice prompt currentShowNum The number of lists currently displayed by the device int Command code Objc: [IDOFoundationCommand getMenuListInfoCommand:^(int errorCode, IDOGetMenuListInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getMenuListInfoCommand{ (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetV3AlarmFunction.html":{"url":"get/IDOGetV3AlarmFunction.html","title":"Get v3 alarm","keywords":"","body":"Get V3 Alarm Function table __IDO_FUNCTABLE__.funcTable29Model.v3SyncAlarm V3 Alarm Model description IDOSetAlarmInfoBluetoothModel Parameter Description Notes isOpen Alarm is on bool isSync Whether to sync to the bracelet No assignment is required, the alarm will be automatically assigned after the alarm is set successfully isDelete delete or not Defult YES type Type 0: wake up, 1: sleep, 2: exercise, 3: take medicine, 4: date, 5: party, 6: meeting, 7: other 8: eat, 9: brush teeth, 10: rest 11: lesson 12: bath 13: study 14: play 42: custom name hour Minute int minute second int repeat repeat set [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday] tsnoozeDuration snooze duration int alarmId Alarm ID int setTimeStamp The timestamp of the alarm modification No assignment is required, it will be automatically assigned after the alarm is set successfully repeatTime Repeat alarm times Repeat alarm times v3 alarm clock only works shockOnOff Vibration switch v3 alarm clock only works delayMinute Delay minutes v3 alarm clock only works alarmName Alarm name The length is limited to 23 bytes, and the v3 alarm clock is valid IDOSetExtensionAlarmInfoBluetoothModel Parameter Description Notes alarmVersion Alarm version number int alarmCount Number of alarm clocks int items Alarm clock collection Initialize the bracelet alarm when syncing the configuration Command code Objc: [IDOFoundationCommand getV3AlarmsInfoCommand:^(int errorCode, IDOSetExtensionAlarmInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getV3AlarmsInfoCommand{ (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetV3HrFunction.html":{"url":"get/IDOGetV3HrFunction.html","title":"Get v3 hr mode","keywords":"","body":"Get V3 HR mode Function table __IDO_FUNCTABLE__.funcTable22Model.v3HrData V3 HR Mode Model description IDOSetV3HeartRateModeBluetoothModel Parameter Description Notes modeType Heart rate mode Heart rate mode 0: Disable heart rate monitoring function (inactive) 1: Manual mode (disable automatic) 2: Automatic mode (5 minutes) 3: Continuous monitoring (5 seconds) (default: automatic mode) 4: Default type (used for the first binding synchronization configuration, used by C library) 5: Set the corresponding measurement interval (setting Corresponding measurement_interval) select 4 and 5 modes, then 2 and 3 modes are invalid 6: Intelligent heart rate mode (206 wal custom) updateTime update time str isHasTimeRange is has time range str startHour start (hour) int startMinute start (minute) int endHour 结束 (时) int endMinute end (minute) int measurementInterval measurement interval unit:second, modeType == 5 only effective notifyFlag notify flag 0 is invalid; 1: allow notifications; 2: silent notifications; 3: turn off notifications （Need to support menu__ IDO_ FUNCTABLE__ FuncTable34Model. supportHrHighOrLowBtAlarm can only be configured with notifyFlag, highHeartMode, highHeartValue, lowHeartMode, and lowHeartValue） highHeartMode Intelligent high heart rate reminder switch bool lowHeartMode smart high heart rate reminder switch bool highHeartValue Smart Heart Rate High Alert Threshold int lowHeartValue Smart low heart rate reminder threshold int getSecondMode Support second-level heart rate bool only get valid hrModeTypes Get the collection of heart rate types supported by the watch 5s,60s,180s,300s,600s,1800s,smart heart rate (255s), 900s are only valid Command code Objc: [IDOFoundationCommand getV3HrModeInfoCommand:^(int errorCode, IDOSetV3HeartRateModeBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getV3HrModeInfoCommand{ (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 18:01:29 "},"get/IDOGetMtuFunction.html":{"url":"get/IDOGetMtuFunction.html","title":"Get mtu","keywords":"","body":"Get MTU Function table __IDO_FUNCTABLE__.funcTable23Model.longMtu MTU Model Description IDOGetMtuBlueInfoModel Parameter Description Notes sendMtu Maximum length of bluetooth data transmission Default: 20 receiveMtu Bluetooth data receiving maximum length Default: 20 Command code Objc: [IDOFoundationCommand getMtuInfoCommand:^(int errorCode, IDOGetMtuBlueInfoModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getMtuInfoCommand{ (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetOverHeatLogFunction.html":{"url":"get/IDOGetOverHeatLogFunction.html","title":"Get overheat log","keywords":"","body":"Get Over-Heat Log Function table __IDO_FUNCTABLE__.funcTable29Model.getHeatLog Over-Heat Log model Description IDOGetOverHeatLogModel Parameter Description Notes verionNum The version number of the message int devRunTime total device running time Unit: second ppgRunTime ppg sensor working time Unit: second chargingTimes Charge times Unit: times errFlag The set of reasons for the exception 0: Voltage drop too fast,1: ppg sensor communication failed,2: ppg sensor returns abnormal data year 年 int month Month int day Day int hour Hour int minute 分 int second Second int Command code Objc: [IDOFoundationCommand getOverHeatLogInfoCommand:^(int errorCode, IDOGetOverHeatLogModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getOverHeatLogInfoCommand{ (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetActivitySwitchFunction.html":{"url":"get/IDOGetActivitySwitchFunction.html","title":"Get activity switch","keywords":"","body":"Get Sports automatic recognition switch Function table __IDO_FUNCTABLE__.funcTable38Model.getActivitySwitch Sports mode auto recognition switch model description IDOSetActivitySwitchBluetoothModel Parameter Description Notes sportTypeOnOff Automatic recognition of sports type switch This parameter is deprecated sportRunOnOff Automatic recognition of running switch bool sportBicycleOnOff Automatic recognition of bicycle switches bool autoPauseOnOff sports automatic pause switch bool endRemindOnOff end reminder switch bool sportEllipticalOnOff Automatic recognition of elliptical machine switch bool sportRowingOnOff Automatic recognition of rowing machine switches bool sportSwimOnOff Automatic recognition of swimming switch bool command code Objc: [IDOFoundationCommand getActivitySwitchCommand:^(int errorCode, IDOSetActivitySwitchBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getActivitySwitch { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetCalorieDistanceGoalFunction.html":{"url":"get/IDOGetCalorieDistanceGoalFunction.html","title":"Get calorie distance goal","keywords":"","body":"Get calories/distance/intensive sports duration target Function table __IDO_FUNCTABLE__.funcTable37Model.midHighTimeGoal Calories/distance/intensive sports duration target model description IDOSetUserInfoBuletoothModel Parameter Description Notes goalCalorieData goal calorie data Unit: Kcal goalDistanceData goal distance data Unit: M goalMidHighTimeData gold mid-high time data Unit: s goalWalkTime goal walking time Unit: Hour calorieMax calorie Max Unit: kcal calorieMin Calorie Min Unit: kcal command code Objc: [IDOFoundationCommand getCalorieDistanceGoalCommand:^(int errorCode, IDOSetUserInfoBuletoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getCalorieDistanceGoalCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetBtPairStateFunction.html":{"url":"get/IDOGetBtPairStateFunction.html","title":"Get bt pair state","keywords":"","body":"Get BT Pairing status Function table __IDO_FUNCTABLE__.funcTable38Model.bleAndBtVersion BT Pairing status model description IDOGetBtPairStateModel Parameter Description Notes btConnectState btconnect state bool btPairState bt pair state bool a2dpConnectState a2dp connect state bool hfpConnectState hfp connect state bool Command code Objc: [IDOFoundationCommand getBtPairStateCommand:^(int errorCode, IDOGetBtPairStateModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getBtPairStateCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetContactDataFunction.html":{"url":"get/IDOGetContactDataFunction.html","title":"Get contact data","keywords":"","body":"Get calling Frequent contact Function table __IDO_FUNCTABLE__.funcTable38Model.syncContact Calling frequent contact model description IDOSetContactItemModel Parameter Description Notes phone Number str name Name str IDOSetSyncContactModel Parameter Description Notes conVersion con version No assignment needed for now operat operat No assignment required 0: invalid; 1: set, 2: query itemsNum items Num int items Items array (IDOSetContactItemModel) command code Objc: [IDOFoundationCommand getContactDataCommand:^(int errorCode, IDOSetSyncContactModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getContactDataCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetHandUpGestureFunction.html":{"url":"get/IDOGetHandUpGestureFunction.html","title":"Get hand up gesture","keywords":"","body":"Get Lift view guesture Function table __IDO_FUNCTABLE__.funcTable30Model.getUpHandGesture Lift view guesture model description IDOSetHandUpInfoBuletoothModel Parameter Description Notes isOpen switch bool isHasTimeRange Is there a time gap bool showSecond Display time 3～10 second startHour start (hour) int startMinute start(minute) int endHour end (hour) int endMinute end (minute) int Command code Objc: [IDOFoundationCommand getHandUpGestureCommand:^(int errorCode, IDOSetHandUpInfoBuletoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getHandUpGestureCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetHealthSwitchFunction.html":{"url":"get/IDOGetHealthSwitchFunction.html","title":"Get health switch","keywords":"","body":"Get Health monitoring Switch Function table __IDO_FUNCTABLE__.funcTable35Model.getHealthSwitchState Health Monitoring switch model description IDOGetHealthSwitchStateModel Parater Description Notes heartMode Continuous heart rate switch bool pressureMode Stress automatic detection switch bool spo2Mode Blood oxygen automatic detection switch bool scienceMode scientific sleep switch bool temperatureMode night temperature switch bool noiseMode noise switch bool menstrualMode menstrual cycle switch bool walkMode walk reminder switch bool handWashingMode Drink water reminder switch bool heartModeNotifyFlag Heart rate notification status type 0 is invalid; 1: enable notification; 2: silent notification; 3: disable notification pressureNotifyFlag Stress Notification Status Type 0 is invalid; 1: enable notification; 2: silent notification; 3: disable notification spo2NotifyFlag Blood Oxygen Notification Status Type 0 is invalid; 1: enable notification; 2: silent notification; 3: disable notification menstrualNotifyFlag Period Notification Status Type 0 is invalid; 1: enable notification; 2: silent notification; 3: disable notification guidanceNotifyFlag Fitness coach notification status type 0 is invalid; 1: enable notification; 2: silent notification; 3: disable notification reminderNotifyFlag Reminder notification status type 0 is invalid; 1: enable notification; 2: silent notification; 3: disable notification Command code Objc: [IDOFoundationCommand getHealthSwitchStateCommand:^(int errorCode, IDOGetHealthSwitchStateModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getHealthSwitchStateCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetLangLibListFunction.html":{"url":"get/IDOGetLangLibListFunction.html","title":"Get lang lib list","keywords":"","body":"Get V3 LangLib List Function table __IDO_FUNCTABLE__.funcTable31Model.v3GetLangLib v3 LangLib list model Description IDOGetV3LangLibListModel Parameter Description Notes langVersion language version int useLang current language int defaultLang Default language int fixedLang Fixed number of stored languages int maxStorageLang The number of firmware currently supported int itemsStorageCount Number of languages already available int langSupportItems language set already supported @[@{@\"type\":@(type),@\"version\":@(version)}...] langStorageItems set of stored languages @[@{@\"type\":@(type),@\"version\":@(version)}...] Command code Objc: [IDOFoundationCommand getV3LangLibListCommand:^(int errorCode, IDOGetV3LangLibListModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getV3LangLibListCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGet100SportSortFunction.html":{"url":"get/IDOGet100SportSortFunction.html","title":"Get sport sort","keywords":"","body":"Get sport mode Ranking Function table __IDO_FUNCTABLE__.funcTable28Model.v3SportsType Sports mode Ranking Model Description IDOSetSportSortingInfoBluetoothModel Parameter Description Notes sportSortingItems Sports Mode Sorted Collection Sports Mode Sorted Collection Up to 8 or 14 or 30 or 150 operat Operation type 0：invalid； 1Inquire； 2set (no assignment required) allNum number int currentIndex The index of the currently added sport type int Support 100 kinds of sports only need to assign value IDOSetSportSortingItemModel Parameter Description Notes index Sort index from1、2、3、4....,0:invalid type sport mode when the menu v3SportsType、set100SportSort support，sport mode starts at 48，1-29sport mode is v2 protocol refer to the IDOSportTypes file description for motion types Command code Objc: [IDOFoundationCommand get100SportModeSortCommand:^(int errorCode, IDOSetSportSortingInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.get100SportModeSortCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"get/IDOGetMainUiSortFunction.html":{"url":"get/IDOGetMainUiSortFunction.html","title":"Get main ui sort","keywords":"","body":"Get Main interface control order Function table __IDO_FUNCTABLE__.funcTable37Model.setMainUiSort Main interface control order model description IDOMainInterfaceSortModel Parameter Description Notes locationX Horizontal axis x start from 1 locationY vertical axis y start from 1 sizeType size type 0 is invalid; 1:Large icons (one occupies a large horizontal grid); 2: small icons (two occupy a horizontal grid) supportSizeType Firmware supports editable icon types 0: invalid; 1: large icon; 2: small icon; 3: large icon + small icon widgetsType component type 0: Invalid 1: Activity three rings (small icon) 2: Steps 3: Last activity 4: Music 5: Weather 6: Heart rate 7: Stress 8: Sleep 9:Alexa 10:Body temperature 11:Blood oxygen 12:Timer 13:Alarm clock 14:Event reminder (current schedule reminder) 15: Noise 16: Battery 17: Phone (Contact) 18: World Time IDOMainInterfaceSupportItemModel Parameter Description Notes supportSizeType Firmware supports editable icon types 0: invalid; 1: large icon; 2: small icon; 3: large icon + small icon widgetsType component type 0: Invalid 1: Activity three rings (small icon) 2: Steps 3: Last activity 4: Music 5: Weather 6: Heart rate 7: Stress 8: Sleep 9:Alexa 10:Body temperature 11:Blood oxygen 12:Timer 13:Alarm clock 14:Event reminder (current schedule reminder) 15: Noise 16: Battery 17: Phone (Contact) 18: World Time IDOMainInterfaceSortModel Parameter Description Notes mainUiVersion Version No assignment needed for now operate Operate 0: invalid; 1 query; 2 set (no assignment required) allNum Current number of firmware component types int allSupportNum The number of types of all widgets supported by the firmware int items main interface collection array (IDOMainInterfaceItemModel) supportItems Firmware support editable icon collection array (IDOMainInterfaceSupportItemModel) Command code Objc: [IDOFoundationCommand getMainUiSortCommand:^(int errorCode, IDOMainInterfaceSortModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getMainUiSortCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetNotDisturbFunction.html":{"url":"get/IDOGetNotDisturbFunction.html","title":"Get not disturb","keywords":"","body":"Get DND Mode Function table __IDO_FUNCTABLE__.funcTable20Model.getNoDisturb DND Mode Model Description IDOSetNoDisturbModeInfoBluetoothModel Parameter Description Notes isOpen switch bool startHour strat (hour) int startMinute start (minute) int endHour end (hour) int endMinute end (minute) int isHaveRangRepeat Whether there is an interval repeat reminder bool repeat repeat set [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday] noonTimeOnOff lunch break switch bool noonTimeStartHour when lunch break begins int noonTimeStartMinute Start of lunch break int noonTimeEndHour end of lunch break int noonTimeEndMinute end of lunch break int Command code Objc: [IDOFoundationCommand getNotDisturbCommand:^(int errorCode, IDOSetNoDisturbModeInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getNotDisturbCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetNoticeStateFunction.html":{"url":"get/IDOGetNoticeStateFunction.html","title":"Get v3 notify status","keywords":"","body":"Get 3rd party Applications Notify Status Function table __IDO_FUNCTABLE__.funcTable38Model.setNotifyAddAppName 3rd party applications Notify Status model Description IDOSetAppNotifyStateItemModel Parameter Description Notes evtType Event type int(dynamically allocated by the firmware,) notifyState notification status int (Allow notifications: 1, Silent notifications: 2, Turn off notifications: 3) picFlag Picture icon update status int (0: Invalid; 1: There is a corresponding image to download; 2: There is no corresponding image) The setting ignores this property, and only supports the acquisition packName Application package name str setting ignores this attribute, only supports getting appName Application Name str setting ignores this attribute, only supports getting IDOSetV3NotifyStateModel Parameter Description Notes msgVersion version number No assignment needed for now operat Operat 1: add; 2: modify; 3: get query allSendNum total number of packets sent int nowSendIndex currently sent sequence int itemsNum number of sets int allOnOff All message notification switch bool items Notification status collection array (IDOSetAppNotifyStateItemModel) Command code Objc: [IDOFoundationCommand getMessageNoticeStateCommand:^(int errorCode, IDOSetV3NotifyStateModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getMessageNoticeStateCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetScheduleReminderFunction.html":{"url":"get/IDOGetScheduleReminderFunction.html","title":"Get schedule reminder","keywords":"","body":"Get Schedule reminder Function table __IDO_FUNCTABLE__.funcTable37Model.scheduleReminder Schedule reminder model description IDOSetRemindItemModel Parameter Description Notes remindId version Schedule reminder id starts from 0 year Year int month Month int day Day int hour Hour int minute Minute int second Second int repeat repeat set array(number) [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday] remindOnOff Reminder switch of the day bool state state code 0: Disabled, 1: Deleted state, 2: Enabled state title Title str note Note str IDOSetV3ScheduleReminderModel Parameter Description Notes scVersion Version No assignment needed for now operate Operate 0: invalid, 1: add, 2: delete, 3: check, 4: change num the number of items int items Agenda Collection array (IDOSetRemindItemModel) Maximum set 5 data Command code Objc: [IDOFoundationCommand getScheduleReminderCommand:^(int errorCode, IDOSetV3ScheduleReminderModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getScheduleReminderCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetScreenBrightnessFunction.html":{"url":"get/IDOGetScreenBrightnessFunction.html","title":"Get screen brightness","keywords":"","body":"Get Brightness Function table __IDO_FUNCTABLE__.funcTable30Model.getScreenBrightness Brightness model description IDOSetScreenBrightnessInfoBluetoothModel Parameter Description Notes levelValue screen brightness level 1-100 isManual Whether user adjusted bool mode screen brightness level 0x00 Turn off automatic adjustment,0x01 Use ambient light sensor,0x02, Automatically adjust brightness at night,0x03 Use set time to reduce brightness at night autoAdjustNight Automatic brightness adjustment at night 0x00, invalid, defined by firmware,0x01 off,0x02, automatically adjust the brightness at night,0x03 use the set time to reduce the brightness at night startHour start (hour) int startMinute start (minute) int endHour end (hour) int endMinute end (minute) int nightLevel Brightness at night 1-100 showInterval Display interval int unit second Command code Objc: [IDOFoundationCommand getScreenBrightnessCommand:^(int errorCode, IDOSetScreenBrightnessInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getScreenBrightnessCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetSportParameterSortFunction.html":{"url":"get/IDOGetSportParameterSortFunction.html","title":"Get sport parameter sort","keywords":"","body":"Get Sports Parameter data Ranking Function table __IDO_FUNCTABLE__.funcTable37Model.set20SportParamSort Sports Parameter data ranking model description IDOSetSportParameterSortModel Parameter Description Notes paraVersion Version No assignment needed for now operate Operate 0: invalid; 1 query; 2 set (no assignment required) sportType sport type int currentIndex Added sports index int allNum Number int items collection of items array (number) 0 invalid 1 exercise duration 2 distance 3 calories 4 real-time heart rate + heart rate zone 5Real-time pace 6Real-time cadence 7Aerobic training effect 8Rolling pace 9Average pace 10 steps 11 times 12 last stroke 13 last SWOLF 14 steps 15 Cadence 16 Aerobic training effect 17 Paddle times 18 Paddle frequency 19 Time Command code Objc: //Parameter ：sports type [IDOFoundationCommand getSportParameterSortCommand:sportType callback:^(int errorCode, IDOSetSportParameterSortModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: //Parameter ：sports type IDOFoundationCommand.getSportParameterSortCommand(sportType) { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"get/IDOGetWalkReminderFunction.html":{"url":"get/IDOGetWalkReminderFunction.html","title":"Get walk reminder","keywords":"","body":"Get Walking Alert Function table __IDO_FUNCTABLE__.funcTable37Model.walkReminderTimeGoal Walking alert model description IDOSetWalkReminderBluetoothModel Parameter Description Notes onOff On Off bool goalStep goal step int startHour Strat (Hour) int startMinute start(Minute) int endHour end(Hour) int endMinute end(Minute) int repeat repeat array(number) [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday] goalTime goal time Unit(Hour) notifyFlag Notify flag 0 is invalid; 1: enable notification; 2: silent notification; 3: disable notification __IDO_FUNCTABLE__.funcTable38Model.walkReminderAddNotify Only the function table supports Command code Objc: [IDOFoundationCommand getWalkReminderCommand:^(int errorCode, IDOSetWalkReminderBluetoothModel * _Nullable data) { if (errorCode == 0) { //get success }else if (errorCode == 6) { //device not supported }else { //get failed } }]; Swift: IDOFoundationCommand.getWalkReminderCommand { (errorCode, model) in if errorCode == 0 { //get success }else if errorCode == 6 { //device not supported }else { //get failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 14:24:25 "},"IDOControlFunction.html":{"url":"IDOControlFunction.html","title":"Control Command Function","keywords":"","body":"control commands 8.1 Functional Overview The control command is that the mobile terminal sends data to the wristband terminal through the command, and the wristband terminal returns the response status. According to the status code as a prompt, if the command is sent successfully, the errorCode is equal to 0. 8.2 Main command function Common control commands Monitor control commands 8.3 Demo Control function entry Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"control/IDOCommonlyFunction.html":{"url":"control/IDOCommonlyFunction.html","title":"Common control commands","keywords":"","body":"Common control commands Start BT device broadcast Objc: [IDOFoundationCommand openBtDeviceBroadcast]; Swift: IDOFoundationCommand.openBtDeviceBroadcast() Delete bracelet log Parameter Description parameter illustrate Remark type Operation type 0x01:delete overheat log Objc: [IDOFoundationCommand clearLogCommandWithType:type callback:^(int errorCode,int state) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.clearLogCommand(withType: type) { (errorCode,state) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed. } }; Turn on music control Objc: [IDOFoundationCommand musicStartCommand:^(int errorCode) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.musicStart { (errorCode) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed. } } Turn off music controls Objc: [IDOFoundationCommand musicStopCommand:^(int errorCode) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.musicStop{ (errorCode) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed. } } Camera start control Objc: [IDOFoundationCommand cameraStartCommand:^(int errorCode) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.cameraStart{ (errorCode) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed. } } Camera end control Objc: [IDOFoundationCommand cameraStopCommand:^(int errorCode) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.cameraStop{ (errorCode) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed. } } start looking for device Objc: [IDOFoundationCommand findDeviceStartCommand:^(int errorCode) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.findDeviceStart { (errorCode) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed. } } stop looking for devices Objc: [IDOFoundationCommand findDeviceStopCommand:^(int errorCode) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.findDeviceStop { (errorCode) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed. } } stop looking for your phone Objc: [IDOFoundationCommand findPhoneStopCommand:^(int errorCode) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.findPhoneStop { (errorCode) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed. } } Device restart control Objc: [IDOFoundationCommand setAppRebootCommand:^(int errorCode) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.setAppReboot{ (errorCode) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed. } } factory reset Objc: [IDOFoundationCommand setRestoreFactoryCommand:^(int errorCode) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.setRestoreFactory{ (errorCode) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed. } } Enter OTA upgrade mode Objc: [IDOFoundationCommand setOtaCommand:^(int errorCode) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.setOta{ (errorCode) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed. } } Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"control/IDOListenFunction.html":{"url":"control/IDOListenFunction.html","title":"Monitor control command","keywords":"","body":"Monitor control commands Monitor camera start Objc: [IDOFoundationCommand listenPhotoStartCommand:^(int errorCode) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.listenPhotoStart { (errorCode) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed. } }; Monitoring and taking pictures are over Objc: [IDOFoundationCommand listenPhotoEndCommand:^(int errorCode) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.listenPhotoEnd { (errorCode) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed } }; The monitor starts looking for the phone Objc: [IDOFoundationCommand listenFindPhoneStartCommand:^(int errorCode) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.listenFindPhoneStart { (errorCode) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed } }; Monitor to stop looking for phone Objc: [IDOFoundationCommand listenFindPhoneStopCommand:^(int errorCode) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.listenFindPhoneStop { (errorCode) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed. } }; Monitor bracelet status changes IDOControlDataUpdateModel Parameters illustrate Remarks unbindState Unbound state 0: Invalid, 1: The bracelet has been unbound hrModeState Heart rate mode status 0:Invalid, 1: Heart rate mode changed spo2State blood oxygen status 0:Invalid, 1: blood oxygen production data changed pressureState state of stress 0:Invalid, 1: Pressure produces data change alexaState Alexa Identify status 0:Invalid, 1: Exit during Alexa recognition resetState Factory reset state 0:Invalid, 1: Firmware reset to factory settings intoCamera appNeed to enter the camera interface 0:Invalid, 1: The app enters the camera callForHelp sos event notification 0:Invalid, 1: initiate a sos request alexaAlarmState alexa Alarm status 0:Invalid, 1: Alexa alarm has been modified alarmState Alarm status 0:Invalid, 1: Alarm clock modification overHeat Firmware Overheating Abnormal Alarm 0:Invalid, 1: Overheat warning brightScreenState Bright screen parameters have been modified 0:Invalid, 1: Bright screen modification handUpState Wrist lift parameters have been modified 0:Invalid, 1: Lift wrist to modify noDisturbState Do Not Disturb Mode Modification 0:Invalid, 1: Do not disturb mode modification volumeDownState Phone volume down 0:Invalid, 1: The volume of the mobile phone is lowered and modified errorIndex Firmware error code returned 01: ACC acceleration、02: PPG Heart rate 、03: TP Touch 、04: FLASH 、05: Overheat（PPG）、06: air pressure 、07: GPS、08: geomagnetic dataType Type of data modification 14 : The firmware requests to reset the weather, the app receives it, and sends the weather data 15: The number of firmware steps increases by 2000 steps each time, the device requests the app to synchronize data, and the app calls the synchronization interface 16: The firmware detects the end of sleep, requests the app to synchronize sleep data, and the app calls the synchronization interface to synchronize 17: Firmware three-ring data modification, notify the app to update the three-ring data 18: The firmware is fully charged and a reminder is sent. After the app receives it, the notification bar shows that the device is fully charged. 19: After exercising, manually measure heart rate, manually measure blood oxygen, and manually measure pressure, The device automatically requests synchronization, first check the link status, if it is not connected, this synchronization will not be performed, and then judge to initiate a synchronization request again after meeting the next automatic synchronization conditions 20: The firmware modifies the heart rate notification status type, the stress notification status type, the blood oxygen notification status type, the physiological cycle notification status type, Health Guidance Notification Status Type, Reminder Notification Status Type Notification App Update Heart Rate, Pressure, Blood Oxygen, Physiological Cycle, Health Guidance, Reminder Notification Status Type 21: The firmware pressure value calculation is completed, and the app is notified to obtain the pressure value 22: The firmware notifies the app that the firmware pressure calibration failed (the firmware exits the measurement interface/test failed/test timed out/not worn) 23: When the firmware generates a heart rate alert that is too high or too low, notify the app to obtain heart rate data 24: Firmware notifies app bt bluetooth is connected 25: Firmware notify app bt bluetooth disconnect 26: Firmware bluetooth call starts 27: Firmware bluetooth call ended 28: The new version firmware sends a notification command every 4 minutes and 30 seconds to fix the offline problem 29: Notify the app of the start of movement (same as 26 for intercepting dial transmission) 30: Notify the app of the end of the movement (the same as 27 for intercepting the dial transmission) notifyType Notification type 1 Alarm has been modified 2 Firmware Overheating Abnormal Alarm 4 Bright screen parameters have been modified（02 b0） 8 Wrist lift parameters have been modified（02 b1） 16 Get Do Not Disturb Mode（02 30） 32 Delivery of mobile phone volume（03 0xE3）（Delete），App volume modification, direct delivery Objc: [IDOFoundationCommand listenStateChangeCommand:^(int errorCode,IDOControlDataUpdateModel *_Nullable model) { if (errorCode == 0) { //control successfully }else if (errorCode == 6) { //device not supported }else { //Control failed } }]; Swift: IDOFoundationCommand.listenStateChange { (errorCode,model) in if errorCode == 0 { //control successfully }else if errorCode == 6 { //device not supported }else { //Control failed. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"IDOSyncDataFunction.html":{"url":"IDOSyncDataFunction.html","title":"Data synchronization function","keywords":"","body":"Data synchronization function 9.1 Functional Overview Synchronizing device data is a very important feature. The synchronization process recommends that no other commands be executed, and even executing a command is invalid. The synchronization configuration is performed after the first successful binding of the connected device, and the synchronization configuration is also required when the device is restored to factory settings. Progress is returned during the sync process, and a completed status is returned after each item is synced. Judging whether the synchronization is complete according to the synchronization status, the synchronization log will be recorded and stored during the synchronization process.。 9.2 Synchronous initialization Objc: initSyncManager().wantToSyncType = IDO_WANT_TO_SYNC_CONFIG_ITEM_TYPE | IDO_WANT_TO_SYNC_HEALTH_ITEM_TYPE | IDO_WANT_TO_SYNC_ACTIVITY_ITEM_TYPE | IDO_WANT_TO_SYNC_GPS_ITEM_TYPE; Swift: initSyncManager().wantToSyncType = IDO_WANT_TO_SYNC_ITEM_TYPE.CONFIG_ITEM_TYPE | IDO_WANT_TO_SYNC_ITEM_TYPE.HEALTH_ITEM_TYPE |IDO_WANT_TO_SYNC_ITEM_TYPE.ACTIVITY_ITEM_TYPE | IDO_WANT_TO_SYNC_ITEM_TYPE.GPS_ITEM_TYPE; 9.3 Parameter Description Parameters Description Notes isSyncHealthRun Whether the currently connected device is syncing readonly,bool isSyncConfigRun Whether the currently connected device is synchronizing configuration information readonly,bool isNeedSyncConfig Whether the currently connected device needs to synchronize configuration readonly,bool wantToSyncType Set options to sync Sync Configuration, Sync Health,Sync Activity, Sync GPS isSave Whether the synchronized data is stored in the SDK database Default YES itemSyncTimeout Each synchronization timeout period Default 60 seconds 9.4 Basic Method Objc: //start sync [IDOSyncManager startSync]; //end synchronization [IDOSyncManager stopSync]; Swift: //start sync IDOSyncManager.startSync(); //end synchronization IDOSyncManager.stopSync(); 9.5 execute callback method Objc: initSyncManager().addSyncComplete(^(IDO_SYNC_COMPLETE_STATUS stateCode) { //Sync complete status if(stateCode == IDO_SYNC_GLOBAL_COMPLETE) { //Query the corresponding cached data after synchronization is complete } }).addSyncProgess(^(IDO_CURRENT_SYNC_TYPE type, float progress) { //Sync item, sync progress (0-1) }).addSyncFailed(^(int errorCode) { //sync failed }).addSyncConfigInitData(^NSArray * (IDO_SYNC_CONFIG_DATA_TYPE type){ //The first binding or device restart will synchronize the configuration supported types and call back //According to the returned synchronization type, return the initialized data model collection according to the business requirements switch (type) { case IDO_SYNC_SET_TIME_TYPE: { // Set Time info // IDOSetTimeInfoBluetoothModel } break; case IDO_SYNC_SET_ALARM_TYPE: { // Set Alarm // IDOSetAlarmInfoBluetoothModel } break; case IDO_SYNC_SET_LONG_SIT_TYPE: { // Set LongSit Info // IDOSetLongSitInfoBuletoothModel } break; case IDO_SYNC_SET_LOST_FIND_TYPE: { // Set Prevent Lost // IDOSetPreventLostInfoBuletoothModel } break; case IDO_SYNC_SET_FIND_PHONE_TYPE: { // Set Find Phone // IDOSetFindPhoneInfoBuletoothModel } break; case IDO_SYNC_SET_SPORT_GOAL_TYPE: { // Set exercise target steps // IDOSetUserInfoBuletoothModel } break; case IDO_SYNC_SET_USER_INFO_TYPE: { // set user information // IDOSetUserInfoBuletoothModel } break; case IDO_SYNC_SET_UNIT_TYPE: { // set the unit // IDOSetUnitInfoBluetoothModel } break; case IDO_SYNC_SET_AUTH_TYPE: { // Setting permissions // IDOSetBindingInfoBluetoothModel } break; case IDO_SYNC_SET_HEART_RATE_MODE_TYPE: { // set v2 heart rate mode //IDOSetHrModeInfoBluetoothModel } break; case IDO_SYNC_SET_V3_SET_HR_MODE_TYPE: { // set v3 heart rate mode //IDOSetV3HeartRateModeBluetoothModel } break; case IDO_SYNC_SET_UP_HAND_GESTURE_TYPE: { // set hand up // IDOSetHandUpInfoBuletoothModel } break; case IDO_SYNC_SET_DO_NOT_DISTURB_TYPE: { // Set up do not disturb mode //IDOSetNoDisturbModeInfoBluetoothModel } break; case IDO_SYNC_SET_DISPLAY_MODE_TYPE: { // set display mode //IDOSetDisplayModeInfoBluetoothModel } break; case IDO_SYNC_SET_ONE_KEY_SOS_TYPE: { // Set up one key call //IDOSetOneKeySosInfoBuletoothModel } break; case IDO_SYNC_SET_MUISC_ON_OFF_TYPE: { // set the music switch // IDOSetMusicOpenInfoBuletoothModel } break; case IDO_SYNC_SET_WEATHER_SWITCH_TYPE: { // Set the weather switch //IDOSetWeatherSwitchInfoBluetoothModel } break; case IDO_SYNC_SET_HEART_RATE_INTERVAL_TYPE: { // set heart rate zone //IDOSetHrIntervalInfoBluetoothModel } break; case IDO_SYNC_SET_SPORT_MODE_SELECT_TYPE: { // Set sport mode selection //IDOSetSportShortcutInfoBluetoothModel } break; case IDO_SYNC_SET_SPORT_MODE_SORT_TYPE: { // Set the motion mode ordering // IDOSetSportSortingInfoBluetoothModel } break; case IDO_SYNC_SET_WATCH_DIAL_TYPE: { // Set watch face ID //IDOSetWatchDiaInfoBluetoothModel } break; case IDO_SYNC_SET_SHORTCUT_TYPE: { // set shortcut //IDOSetShortcutInfoBluetoothModel } break; case IDO_SYNC_SET_SLEEP_PERIOD_TYPE: { // set sleep time period //IDOSetSleepPeriodInfoBluetoothModel } break; case IDO_SYNC_SET_SCREEN_BRIGHTNESS_TYPE: { // set screen brightness // IDOSetScreenBrightnessInfoBluetoothModel } break; case IDO_SYNC_SET_MENSTRUATION_REMIND_TYPE: { // Setting reminders for women's menstrual cycles //IDOSetMenstrationRemindBluetoothModel } break; case IDO_SYNC_SET_SET_MENSTRUATION_TYPE: { // set the female menstrual cycle //IDOSetMenstrationInfoBluetoothModel } break; case IDO_SYNC_SET_CALORIE_DISTANCE_GOAL_TYPE: { // Set calorie and distance goals // IDOSetUserInfoBuletoothModel } break; case IDO_SYNC_SET_CONFIG_GPS_TYPE: { // set gps information // IDOSetGpsConfigInfoBluetoothModel } break; case IDO_SYNC_SET_WALK_REMINDER_TYPE: { // Set reminders to move //IDOSetWalkReminderBluetoothModel } break; case IDO_SYNC_SET_BREATHE_TRAIN_TYPE: { // set up breathing training //IDOSetBreatheTrainBluetoothModel } break; case IDO_SYNC_SET_ACTIVITY_SWITCH_TYPE: { // set the active switch //IDOSetActivitySwitchBluetoothModel } break; case IDO_SYNC_SET_PRESSURE_SWITCH_TYPE: { // set the pressure switch //IDOSetPressureSwitchBluetoothModel } break; case IDO_SYNC_SET_MENU_LIST_TYPE: { // set menu list // IDOGetMenuListInfoBluetoothModel } break; case IDO_SYNC_SET_SCIENTIFIC_SLEEP_SWITCH_TYPE: { // Setting the Science Sleep Switch // IDOSetV3ScientificSleepModel } break; case IDO_SYNC_SET_TEMPERATURE_SWITCH_TYPE: { // set the temperature switch // IDOSetV3TemperatureModel } break; case IDO_SYNC_SET_FITNESS_GUIDANCE_TYPE: { // set fitness guide //IDOSetFitnessGuidanceModel } break; case IDO_SYNC_SET_SPO2_SWITCH_TYPE: { // set the blood oxygen switch //IDOSetSpo2SwitchBluetoothModel } break; case IDO_SYNC_SET_NOISE_SWITCH_TYPE: { // set the noise switch // IDOSetV3NoiseSwitchModel } break; case IDO_SYNC_SET_RESPI_RATE_TYPE: { // Set breathing rate switch //IDOSetBreathRateSwitchModel } break; case IDO_SYNC_SET_HEART_RATE_MODE_SMART: { // Set smart heart rate mode // IDOSetSmartHeartRateModel } break; default: break; } return [NSArray array]; }).mandatorySyncConfig(YES or NO); // Binding needs to perform synchronization configuration, and subsequent reconnection does not need to perform synchronization configuration, and it is cached locally. Swift: initSyncManager().addSyncComplete!{(stateCode)in //Sync complete status if stateCode == .GLOBAL_COMPLETE { //Query the corresponding cached data after synchronization is complete } }.addSyncProgess!{(type,progress)in //Sync item, sync progress (0-1) }.addSyncFailed!{(errorCode)in //sync failed }.addSyncConfigInitData!{(type)in //According to the returned synchronization type, return the initialized data model collection according to the business requirements //Refer to the above objc code execution return []; }.mandatorySyncConfig!(true or false);// The binding needs to perform synchronization configuration, and subsequent reconnection does not need to perform synchronization configuration 9.6 Demo Synchronization function entry Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"IDOExchangeFunction.html":{"url":"IDOExchangeFunction.html","title":"Data Exchange Function (Old)","keywords":"","body":"Data exchange function 10.1Functional Overview When an exercise is initiated in the app, the bracelet will calculate the heart rate and calories from the exercise data generated by the app and return it to the app for data exchange; When the wristband starts to exercise, the exercise data generated by the wristband is sent to the App regularly to display the exercise data in real time. The exchange data is based on time as the only reference. During the exchange process, the current activity data needs to be judged by the movement start time. If the time does not correspond, the data cannot be exchanged.。 10.2 Initialize motion data Parameter Description IDODataExchangeModel Parameters/strong> illustrate Remarks day Day int hour hour int minute minute int second second int sportType sportType refer to the IDOSportTypes file description for motion types targetType targetType int targetValue targetValue int forceStart Whether to force start int retCode code 0:success; 1:The device has entered sports mode failed; 2: Device battery low failure; 3:bracelet is charging status status 0:all valid， 1:Invalid distance， 2: gps Weak signal errorCode errorCode 0:success; 1:Device has entered sport mode failed step step int (Unit: step) calories calories int (Unit:J) distance distance int (Unit: m) durations durations int (Unit: minutes) isSave Is it stored BOOL avgHrValue average heart rate int maxHrValue maximum heart rate int burnFatMins fat burning time int (minute) aerobicMins Cardio workout time int (minute) limitMins Maximum workout time int (minute) curHrValue current heart rate int intervalSecond heart rate interval int hrValueSerial serial number int hrValues Heart rate data array str json Objc: //Initialize exchange data IDODataExchangeModel * dataModel = [IDODataExchangeModel new]; //exercise start time IDOSetTimeInfoBluetoothModel * timeModel = [IDOSetTimeInfoBluetoothModel currentModel]; dataModel.day = timeModel.day; dataModel.hour = timeModel.hour; dataModel.minute = timeModel.minute; dataModel.second = timeModel.second; //sport type dataModel.sportType = sportType; //target type dataModel.targetType = targetType; //target value datModel.targetValue = targetValue; Swift: //Initialize exchange data let dataModel = IDODataExchangeModel.init(); //exercise start time let timeModel = IDOSetTimeInfoBluetoothModel.current(); dataModel.day = timeModel!.day; dataModel.hour = timeModel!.hour; dataModel.minute = timeModel!.minute; dataModel.second = timeModel!.second; //sport type dataModel.sportType = sportType; //target type dataModel.targetType = targetType; //target value datModel.targetValue = targetValue; 10.3App Initiate data exchange method App start the movement Objc: //dataModel Global motion data model [IDOFoundationCommand appStartSportCommand:dataModel startCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //The movement is launched successfully }else if (model.retCode == 2) { //battery is too low }else { //Movement launch failed } }]; Swift: //dataModel Global motion data model IDOFoundationCommand.appStartSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //The movement is launched successfully }else if model.retCode == 2 { //battery is too low }else { //Movement launch failed } }; App Initiate a motion pause Objc: //dataModel Global motion data model [IDOFoundationCommand appPauseSportCommand:dataModel pauseCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //Movement paused successfully }else if (model.retCode == 2) { //battery is too low }else { //Movement Pause Failed } }]; Swift: //dataModel Global motion data model IDOFoundationCommand.appPauseSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //Movement paused successfully }else if model.retCode == 2 { //battery is too low }else { //Movement Pause Failed } }; App Initiate exercise recovery Objc: //dataModel Global motion data model [IDOFoundationCommand appRestoreSportCommand:dataModel appRestoreCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //sports recovery success }else if (model.retCode == 2) { //battery is too low }else { //sports recovery failure } }]; Swift: //dataModel Global motion data model IDOFoundationCommand.appRestoreSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //sports recovery success }else if model.retCode == 2 { //battery is too low }else { //sports recovery failure } }; App Initiate motion data exchange process Objc: //dataModel Global motion data model [IDOFoundationCommand appIngSportCommand:dataModel appIngCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //Movement data exchange successfully }else if (model.retCode == 2) { //battery is too low }else { //Movement data exchange failed } }]; Swift: //dataModel Global motion data model IDOFoundationCommand.appIngSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //Movement data exchange successfully }else if model.retCode == 2 { //battery is too low }else { //Movement data exchange failed } }; App Initiate movement to end Objc: //dataModel Global motion data model [IDOFoundationCommand appEndSportCommand:dataModel appEndcallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //The end of the exercise is successful }else if (model.retCode == 2) { //battery is too low }else { //Failed to end the exercise } }]; Swift: //dataModel Global motion data model IDOFoundationCommand.appEndSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //The end of the exercise is successful }else if model.retCode == 2 { //battery is too low }else { //Failed to end the exercise } }; App Initiate a movement, the bracelet pauses Objc: //dataModel Global motion data model [IDOFoundationCommand appBlePauseReplyCommand:dataModel appBlePauseCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //The sports bracelet is suspended successfully }else if (model.retCode == 2) { //battery is too low }else { //The sports bracelet failed to pause } }]; Swift: //dataModel Global motion data model IDOFoundationCommand.appBlePauseReply(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //The sports bracelet is suspended successfully }else if model.retCode == 2 { //battery is too low }else { //The sports bracelet failed to pause } }; App Start a movement, the bracelet recovers Objc: //dataModel Global motion data model [IDOFoundationCommand appBleRestoreReplyCommand:dataModel appBleRestoreCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //Sports bracelet recovered successfully }else if (model.retCode == 2) { //battery is too low }else { //Sports bracelet recovery failed } }]; Swift: //dataModel Global motion data model IDOFoundationCommand.appBleRestoreReply(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //Sports bracelet recovered successfully }else if model.retCode == 2 { //battery is too low }else { //Sports bracelet recovery failed } }; App Start the movement, the bracelet ends Objc: //dataModel Global motion data model [IDOFoundationCommand appBleEndReplyCommand:dataModel appBleEndCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //Sports bracelet ended successfully }else if (model.retCode == 2) { //battery is too low }else { //Sports bracelet end failed } }]; Swift: //dataModel Global motion data model IDOFoundationCommand.appBleEndReply(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //Sports bracelet ended successfully }else if model.retCode == 2 { //battery is too low }else { //Sports bracelet end failed } }; 10.4Ble Initiate data exchange method The bracelet starts the movement Objc: //dataModel Global motion data model [IDOFoundationCommand bleStartSportCommand:dataModel bleStartCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //The bracelet launched the movement and started successfully }else if (model.retCode == 2) { //battery is too low }else { //The bracelet launched the movement and started failed } }]; Swift: //dataModel Global motion data model IDOFoundationCommand.bleStartSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //The bracelet launched the movement and started successfully }else if model.retCode == 2 { //battery is too low }else { //The bracelet launched the movement and started failed } }; The bracelet initiates a motion pause Objc: //dataModel Global motion data model [IDOFoundationCommand blePauseSportCommand:dataModel blePauseCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //The bracelet initiates the movement and pauses successfully }else if (model.retCode == 2) { //battery is too low }else { //The wristband fails to initiate a motion pause } }]; Swift: //dataModel Global motion data model IDOFoundationCommand.blePauseSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //The bracelet initiates the movement and pauses successfully }else if model.retCode == 2 { //battery is too low }else { //The wristband fails to initiate a motion pause } }; The bracelet initiates exercise recovery Objc: //dataModel Global motion data model [IDOFoundationCommand bleRestoreSportCommand:dataModel bleRestoreCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //The bracelet launched the exercise and recovered successfully }else if (model.retCode == 2) { //battery is too low }else { //Bracelet failed to initiate exercise recovery } }]; Swift: //dataModel Global motion data model IDOFoundationCommand.bleRestoreSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //The bracelet launched the exercise and recovered successfully }else if model.retCode == 2 { //battery is too low }else { //Bracelet failed to initiate exercise recovery } }; The bracelet initiates movement and stops Objc: //dataModel Global motion data model [IDOFoundationCommand bleEndSportCommand:dataModel bleEndCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //The bracelet starts the movement and stops successfully }else if (model.retCode == 2) { //battery is too low }else { //The wristband fails to initiate a movement to stop } }]; Swift: //dataModel Global motion data model IDOFoundationCommand.bleEndSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //The bracelet starts the movement and stops successfully }else if model.retCode == 2 { //battery is too low }else { //The wristband fails to initiate a movement to stop } }; The bracelet initiates a movement to exchange data Objc: //dataModel Global motion data model [IDOFoundationCommand bleIngSportCommand:dataModel bleIngCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //The bracelet initiates a movement to exchange data successfully }else if (model.retCode == 2) { //battery is too low }else { //The bracelet initiates a movement and fails to exchange data } }]; Swift: //dataModel Global motion data model IDOFoundationCommand.bleIngSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //The bracelet initiates a movement to exchange data successfully }else if model.retCode == 2 { //battery is too low }else { //The bracelet initiates a movement and fails to exchange data } }; 10.5 Demo Data exchange function entry Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"IDONewExchangeFunction.html":{"url":"IDONewExchangeFunction.html","title":"Data Exchange Function (New)","keywords":"","body":"Data exchange function (new) 10.1 Functional Overview When an exercise is initiated in the app, the bracelet will calculate the heart rate and calories from the exercise data generated by the app and return it to the app for data exchange; When the wristband starts to exercise, the exercise data generated by the wristband is sent to the App regularly to display the exercise data in real time. The exchange data is based on time as the only reference. During the exchange process, the current activity data needs to be judged by the movement start time. If the time does not correspond, the data cannot be exchanged.。 10.2 Initialize motion data Parameters Description Notes v2Model Current Interaction v2 Data Model IDOV2DataExchangeModel v3Model Current Interaction v3 Data Model IDOV3DataExchangeModel isV3ActivityExchange Is it a v3 active data exchange bool （Otherwise v2 active data exchange） exchangeStatus Data exchange process status Enum (IDO_EXCHANGE_DATA_STATUS) isNewDataExchange Whether to use the new data interaction Internal use, to distinguish old data exchange methods delegate proxy object id IDOV2DataExchangeModel Parameters illustrate Remarks day day int hour hour int minute minute int second second int sportType sportType current menu v3SportsType、set100SportSort Support, motion type starts from 48, 1-29 motion type is v2 protocol refer to the IDOSportTypes file description for motion types targetType targetType int 0x00:no target， 0x01:Number of repetitions, unit: times， 0x02:Distance, unit: meters, 0x03：Calories, unit: kcal, 0x04:Duration, unit: minutes, 0x05: Number of steps, unit: step targetValue target value int forceStart Whether to force start int retCode get into motion 0:success; 1:Device has entered sport mode failed; 2: Device battery low failure; 3:bracelet is charging 4:is using Alexa 5:calling calories calories int (Unit:J) distance distance int (Unit:m) durations durations int (Unit: minutes) step step int (Unit: step) avgHrValue average heart rate int maxHrValue maximum heart rate int burnFatMins fat burning time int (minute) aerobicMins Cardio workout time int (minute) limitMins Maximum workout time int (minute) isSave Is it stored BOOL status status 0:all valid， 1:Invalid distance， 2: gps Weak signal curHrValue current heart rate int hrValueSerial serial number int intervalSecond heart rate interval int hrValues Heart rate data array str json IDOV3DataExchangeModel Parameters illustrate Remarks day day int hour hour int minute minute int second second int sportType sportType When the function table v3SportsType、set100SportSort support，Movement types start from 48, 1-29 movement types are v2 protocol refer to the IDOSportTypes file description for motion types planType planType int 0x01：running plan3km ，0x02：running plan 5km ， 0x03：running plan 10km ，0x04：Half Marathon Training (Phase 2),0x05: Marathon Training (Phase 2) actionType actionType int 1go fast；2 Jogging;3 Moderate Running;4 Fast Running ； 5End the course movement (also wait for whether the user has free movement);6 Free movement after the course ends (this field works when operate is 0x05) errorCode errorCode int 0x00:success other failure targetType targetType/td> int 0x00:No target, 0x01: number of repetitions, unit: times, 0x02:Distance, Unit: Meter, 0x03: Calories, Unit: Kcal, 0x04: duration, unit: minute, 0x05: number of steps, unit: step targetValue targetValue int forceStart Whether to force start int 0:Not mandatory, 1: Mandatory retCode Code 0:Success; 1:The device has failed to enter sports mode; 2: The device battery is low and failed; 3: The bracelet is charging 4: Alexa is being used 5: Calling dataVersion dataVersion int curHrValue current heart rate int calories calories int (unit:J) distance distance int (unit:m) durations durations int (Unit: minutes) step step int (Unit: step) swimPosture swimPosture int 0x00 : Medley; 0x01: Freestyle; 0x02: Breaststroke; 0x03: Backstroke; 0x04: Butterfly; status get into motion start: 1, pause: 2, end: 3, 0: invalid state isSave Whether to store BOOL realTimeSpeed App calculation shows real-time speed, unit km/h, 100 times, 15 seconds a record int realTimePace App calculation shows real-time pace int (Unit s) intervalSecond heart rate interval int heartRateCount Heart rate count int hrValues Heart rate data array str json warmUpSecond Warm-up duration int (seconds) anaeroicSecond Anaerobic exercise duration int (seconds) fatBurnSecond fat burning workout duration int (second) aerobicSecond length of aerobic exercise int (seconds) limitSecond Maximum workout time int (seconds) avgHrValue average heart rate int maxHrValue maximum heart rate int warmUpValue warm-up value int burnFatValue fat burning exercise int aerobicValue aerobic exercise value int limitValue extreme sports value int anaerobicValue Anaerobic exercise value int avgSpeed average speed km/h maxSpeed Maximum speed km/h avgStepFrequency avgStepFrequency int maxStepFrequency maxStepFrequency int avgStepStride avg Step Stride int maxStepStride max Step Stride int kmSpeed Average km pace int fastKmSpeed Fastest km pace int kmSpeedCount Kilometer pace int kmSpeeds Kilometer pace collection array mileCount mile pace array mileCount mile pace int mileSpeeds mile pace collection array stepsFrequencyCount number of steps int stepsFrequencys cadence collection array trainingEffect Aerobic training effect Unit: None Range1.0 ~ 5.0 （*10times） anaerobicTrainingEffect anaerobicTrainingEffect nit: None Range 1.0 ~ 5.0 （*10times） vo2Max VO2 max Unit: ml/kg/min; range 0-80 actionDataCount The number of exercises in this exercise int inClassCalories In-class exercise calories Unit kcal completionRate Action completion rate 0—100 hrCompletionRate heart rate control 0—100 recoverTime recoverTime Unit hour (after the app receives the data, it needs to be decremented by one every hour) grade Oxygen uptake level 0x01:Low 0x02: Amateur 0x03: Average 0x04: Average 0x05: Good 0x06: Excellent 0x07: Professional actionData Action completion content array type : Action type 1 fast walking; 2 jogging; 3 moderate running; 4 fast running heart_con_value : Heart rate control per action time : Action completion time in seconds goal_time : Action target time trainingOffset Training Course Date Offset int starts at 0 countHour count Hour int countMinute count Minute int countSecond countSecond int trainingYear training Year int trainingMonth training Month int trainingDay training Day int time Sports time int Unit seconds lowHeart Heart rate range low int heightHeart Heart rate range high int app start the movement IDOAppStartExchangeModel Parameters Description Notes IDONewDataExchangeModel Parent property day, hour, minute, second, sportType targetType Target Type 0x00: No target, 0x01: Number of repetitions, unit: times, 0x02: distance, unit: meter, 0x03: calorie, unit: kcal, 0x04: duration, unit: minute, 0x05: number of steps, unit: step targetValue targetValue int forceStart Whether to force start 0: not mandatory, 1: mandatory + (BOOL)appStartSportCommandWithModel:(IDOAppStartExchangeModel *)model error:(NSError **)error; app Initiate movement to end IDOAppEndExchangeModel Parameters Description Notes IDONewDataExchangeModel Parent Properties day, hour, minute, second, sportType durations Duration Unit: seconds calories Distance Unit:meter step Steps Unit:step isSave whether to store bool + (BOOL)appEndSportCommandWithModel:(IDOAppEndExchangeModel *)model error:(NSError **)error; app Initiate a motion pause IDONewDataExchangeModel Parameters Description Notes day day int hour hour int minute minute int second second int sportType sportType int Refer to the table above + (BOOL)appPauseSportCommandWithModel:(IDONewDataExchangeModel *)model error:(NSError **)error; app Initiate exercise recovery IDONewDataExchangeModel Parameters Description Notes day day int hour 时 int minute minute int second second int sportType sportType int Refer to the table above + (BOOL)appRestoreSportCommandWithModel:(IDONewDataExchangeModel *)model error:(NSError **)error; app Initiate v2 motion swap process IDOV2AppIngDataExchangeModel Parameters Description Notes IDONewDataExchangeModel Parent property day, hour, minute, second, sportType status Status 0: all valid, 1: distance invalid, 2: weak gps signal distance distance Unit:m calories calories unit:J durations durations unit:seconds + (BOOL)v2_appIngSportCommandWithModel:(IDOV2AppIngDataExchangeModel *)model error:(NSError **)error; app Initiate v3 motion swap process IDOV3AppIngDataExchangeModel Parameters Description Notes IDONewDataExchangeModel Parent property day, hour, minute, second, sportType dataVersion Data Version The version number of the sports plan is 0x20,No need to upload sportType distance distance distance:m calories calories distance:J durations durations unit:seconds signalFlag gpsSignal strength 0: indicates weak signal, 1: indicates strong signal realTimeSpeed appCalculation shows real-time speed unit km/h 100 times 15 seconds a record + (BOOL)v3_appIngSportCommandWithModel:(IDOV3AppIngDataExchangeModel *)model error:(NSError **)error; ble start campaign end reply IDOBleEndReplyExchangeModel Parameters Description Notes IDONewDataExchangeModel Parent property day, hour, minute, second, sportType distance Distance Unit:meter calories Calories Unit:J durations Duration Unit:seconds errorCode Motion Data Exchange Error Code 0: success; other failures + (BOOL)bleEndSportReplyCommandWithModel:(IDOBleEndReplyExchangeModel *)model error:(NSError **)error; ble Initiate Movement Pause Reply IDOBlePauseReplyExchangeModel Parameters Description Notes IDONewDataExchangeModel Parent property day, hour, minute, second, sportType errorCode Motion Data Exchange Error Code 0: success; other failures + (BOOL)blePauseSportReplyCommandWithModel:(IDOBlePauseReplyExchangeModel *)model error:(NSError **)error; ble Initiate Movement Recovery Reply IDOBlePauseReplyExchangeModel Parameters Description Notes IDONewDataExchangeModel Parent property day, hour, minute, second, sportType errorCode Motion Data Exchange Error Code 0: success; other failures + (BOOL)bleRestoreSportReplyCommandWithModel:(IDOBleRestoreReplyExchangeModel *)model error:(NSError **)error; app exercise program operation IDOAppOperatePlanExchangeModel Parameters illustrate Remarks IDONewDataExchangeModel parent class attribute day、hour、minute、second、sportType operate opcode 0x01:Start exercise,0x02: Pause exercise, 0x03: Resume exercise,0x04: End exercise 0x05: Switch action trainingOffset Training Course Date Offset Starts at 0 actionType Action Type 1 fast walk;2 jogging;3 moderate running;4 fast running; 5 End the course movement (also waiting for the user to have free movement);6 Free movement after the course ends (this field works when operate is 0x05) planType planType 0x01：Running plan 3km,0x02: Running plan 5km, 0x03: Running plan 10km, 0x04: Half marathon training (Phase II), 0x05: Marathon training (Phase II) errorCode Error code 0x00: success, other failures (no assignment required for delivery operations) + (BOOL)appPlanSportCommandWithModel:(IDOAppOperatePlanExchangeModel *)model error:(NSError **)error; ble Exercise plan operation reply IDOBleOperatePlanReplyExchangeModel Parameters illustrate Remarks IDONewDataExchangeModel parent class attribute day、hour、minute、second、sportType operate opcode 0x01:Start exercise,0x02: Pause exercise, 0x03: Resume exercise,0x04: End exercise 0x05: Switch action actionType actionType 1Fast walk;2 Jogging;3 Moderate running;4 Fast running; 5 End the course movement (also wait for the user to have free movement);6 Free movement after the course ends (this field works when operate is 0x05) planType planType 0x01：Running plan 3km,0x02: Running plan 5km, 0x03: Running plan 10km,0x04: Half-marathon training (Phase 2),0x05: Marathon training (Phase 2) errorCode errorCode 0x00:success other failure (no assignment is required for the delivery operation) + (BOOL)blePlanSportReplyCommandWithModel:(IDOBleOperatePlanReplyExchangeModel *)model error:(NSError **)error; Get v3 heart rate data + (BOOL)v3_getActivityHrDataWithError:(NSError **)error; v3 Get activity data after exercise + (BOOL)v3_getActivityEndDataWithError:(NSError **)error; 10.3 proxy protocol callback app Movement starts ble reply IDOAppStartReplyExchangeModel Parameters Description Notes IDONewDataExchangeModel parent class attribute day、hour、minute、second、sportType retCode Get into motion 0: success; 1: device has entered sports mode failed;2: device battery low failure; 3: The bracelet is charging4: Alexa is being used 5: On a call - (void)appStartSportReplyWithModel:(IDOAppStartReplyExchangeModel *)model errorCode:(int)errorCode; app motion pause ble reply IDOAppPauseReplyExchangeModel Parameters Description Notes IDONewDataExchangeModel parent class attribute day、hour、minute、second、sportType errorCode errorCode 0:success other failure - (void)appPauseSportReplyWithModel:(IDOAppPauseReplyExchangeModel *)model errorCode:(int)errorCode; app exercise recovery ble reply IDOAppRestoreReplyExchangeModel Parameters Description Notes IDONewDataExchangeModel parent class attribute day、hour、minute、second、sportType errorCode Error code 0:success other failures - (void)appRestoreSportReplyWithModel:(IDOAppRestoreReplyExchangeModel *)model errorCode:(int)errorCode; app End of exercise ble reply IDOAppEndReplyExchangeModel Parameters Description Notes IDONewDataExchangeModel parent class attribute day、hour、minute、second、sportType errorCode errorCode 0:success other failure distance distance Unit: m calories calories Unit:J step step Unit: step avgHrValue average heart rate int maxHrValue maximum heart rate int burnFatMins fat burning time int aerobicMins Aerobic time int limitMins limit time int - (void)v2_appEndSportReplyWithModel:(IDOAppEndReplyExchangeModel *)model errorCode:(int)errorCode; v2 app ble reply in motion interaction IDOV2AppIngReplyExchangeModel Parameters Description Notes IDONewDataExchangeModel parent class attribute day、hour、minute、second、sportType status Status Code 0: all valid, 1: distance invalid, 2: weak gps signal curHrValue current heart rate int distance distance unit:m calories calories unit:J step step Unit:step hrValueSerial serial number int intervalSecond heart rate interval int hrValues Heart rate data array - (void)v2_appIngSportReplyWithModel:(IDOV2AppIngReplyExchangeModel *)model errorCode:(int)errorCode; v3 app ble reply in motion interaction IDOV3AppIngReplyExchangeModel Parameters Description Notes IDONewDataExchangeModel parent class attribute day、hour、minute、second、sportType dataVersion Data Version The exercise plan version number is 0x20 curHrValue current heart rate int distance distance Unit: m calories calories Unit:J step step/td> Unit:step durations durations Unit:seconds swimPosture swim Posture 0x00 :Medley;0x01: Freestyle; 0x02: Breaststroke; 0x03: Backstroke; 0x04: Butterfly; status The status of the bracelet returned start: 1, pause: 2, end: 3, 0: invalid state status Status returned by the bracelet start:1,pause:2, end:3,0: invalid status kmSpeed Average km pace int realTimeSpeed App calculation shows real-time speed unit km/h 100 times 15 seconds a record realTimePace App calculation shows real-time pace Units anaerobicTrainingEffect Anaerobic training effect Units: None Range 1.0 ~ 5.0 （*10 times） trainingEffect Aerobic Training Effects Units: None Range 1.0 ~ 5.0 （*10 times） countHour sports countdown int countMinute sports countdown int countSecond sports countdown seconds int - (void)v3_appIngSportReplyWithModel:(IDOV3AppIngReplyExchangeModel *)model errorCode:(int)errorCode; v3 app Get heart rate data after exercise IDOHrDataExchangeModel Parameters Description Notes IDONewDataExchangeModel parent class attribute day、hour、minute、second、sportType intervalSecond heart rate interval int heartRateCount heart rate count int hrValues Heart Rate Data Heart Rate Collection - (void)v3_appSportHrReplyWithModel:(IDOHrDataExchangeModel *)model errorCode:(int)errorCode; v3 app Return data after exercise IDOV3SportEndDataExchangeModel Parameters Description Notes IDONewDataExchangeModel parent class attribute day、hour、minute、second、sportType year year int month month int dataVersion Data Version The exercise plan version number is 0x20(32) planType Plan Type int 0x01: Running plan 3km, 0x02: Running plan 5km, 0x03: Running plan 10km, 0x04: Half marathon training (Phase II), 0x05: Marathon training (Phase II) intervalSecond heart rate interval int calories calories int (Unit:J) distance distance int (unit:m) durations durations int (unit:minute) step step int (Step:number of steps) warmUpSecond Warm-up duration int (Seconds) anaeroicSecond Anaerobic exercise duration int (seconds) fatBurnSecond fat burning workout duration int (seconds) aerobicSecond length of aerobic exercise int (seconds) limitSecond Maximum workout time int (Maximum workout time) avgHrValue average heart rate int maxHrValue Max Heart Rate int warmUpValue Warm-up exercise value int burnFatValue Fat Burning Exercise Value int aerobicValue Cardio Value int limitValue Extreme Sports Value int anaerobicValue Anaerobic exercise value int avgSpeed Average speed km/h maxSpeed Maximum Speed km/h avgStepFrequency Average cadence int maxStepFrequency Maximum cadence int avgStepStride Average stride int maxStepStride Maximum stride int kmSpeed Average Kilometer Pace int fastKmSpeed Maximum Kilometer Pace int kmSpeedCount Kilometer pace number int kmSpeeds Kilometer pace collection array mileCount Number of mile paces array mileCount mile pace int mileSpeeds mile pace collection array stepsFrequencyCount Number of steps int stepsFrequencys cadence collection array trainingEffect Effect of aerobic training Unit: None Range 1.0 ~ 5.0 （*10times） vo2Max VO2max Unit: ml/kg/min; range 0-80 actionDataCount The number of training exercises in this exercise int inClassCalories In-class exercise calories Unit kcal completionRate Action Completion Rate 0—100 hrCompletionRate Heart Rate Control Rate 0—100 recoverTime Recovery Duration Unit hour (after the app receives the data, it needs to be decremented by one every hour) grade Oxygen Uptake Level 0x01: Low 0x02: Amateur 0x03: Average 0x04: Average 0x05: Good 0x06: Excellent 0x07: Professional actionData Action completion content array type : Movement type 1. Fast walking; 2. Jogging; 3. Moderate running; 4. Fast running heart_con_value : Heart rate control per action time : Action completion time in seconds goal_time : Action target time trainingOffset Training Course Date Offset int starts at 0 - (void)v3_appEndSportReplyWithModel:(IDOV3SportEndDataExchangeModel *)model errorCode:(int)errorCode; ble stop app movement IDOBleEndExchangeModel Parameters Description Notes IDONewDataExchangeModel parent class attribute day、hour、minute、second、sportType distance Distance Unit:meter calories Calories Unit:J step Steps Unit:step isSave whether to store bool avgHrValue Average Heart Rate int maxHrValue Maximum heart rate int burnFatMins Fat Burn Time (minutes) int aerobicMins Cardio duration (minutes) int limitMins Maximum Workout Duration (minutes) int - (void)bleEndAppSportWithModel:(IDOBleEndExchangeModel *)model errorCode:(int)errorCode; ble Pause app movement IDONewDataExchangeModel Parameters Description Notes IDONewDataExchangeModel parent class attribute day、hour、minute、second、sportType - (void)blePauseAppSportWithModel:(IDONewDataExchangeModel *)model errorCode:(int)errorCode; ble Resume app movement IDONewDataExchangeModel Parameters Description Notes IDONewDataExchangeModel parent class attribute day、hour、minute、second、sportType - (void)bleRestoreAppSportWithModel:(IDONewDataExchangeModel *)model errorCode:(int)errorCode; app Operation Exercise Program Return IDOAppOperatePlanExchangeModel Parameters Description Notes IDONewDataExchangeModel parent class attribute day、hour、minute、second、sportType operate Action Type 0x01: start exercise,0x02: pause exercise, 0x03: resume exercise,0x04: end exercise 0x05: switch action trainingOffset Course Date Offset for Training int starts at 0 actionType Action Type 1 fast walk;2 jogging;3 moderate running;4 fast running planType Plan Type 0x01: Running plan 3km, 0x02: Running plan 5km, 0x03: Running plan 10km, 0x04: Half marathon training (Phase II), 0x05: Marathon training (Phase II) errorCode Error code int 0x00: success, other failures - (void)appOperatePlanReplyWithModel:(IDOAppOperatePlanExchangeModel *)model errorCode:(int)errorCode; ble Operation Exercise Program Return IDOBleOperatePlanExchangeModel Parameters Description Notes IDONewDataExchangeModel parent class attribute day、hour、minute、second、sportType operate Action Type 0x01: start exercise,0x02: pause exercise, 0x03: resume exercise,0x04: end exercise 0x05: switch action actionType Action Type 1 fast walk;2 jogging;3 moderate running;4 fast running planType Plan Type 0x01: Running plan 3km, 0x02: Running plan 5km, 0x03: Running plan 10km,0x04: Half-marathon training (Phase 2),0x05: Marathon training (Phase 2) errorCode Error code int 0x00: success other failure trainingYear Year of training course int trainingMonth Training Course Month int trainingDay Training Session Dates int time Action target time int in seconds lowHeart Heart Rate Range Low int heightHeart Heart Rate Range High int - (void)bleOperatePlanWithModel:(IDOBleOperatePlanExchangeModel *)model errorCode:(int)errorCode; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"IDOApgsUpdateFunction.html":{"url":"IDOApgsUpdateFunction.html","title":"AGPS file update","keywords":"","body":"AGPS file update 11.1Functional Overview AGPS is the Assisted Global Positioning System, which refers to the operation mode of GPS. It can use the information of the mobile phone base station and cooperate with the traditional GPS satellite to make the positioning speed faster. It should be noted that the AGPS file is updated: 15 seconds after the bracelet is connected to the App, the query of the GPS status does not run to update the AGPS file, otherwise the update will fail. 11.2 Corresponding function table //gps funcTable19Model.gps 11.3 Get GPS status =>Get GPS status 11.4 AGPS update method Objc: initTransferManager().transferType = IDO_DATA_FILE_TRAN_AGPS_TYPE; initTransferManager().compressionType = IDO_DATA_TRAN_COMPRESSION_NO_USE_TYPE; initTransferManager().isSetConnectParam = YES; //online fileName: online.ubx //offline fileName: agps.ubx initTransferManager().fileName = fileName; initTransferManager().filePath = filePath; initTransferManager().addDetection(^(int errorCode) { if(errorCode == 0) { //Detection succeeded before update }else { //Detect errors before updating } }).addProgress(^(int progress) { //Update file progress（0-100） }).addTransfer(^(int errorCode) { if(errorCode == 0) { //File transfer succeeded }else { //file transfer failed } }).addWrite(^(int errorCode) { if(errorCode == 0) { //File written successfully }else { //file write failed } }); [IDOTransferFileManager startTransfer]; Swift: initTransferManager().transferType = IDO_DATA_FILE_TRAN_TYPE.AGPS_TYPE; initTransferManager().compressionType = IDO_DATA_TRAN_COMPRESSION_TYPE.NO_USE_TYPE; initTransferManager().isSetConnectParam = true; //online fileName: online.ubx //offline fileName: agps.ubx initTransferManager().fileName = fileName; initTransferManager().filePath = filePath; initTransferManager().addDetection!{(errorCode)in if errorCode == 0{ //Detection succeeded before update }else { //Detect errors before updating } }.addProgress!{(progress)in //Update file progress（0-100） }.addTransfer!{(errorCode)in if errorCode == 0 { //File transfer succeeded }else { //file transfer failed } }.addWrite!{(errorCode)in if errorCode == 0 { //File written successfully }else { //file write failed } }; IDOTransferFileManager.startTransfer(); 11.5 DemoAGPS Update function entry Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"IDOPhotoUpdateFunction.html":{"url":"IDOPhotoUpdateFunction.html","title":"Wallpaper file update","keywords":"","body":"Wallpaper file update 13.1 Functional Overview This function can dynamically update the wallpaper of the bracelet, and transmit pictures of corresponding sizes according to the acquired screen information of the bracelet。 13.2 Wallpaper watch face operation IDOV3WallpaperDialInfoModel Parameters Description Notes operate Operation Type 0x00: query, 0x01: settings, 0x02: delete wallpaper watch face location location 0:Invalid 1: Dial (top left) refer to Jiugongge 2: Dial (top middle)3: Dial (top right) 4: Dial (middle left) 5:Dial (middle center)6: Dial (middle right)7: Dial (bottom left)8: Dial (bottom center)9: Dial (bottom right) hideType Hidden Type 0: show all 1: hide child controls (icons and numbers) widgetType Component Type 0:Invalid 1:Day/Date 2:Steps 3:Distance 4:Calories 5:Heart Rate 6:Battery timeColor Time Color white: #FFFFFF black:#000000 red:#FC1E58 brown:#FF9501 azure:#0091FF turquoise:#44D7B6 widgetIconColor Component Icon Color White: #FFFFFF Black:#000000 Red:#FC1E58 Brown:#FF9501 Sky Blue:#0091FF Turquoise:#44D7B6 widgetNumColor Component Number Color White: #FFFFFF Black:#000000 Red:#FC1E58 Brown:#FF9501 Sky Blue:#0091FF Turquoise:#44D7B6 Get the current device wallpaper dial information Objc: initWatchDialManager().getWallpaperDialInfo(^(IDOV3WallpaperDialInfoModel * _Nullable model, int errorCode) { if (errorCode == 0) { //Get the wallpaper dial information successfully }else if (errorCode == 6) { //Does not support getting wallpaper dial information }else { //Failed to get wallpaper dial information } }); Swift: initWatchDialManager().getWallpaperDialInfo!{(model,errorCode)in { if errorCode == 0 { //Get the wallpaper dial information successfully }else if errorCode == 6 { //Does not support getting wallpaper dial information }else { //Failed to get wallpaper dial information } } Set the current device wallpaper dial information Objc: IDOV3WallpaperDialInfoModel * model = [IDOV3WallpaperDialInfoModel currentModel]; initWatchDialManager().setWallpaperDialInfo(^(int errorCode) { if (errorCode == 0) { //Set wallpaper dial information successfully }else if (errorCode == 6) { //Does not support setting wallpaper dial information }else { // Failed to set wallpaper dial information } }, model) Swift: let model = IDOV3WallpaperDialInfoModel.current() initWatchDialManager().setWallpaperDialInfo!{(errorCode)in if errorCode == 0 { //Set wallpaper dial information successfully }else if errorCode == 6 { //Does not support setting wallpaper dial information }else { // Failed to set wallpaper dial information } }(model) 13.3 Wallpaper transfer update method Objc: initMakePhotoManager().fileName = fileName; initMakePhotoManager().filePath = filePath; initMakePhotoManager().addPhotoProgress(^(int progress) { //Update file progress（0-100） }).addPhotoTransfer(^(int errorCode) { if(errorCode == 0) { //File transfer succeeded }else { // file transfer failed } }); [IDOMakePhotoManager startPhotoTransfer]; Swift: initMakePhotoManager().fileName = fileName; initMakePhotoManager().filePath = filePath; initMakePhotoManager().addPhotoProgress!{(progress)in //Update file progress (0-100) }.addPhotoTransfer!{(errorCode)in if errorCode == 0 { // file transfer succeeded }else { // file transfer failed } }; IDOMakePhotoManager.startPhotoTransfer(); 13.4 Demo Wallpaper update function entrance Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"IDOSportTypes.html":{"url":"IDOSportTypes.html","title":"Exercise Type Description","keywords":"","body":"Exercise Type Description typedef NS_ENUM(NSInteger,IDO_SPORT_TYPE) { /** * 无运动类型 * null */ IDO_SPORT_TYPE_NULL=0, /** * 走路 * walk */ IDO_SPORT_TYPE_WALK=1, /** *跑步 * run */ IDO_SPORT_TYPE_RUN=2, /** *骑行 * cycing */ IDO_SPORT_TYPE_CYCLING=3, /** *徒步 * onfoot */ IDO_SPORT_TYPE_ONFOOT=4, /** *游泳 * swim */ IDO_SPORT_TYPE_SWIM=5, /** *爬山 * climb */ IDO_SPORT_TYPE_CLIMB=6, /** *羽毛球 * badmingon */ IDO_SPORT_TYPE_BADMINTON=7, /** *其他 * other */ IDO_SPORT_TYPE_OTHER=8, /** *健身 * fitness */ IDO_SPORT_TYPE_FITNESS=9, /** *动感单车 * dynamic */ IDO_SPORT_TYPE_DYNAMIC=10, /** *椭圆球 * ellipsoid */ IDO_SPORT_TYPE_ELLIPOSID=11, /**跑步机 *Treadmill */ IDO_SPORT_TYPE_TREADMILL=12, /** *仰卧起坐 *Sit-up */ IDO_SPORT_TYPE_SIT_UP=13, /** *俯卧撑 *Push-up */ IDO_SPORT_TYPE_PUSHUP=14, /** *哑铃 *Dumbbell */ IDO_SPORT_TYPE_DUMBBELLS=15, /** *举重 *Weightlifting */ IDO_SPORT_TYPE_LIFTING=16, /** *健身操 *Aerobics */ IDO_SPORT_TYPE_AEROBICS=17, /** *瑜伽 *Yoga */ IDO_SPORT_TYPE_YOGA=18, /** *跳绳 *Rope Skipping */ IDO_SPORT_TYPE_ROPE=19, /** *乒乓球 *Table tennis */ IDO_SPORT_TYPE_PINGPONG=20, /** *篮球 *Basketball */ IDO_SPORT_TYPE_BASKETBALL=21, /** *足球 *Soccer */ IDO_SPORT_TYPE_SOCKER=22, /** *排球 *Volleyball */ IDO_SPORT_TYPE_VOLLEYBALL=23, /** *网球 *Tennis */ IDO_SPORT_TYPE_TENNISBALL=24, /** *高尔夫球 *Golf */ IDO_SPORT_TYPE_GOLF=25, /** *棒球 *Baseball */ IDO_SPORT_TYPE_BASEBALL=26, /** *滑雪 *Skiing */ IDO_SPORT_TYPE_SKI=27, /** *轮滑 *Roller Skating */ IDO_SPORT_TYPE_ROLLER=28, /** *跳舞 *Dancing */ IDO_SPORT_TYPE_DANCING=29, /** *室内划船 */ IDO_SPORT_TYPE_ROLLER_MACHINE=31, /** *普拉提 *Pilates */ IDO_SPORT_TYPE_PILATES=32, /** *交叉训练 *Cross Training */ IDO_SPORT_TYPE_CROSS_TRAIN=33, /** *有氧训练 */ IDO_SPORT_TYPE_CARDIO=34, /** *尊巴舞 *Zumba */ IDO_SPORT_TYPE_ZUMBA=35, /** *广场舞 *Square dance */ IDO_SPORT_TYPE_SQUARE_DANCE=36, /** *平板支撑 *Plank */ IDO_SPORT_TYPE_PLANK=37, /** * 健身房 *Gym */ IDO_SPORT_TYPE_GYM=38, /** * 有氧健身操 *Aerobics */ IDO_SPORT_TYPE_AEROBICS_OXYGEN=39, /** * 户外跑步 *Outdoor run */ IDO_SPORT_TYPE_OUTDOOR_RUN=48, /** * 室内跑步 *Indoor run */ IDO_SPORT_TYPE_INDOOR_RUN=49, /** * 户外骑行 *Outdoor cycle */ IDO_SPORT_TYPE_OUTDOOR_CYCLE=50, /** * 室内骑行 *Indoor cycle */ IDO_SPORT_TYPE_INDOOR_CYCLE=51, /** * 户外走路 *Outdoor Hiking */ IDO_SPORT_TYPE_OUTDOOR_WALK=52, /** * 室内走路 *Indoor Walking */ IDO_SPORT_TYPE_INDOOR_WALK=53, /** * 泳池游泳(室内游泳) * Pool swim */ IDO_SPORT_TYPE_POOL_SWIM=54, /** * 开放水域游泳（室外游泳） * Open water swim */ IDO_SPORT_TYPE_WATER_SWIM=55, /** * 椭圆机 *Elliptical */ IDO_SPORT_TYPE_ELLIPTICAL=56, /** * 划船机 *Rower */ IDO_SPORT_TYPE_ROWER=57, /** * 高强度间歇训练法 *High-intensity interval training (HIIT) */ IDO_SPORT_TYPE_HIIT=58, /** * 板球运动cricket */ IDO_SPORT_TYPE_CRICKET=75, /** * 自由训练 *Others */ IDO_SPORT_TYPE_FREE_TRAINING=100, /** * 功能性力量训练 *Functional strength training */ IDO_SPORT_TYPE_FUNCTIONAL_STRENGTH_TRAINING=101, /** * 核心训练 *Core training */ IDO_SPORT_TYPE_CORE_TRAINING=102, /** * 踏步机 *Stepper */ IDO_SPORT_TYPE_STEPPER=103, /** * 整理放松 *Cooldown */ IDO_SPORT_TYPE_ORGANIZE_AND_RELAX=104, /** * 传统力量训练 *Traditional strength training */ IDO_SPORT_TYPE_TRADITIONAL_STRENGTH_TRAINING=110, /** * 引体向上 *Pull-up */ IDO_SPORT_TYPE_PULL_UP=112, /** * 开合跳 *Jumping jacks */ IDO_SPORT_TYPE_OPENING_AND_CLOSING_JUMP=114, /** * 深蹲 *Squat */ IDO_SPORT_TYPE_SQUAT=115, /** * 高抬腿 *High knee lift */ IDO_SPORT_TYPE_HIGH_LEG_LIFT=116, /** * 拳击 *Boxing */ IDO_SPORT_TYPE_BOXING=117, /** * 杠铃 *Barbell */ IDO_SPORT_TYPE_BARBELL=118, /** * 武术 *Martial arts */ IDO_SPORT_TYPE_MARTIAL_ART=119, /** * 太极 *Tai Chi */ IDO_SPORT_TYPE_TAI_CHI=120, /** * 跆拳道 *Taekwondo */ IDO_SPORT_TYPE_TAEKWONDO=121, /** * 空手道 *Karate */ IDO_SPORT_TYPE_KARATE=122, /** * 自由搏击 *Free sparring */ IDO_SPORT_TYPE_FREE_FIGHT=123, /** * 击剑 *Fencing */ IDO_SPORT_TYPE_FENCING=124, /** * 射箭 *Archery */ IDO_SPORT_TYPE_ARCHERY=125, /** * 体操 *Gymnastics */ IDO_SPORT_TYPE_ARTISTIC_GYMNASTICS=126, /** * 单杠 *Horizontal bar */ IDO_SPORT_TYPE_HORIZONTAL_BAR=127, /** * 双杠 *Parallel bars */ IDO_SPORT_TYPE_PARALLEL_BARS=128, /** * 漫步机 *Cardio cruiser */ IDO_SPORT_TYPE_WALKING_MACHINE=129, /** * 登山机 *Climbing machine */ IDO_SPORT_TYPE_MOUNTAINEERING_MACHINE=130, /** * 保龄球 *Bowling */ IDO_SPORT_TYPE_BOWLING=131, /** * 台球 *Billiards */ IDO_SPORT_TYPE_BILLIARDS=132, /** * 曲棍球 *Hockey */ IDO_SPORT_TYPE_HOCKEY=133, /** * 橄榄球 *American football */ IDO_SPORT_TYPE_RUGBY=134, /** * 壁球 *Squash */ IDO_SPORT_TYPE_SQUASH=135, /** * 垒球 *Softball */ IDO_SPORT_TYPE_SOFTBALL=136, /** * 手球 *Handball */ IDO_SPORT_TYPE_HANDBALL=137, /** * 毽球 *Shuttlecock kicking */ IDO_SPORT_TYPE_SHUTTLECOCK=138, /** * 沙滩足球 *Beach football */ IDO_SPORT_TYPE_BEACH_SOCCER=139, /** * 藤球 *Sepak takraw */ IDO_SPORT_TYPE_SEPAKTAKRAW=140, /** * 躲避球 *Dodge ball */ IDO_SPORT_TYPE_DODGEBALL=141, /** * 街舞 *Street dance */ IDO_SPORT_TYPE_HIP_HOP=152, /** * 芭蕾 *Ballet */ IDO_SPORT_TYPE_BALLET=153, /** * 社交舞 *Social dance */ IDO_SPORT_TYPE_SOCIAL_DANCE=154, /** * 飞盘 *Frisbee */ IDO_SPORT_TYPE_FRISBEE=155, /** * 飞镖 *Darts */ IDO_SPORT_TYPE_DARTS=156, /** * 骑马 *Horse riding */ IDO_SPORT_TYPE_RIDING=157, /** * 爬楼 *Stair climbing */ IDO_SPORT_TYPE_CLIMB_BUILDING=158, /** * 放风筝 *Kite flying */ IDO_SPORT_TYPE_KITE_FLYING=159, /** * 钓鱼 *Fishing */ IDO_SPORT_TYPE_GO_FISHING=160, /** * 雪橇 *Sledding */ IDO_SPORT_TYPE_SLED=161, /** * 雪车 *Bobsleigh */ IDO_SPORT_TYPE_SNOWMOBILE=162, /** * 单板滑雪 *Snowboarding */ IDO_SPORT_TYPE_SNOWBOARDING=163, /** * 雪上运动 *Snow sports */ IDO_SPORT_TYPE_SNOW_IDO_SPORTS=164, /** * 高山滑雪 *Alpine skiing */ IDO_SPORT_TYPE_ALPINE_SKIING=165, /** * 越野滑雪 *Cross-country skiing */ IDO_SPORT_TYPE_CROSS_COUNTRY_SKIING=166, /** * 冰壶 *Curling */ IDO_SPORT_TYPE_CURLING=167, /** * 冰球 *Ice hockey */ IDO_SPORT_TYPE_ICE_HOCKEY=168, /** * 冬季两项 *Biathlon */ IDO_SPORT_TYPE_WINTER_BIATHLON=169, /** * 冲浪 *Surfing */ IDO_SPORT_TYPE_SURFING=170, /** * 帆船 *Sailboating */ IDO_SPORT_TYPE_SAILBOAT=171, /** * 帆板 *Windsurfing */ IDO_SPORT_TYPE_SAILBOARD=172, /** * 皮艇 *Kayaking */ IDO_SPORT_TYPE_KAYAK=173, /** * 摩托艇 *Motorboating */ IDO_SPORT_TYPE_MOTORBOAT=174, /** * 划艇 *Paddling */ IDO_SPORT_TYPE_ROWBOAT=175, /** * 赛艇 *Rowing */ IDO_SPORT_TYPE_ROWING=176, /** * 龙舟 *Dragon boat racing */ IDO_SPORT_TYPE_DRAGON_BOAT=177, /** * 水球 *Water polo */ IDO_SPORT_TYPE_WATER_POLO=178, /** * 漂流 *Rafting */ IDO_SPORT_TYPE_DRIFT=179, /** * 滑板 *Skateboarding */ IDO_SPORT_TYPE_SKATE=180, /** * 攀岩 *Rock climbing */ IDO_SPORT_TYPE_ROCK_CLIMBING=181, /** * 蹦极 *Bungee jumping */ IDO_SPORT_TYPE_BUNGEE_JUMPING=182, /** * 跑酷 *Parkour */ IDO_SPORT_TYPE_PARKOUR=183, /** * BMX 越野自行车 */ IDO_SPORT_TYPE_BMX=184, /** * 户外玩耍 *Outdoor play */ IDO_SPORT_TYPE_OUTDOOR_FUN=193, /** * 其他运动 *Other sports */ IDO_SPORT_TYPE_OTHER_ACTIVITY=194, }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"IDOQueryDataFunction.html":{"url":"IDOQueryDataFunction.html","title":"Data query function","keywords":"","body":"Data query function 14.1 Functional Overview There are query synchronization data wrapper methods in each model class. Only the encapsulated method query has detailed data, while the data queried by the custom query method has no detailed data, and the detailed data needs to be converted and assigned by itself. Database operations are recommended not to delete database data, but only to insert or update data. The current data can only be queried after the synchronization is completed, and the unsynchronized data is still in the bracelet。 14.2 Main query interface Step count v2 data query Step count v3 data query Sleep v2 data query Sleep v3 data query Blood oxygen data query Pressure data query Activity v2 data query Activity v3 data query Body power data query Blood pressure v2 data query Blood pressure v3 data query Gps v2 data query Gps v3 data query Skin temperature data query Respiratory rate data query Heart rate v2 data query Heart rate v3 data query Noise data query Swimming data query 14.3 Demo query data entry Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQuerySportFunction_v2.html":{"url":"query/IDOQuerySportFunction_v2.html","title":"Step count v2 data query","keywords":"","body":"v2 Step count data query parameter explanation IDOSyncSportDataItemInfoBluetoothModel parameter explanation remarks mode Motion mode 00: quiet, 01: slight, 10: moderately active, 11: intense sportCount Movement steps int activeTime Active hour room int (second) calories calorie int (Kcal) distance Movement distance int (mi) dateStr Exercise hour day Accurate to day int serialNumber serialNumber int IDOSyncSportDataInfoBluetoothModel parameter explanation remarks itemsCount Number of motion packets int year year int month month int day day int dateStr time stamp Accurate to date str sportItems Motion data set array (IDOSyncSportDataItemInfoBluetoothModel) totalStep Total movement steps int (unit：step) totalCalories Total exercise calories int (unit：kcal) totalDistances Total distance of movement int (unit：metre) totalActiveTime Total hours of exercise int (second) minuteOffset Start offset int perMinute Generate data interval int goalSportData Number of target movements int totalCount Steps per day items int keyWord keyword 0: invalid; 1: Super; 2: Waves; 3: Stable; 4: Slow; 5: Laziness; 6: Incense7: a; 8: Sleepy; 9: Burning; 10: Warm; 11: Dynamic; 12: Buddha; 13: Show;14: Spelling; 15: Habitual; 16: Cool;Only applicable to Dongha app (obsolete) Query steps by year Objc: //parameter：Year, MAC address、Query details [IDOSyncSportDataModel queryOneYearSportsWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //parameter：Year, MAC address、Query details IDOSyncSportDataModel.queryOneYearSports(withYear: year, macAddr: macAddr, isQueryItems: false); Query steps by month Objc: //parameter：year、month、MAC address、day collection within the month、Query details [IDOSyncSportDataModel queryOneMonthSportsWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //parameter：year、month、MAC address、day collection within the month、Query details IDOSyncSportDataModel.queryOneMonthSports(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); Query steps by week Objc: //parameter: Week index, week start, MAC address, day collection within the week, query details [IDOSyncSportDataModel queryOneWeekSportsWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //parameter: Week index, week start, MAC address, day collection within the week, query details IDOSyncSportDataModel.queryOneWeekSports(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Query steps by day Objc: //parameter: Year, month, day, MAC address [IDOSyncSportDataModel queryOneDaySportDetailWithMac:macAddr year:year month:month day:day]; Swift: //parameter: Year, month, day, MAC address IDOSyncSportDataModel.queryOneDaySportDetail(withMac:macAddr, year:year, month:month, day:day); Query all steps Objc: //parameter: MAC address [IDOSyncSportDataModel queryAllSportsWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncSportDataModel.queryAllSports(withMac:macAddr); Query all basic steps Objc: //parameter: MAC address [IDOSyncSportDataModel queryAllContractedSportsWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncSportDataModel.queryAllContractedSports(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQuerySportFunction_v3.html":{"url":"query/IDOQuerySportFunction_v3.html","title":"Step count v3 data query","keywords":"","body":"v3 Step count data query parameter explanation IDOSyncV3SportDataItemInfoBluetoothModel parameter explanation remarks mode Motion mode 00: quiet, 01: slight,10:Moderately active,11:fierce sportCount Movement steps int activeTime Active hour room int (second) calories calorie int (kcal) distance Movement distance int (metre) dateStr Exercise hour day Accurate to day int serialNumber serialNumber int IDOSyncV3SportDataInfoBluetoothModel parameter explanation remarks wearFlagArray Wearing minutes per hour array (number) itemsCount Number of motion packets int year year int month month int day day int dateStr time stamp Accurate to date str sportItems Motion data set array (IDOSyncV3SportDataItemInfoBluetoothModel) totalStep Total movement steps int (unit : step) totalCalories Total exercise calories int (unit : kcal) activitycalories Resting calories int (unit : kcal) restingCalories Active calories int (unit : kcal) totalDistances total distance int (unit: metre) totalActiveTime Total hours of exercise int (second) total distance minuteOffset Start offset int perMinute Generate data interval int goalSportData Number of target movements int totalCount Steps per day items int Query steps by year Objc: //parameter：Year, MAC address、Query details [IDOSyncSportDataModel queryOneYearV3SportsWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //parameter：Year, MAC address、Query details IDOSyncSportDataModel.queryOneYearV3Sports(withYear: year, macAddr: macAddr, isQueryItems: false); Query steps by month Objc: //parameter：year、month、MAC address、day collection within the month、Query details [IDOSyncSportDataModel queryOneMonthV3SportsWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //parameter：year、month、MAC address、day collection within the month、Query details IDOSyncSportDataModel.queryOneMonthV3Sports(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); Query steps by week Objc: //parameter: Week index, week start, MAC address, day collection within the week, query details [IDOSyncSportDataModel queryOneWeekV3SportsWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //parameter: Week index, week start, MAC address, day collection within the week, query details IDOSyncSportDataModel.queryOneWeekV3Sports(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Query steps by day Objc: //parameter: Year, month, day, MAC address [IDOSyncSportDataModel queryOneDayV3SportDetailWithMac:macAddr year:year month:month day:day]; Swift: //parameter: Year, month, day, MAC address IDOSyncSportDataModel.queryOneDayV3SportDetail(withMac:macAddr, year:year, month:month, day:day); Query all steps Objc: //parameter: MAC address [IDOSyncSportDataModel queryAllV3SportsWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncSportDataModel.queryAllV3Sports(withMac:macAddr); Query all basic steps Objc: //parameter: MAC address [IDOSyncSportDataModel queryAllV3ContractedSportsWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncSportDataModel.queryAllV3ContractedSports(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQuerySleepFunction_v2.html":{"url":"query/IDOQuerySleepFunction_v2.html","title":"Sleep v2 data query","keywords":"","body":"V2 sleep data query parameter explanation IDOSyncSleepDataItemInfoBluetoothModel parameter explanation remarks sleepStatus Sleep state Sleep state(0x01: Awake, 0x02:Light sleep, 0x03:Deep sleep) durations Continuous hour int dateStr time stamp Accurate to date int startTimeStr Hour timestamp is accurate to minute int serialNumber serialNumber int IDOSyncSleepDataInfoBluetoothModel parameter explanation remarks itemsCount Number of sleep packets int endHour Sleep end hour int endMinute Sleep end minute int totalMinute Total sleep hours int (unit ：minute) lightSleepCount Light sleep times int deepSleepCount Number of deep sleep int wakeCount Number of wakes int wakeMinute Wake up hour long int (unit : minute) lightSleepMinute Light sleep hour int (unit : minute) deepSleepMinute Deep sleep hour int (unit : minute) goalSleepData Target sleep hour length int (unit : minute) sleepItems Sleep data set array (IDOSyncSleepDataItemInfoBluetoothModel) year year int month month int day day int dateStr time stamp Accurate to date str startTimeStr Hour timestamp is accurate to minute str sleepScore sleeping minute score int (1-100) Query sleep by year Objc: //parameter：Year, MAC address,Query details [IDOSyncSleepDataModel queryOneYearSleepsWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //parameter：Year, MAC address,Query details IDOSyncSleepDataModel.queryOneYearSleeps(withYear: year, macAddr: macAddr, isQueryItems: false); Query sleep by month Objc: //parameter：year,month,MAC address,month,day collecion,Query details [IDOSyncSleepDataModel queryOneMonthSleepsWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //parameter：year,month,MAC address,month,day collecion,Query details IDOSyncSleepDataModel.queryOneMonthSleeps(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); Query sleep by week Objc: //parameter: Week index, week start, MAC address, day collection within the week, query details [IDOSyncSleepDataModel queryOneWeekSleepsWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //parameter: Week index, week start, MAC address, day collection within the week, query details IDOSyncSleepDataModel.queryOneWeekSleeps(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Query sleep by day Objc: //parameter: Year, month, day, MAC address [IDOSyncSleepDataModel queryOneDaySleepsDetailWithMac:macAddr year:year month:month day:day]; Swift: //parameter: Year, month, day, MAC address IDOSyncSleepDataModel.queryOneDaySleepsDetail(withMac:macAddr, year:year, month:month, day:day); Query all sleep Objc: //parameter: MAC address [IDOSyncSleepDataModel queryAllSleepsWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncSleepDataModel.queryAllSleeps(withMac:macAddr); Query all basic sleep Objc: //parameter: MAC address [IDOSyncSleepDataModel queryAllContractedSleepsWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncSleepDataModel.queryAllContractedSleeps(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQuerySleepFunction_v3.html":{"url":"query/IDOQuerySleepFunction_v3.html","title":"Sleep v3 data query","keywords":"","body":"V3 sleep data query parameter explanation IDOSyncV3SleepDataItemInfoBluetoothModel parameter explanation remarks stage Sleep state Stage 0x01: awake, 0x02: light sleep, 0x03: deep sleep0x04: eye movement durations Continuous hour int (second) serialNumber serialNumber int IDOSyncV3SleepDataInfoBluetoothModel parameter explanation remarks dataType Sleep type 0x01 normal sleep, 0x02 nap, 0x04 eye movement is not supported (scientific sleep) itemsCount Number of sleep packets int dateStr Get up day str getUpTimeStr Hours to get up str Accurate to minute fallAsleepYear Sleep hour year int fallAsleepMonth Sleep hour room month int fallAsleepDay Sleep hour room day int fallAsleepHour Sleep hour room hour int fallAsleepMinutes Sleep hour room minute int getUpYear Wake up hour room year int getUpMonth Wake up hour room month int getUpDay Wake up hour room day int getUpHour Wake up hour room hour int getUpMinutes Wake up hour room minute int totalMinute Total sleep hours int (minute) wakeMinute Wake up hour long int lightSleepMinute Wake up hour long int deepSleepMinute Deep sleep hour int remSleepMinute Eye movement sleep hour int lightSleepCount Light sleep times int wakeCount Number of wakes int deepSleepCount Number of deep sleep int remSleepCount Eye movement sleep times int sleepItems Sleep collection array (IDOSyncV3SleepDataItemInfoBluetoothModel) awrrStatus Respiratory status int breathRate Respiratory quality 0-100 无Company sleepScore Sleep minute 1-100 goalSleepData Target sleep hour length int (minute) Query sleep by year Objc: //parameter：Year, MAC address、Query details [IDOSyncSleepDataModel v3QueryOneYearSleepsWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //parameter：Year, MAC address、Query details IDOSyncSleepDataModel.v3QueryOneYearSleeps(withYear: year, macAddr: macAddr, isQueryItems: false); Query sleep by month Objc: //parameter：year,month,MAC address,day collection,Query details [IDOSyncSleepDataModel v3QueryOneMonthSleepsWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //parameter：year,month,MAC address,day collection,Query details IDOSyncSleepDataModel.v3QueryOneMonthSleeps(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); Query sleep by week Objc: //parameter: Week index, week start, MAC address, day collection within the week, query details [IDOSyncSleepDataModel v3QueryOneWeekSleepsWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //parameter: Week index, week start, MAC address, day collection within the week, query details IDOSyncSleepDataModel.v3QueryOneWeekSleeps(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Query sleep by day Objc: //parameter: Year, month, day, MAC address [IDOSyncSleepDataModel v3QueryOneDaySleepsDetailWithMac:macAddr year:year month:month day:day]; Swift: //parameter: Year, month, day, MAC address IDOSyncSleepDataModel.v3QueryOneDaySleepsDetail(withMac:macAddr, year:year, month:month, day:day); Query all sleep Objc: //parameter: MAC address [IDOSyncSleepDataModel v3QueryAllSleepsWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncSleepDataModel.v3QueryAllSleeps(withMac:macAddr); Query all basic sleep Objc: //parameter: MAC address [IDOSyncSleepDataModel v3QueryAllContractedSleepsWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncSleepDataModel.v3QueryAllContractedSleeps(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQueryBopFunction.html":{"url":"query/IDOQueryBopFunction.html","title":"Blood oxygen data query","keywords":"","body":"Blood oxygen data query Parameter description IDOSyncBloodOxygenItemInfoBluetoothModel parameter explain remarks dateStr date str offset Sub time offset int (second) spo2Val Blood oxygen value int serialNumber serialNumber int IDOSyncBloodOxygenDataInfoBluetoothModel parameter explain remarks year particular year int month month int day date int dateStr date Accurate to date str minuteOffset Total time offset str (second) itemsCount Blood oxygen packet volume int bloodOxygens Blood oxygen collection array (IDOSyncBloodOxygenItemInfoBluetoothModel) avgBloodOxygen Mean blood oxygen int maxBloodOxygen Maximum blood oxygen int minBloodOxygen Minimum blood oxygen int Query blood oxygen by year Objc: //parameter: Year, MAC address, query details [IDOSyncSpo2DataModel queryOneYearBloodOxygenWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //parameter: Year, MAC address, query details IDOSyncSpo2DataModel.queryOneYearBloodOxygen(withYear: year, macAddr: macAddr, isQueryItems: false); Query blood oxygen by month Objc: //Parameters: year, month, MAC address, date set in month, query details [IDOSyncSpo2DataModel queryOneMonthBloodOxygenWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //Parameters: year, month, MAC address, date set in month, query details IDOSyncSpo2DataModel.queryOneMonthBloodOxygen(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); Query blood oxygen by week Objc: //Parameters: Week index, week start, MAC address, day of the week collection, query details [IDOSyncSpo2DataModel queryOneWeekBloodOxygenWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //Parameters: Week index, week start, MAC address, day of the week collection, query details IDOSyncSpo2DataModel.queryOneWeekBloodOxygen(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Query blood oxygen by day Objc: //Parameters: year, month, day, MAC address [IDOSyncSpo2DataModel queryOneDayBloodOxygenDetailWithMac:macAddr year:year month:month day:day]; Swift: //Parameters: year, month, day, MAC address IDOSyncSpo2DataModel.queryOneDayBloodOxygenDetail(withMac:macAddr, year:year, month:month, day:day); Query all blood oxygen Objc: //Parameter: MAC address [IDOSyncSpo2DataModel queryAllBloodOxygensWithMac:macAddr]; Swift: //Parameter: MAC address IDOSyncSpo2DataModel.queryAllBloodOxygens(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQueryPressureFunction.html":{"url":"query/IDOQueryPressureFunction.html","title":"Pressure data query","keywords":"","body":"Pressure data query parameter explanation IDOSyncPressureItemInfoBluetoothModel parameter explanation remarks dateStr day Accurate to day str offset Sub time offset int (minute) pressureVal Pressure value int serialNumber serialNumber int IDOSyncPressureDataInfoBluetoothModel parameter explanation remarks year year int month month int day day int dateStr day Accurate to day str minuteOffset Total time offset int (minute) itemsCount Pressure packet volume int pressures Pressure collection array (IDOSyncPressureItemInfoBluetoothModel) Query pressure by year Objc: //parameter：Year, MAC address、Query details [IDOSyncPressureDataModel queryOneYearPressureWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //parameter：Year, MAC address、Query details IDOSyncPressureDataModel.queryOneYearPressure(withYear: year, macAddr: macAddr, isQueryItems: false); Query pressure by month Objc: //parameter：year,month,MAC address,day collection within the month,Query details [IDOSyncPressureDataModel queryOneMonthPressureWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //parameter：year,month,MAC address,day collection within the month,Query details IDOSyncPressureDataModel.queryOneMonthPressure(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); Query pressure by week Objc: //parameter: Week index, week start, MAC address, day collection within the week, query details [IDOSyncPressureDataModel queryOneWeekPressureWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //parameter: Week index, week start, MAC address, day collection within the week, query details IDOSyncPressureDataModel.queryOneWeekPressure(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Query pressure by day Objc: //parameter: Year, month, day, MAC address [IDOSyncPressureDataModel queryOneDayPressureDetailWithMac:macAddr year:year month:month day:day]; Swift: //parameter: Year, month, day, MAC address IDOSyncPressureDataModel.queryOneDayPressureDetail(withMac:macAddr, year:year, month:month, day:day); Query all pressures Objc: //parameter: MAC address [IDOSyncPressureDataModel queryAllPressuresWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncPressureDataModel.queryAllPressures(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQueryActivityFunction_v2.html":{"url":"query/IDOQueryActivityFunction_v2.html","title":"Activity v2 data query","keywords":"","body":"V2 activity data query Model explanation IDOSyncActivityDataInfoBluetoothModel parameter explanation remarks year particular year int month month int day date int hour Hour int minute branch int second second int dateStr date Accurate to date str timeStr start time Accurate to seconds str dataLength Data length int hrInterval Heart rate data generation interval int (Company : s) hrItemCount Number of heart rate data int packetCount Total number of packages int type Joints 0x01:walk, 0x02:run, 0x03:Riding 0x04:on foot Only these types have track motion step Number of steps( When Riding, the number of steps is 0) int durations Duration int (Company:s) calories calorie int (Company:Kcal) distance distance int (Company: rice) avgHrValue Mean heart rate int maxHrValue Maximum heart rate int burnFatMins Fat burning time int aerobicMins Cardiopulmonary exercise duration [Aerobic exercise duration] int (minute) limitMins Extreme exercise duration int (minute) anaerobicMins Duration of anaerobic exercise int (minute) warmUpMins warm up time int (minute) hrValuesStr Heart rate set with serial number (JSON string) str isSave Need to save data (For data exchange) bool startFrom Motion initiator (1 : Bracelet initiation 0 : App initiation) int Query activity by timestamp Objc: //Parameter timestamp, MAC address [IDOSyncActivityDataModel queryOneActivityDataWithTimeStr:timeStr macAddr:macAddr]; Swift: //Parameter timestamp, MAC address IDOSyncActivityDataModel.queryOneActivityData(withTimeStr:timeStr, macAddr: macAddr); Query activities by day Objc: //Parameter year, month, day, MAC address [IDOSyncActivityDataModel queryOneDayActivityDataWithMacAddr:macAddr year:year month:month day:day]; Swift: //Parameter year, month, day, MAC address IDOSyncActivityDataModel.queryOneDayActivityData(withMacAddr:macAddr, year:year,month:month,day:day); Query activities by month Objc: //Parameter year, month, MAC address [IDOSyncActivityDataModel queryOneMonthActivityDataWithMacAddr:macAddr year:year month:month]; Swift: //Parameter year, month, MAC address IDOSyncActivityDataModel.queryOneMonthActivityData(withMacAddr:macAddr, year:year,month:month); Query activities by year Objc: //Parameter year, MAC address [IDOSyncActivityDataModel queryOneYearActivityDataWithMacAddr:macAddr year:year]; Swift: //Parameter year, MAC address IDOSyncActivityDataModel.queryOneYearActivityData(withMacAddr:macAddr, year:year); Paged query activity Objc: //Parameter number of pages, number of pages per page, MAC address [IDOSyncActivityDataModel queryOnePageActivityDataWithPageIndex:pageIndex numOfPage:numOfPage macAddr:macAddr ]; Swift: //Parameter number of pages, number of pages per page, MAC address IDOSyncActivityDataModel.queryOnePageActivityData(withPageIndex:pageIndex, numOfPage:numOfPage,macAddr:macAddr); All track motion Objc: //Parameter MAC address [IDOSyncActivityDataModel queryAllTrajectorySportActivitysWithMac:macAddr]; Swift: //Parameter MAC address IDOSyncActivityDataModel.queryAllTrajectorySportActivitys(withMac:macAddr); All light sports Objc: //Parameter MAC address [IDOSyncActivityDataModel queryAllLightSportActivitysWithMac:macAddr]; Swift: //Parameter MAC address IDOSyncActivityDataModel.queryAllLightSportSportActivitys(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQueryActivityFunction_v3.html":{"url":"query/IDOQueryActivityFunction_v3.html","title":"Activity v3 data query","keywords":"","body":"V3 activity data query Model description IDOSyncV3ActivityDataInfoBluetoothModel parameter explanation remarks year particular year int month month int day date int hour Hour int minute branch int second second int dateStr date Accurate to date str timeStr start time Accurate to seconds str dataLength Data length int hrInterval Heart rate data generation interval int (Company : s) hrItemCount Number of heart rate data int packetCount Total number of packages int type Joints 0: none, 1: walking, 2: running, 3: cycling, 4: hiking, 5: swimming, 6: mountain climbing, 7: badminton, 8: other, 9: fitness, 10: spinning, 11: Elliptical machine, 12: treadmill, 13: sit ups, 14: push ups, 15: dumbbells, 16: weightlifting, 17: aerobics, 18: yoga, 19: rope skipping, 20: table tennis, 21: basketball, 22: football, 23: volleyball, 24: tennis, 25: golf, 26: baseball, 27: skiing, 28: roller skating, 29: dancing, 48: outdoor running, 49: indoor running, 50: outdoor cycling, 51: indoor cycling, 52: outdoor walking, 53: indoor walking, 54: swimming pool, 55: swimming in open water, 56: elliptical machine, 57: rowing machine, 58: high-intensity interval training, 75: cricket Basic movement: 100: free training, 101: functional strength training, 102: core training, 103: treadmill, 104: finishing and relaxing Fitness (25 kinds) 110: traditional strength training, 112: pull up, 114: open and close jump, 115: squat, 116: high leg lift, 117: boxing, 118: barbell, 119: martial arts, 120: Tai Chi, 121: Taekwondo, 122: Karate, 123: free fighting, 124: fencing, 125: archery, 126: gymnastics, 127: horizontal bar, 128: parallel bar, 129: walking machine, 130: mountaineering machine ball game: 131: bowling, 132: billiards, 133: hockey, 134: rugby, 135: squash, 136: softball, 137: handball, 138: shuttlecock, 139: beach football, 140: rattan ball, 141: dodge ball leisure sports 152: street dance, 153: ballet, 154: social dance, 155: Frisbee, 156: darts, 157: horse riding, 158: climbing stairs, 159: flying kites, 160: fishing winter sports 161: sled, 162: snowmobile, 163: snowboarding, 164: snow sports, 165: alpine skiing, 166: cross-country skiing, 167: curling, 168: hockey, 169: biathlon in winter Water sports (10 kinds) 170: surfing, 171: sailing, 172: windsurfing, 173: kayaking, 174: motorboat, 175: rowing, 176: rowing, 177: dragon boat, 178: water polo, 179: rafting, Extreme sports (5 kinds) 180: skateboarding, 181: rock climbing, 182: bungee jumping, 183: parkour, 184:bmx, Kr01 custom project 193:Outdoor Fun (outdoor play), 194:Other Activity (other sports) planType Plan type 1: Running plan 3km, 2: running plan 5km, 3: running plan 10km， 4: Half marathon training (phase II), 5: marathon training (phase II) 65:10 minutes of easy running, 66:15 minutes of easy running, 67: walking and running combined with elementary level,68: advanced combination of walking and running , 69: strengthen the combination of walking and running 128: Post run stretch step Number of steps(When riding, the number of steps is 0) int durations Duration int (unit:s) calories calorie int (Unit: kcal) distance distance int (Unit: meter) inClassCalories In class calories Unit: kcal completionRate Action completion rate 0-100 hrCompletionRate Heart rate control rate 0-100 avgHrValue Mean heart rate int maxHrValue Maximum heart rate int burnFatMins Fat burning time int aerobicMins Cardiopulmonary exercise duration [Aerobic exercise duration] int (minute) limitMins Extreme exercise duration int (minute) anaerobicMins Duration of anaerobic exercise int (minute) warmUpMins Warm up duration int (minute) hrValuesStr Heart rate set with serial number JSON string str dataValuesStr Save data sets every minute JSON string str Max. 6 hours @{@\"steps\":@(steps),@\"calories\":@(calories),@\"distance\":@(distance)} isSave Need to save data (for data exchange) bool startFrom Motion initiator (1 : Bracelet initiation 0 : App initiation) int avgSpeed average velocity int maxSpeed Maximum speed int avgKmSpeed Average pace int fastKmSpeed fastest pace int avgStepFrequency Average step frequency int maxStepFrequency Maximum step frequency int avgStepStride Average stride int maxStepStride full stride int warmUpHrTime Warm up duration (second) int burnFatHrTime fat burning workout hour(second) int aerobicHrTime Cardiopulmonary exercise duration (second) int anaerobicHrTime Duration of anaerobic exercise (second) int limitHrTime Extreme exercise duration (second) int kmSpeedItems Pace collection per kilometer Maximum kilometers: 100 kilometers S clock data transmission How many seconds does it take for a kilometer frequencyItems Step frequency set array mileSpeedItems Pace collection per mile array connectApp Whether the bracelet is connected to the app 1 is connected, 0 is not connected avgPaceSpeed Average pace It's the s clock For example, 361 361/60=6 minutes, the remainder is 1s 6''1', and kilometers and miles are based on miles = kilometers *1609/1000f fastPaceSpeed Fastest pace int trainingEffect training effect Range 1.0 ~ 5.0 (*10 times） vo2Max Maximum oxygen uptake Unit: ml / kg / min the range 0-80 is not enlarged by 100 times grade Oxygen uptake level 1:low grade 2:amateur 3:commonly 4: Average 5: Good 6: Excellent 7: Major recoveryTimeYear Recovery time point year int recoveryTimeMon Recovery time point month int recoveryTimeDay Recovery time point day int recoveryTimeHour When restoring a point in time int recoveryTimeMin Recovery time point int recoveryTimeSecond Recovery time point seconds int endMonth Movement end time month int endDay Movement end day int endHour Movement end hour int endMinute Movement end minute int minHrValue Minimum heart rate int paceSpeedItems Real time pace array It's coming from s clock Once every 5S paddleNumberItems Pitch array Save once a minute paddleFrequencyItems Pitch frequency array Save once a minute Storage average treadFrequencyItems Step frequency array Save once a minute Storage average actionItems Action detail set type: Action type (decimal) 1 go fast; 2 jogging; 3 medium speed running; 4 run ； 71 left leg anterolateral stretching; 72 right leg anterolateral stretching; 73 left leg posterior stretch; 74 right leg posterior stretch;75 left leg lunge stretch; 76 right leg lunge stretch; 77 left leg medial stretch; 78 right leg inner stretch;79 left calf stretch; 80 right calf stretch actualTime : Actual movement time goalTime : Target time Company s heartValue : Heart rate control value trainingOffset Course date offset for training Start from 0 Query activity by timestamp Objc: //Parameter timestamp, MAC address [IDOSyncActivityDataModel queryOneV3ActivityDataWithTimeStr:timeStr macAddr:macAddr]; Swift: //Parameter timestamp, MAC address IDOSyncActivityDataModel.queryOneV3ActivityData(withTimeStr:timeStr, macAddr: macAddr); Query activities by day Objc: //Parameter year, month, day, MAC address [IDOSyncActivityDataModel queryOneDayV3ActivityDataWithMacAddr:macAddr year:year month:month day:day]; Swift: //Parameter year, month, day, MAC address IDOSyncActivityDataModel.queryOneDayV3ActivityData(withMacAddr:macAddr, year:year,month:month,day:day); Query activities by month Objc: //Parameter year, month, MAC address [IDOSyncActivityDataModel queryOneMonthV3ActivityDataWithMacAddr:macAddr year:year month:month]; Swift: //Parameter year, month, MAC address IDOSyncActivityDataModel.queryOneMonthV3ActivityData(withMacAddr:macAddr, year:year,month:month); Query activities by year Objc: //Parameter year, MAC address [IDOSyncActivityDataModel queryOneYearV3ActivityDataWithMacAddr:macAddr year:year]; Swift: //Parameter year, MAC address IDOSyncActivityDataModel.queryOneYearV3ActivityData(withMacAddr:macAddr, year:year); Paged query activity Objc: //Parameter number of pages, number of pages per page, MAC address [IDOSyncActivityDataModel queryOnePageV3ActivityDataWithPageIndex:pageIndex numOfPage:numOfPage macAddr:macAddr ]; Swift: //Parameter number of pages, number of pages per page, MAC address IDOSyncActivityDataModel.queryOnePageV3ActivityData(withPageIndex:pageIndex, numOfPage:numOfPage,macAddr:macAddr); All track motion Objc: //Parameter MAC address [IDOSyncActivityDataModel queryAllTrajectorySportV3ActivitysWithMac:macAddr]; Swift: //Parameter MAC address IDOSyncActivityDataModel.queryAllTrajectorySportV3Activitys(withMac:macAddr); All light movements Objc: //Parameter MAC address [IDOSyncActivityDataModel queryAllLightSportV3ActivitysWithMac:macAddr]; Swift: //Parameter MAC address IDOSyncActivityDataModel.queryAllLightSportSportV3Activitys(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQueryBodyPowerFunction.html":{"url":"query/IDOQueryBodyPowerFunction.html","title":"Body power data query","keywords":"","body":"Body power data query parameter explanation IDOSyncBodyPowerDataModel parameter explain remarks year year int month month int day day int dateStr time stamp Accurate to date str startTime Start time In seconds, offset based on 0 points itemCount Number of body electricity int bodyPowers Body power collection @[{@\"offset\":@(0),@\"value\":@(0),@\"type\":@(0),@\"diff_value\":@(0)}...]Value: the actually generated value has a decimal value. The firmware return value should multiply the actual value by 100offset: Based on the time offset of the previous data point (seconds)Type: tag type 0x01: sleep 0x02: relax 0x03: exercise 0x04 activity 0x05:pressurediff_vDifference from previous Value the difference between the previous value Query body power by year Objc: //Parameter: year, MAC address [IDOSyncBodyPowerDataModel queryOneYearBodyPowerWithYear:year macAddr:macAddr]; Swift: //Parameter: year, MAC address IDOSyncBodyPowerDataModel.queryOneYearBreathRate(withYear: year, macAddr: macAddr); Query body power by month Objc: //Parameters: year, month, MAC address, date set in month [IDOSyncBodyPowerDataModel queryOneMonthBodyPowerWithYear:year month:month macAddr:macAddr datesOfMonth:&days]; Swift: //Parameters: year, month, MAC address, date set in month IDOSyncBodyPowerDataModel.queryOneMonthBodyPower(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days); Query body power by week Objc: //Parameters: Week index, week start, MAC address, day of the week collection [IDOSyncBodyPowerDataModel queryOneWeekBodyPowerWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days]; Swift: //Parameters: Week index, week start, MAC address, day of the week collection IDOSyncBodyPowerDataModel.queryOneWeekBodyPower(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days); Query body power by day Objc: //parameter: Year, month, day, MAC address [IDOSyncBodyPowerDataModel queryOneDayBodyPowerDetailWithMac:macAddr year:year month:month day:day]; Swift: //parameter: Year, month, day, MAC address IDOSyncBodyPowerDataModel.queryOneDayBodyPowerDetail(withMac:macAddr, year:year, month:month, day:day); Query all body power Objc: //parameter: MAC address [IDOSyncBodyPowerDataModel queryAllBodyPowerWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncBodyPowerDataModel.queryAllBodyPower(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQueryBpFunction_v2.html":{"url":"query/IDOQueryBpFunction_v2.html","title":"Blood pressure v2 data query","keywords":"","body":"V2 blood pressure data query Parameter description IDOSyncBpDataItemInfoBluetoothModel parameter explain remarks sysBlood Large systolic blood pressure int diasBlood Small diastolic blood pressure int offset Sub time offset int (minute) serialNumber serialNumber int dateStr time stamp Accurate to date str timeStr time stamp Accurate to minute str isLocal Set the data locally to distinguish the synchronized data of the bracelet bool IDOSyncBpDataInfoBluetoothModel parameter explain remarks itemsCount Blood pressure packet volume int sleepAvgBp Sleep mean blood pressure int maxBp Maximum blood pressure int year year int month month int day day int bloodbPressures Blood pressure collection array (IDOSyncBpDataItemInfoBluetoothModel) dateStr time stamp Accurate to date str minuteOffset Total time offset int (minute) isLocal Set the data locally to distinguish the synchronized data of the bracelet bool Query blood pressure by year Objc: //Parameter: year, MAC address, query details [IDOSyncBpDataModel queryOneYearBloodPressuresWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //Parameter: year, MAC address, query details IDOSyncBpDataModel.queryOneYearBloodPressures(withYear: year, macAddr: macAddr, isQueryItems: false); Query blood pressure by month Objc: //parameter: Year, month, MAC address, day collection in the month, query details [IDOSyncBpDataModel queryOneMonthBloodPressuresWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //parameter: Year, month, MAC address, day collection in the month, query details IDOSyncBpDataModel.queryOneMonthBloodPressures(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); Query blood pressure by week Objc: //parameter: Week index, week start, MAC address, day collection within the week, query details [IDOSyncBpDataModel queryOneWeekBloodPressuresWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //parameter: Week index, week start, MAC address, day collection within the week, query details IDOSyncBpDataModel.queryOneWeekBloodPressures(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Query blood pressure by day Objc: //parameter: Year, month, day, MAC address [IDOSyncBpDataModel queryOneDayBloodPressureDetailWithMac:macAddr year:year month:month day:day]; Swift: //parameter: Year, month, day, MAC address IDOSyncBpDataModel.queryOneDayBloodPressureDetail(withMac:macAddr, year:year, month:month, day:day); Query all blood pressure Objc: //parameter: MAC address [IDOSyncBpDataModel queryAllBloodPressuresWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncBpDataModel.queryAllBloodPressures(withMac:macAddr); Query blood pressure of the last day Objc: //parameter: MAC address [IDOSyncBpDataModel queryLastDayBloodPressureDetailWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncBpDataModel.queryLastDayBloodPressureDetail(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQueryBpFunction_v3.html":{"url":"query/IDOQueryBpFunction_v3.html","title":"Blood pressure v3 data query","keywords":"","body":"V3 blood pressure data query parameterexplain IDOSyncV3BpDataModel parameter explain remarks itemsCount Blood pressure packet volume int sleepAvgBp Sleep mean blood pressure int maxBp Maximum blood pressure int year year int month month int day day int bloodbPressures Blood pressure collection Blood pressure collection @[{@\"sys_blood\":@(0),@\"dias_blood\":@(0),@\"offset\":@(0)}...] sys_blood : systolic blood pressure dias_blood : diastolic blood pressure offset : offset (minute) dateStr time stamp Accurate to date str minuteOffset Total time offset int (minute) Query blood pressure by year Objc: //parameter: Year, MAC address [IDOSyncV3BpDataModel queryOneYearBpWithYear:year macAddr:macAddr]; Swift: //parameter: Year, MAC address IDOSyncV3BpDataModel.queryOneYearBp(withYear: year, macAddr: macAddr); Query blood pressure by month Objc: //parameter: Year, month, MAC address, day collection in month [IDOSyncV3BpDataModel queryOneMonthBpWithYear:year month:month macAddr:macAddr datesOfMonth:&days]; Swift: //parameter: Year, month, MAC address, day collection in month IDOSyncV3BpDataModel.queryOneMonthBp(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days); Query blood pressure by week Objc: //parameter: Week index, week start, MAC address, day of the week collection [IDOSyncV3BpDataModel queryOneWeekBpWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days]; Swift: //parameter: Week index, week start, MAC address, day of the week collection IDOSyncV3BpDataModel.queryOneWeekBp(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days); Query blood pressure by day Objc: //parameter: Year, month, day, MAC address [IDOSyncV3BpDataModel queryOneDayBpDetailWithMac:macAddr year:year month:month day:day]; Swift: //parameter: Year, month, day, MAC address IDOSyncV3BpDataModel.queryOneDayBpDetail(withMac:macAddr, year:year, month:month, day:day); Query all blood pressure Objc: //parameter: MAC address [IDOSyncV3BpDataModel queryAllBpWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncV3BpDataModel.queryAllBp(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQueryGpsFunction_v2.html":{"url":"query/IDOQueryGpsFunction_v2.html","title":"Gps v2 data query","keywords":"","body":"v2 GPS data query parameter explanation IDOSyncGpsDataItemInfoBluetoothModel parameter explanation remarks serialNumber serialNumber int latitudeStr latitude str longitudeStr longitude str timeStr The movement time stamp is accurate to seconds str dateStr date stamp(accurate to day) str IDOSyncGpsDataInfoBluetoothModel parameter explanation remarks year year int month month int day day int hour hour int minute minute int second second int timeStr Start the movement hour interval hour interval stamp accurate to second str dateStr day Accurate to day str itemsCount Number of GPS packets int interval Interval hour length int (unit：second) startFrom Motion initiator int (1 : Bracelet initiated 0 : app initiated) gpsItems GPS Coordinate point set array (IDOSyncGpsDataItemInfoBluetoothModel) Query GPS information by hour timestamp Objc: //parameter: time stamp, mac address [IDOSyncGpsDataModel queryOneActivityCoordinatesWithTimeStr:timeStr macAddr:macAddr]; Swift: //parameter: time stamp, mac address IDOSyncGpsDataModel.queryOneActivityCoordinates(withTimeStr:timeStr, macAddr: macAddr); Determine whether there is a track for an activity Objc: //parameter: time stamp, mac address [IDOSyncGpsDataModel queryActivityHasCoordinatesWithTimeStr:timeStr macAddr:macAddr]; Swift: //parameter: time stamp, mac address IDOSyncGpsDataModel.queryActivityHasCoordinates(withTimeStr:timeStr, macAddr: macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQueryGpsFunction_v3.html":{"url":"query/IDOQueryGpsFunction_v3.html","title":"Gps v3 data query","keywords":"","body":"v3 GPS data query parameter explanation IDOSyncV3GpsDataItemInfoBluetoothModel parameter explanation remarks serialNumber serialNumber int latitudeStr latitude str longitudeStr longitude str IDOSyncV3GpsDataInfoBluetoothModel parameter explanation remarks year year int month month int day day int hour hour int minute minute int second second int timeStr Launch campaign hour Hour timestamp Accurate to second str dateStr date stamp(accurate to date) str itemsCount Number of GPS packets int interval Interval hour length int (unit：second) startFrom Motion initiator int (1 : Bracelet initiation 0 : App initiation) gpsItems GPS Coordinate point set array (IDOSyncV3GpsDataItemInfoBluetoothModel) Query GPS information by hour timestamp Objc: //parameter: time stamp, mac address [IDOSyncV3GpsDataModel queryV3GpsCoordinatesWithTimeStr:timeStr macAddr:macAddr]; Swift: //parameter:time stamp, mac address IDOSyncV3GpsDataModel.queryV3GpsCoordinates(withTimeStr:timeStr, macAddr: macAddr); Determine whether there is a track for an activity Objc: //parameter: time stamp, mac address [IDOSyncV3GpsDataModel queryActivityHasCoordinatesWithTimeStr:timeStr macAddr:macAddr]; Swift: //parameter: time stamp, mac address IDOSyncV3GpsDataModel.queryActivityHasCoordinates(withTimeStr:timeStr, macAddr: macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQueryTemperatureFunction.html":{"url":"query/IDOQueryTemperatureFunction.html","title":"Skin temperature data query","keywords":"","body":"Skin temperature data query parameter explanation IDOSyncTemperatureItemDataModel parameter explanation remarks offset Sub time offset int (unit:second) value Skin temperature value int dateStr time stamp Accurate to date str IDOSyncTemperatureBluetoothDataModel parameter explanation remarks year year int month month int day day int dateStr time stamp Accurate to date str startTime Start hour unit: second intervalMode Interval of data second、minute avgTemperature Average temperature int maxTemperature Maximum temperature int minTemperature Minimum temperature int itemCount Number of skin temperature int items Skin temperature set array (IDOSyncTemperatureItemDataModel) Query skin temperature by year Objc: //parameter：Year, MAC address、Query details [IDOSyncTemperatureDataModel queryOneYearTemperatureWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //parameter：Year, MAC address、Query details IDOSyncNoiseDataModel.queryOneYearTemperature(withYear: year, macAddr: macAddr, isQueryItems: false); Press month to query the skin temperature Objc: //parameter：year、month、MAC address、day collection within the month、Query details [IDOSyncTemperatureDataModel queryOneMonthTemperatureWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //parameter：year、month、MAC address、day collection within the month、Query details IDOSyncTemperatureDataModel.queryOneMonthTemperature(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); Inquire skin temperature by week Objc: //parameter: Week index, week start, MAC address, day collection within the week, query details [IDOSyncTemperatureDataModel queryOneWeekTemperatureWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //parameter: Week index, week start, MAC address, day collection within the week, query details IDOSyncTemperatureDataModel.queryOneWeekTemperature(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Query skin temperature by day Objc: //parameter: Year, month, day, MAC address [IDOSyncTemperatureDataModel queryOneDayTemperatureDetailWithMac:macAddr year:year month:month day:day]; Swift: //parameter: Year, month, day, MAC address IDOSyncTemperatureDataModel.queryOneDayNoiseDetail(withMac:macAddr, year:year, month:month, day:day); Query all skin temperatures Objc: //parameter: MAC address [IDOSyncTemperatureDataModel queryAllTemperatureWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncTemperatureDataModel.queryAllNoise(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQueryBreathRateFunction.html":{"url":"query/IDOQueryBreathRateFunction.html","title":"Respiratory rate data query","keywords":"","body":"Respiratory rate data query parameter explanation IDOSyncBreathRateDataModel parameter explanation remarks year year int month month int day day int dateStr time stamp(accurate to date) str itemCount itemCount int breathRates Respiratory rate collection @[{@\"offset\":@(0),@\"value\":@(0)}...]Value: respiratory rate offset: each is based on 0 point offset (seconds) Query respiratory rate by year Objc: //parameter：Year, MAC address [IDOSyncBreathRateDataModel queryOneYearBreathRateWithYear:year macAddr:macAddr]; Swift: //parameter：Year, MAC address IDOSyncBreathRateDataModel.queryOneYearBreathRate(withYear: year, macAddr: macAddr); Query respiratory rate by month Objc: //parameter：year、month、MAC address、day collection within the month [IDOSyncBreathRateDataModel queryOneMonthBreathRateWithYear:year month:month macAddr:macAddr datesOfMonth:&days]; Swift: //parameter：year、month、MAC address、day collection within the month IDOSyncBreathRateDataModel.queryOneMonthBreathRate(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days); Query respiratory rate by week Objc: //parameter: Week index, week start, MAC address, day collection within the week [IDOSyncBreathRateDataModel queryOneWeekBreathRateWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days]; Swift: //parameter: Week index, week start, MAC address, day collection within the week IDOSyncBreathRateDataModel.queryOneWeekBreathRate(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days); Query respiratory rate by day Objc: //parameter: Year, month, day, MAC address [IDOSyncBreathRateDataModel queryOneDayBreathRateDetailWithMac:macAddr year:year month:month day:day]; Swift: //parameter: Year, month, day, MAC address IDOSyncBreathRateDataModel.queryOneDayBreathRateDetail(withMac:macAddr, year:year, month:month, day:day); Query all respiration rates Objc: //parameter: MAC address [IDOSyncBreathRateDataModel queryAllBreathRateWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncBreathRateDataModel.queryAllBreathRate(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQueryHrFunction_v2.html":{"url":"query/IDOQueryHrFunction_v2.html","title":"Heart rate v2 data query","keywords":"","body":"V2 heart rate data query parameterexplain IDOSyncHrDataItemInfoBluetoothModel parameter explanation remarks offset Sub time offset int (Company:minute) data Heart rate value int dateStr time stamp Accurate to date str serialNumber serialNumber int IDOSyncHrDataInfoBluetoothModel parameter explanation remarks itemsCount Number of heart rate packets int minuteOffset Total time offset int (unit:minute) silentHeartRate Resting heart rate int burnFatThreshold Fat burning threshold int aerobicThreshold Muscle exercise threshold int limitThreshold Limit threshold int burnFatMins Fat burning hour length int (unit ：minute) aerobicMins Muscle exercise hour long int (unit ：minute) limitMins Extreme sports hour length int (unit ：minute) userMaxHr User maximum heart rate int warmUpThreshold Warm up threshold int warmUpMins Warm up exercise hour room int (unit ：minute) anaerobicThreshold Anaerobic exercise threshold int anaerobicMins Anaerobic exercise room int (unit ：minute) year year int month month int day day int heartRates Heart rate collection array (IDOSyncHrDataItemInfoBluetoothModel) dateStr time stamp(accurate to date) str Query heart rate by year Objc: //parameter：Year, MAC address、Query details [IDOSyncHeartRateDataModel queryOneYearHearRatesWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //parameter：Year, MAC address、Query details IDOSyncHeartRateDataModel.queryOneYearHearRates(withYear: year, macAddr:macAddr, isQueryItems: false); Query heart rate by month Objc: //parameter：year、month、MAC address、Query details [IDOSyncHeartRateDataModel queryOneMonthHearRatesWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //parameter：year、month、MAC address、Query details IDOSyncHeartRateDataModel.queryOneMonthHearRates(withYear: year, macAddr:macAddr, isQueryItems: false); Query heart rate by week Objc: //parameter: Week index, week start, MAC address, day collection within the week, query details [IDOSyncHeartRateDataModel queryOneWeekHearRatesWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //parameter: Week index, week start, MAC address, day collection within the week, query details IDOSyncHeartRateDataModel.queryOneWeekHearRates(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Query heart rate by day Objc: //parameter: Year, month, day, MAC address [IDOSyncHeartRateDataModel queryOneDayHearRatesDetailWithMac:macAddr year:year month:month day:day]; Swift: //parameter: Year, month, day, MAC address IDOSyncHeartRateDataModel.queryOneDayHearRatesDetail(withMac:macAddr, year:year, month:month, day:day); Query all heart rates Objc: //parameter: MAC address [IDOSyncHeartRateDataModel queryAllHearRatesWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncHeartRateDataModel.queryAllHearRates(withMac:macAddr); Query the heart rate of sedation only Objc: //parameter: MAC address [IDOSyncHeartRateDataModel queryAllContractedHearRatesWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncHeartRateDataModel.queryAllContractedHearRates(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQueryHrFunction_v3.html":{"url":"query/IDOQueryHrFunction_v3.html","title":"Heart rate v3 data query","keywords":"","body":"V3 heart rate data query parameter explanation IDOSyncSecHrDataItemInfoBluetoothModel parameter explanation remarks offset Sub time offset int (Company:minute) hrValue Heart rate value int dateStr time stamp Accurate to date str serialNumber serialNumber int IDOSyncSecHrDataInfoBluetoothModel parameter explanation remarks itemsCount Number of heart rate packets int secondOffset Total time offset int (unit:second) silentHeartRate Resting heart rate int burnFatThreshold Fat burning threshold int aerobicThreshold Muscle exercise threshold int limitThreshold Limit threshold int burnFatMins Fat burning hour length int (unit ：minute) aerobicMins Muscle exercise hour long int (unit ：minute) limitMins Extreme sports hour length int (unit ：minute) userMaxHr User maximum heart rate int userAvgHr User average heart rate int warmUpThreshold Warm up threshold int warmUpMins Warm up exercise hour room int (unit ：minute) anaerobicThreshold Anaerobic exercise threshold int anaerobicMins Anaerobic exercise room int (unit ：minute) year year int month month int day day int heartRates Heart rate collection array (IDOSyncHrDataItemInfoBluetoothModel) minutesHrDic 5minute interval heart rate set @{@\"total_offset\":@(0),@\"heart_rates\":@[@{@\"offset\":@(0),@\"value\":@(0)}...]}; heightLowHrItems High and low heart rate set @[@{@\"hour\":@(hour),@\"minute\":@(minute),@\"type\":@(type:0: heart rate value of hour with low heart rate 0: heart rate value of hour when heart rate is too high),@\"hr_value\":@(hr_value)}]; dateStr time stamp Accurate to date str firstOffset First synchronization start total offset int (Discard) Query heart rate by year Objc: //parameter：Year, MAC address、Query details [IDOSyncHeartRateDataModel queryOneYearSecHearRatesWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //parameter：Year, MAC address、Query details IDOSyncHeartRateDataModel.queryOneYearSecHearRates(withYear: year, macAddr:macAddr, isQueryItems: false); Query heart rate by month Objc: //parameter：year、month、MAC address、Query details [IDOSyncHeartRateDataModel queryOneMonthSecHearRatesWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //parameter：year、month、MAC address、Query details IDOSyncHeartRateDataModel.queryOneMonthSecHearRates(withYear: year, macAddr:macAddr, isQueryItems: false); Query heart rate by week Objc: //parameter: Week index, week start, MAC address, day collection within the week, query details [IDOSyncHeartRateDataModel queryOneWeekSecHearRatesWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //parameter: Week index, week start, MAC address, day collection within the week, query details IDOSyncHeartRateDataModel.queryOneWeekSecHearRates(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Query heart rate by day Objc: //parameter: Year, month, day, MAC address [IDOSyncHeartRateDataModel queryOneDaySecHearRatesDetailWithMac:macAddr year:year month:month day:day]; Swift: //parameter: Year, month, day, MAC address IDOSyncHeartRateDataModel.queryOneDaySecHearRatesDetail(withMac:macAddr, year:year, month:month, day:day); Query all heart rates Objc: //parameter: MAC address [IDOSyncHeartRateDataModel queryAllSecHearRatesWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncHeartRateDataModel.queryAllSecHearRates(withMac:macAddr); Query the heart rate of sedation only Objc: //parameter: MAC address [IDOSyncHeartRateDataModel queryAllContractedSecHearRatesWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncHeartRateDataModel.queryAllContractedSecHearRates(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQueryNoiseFunction.html":{"url":"query/IDOQueryNoiseFunction.html","title":"Noise data query","keywords":"","body":"Noise data query parameter explanation IDOSyncNoiseBluetoothItemDataModel parameter explanation remarks offset Sub time offset int (unit:second) value Noise value int dateStr time stamp Accurate to date str IDOSyncNoiseBluetoothDataModel parameter explanation remarks year year int month month int day day int dateStr time stamp Accurate to date str startTime start time unit: second intervalMode Interval of data second, minute avgNoise Average noise int maxNoise Maximum noise int minNoise Minimum noise int itemCount Number of noises int items Noise set array (IDOSyncNoiseBluetoothItemDataModel) Query noise by year Objc: //parameter：Year, MAC address、Query details [IDOSyncNoiseDataModel queryOneYearNoiseWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //parameter：Year, MAC address、Query details IDOSyncNoiseDataModel.queryOneYearNoise(withYear: year, macAddr: macAddr, isQueryItems: false); Query noise by month Objc: //parameter：year、month、MAC address、day collection within the month、Query details [IDOSyncNoiseDataModel queryOneMonthNoiseWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //parameter：year、month、MAC address、day collection within the month、Query details IDOSyncNoiseDataModel.queryOneMonthNoise(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); Query noise by week Objc: //parameter: Week index, week start, MAC address, day collection within the week, query details [IDOSyncNoiseDataModel queryOneWeekNoiseWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //parameter: Week index, week start, MAC address, day collection within the week, query details IDOSyncNoiseDataModel.queryOneWeekNoise(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Query noise by day Objc: //parameter: Year, month, day, MAC address [IDOSyncNoiseDataModel queryOneDayNoiseDetailWithMac:macAddr year:year month:month day:day]; Swift: //parameter: Year, month, day, MAC address IDOSyncNoiseDataModel.queryOneDayNoiseDetail(withMac:macAddr, year:year, month:month, day:day); Query all noises Objc: //parameter: MAC address [IDOSyncNoiseDataModel queryAllNoiseWithMac:macAddr]; Swift: //parameter: MAC address IDOSyncNoiseDataModel.queryAllNoise(withMac:macAddr); Query heart rate by week Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"query/IDOQuerySwimFunction.html":{"url":"query/IDOQuerySwimFunction.html","title":"Swimming data query","keywords":"","body":"Swimming data query parameter explanation IDOSyncSwimItemDataInfoBluetoothModel parameter explanation remarks timeStr Start hour Hour timestamp Accurate to second duration Continuous hour int activeTime Active hour room int (second) strokesNumber Number of strokes int swolf Comment minute int serialNumber serialNumber int swimmingPosture Every stroke 0x00: medley 0x01: freestyle; 0x02 : Breaststroke; 0x03 : backstroke; 0x04 : butterfly; distance Distance per trip unit: metre frequency frequency int speed Pace int stopTime End hour int differenceTime Rest room between 2 trips int IDOSyncSwimmingDataInfoBluetoothModel parameter explanation remarks year year int month month int day day int hour hour int minute minute int second second int dateStr time stamp Accurate to date str timeStr Start hour str type Swimming type 0x00:invalid,0x01:Indoor swimming,0x02:Open water swimming calories calorie int (unit: kcal) distance distance int (unit: metre) trips Number of swimming trips int averageSwolf average swolf int totalStrokesNumber Total strokes int swimmingPosture Main stroke 0x00 : Medley; 0x01 : free style; 0x02 : Breaststroke; 0x03 : backstroke; 0x04 : butterfly poolDistance Pool distance int (unit:cm) itemsCount Swimming packet volume int swimmingItems Swimming assembly array (IDOSyncSwimItemDataInfoBluetoothModel) confirmDistance User confirmed distance int duration Swimming duration hourduration hour int (unit:minute) avgSpeed Average pace int avgFrequency Average stroke frequency int swimVersion Swimming data version number int Query a piece of swimming data Objc: //parameter：time mark、MAC address [IDOSyncSwimDataModel querySwimDataWithTimeStr:timeStr macAddr:macAddr]; Swift: //parameter：time mark、MAC address IDOSyncSwimDataModel.querySwimData(withTimeStr: timeStr, macAddr: macAddr); Query one-day swimming data Objc: //parameter：date mark、MAC address、Query details [IDOSyncSwimDataModel querySwimDataWithDateStr:dateStr macAddr:macAddr isQueryItems:NO]; Swift: //parameter：date mark、MAC address、Query details IDOSyncSwimDataModel.querySwimData(withDateStr:dateStr, macAddr:macAddr,isQueryItems:false); Query all swimming data Objc: //parameter：MAC address [IDOSyncSwimDataModel queryAllSwimDataWithMacAddr:macAddr]; Swift: //parameter：MAC address IDOSyncSwimDataModel.queryAllSwimData(withMacAddr:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"IDOWatchDialFunction.html":{"url":"IDOWatchDialFunction.html","title":"Watch face setting function","keywords":"","body":"Watch face setting function 15.1Functional Overview The dial functions mainly include the function of obtaining the watch screen information, the function of obtaining the information of the dial list, the function of setting the current dial information, and the function of transferring the dial file. 15.2 Dial Operation Properties Parameters Description Notes filePath Dial file transfer path str colorFormat Color Format int Device screen information interface acquisition blockSize Compressed block size int Device screen information interface acquisition 15.3 Get screen information IDOWatchScreenInfoModel Parameters Description Notes familyName Watch face family name str width width int height height int colorFormat Color Format int size size* 100 int Get current device screen information Objc: initWatchDialManager().getDialScreenInfo(^(IDOWatchScreenInfoModel * _Nullable model, int errorCode) { if (errorCode == 0) { //Get screen information successfully }else if (errorCode == 6) { // This feature is not supported }else { //Failed to get screen information } }); Swift: initWatchDialManager().getDialListInfo!{(model,errorCode)in if errorCode == 0{ //Get screen information successfully }else if errorCode == 6 { // This feature is not supported }else { //Failed to get screen information } }; 15.4 Get a list of V2 watch faces IDOWatchDialInfoItemModel Parameters Description Notes fileName Watch face name str (unique identifier) operate Operation 0x00: Query the watch face in use 0x01: Set the watch face 0x02: Delete the watch face IDOWatchDialInfoModel Parameters Description Notes fileCount Number of files int remainingSpace Remaining space int fileMaxSize Maximum size of a single file int currentDialName Currently set watch face name str dialArray A collection of all dial information of the current bracelet array Get all the dial information of v2 Objc: initWatchDialManager().getDialListInfo(^(IDOWatchScreenInfoModel * _Nullable model, int errorCode) { if (errorCode == 0) { //Get dial information successfully }else if (errorCode == 6) { // This feature is not supported }else { //Failed to get dial information } }); Swift: initWatchDialManager().getDialListInfo!{(model,errorCode)in if errorCode == 0{ //Get screen information successfully }else if errorCode == 6 { // This feature is not supported }else { //Failed to get screen information } }; Get the current dial name of v2 Objc: initWatchDialManager().getCurrentDialInfo(^(NSString * _Nullable fileName, int errorCode) { if (errorCode == 0) { //Get the current dial information successfully }else if (errorCode == 6) { // This feature is not supported }else { //Failed to get current dial information } }); Swift: initWatchDialManager().getCurrentDialInfo!{(name,errorCode)in if errorCode == 0{ //Get the current dial information successfully }else if errorCode == 6 { // This feature is not supported }else { //Failed to get current dial information } }; 15.5 v2 Set the current watch face IDOWatchDialInfoItemModel Parameters Description Notes fileName Watch face name str (unique identifier) operate Operation 0x00: Query the watch face in use 0x01: Set the watch face 0x02: Delete the watch face Objc: IDOWatchDialInfoItemModel * model = [[IDOWatchDialInfoItemModel alloc]init]; initWatchDialManager().setCurrentDial(^(int errorCode) { if (errorCode == 0) { //Set the current watch face successfully }else if (errorCode == 6) { // This feature is not supported }else { // Failed to set the current dial } }, model); Swift: let model = IDOWatchDialInfoItemModel.init() initWatchDialManager().setCurrentDial!{(errorCode)in if errorCode == 0{ //Set the current watch face successfully }else if errorCode == 6 { // This feature is not supported }else { // Failed to set the current dial } }(model) 15.6 Get a list of V3 watch faces //Get v3 watch face list menu __IDO_FUNCTABLE__.funcTable35Model.getNewWatchList IDOV3WatchDialInfoModel Parameters Description Notes localWatchNum Total number of local watch faces int cloudWatchNum Total number of cloud watch faces int wallpaperWatchNum Total number of wallpaper dials int useCloudWatchNum Used number of cloud watch faces int useWallpaperWatchNum The number of used wallpaper dials int currentWatchName The name of the watch face that is currently set int watchFrameVersion Framework version numbers start at 1 int fileMaxSize Maximum single file KB watchListNum Number of all watch faces of the current watch int watchTotalSize Total capacity of the watch face Unit: Byte watchUsedSize Used capacity of the watch face Unit: Byte maxDownloadSpaceSize Maximum available watch face download contiguous space size Unit: Byte dialArray All watch face information of the current watch IDOV3WatchDialInfoItemModel Collection IDOV3WatchDialInfoItemModel Parameters Description Notes type Dial Type 1: Normal dial; 2: Wallpaper dial; 3: Cloud dial watchVersion Dial version number Cloud watch face works sortNumber Dial sequence number int starts at 0 size watch face file size int Objc: initWatchDialManager().getV3WatchListInfo(^(IDOV3WatchDialInfoModel * _Nullable model, int errorCode) { if (errorCode == 0) { //Obtained v3 dial list information successfully }else if (errorCode == 6) { // This feature is not supported }else { //Failed to get v3 dial list information } }); Swift: initWatchDialManager().getV3WatchListInfo!((mode,errorCode)in { if errorCode == 0{ //Obtained v3 dial list information successfully }else if errorCode == 6 { // This feature is not supported }else { //Failed to get v3 dial list information } }) 15.7 Set watch face sorting //Set the watch face sorting menu __IDO_FUNCTABLE__.funcTable34Model.watchDialSort IDOV3WatchDialInfoModel Parameters Description Notes watchListNum Number of all watch faces of the current watch int dialArray All watch face information of the current watch IDOV3WatchDialInfoItemModel Collection IDOV3WatchDialInfoItemModel Parameters Description Notes type Dial Type 1: Normal dial; 2: Wallpaper dial; 3: Cloud dial watchVersion Watch face version number Cloud watch face works sortNumber Dial sequence number int starts at 0 size watch face file size int Objc: IDOV3WatchDialInfoModel * dialModel = [IDOV3WatchDialInfoModel currentModel]; initWatchDialManager().setWatchDialSort(^(int errorCode) { if (errorCode == 0) { //Set dial sorting successfully }else if (errorCode == 6) { // This feature is not supported }else { // Failed to set dial sorting } }, dialModel); Swift: initWatchDialManager().setWatchDialSort!((errorCode)in{ if errorCode == 0 { //Set dial sorting successfully }else if errorCode == 6 { // This feature is not supported }else { // Failed to set dial sorting } }) 15.8 Watch face file transfer function Objc: initWatchDialManager().colorFormat = model.colorFormat; initWatchDialManager().blockSize = model.blockSize; initWatchDialManager().addDialProgress(^(int progress) { //Dial transfer progress (0-100) }).addDialTransfer(^(int errorCode,int finishingTime) { if (errorCode == 0) { //transfer complete }else if (errorCode == 6) { // do not support transmission }else { //Transfer failed } }).filePath = filePath; [IDOWatchDialManager startDialTransfer]; Swift: initWatchDialManager().colorFormat = model.colorFormat; initWatchDialManager().blockSize = model.blockSize; initWatchDialManager().addDialProgress!{(progress)in //Dial transfer progress (0-100) }.addDialTransfer!{(errorCode,finishingTime)in if errorCode == 0{ //transfer complete }else if errorCode == 6{ // do not support transmission }else { //Transfer failed } }.filePath = filePath; IDOWatchDialManager.startDialTransfer(); 15.9 Demo Dial function entry Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "},"IDOMessageIconManager.html":{"url":"IDOMessageIconManager.html","title":"Message icon update","keywords":"","body":"3rd party news feed icon updates 16.1Functional Overview After the device and the mobile phone are paired, if the mobile phone receives a message notification and sends it to the device through the ANCS protocol, the default icon and name are displayed for the first time. At this time, the firmware transmits the application package name to the app, and the app obtains the application information and information through the package name background. The application icon is transmitted to the firmware through the protocol, and the corresponding application icon and name are updated. 16.2Property description Parameters Description Notes delegate proxy object id (processing message icon callback method) handleIconAndNameComplete process completed application icon and name block callback block currentModel cached third-party app information model object (IDOGetAppPackNameModel), each time the local database is read baseUrlPath base url address If it is not assigned, go to the Apple interface Apple's complete address: https://itunes.apple.com/lookup?bundleId=XXX&country=XXX It is recommended to do cache processing in the background to speed up data loading 16.3 Method description //Actively obtain the icon and name - (BOOL)getAppIconAndName; When the device is connected for the first time, it actively obtains the package name information cached by default by the firmware once. Other times, this method does not need to be executed, and the SDK already listens for firmware update notifications. 16.4 Proxy method description /** Handling app icon and name log callbacks */ - (void)handleIconLogMessage:(NSString *)message; /** Processing completed application icon and name callback */ - (void)handleIconAndNameComplete; Proxy method callbacks are optional. Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-07-06 15:44:55 "}}