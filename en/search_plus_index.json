{"./":{"url":"./","title":"Preface","keywords":"","body":"IDO smart bracelet iOS SDK 1.1 Function Overview IDOBluetooth, IDOBlueProtocol, and IDOBlueUpdate are applicable to iOS devices and support IDO's bracelet to implement Bluetooth connection control framework library. Based on the Bluetooth framework of the iOS system, the functions of Bluetooth scanning, connection, binding, control, setting, obtaining, monitoring, transmission, etc. are expanded. The protocol library written in c is used to realize the logical processing in the process of structural data conversion and health data synchronization, which reduces the error of Bluetooth communication data and improves the speed and accuracy of Bluetooth communication. This feature-rich API is easy to use. 1.2 Quick integration 1.2.1 Using Cocoapods integration Add the following to the Podfile file: source'https://github.com/idoosmart/IDOSmartSpec.git' platform :ios, '8.0' target'your_target_name' do pod'IDOBluetooth' pod'IDOBlueProtocol' pod'IDOBlueUpdate' end Then execute the pod update command in the root directory of the project to integrate third-party libraries. For the use of CocoaPods, please refer to: CocoaPods Guides 1.3 Initialize the SDK Open the project settings, Target => Build Settings, modify Other Linker Flags and add -Objc Objective-C project needs to add an empty Swift file to generate Objective-C Bridging Header Depends on the system library CoreBluetooth.framework``libc++.tbd``libsqlite3.0.tbd Add the following content to the project's PrefixHeader.pch file: #import #import #import Swift project adds the following import IDOBlueUpdate import IDOBluetooth import IDOBlueProtocol 1.3.1 Register SDK Open the AppDelegate.m file and register the SDK in the [AppDelegate application:didFinishLaunchingWithOptions:] method: Interface Description IDOBluetoothServices * _Nonnull registrationServices(void) @property (nonatomic,copy,nullable) IDOBluetoothServices *_Nonnull(^outputSdkLog)(BOOL isOutput); @property (nonatomic,copy,nullable) IDOBluetoothServices *_Nonnull(^outputProtocolLog)(BOOL isOutput); @property (nonatomic,copy,nullable) IDOBluetoothServices *_Nonnull(^rawDataLog)(BOOL isRecord); @property (nonatomic,copy,nullable) void(^startScanBule)(void(^ _Nullable getDeviceInfoBlock)(IDOGetDeviceInfoBluetoothModel * _Nullable model)); Parameter Description Parameters Description Remarks outputSdkLog Output sdk log YES in debug mode outputProtocolLog Output protocol log YES in debug mode rawDataLog Record the original log Add according to project needs Objc: #ifdef DEBUG registrationServices().outputSdkLog(YES).outputProtocolLog(YES).startScanBule(^(IDOGetDeviceInfoBluetoothModel * _Nullable model) { //Automatically scan the connection according to the binding status and initialize the Bluetooth management center if(__IDO_BIND__)[IDOBluetoothManager startScan]; else [IDOBluetoothManager refreshDelegate]; }); #else registrationServices().outputSdkLog(NO).outputProtocolLog(NO).startScanBule(^(IDOGetDeviceInfoBluetoothModel * _Nullable model) { //Automatically scan the connection according to the binding status and initialize the Bluetooth management center if(__IDO_BIND__)[IDOBluetoothManager startScan]; else [IDOBluetoothManager refreshDelegate]; }); #endif Swift #if DEBUG registrationServices().outputSdkLog!(true).outputProtocolLog!(true).startScanBule!{ (model) in //Automatically scan the connection according to the binding status and initialize the Bluetooth management center if IDOBluetoothEngine.shareInstance()?.peripheralEngine.isBind == true { IDOBluetoothManager.startScan() }else { IDOBluetoothManager.refreshDelegate() } } #else registrationServices().outputSdkLog!(false).outputProtocolLog!(false).startScanBule!{ (model) in //Automatically scan the connection according to the binding status and initialize the Bluetooth management center if IDOBluetoothEngine.shareInstance()?.peripheralEngine.isBind == true { IDOBluetoothManager.startScan() }else { IDOBluetoothManager.refreshDelegate() } } #endif Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"IDOBluetooth.html":{"url":"IDOBluetooth.html","title":"Bluetooth management library","keywords":"","body":"Bluetooth management library 2.1 Overview When you apply an unconnected binding device, you need to create a view controller to implement the SDK Bluetooth proxy. Scan the peripheral device, the agent will return to the device collection, display in the list, select the device to be connected, after the connection is successful, return device information and whether the device is in OTA mode, there will be an error callback if the connection fails The default scan signal filtering parameter is 80, and the auto-scan connection timeout time is 20 seconds. The Bluetooth management library (IDOBluetooth) depends on the Bluetooth protocol library (IDOBlueProtocol), so before using the Bluetooth management library, first import the Bluetooth protocol library. 2.2 Scanning connection flow chart 2.3 Bluetooth initialization Objc: [IDOBluetoothManager shareInstance].rssiNum = 100; [IDOBluetoothManager shareInstance].delegate = self; Swift: IDOBluetoothManager.shareInstance()?.rssiNum = 100; IDOBluetoothManager.shareInstance()?.delegate = self; 2.4 Parameter Description Parameters Description Remarks timeout Auto scan connection timeout time Default 20 rssiNum Set scan filter signal default 80 isIntervalScan Whether to start the timeout interval scan default yes isReconnect Do you need a reconnection mechanism default yes autoScanInterval Set the scan interval duration default 10 seconds scanMode Bluetooth scanning device mode readonly state Bluetooth management connection status readonly errorCode Bluetooth connection error code readonly manualConnectTotalTime Manually click the total duration of the connected device readonly autoConnectTotalTime The total time to automatically scan to successfully connect to the device readonly 2.5 Basic methods Objc: //Start scanning [IDOBluetoothManager startScan]; //Refresh the Bluetooth proxy [IDOBluetoothManager refreshDelegate]; //Stop scanning [IDOBluetoothManager stopScan]; //Connect the device [IDOBluetoothManager connectDeviceWithModel:model]; //Disconnect the current peripheral device [IDOBluetoothManager cancelCurrentPeripheralConnection]; Swift: //Start scanning IDOBluetoothManager.startScan(); //Refresh the Bluetooth proxy IDOBluetoothManager.refreshDelegate(); //Stop scanning IDOBluetoothManager.stopScan(); //Connect the device IDOBluetoothManager .connectDevice(with: model as? IDOPeripheralModel); //Disconnect the current peripheral device IDOBluetoothManager.cancelCurrentPeripheralConnection(); 2.6 Proxy method Objc: -(BOOL)bluetoothManager:(IDOBluetoothManager *)manager centerManager:(CBCentralManager *)centerManager didConnectPeripheral:(CBPeripheral *)peripheral isOatMode:(BOOL)isOtaMode { //Callback for successful device connection return YES; } -(void)bluetoothManager:(IDOBluetoothManager *)manager allDevices:(NSArray *)allDevices otaDevices: (NSArray *) otaDevices { //Scanning device returns device collection callback in real time } -(void)bluetoothManager:(IDOBluetoothManager *)manager didUpdateState:(IDO_BLUETOOTH_MANAGER_STATE)state { //Scan connection status callback } -(void)bluetoothManager:(IDOBluetoothManager *)manager connectPeripheralError:(NSError *)error { //Scan connection error callback } Swift: IDOBluetoothManagerDelegate func bluetoothManager(_ manager: IDOBluetoothManager!, connectPeripheralError error: Error!) { //Scan connection error callback }; func bluetoothManager(_ manager: IDOBluetoothManager!, didUpdate state: IDO_BLUETOOTH_MANAGER_STATE) { //Scan connection status callback }; func bluetoothManager(_ manager: IDOBluetoothManager!, allDevices: [IDOPeripheralModel]!, otaDevices: [IDOPeripheralModel]!) { //Scanning device returns device collection callback in real time }; func bluetoothManager(_ manager: IDOBluetoothManager!, center centerManager: CBCentralManager!, didConnect peripheral: CBPeripheral!, isOatMode isOtaMode: Bool) -> Bool { //Callback for successful device connection return true; }; 2.7 Bluetooth notification IDOBluetoothConnectStateNotifyName Bluetooth scan connection status monitor notification name, generally monitor this notification globally, throw notification when the Bluetooth status changes, modify the corresponding UI interaction. IDOBluetoothConnectErrorNotifyName Bluetooth scan connection error monitor notification name, generally monitor this notification globally, throw notification when Bluetooth error occurs, modify the corresponding UI interaction. IDOBluetoothOtaModeNotifyName Bluetooth connection bracelet is the name of the OTA mode monitoring notification. Generally, this notification is monitored globally. When the Bluetooth connection finds that the current bracelet is in the OTA mode, a notification is thrown, and the bracelet is upgraded according to the business. Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"IDOBlueUpdate.html":{"url":"IDOBlueUpdate.html","title":"Upgrade Management Library","keywords":"","body":"Bluetooth upgrade library 3.1 Overview The SDK upgrade function is only responsible for firmware upgrades. Firmware version determination and firmware download are not processed. Pay attention to the integrity of the firmware download, pass in the firmware local sandbox path during the upgrade, monitor the upgrade progress and completion status, and error agent callbacks. The current version of the upgrade library adds the nordic, realtk, and apollo platforms. The upgrade management library (IDOBlueUpdate) depends on the Bluetooth protocol library (IDOBlueProtocol), so before using the upgrade management library, first import the Bluetooth protocol library. 3.2 Upgrade initialization Objc: [IDOUpdateFirmwareManager shareInstance].delegate = self; [IDOUpdateFirmwareManager shareInstance].updateType = IDO_NORDIC_PLATFORM_TYPE; Swift: IDOUpdateFirmwareManager.shareInstance().delegate = self; IDOUpdateFirmwareManager.shareInstance().updateType = IDO_UPDATE_PLATFORM_TYPE.NORDIC_PLATFORM_TYPE; 3.3 Parameter Description Parameters Description Remarks packagePath Local path of firmware package Local sandbox path errorCode Upgrade error code readonly state Upgrade status readonly updateType Type of upgrade platform Support nordic, realtk, apollo 3.4 Basic methods Objc: //Start upgrade [IDOUpdateFirmwareManager startUpdate]; Swift: //Start upgrade IDOUpdateFirmwareManager.startUpdate(); 3.5 Agent method Objc: -(NSString *)currentPackagePathWithUpdateManager:(IDOUpdateFirmwareManager *)manager { // Local storage path of firmware package return filePath; } -(void)updateManager:(IDOUpdateFirmwareManager *)manager state:(IDO_UPDATE_STATE)state { if (state == IDO_UPDATE_COMPLETED) { //update completed }else if state == IDO_UPDATE_DID_ENTER_OTA{ //Enter ota mode }else if state == IDO_UPDATE_STARTING { //during upgrade } } -(void)updateManager:(IDOUpdateFirmwareManager *)manager updateError:(NSError *)error { // Upgrade failed } -(void)updateManager:(IDOUpdateFirmwareManager *)manager progress:(float)progress message:(NSString *)message { // Upgrade progress (0-1) } @optional -(IDO_UPDATE_DFU_FIRMWARE_TYPE)selectDfuFirmwareTypeWithUpdateManager:(IDOUpdateFirmwareManager * _Nullable)manager { // Upgrade nordic application type return IDO_DFU_FIRMWARE_APPLICATION_TYPE; // Upgrade nordic bootloader type return IDO_DFU_FIRMWARE_BOOTLOADER_TYPE; } -(IDO_REALTK_UPDATE_TYPE)selectRealtkTypeWithUpdateManager(IDOUpdateFirmwareManager *_Nullable)manager supportOtaMode:(BOOL)isOtaMode supportSilentMode:(BOOL)isSilentMode { // Upgrade realtk master control program return IDO_NORMAL_MODE_UPDATE_TYPE; // Upgrade realtk flash file return IDO_SILENT_MODE_UPDATE_TYPE; } Swift: IDOUpdateManagerDelegate func currentPackagePath(withUpdate manager: IDOUpdateFirmwareManager?) -> String? { // Local storage path of firmware package return filePath; } func update(_ manager: IDOUpdateFirmwareManager?, progress: Float, message: String?) { // Upgrade progress (0-1) } func update(_ manager: IDOUpdateFirmwareManager?, state: IDO_UPDATE_STATE) { if state == IDO_UPDATE_STATE.COMPLETED { //update completed }else if state == IDO_UPDATE_STATE.DID_ENTER_OTA{ //Enter ota mode }else if state == IDO_UPDATE_STATE.STARTING { //during upgrade } } func update(_ manager: IDOUpdateFirmwareManager?, updateError error: Error?) { // Upgrade failed } func selectDfuFirmwareType(withUpdate manager: IDOUpdateFirmwareManager?) -> IDO_UPDATE_DFU_FIRMWARE_TYPE { // Upgrade nordic application type return IDO_UPDATE_DFU_FIRMWARE_TYPE.DFU_FIRMWARE_APPLICATION_TYPE; // Upgrade nordic bootloader type return IDO_UPDATE_DFU_FIRMWARE_TYPE.DFU_FIRMWARE_BOOTLOADER_TYPE; } func selectRealtkType(withUpdate manager: IDOUpdateFirmwareManager?, supportOtaMode isOtaMode: Bool, supportSilentMode isSilentMode: Bool) -> IDO_REALTK_UPDATE_TYPE { // Upgrade realtk master control program return IDO_REALTK_UPDATE_TYPE.NORMAL_MODE_UPDATE_TYPE; // Upgrade realtk flash file return IDO_REALTK_UPDATE_TYPE.SILENT_MODE_UPDATE_TYPE; } Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"IDODeviceBinding.html":{"url":"IDODeviceBinding.html","title":"Device binding and unbinding","keywords":"","body":"Device binding and unbinding 4.1 Function Overview When the device is connected for the first time, the binding command needs to be executed. According to the status type returned by the binding command, authorized binding and unauthorized binding, the authorized binding needs to enter the verification code displayed on the bracelet to bind successfully, unauthorized binding It can be directly bound without confirmation. The device is unbundled with connection unbundling and disconnection unbundling. When connecting, unbundling is when the app sends an unbundling command to achieve unbundling on both sides. At the same time, all data on the bracelet is erased. When unbundling, the app unilaterally changes the binding The status is unbound, and the data on the bracelet will not be erased. 4.2 Binding commands Objc: IDOSetBindingInfoBluetoothModel * model = [[IDOSetBindingInfoBluetoothModel alloc]init]; [IDOFoundationCommand bindingCommand:model callback:^(IDO_BIND_STATUS status, int errorCode) { if (errorCode == 0) { if (status == IDO_BLUETOOTH_BIND_SUCCESS) {//Binding succeeded IDOSetBindingInfoBluetoothModel * model = [IDOSetBindingInfoBluetoothModel currentModel]; if (model.authLength> 0) { //The binding type is wrong, currently not supported return; } }else if (status == IDO_BLUETOOTH_BINDED) { //Already bound }else if (status == IDO_BLUETOOTH_BIND_FAILED) { //Binding failed }else if (status == IDO_BLUETOOTH_NEED_AUTH) { //Requires authorization binding }else if (status == IDO_BLUETOOTH_REFUSED_BINDED) { //Refuse to bind } }else { //Binding failed } }]; //If authorization binding is required, execute the following code IDOSetBindingInfoBluetoothModel * model = [IDOSetBindingInfoBluetoothModel currentModel]; //Enter the authorization code model.authCode = authCode; [IDOFoundationCommand setAuthCodeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Authentication binding succeeded }else { //Authentication failed } }]; Swift: let model = IDOSetBindingInfoBluetoothModel.init(); IDOFoundationCommand.bindingCommand(model, callback: {(state,errorCode) in if errorCode == 0 { if state == IDO_BIND_STATUS.BLUETOOTH_BIND_SUCCESS { //The binding is successful let currentModel = IDOSetBindingInfoBluetoothModel.current(); if currentModel?.authLength> 0 { //The binding type is wrong, currently not supported return; } }else if state == IDO_BIND_STATUS.BLUETOOTH_BINDED { // already bound }else if state == IDO_BIND_STATUS.BLUETOOTH_BIND_FAILED { // Binding failed }else if state == IDO_BIND_STATUS.BLUETOOTH_NEED_AUTH { // authorized binding }else if state == IDO_BIND_STATUS.BLUETOOTH_REFUSED_BINDED { // refuse to bind } }else { //Binding failed } }); //If authorization binding is required, execute the following code let currentModel = IDOSetBindingInfoBluetoothModel.current(); currentModel?.authCode = authCode; IDOFoundationCommand.setAuthCode(currentModel, callback: {(errorCode) in if errorCode == 0 { //Authentication binding succeeded }else { //Authentication failed } }); 4.3 Untie Command Ordinary untie command Objc: //This method needs to execute a successful callback when the connection is in state, belong to both parties to unbind, and delete the bracelet data [IDOFoundationCommand unbindingCommand:^(int errorCode) { if (errorCode == 0) { //Unbind successfully }else { //Unbind failed } }]; Swift: //This method needs to execute a successful callback when the connection is in state, belong to both parties to unbind, and delete the bracelet data IDOFoundationCommand.unbindingCommand {(errorCode) in if errorCode == 0 { //Unbind successfully }else { //Unbind failed } }; Forced untie command Objc: /* This method performs a successful callback when the connection is in state, which belongs to both parties unbinding and deleting the bracelet data; In the disconnected state, the successful callback is executed, the App is unilaterally unbound, and the bracelet data is not deleted; */ [IDOFoundationCommand mandatoryUnbindingCommand:^(int errorCode) { if (errorCode == 0) { //Unbind successfully }else { //Unbind failed } }]; Swift: /* This method performs a successful callback when the connection is in state, which belongs to both parties unbinding and deleting the bracelet data; In the disconnected state, the successful callback is executed, the App is unilaterally unbound, and the bracelet data is not deleted; */ IDOFoundationCommand.mandatoryUnbindingCommand {(errorCode) in if errorCode == 0 { //Unbind successfully }else { //Unbind failed } }; 4.4 Switching device implementation method Objc: //Get all bound devices stored locally NSArray * allDevices = [IDOGetDeviceInfoBluetoothModel queryAllDeviceModels]; //Select the device to be connected self.needConnectDeviceMode = allDevices[index]; [IDOFoundationCommand switchDeviceCommand:^(int errorCode) { if (errorCode == 0) { //Disconnect and start scanning [IDOBluetoothManager startScan]; }else { //Failed to switch } }]; //Execute the Bluetooth proxy method -(BOOL)bluetoothManager:(IDOBluetoothManager *)manager centerManager:(CBCentralManager *)centerManager didConnectPeripheral:(CBPeripheral *)peripheral isOatMode:(BOOL)isOtaMode { //Initiate the binding after switching the bracelet successfully return YES; } -(void)bluetoothManager:(IDOBluetoothManager *)manager allDevices:(NSArray *)allDevices otaDevices: (NSArray *) otaDevices { for (IDOPeripheralModel * model in allDevices) { if ([model.macAddr isEqualToString:self.needConnectDeviceMode.macAddr] ||[model.uuidStr isEqualToString:self.needConnectDeviceMode.uuidStr]) { //Start connection [IDOBluetoothManager connectDeviceWithModel:model]; } } } Swift: //Get all bound devices stored locally let allDevies = IDOGetDeviceInfoBluetoothModel.queryAllDeviceModels(); //Select the device to be connected self.needConnectDeviceMode = allDevies?[index]; IDOFoundationCommand .switchDeviceCommand {(errorCode) in if errorCode == 0 { //Disconnect and start scanning IDOBluetoothManager.startScan(); }else { //Failed to switch } }; //Execute the Bluetooth proxy method func bluetoothManager(_ manager: IDOBluetoothManager!, allDevices: [IDOPeripheralModel]!, otaDevices: [IDOPeripheralModel]!) { for model in allDevices { if model.macAddr == self.needConnectDeviceMode?.macAddr || model.uuidStr == self.needConnectDeviceMode?.uuidStr{ //Start connection IDOBluetoothManager.connectDevice(with: model); } } }; func bluetoothManager(_ manager: IDOBluetoothManager!, center centerManager: CBCentralManager!, didConnect peripheral: CBPeripheral!, isOatMode isOtaMode: Bool) -> Bool { //Initiate the binding after switching the bracelet successfully return true; }; 4.5 Demo untie function entry Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"IDOErrorCode.html":{"url":"IDOErrorCode.html","title":"Error code description","keywords":"","body":"E rror code description 5.1 Overview The errorCode error code is the basis for the judgment status of the global command callback. When errorCode is equal to 0, it is successful, and the other values ​​are failure. The error code string can be obtained by the method in the IDOErrorCodeToStr class, or the explanation of the corresponding code in the description document. 4.1 Function Overview When the device is connected for the first time, the binding command needs to be executed. According to the status type returned by the binding command, authorized binding and unauthorized binding, the authorized binding needs to enter the verification code displayed on the bracelet to bind successfully, unauthorized binding It can be directly bound without confirmation. The device is unbundled with connection unbundling and disconnection unbundling. When connecting, unbundling is when the app sends an unbundling command to achieve unbundling on both sides. At the same time, all data on the bracelet is erased. When unbundling, the app unilaterally changes the binding The status is unbound, and the data on the bracelet will not be erased. Error code String Remarks 0 SUCCESS Success 4 ERROR_NO_MEM Unknown 5 ERROR_NOT_FIND No method found 6 ERROR_NOT_SUPPORTED This feature is not supported 7 ERROR_INVALID_PARAM Invalid parameter 8 ERROR_INVALID_STATE Invalid state 9 ERROR_INVALID_LENGTH Invalid data length 10 ERROR_INVALID_FLAGS Unknown 11 ERROR_INVALID_DATA Invalid data 12 ERROR_DATA_SIZE Wrong data size 13 ERROR_TIMEOUT Timeout 14 ERROR_NULL Empty data 15 ERROR_FORBIDDEN Prohibit errors 17 ERROR_BUSY Unknown 18 ERROR_LOW_BATT Battery is too low 19 ERROR_BLUETOOTH_DISCONNECT Bluetooth disconnected 20 ERROR_MODEL_DATA Model data error 21 ERROR_CURRENT_OTA Current OTA 22 ERROR_DEVICE_SYNCING Syncing 23 ERROR_AUTH_CODE Wrong authorization code 24 ERROR_SET_PAIRING_CANCEL Unpairing 25 ERROR_SET_PAIRING_UNKNOWN_TIMEOUT Pairing unknown timeout 26 ERROR_SET_PAIRING_RECONNECT Pairing reconnection failed 27 ERROR_SET_OTA_RECONNECT OTA reconnection failed 28 ERROR_TRAN_FILE_NO_EXIST Transfer file does not existTransfer file path error 29 ERROR_TRAN_FILE_FAILED Failed to transfer files 30 ERROR_ALARM_ID Wrong alarm ID 31 ERROR_PAIRING_TIMEOUT Pairing timeout 32 ERROR_FAST_CONFIG Quick shipping error 33 ERROR_MIGRATION_ING Data migration 34 ERROR_BLUE_PAIRING Bluetooth pairing 35 ERROR_DEVICE_NO_BIND The device is not bound 36 ERROR_TRAN_FILE_GPS_RUN GPS running 37 ERROR_SYNC_ITEM_TYPE Error synchronization item 38 ERROR_TRAN_FILE_ING Transferring files 39 ERROR_METHOD_DEPRECATED Method deprecation Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"IDOSetUpFunction.html":{"url":"IDOSetUpFunction.html","title":"Set Command Function","keywords":"","body":"Setting commands 6.1 Function Overview The setting command is that the mobile terminal sends data to the wristband terminal through the command, and responds to the processing data according to the response status of the wristband terminal. When the success is successful, the setting data is stored, otherwise, it is not stored. According to the status code, the errorCode is equal to 0 6.2 Main command function Set Time Command Set Alarm Command Set User Information Set Find Phone Set Wrist Lift Command Set left and right hand wear Set anti-lost command Set display mode Set smart reminder Set Sedentary Reminder Set Weather Forecast Set Heart Rate Mode Set Heart Rate Interval Set Do Not Disturb Mode Set Unit Command Set One Button to Call for Help Set Shortcut Set Blood Pressure Calibration Set Exercise Shortcut Set Motion Sorting Set screen brightness Set music switch Set GPS information Set watch face ID Set walking reminder Set v3 Heart Rate Mode Set Oxygen Switch Set Sleep Switch Set Pressure Switch Setup Menu List Set physiological cycle reminder Set physiological cycle Set drinking water reminder Set breathing training Set Motion Switch 6.3 Demo setting function entrance Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetTimeFunction.html":{"url":"set/IDOSetTimeFunction.html","title":"Set Time Command","keywords":"","body":"Set time command Time model description IDOSetTimeInfoBluetoothModel Parameters Description Remarks year year int month month int day Day int hour hour int minute point int second seconds int weekDay week int timeZone Time zone 1-24 timeStamp Timestamp str Command code Objc: //Get the current time IDOSetTimeInfoBluetoothModel * model = [IDOSetTimeInfoBluetoothModel currentModel]; //Get UTC time if(__IDO_FUNCTABLE__.funcTable28Model.utcTimeZone) { IDOSetTimeInfoBluetoothModel * model = [IDOSetTimeInfoBluetoothModel getCurrentUtcTimeModel]; } [IDOFoundationCommand setCurrentTimeCommand:model callback:^(int errorCode) { if(errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support this method }else { //Setting error } }]; Swift: let model1:IDOSetTimeInfoBluetoothModel = IDOSetTimeInfoBluetoothModel.current(); if IDOBluetoothEngine.shareInstance().managerEngine.funcTableModel.funcTable28Model.utcTimeZone { let model:IDOSetTimeInfoBluetoothModel = IDOSetTimeInfoBluetoothModel.getCurrentUtcTime(); } IDOFoundationCommand.setCurrentTime(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetAlarmFunction.html":{"url":"set/IDOSetAlarmFunction.html","title":"Set Alarm Command","keywords":"","body":"Set alarm command Description of Alarm Clock Model IDOSetAlarmInfoBluetoothModel Parameters Description Remarks isOpen Alarm on status bool isSync Whether it is synchronized to the bracelet No assignment is required, the alarm will be automatically assigned after the alarm is set successfully isDelete Delete Default YES type Type 0: get up, 1: sleep, 2: exercise, 3: take medicine, 4: dating, 5: party, 6: meeting, 7: custom hour point int minute seconds int repeat Repeat collection [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday] tsnoozeDuration The length of snooze int alarmId Alarm ID int setTimeStamp Timestamp of alarm modification No assignment is required, the alarm will be automatically assigned after the alarm is set successfully IDOSetExtensionAlarmInfoBluetoothModel Parameters Description Remarks alarmVersion Alarm version number int alarmCount Number of alarm clocks int items Alarm clock collection Initialize the wristband alarm during synchronization configuration Command code Set v2 alarm Objc: //All alarm clocks NSArray * alarms = [IDOSetAlarmInfoBluetoothModel queryAllAlarms]; //Alarms that are not turned on or deleted NSArray * alarms = [IDOSetAlarmInfoBluetoothModel queryAllNoOpenAlarms]; [IDOFoundationCommand setAllAlarmsCommand:alarms callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let alarms = IDOSetAlarmInfoBluetoothModel.queryAllAlarms(); let alarms = IDOSetAlarmInfoBluetoothModel.queryAllNoOpenAlarms(); IDOFoundationCommand.setAllAlarms(alarms) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Set v3 alarm clock Objc: IDOSetExtensionAlarmInfoBluetoothModel * alarmModel = [IDOSetExtensionAlarmInfoBluetoothModel currentModel]; [IDOFoundationCommand setV3AllAlarmsCommand:alarmModel callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetExtensionAlarmInfoBluetoothModel.current(); IDOFoundationCommand.setV3AllAlarms(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetUserInfoFunction.html":{"url":"set/IDOSetUserInfoFunction.html","title":"Set User Information","keywords":"","body":"Set user information User model description IDOSetUserInfoBuletoothModel Parameters Description Remarks year year int month month int day Day int height Height Unit: cm weight Weight Unit: kg gender Gender 1: male, 2: female goalSleepDataHour Target sleep (hour) int goalSleepDataMinute Target sleep (minutes) int goalStepData Target steps Unit: step goalCalorieData Target calories Unit: big card goalDistanceData Target distance Unit: meter goalWeightData Target weight Unit: kg goalType Target type 0: steps, 1: calories, 2: distance isLogin Whether to log in bool bindState Binding status int Command code Set user information Objc: IDOSetUserInfoBuletoothModel * model = [IDOSetUserInfoBuletoothModel currentModel]; [IDOFoundationCommand setUserInfoCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetUserInfoBuletoothModel.current(); IDOFoundationCommand.setUserInfo(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Set v2 sports goal Execute a command every time a target type is set Objc: IDOSetUserInfoBuletoothModel * model = [IDOSetUserInfoBuletoothModel currentModel]; model.goalStepData = 10000; model.goalCalorieData = 1000; model.goalDistanceData = 20000; [IDOFoundationCommand setTargetInfoCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetUserInfoBuletoothModel.current(); model?.goalStepData = 10000; model?.goalCalorieData = 1000; model?.goalDistanceData = 20000; IDOFoundationCommand.setUserInfo(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Set v3 sports goal Objc: IDOSetUserInfoBuletoothModel * model = [IDOSetUserInfoBuletoothModel currentModel]; model.goalCalorieData = 1000; model.goalDistanceData = 20000; [IDOFoundationCommand setCalorieAndDistanceGoalCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetUserInfoBuletoothModel.current(); model?.goalCalorieData = 1000; model?.goalDistanceData = 20000; IDOFoundationCommand.setCalorieAndDistanceGoal(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetFindPhoneFunction.html":{"url":"set/IDOSetFindPhoneFunction.html","title":"Set Find Phone","keywords":"","body":"Set to find phone Find a description of the phone model IDOSetFindPhoneInfoBuletoothModel Parameters Description Remarks isOpen Look for the phone switch bool Command code Objc: IDOSetFindPhoneInfoBuletoothModel * model = [IDOSetFindPhoneInfoBuletoothModel currentModel]; [IDOFoundationCommand setFindPhoneCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetFindPhoneInfoBuletoothModel.current(); IDOFoundationCommand.setFindPhone(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetHandUpFunction.html":{"url":"set/IDOSetHandUpFunction.html","title":"Set wrist lift command","keywords":"","body":"Set wrist lift command Wrist lift model description IDOSetHandUpInfoBuletoothModel Parameters Description Remarks isOpen Switch bool isHasTimeRange Is there a time interval bool showSecond Display time 3～10 seconds startHour Start (hour) int startMinute Start (minutes) int endHour End (hour) int endMinute End (minute) int Command code Objc: IDOSetHandUpInfoBuletoothModel * model = [IDOSetHandUpInfoBuletoothModel currentModel]; [IDOFoundationCommand setHandUpCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetHandUpInfoBuletoothModel.current(); IDOFoundationCommand.setHandUp(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetLeftRightFundation.html":{"url":"set/IDOSetLeftRightFundation.html","title":"Set left and right hand wear","keywords":"","body":"Set left and right hand wear Description of the left and right hand wearing model IDOSetLeftOrRightInfoBuletoothModel Parameters Description Remarks isRight Whether it is worn on the right hand bool Command code Objc: IDOSetLeftOrRightInfoBuletoothModel * model = [IDOSetLeftOrRightInfoBuletoothModel currentModel]; [IDOFoundationCommand setLeftRightHandCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetLeftOrRightInfoBuletoothModel.current(); IDOFoundationCommand.setLeftRightHand(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOPreventLostFunction.html":{"url":"set/IDOPreventLostFunction.html","title":"Set anti-lost command","keywords":"","body":"Set anti-lost command Anti-lost model description IDOSetPreventLostInfoBuletoothModel Parameters Description Remarks levelType Anti-loss level 0: no anti-lost, 1: close-range anti-lost, 2: medium-range anti-lost, 3: long-range anti-lost Command code Objc: IDOSetPreventLostInfoBuletoothModel * model = [IDOSetPreventLostInfoBuletoothModel currentModel]; [IDOFoundationCommand setPreventLostCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetPreventLostInfoBuletoothModel.current(); IDOFoundationCommand.setPreventLost(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetDisplayFunction.html":{"url":"set/IDOSetDisplayFunction.html","title":"Set Display Mode","keywords":"","body":"Set display mode Display mode model description IDOSetDisplayModeInfoBluetoothModel Parameters Description Remarks modeType Display mode 0: default, 1: horizontal screen, 2: vertical screen, 3: rotate 180 degrees Command code Objc: IDOSetDisplayModeInfoBluetoothModel * model = [IDOSetDisplayModeInfoBluetoothModel currentModel]; [IDOFoundationCommand setDisplayModeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetDisplayModeInfoBluetoothModel.current(); IDOFoundationCommand.setDisplayMode(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetNoticeFunction.html":{"url":"set/IDOSetNoticeFunction.html","title":"Set Smart Reminder","keywords":"","body":"Set smart reminder Set up a smart reminder to initiate pairing before turning on the corresponding notification switch Smart reminder model description IDOSetPairingInfoBuletoothModel Parameters Description Remarks pairingTimeStr Pairing time stamp str isPairing Whether to pair bool IDOSetNoticeInfoBuletoothModel Parameters Description Remarks isPairing Whether to pair bool callDelay Incoming call delay Current settings must be greater than or equal to 3 seconds to be effective isOnChild Whether to turn on the sub-switch Only effective for smart reminders, invalid for incoming call reminders isOnCall Call reminder bool isOnSms SMS reminder bool isOnEmail Mail reminder bool isOnWeChat WeChat reminder bool isOnQq qq reminder bool isOnWeibo Weibo reminder bool isOnFaceBook FaceBook reminder bool isOnTwitter Twitter reminder bool isOnWhatsapp Whatsapp reminder bool isOnMessenger Messenger reminder bool isOnInstagram Instagram reminder bool isOnLinkedIn LinkedIn reminder bool isOnCalendar Calendar reminder bool isOnSkype Skype reminder bool isOnAlarm Alarm reminder bool isOnPokeman Pokeman reminder bool isOnVkontakte Vkontakte reminder bool isOnLine Line reminder bool isOnViber Viber reminder bool isOnKakaoTalk KakaoTalk reminder bool isOnGmail Gmail reminder bool isOnOutlook Outlook reminder bool isOnSnapchat Snapchat reminder bool isOnTelegram Telegram reminder bool isOnChatwork Chatwork reminder bool isOnSlack Slack reminder bool isOnYahooMail Yahoo Mail reminder bool isOnTumblr Tumblr reminder bool isOnYoutube Youtube reminder bool isOnYahooPinterest Yahoo Pinterest reminder bool Command code Set up pairing It is not recommended to use this command method, it can be used as an auxiliary command, please use the integrated method of pairing and notification switch commands Objc: [IDOFoundationCommand setBluetoothPairingCommandWithCallback:^(BOOL isNeedDisconnect, int stateCode) { //Whether the pairing process needs to be disconnected, the state of the pairing process } pairingComplete:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: IDOFoundationCommand.setBluetoothPairingCommandWithCallback({ (isNeedDisconnect, stateCode) in //Whether the pairing process needs to be disconnected, the state of the pairing process }) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6 { //The device does not support }else { //Setup failed } }; Set notification sub-switch It is not recommended to use this command method, it can be used as an auxiliary command, please use the integrated method of pairing and notification switch commands Objc: IDOSetNoticeInfoBuletoothModel * model = [IDOSetNoticeInfoBuletoothModel currentModel]; [IDOFoundationCommand setChildSwitchNoticeStateCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetNoticeInfoBuletoothModel.current(); IDOFoundationCommand.setChildSwitchNoticeState(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6 { //The device does not support }else { //Setup failed } }; Set the pairing and notification switch If the device is not paired, pairing will be initiated. After the pairing is successful, the setting of the sub-switch state will be executed. It takes a long time to pair Please listen for callbacks. Objc: IDOSetNoticeInfoBuletoothModel * model = [IDOSetNoticeInfoBuletoothModel currentModel]; [IDOFoundationCommand setSwitchNoticeCommand:model callback:^(BOOL isNeedDisconnect, int stateCode) { //Whether the pairing process needs to be disconnected, the state of the pairing process } complete:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetNoticeInfoBuletoothModel.current(); IDOFoundationCommand.setSwitchNotice(model, callback: {(isNeedDisconnect, stateCode) in //Whether the pairing process needs to be disconnected, the state of the pairing process }) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6 { //The device does not support }else { //Setup failed } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetLongSitFunction.html":{"url":"set/IDOSetLongSitFunction.html","title":"Set sedentary reminder","keywords":"","body":"Set sedentary reminder Sedentary model description IDOSetLongSitInfoBuletoothModel Parameters Description Remarks startHour Start (hour) int startMinute Start (minutes) int endHour End (hour) int endMinute End (minute) int interval Interval 0-10 minutes isOpen Switch bool selectWeeks Repeat collection [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday] Command code Objc: IDOSetLongSitInfoBuletoothModel * model = [IDOSetLongSitInfoBuletoothModel currentModel]; [IDOFoundationCommand setLongSitCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetLongSitInfoBuletoothModel.current(); IDOFoundationCommand.setLongSit(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetWeatherFunction.html":{"url":"set/IDOSetWeatherFunction.html","title":"Set weather forecast","keywords":"","body":"Set weather forecast Weather forecast model description IDOSetWeatherSwitchInfoBluetoothModel Parameters Description Remarks isOpen Switch bool IDOSetWeatherDataInfoBluetoothModel Parameters Description Remarks timeStr Timestamp of weather forecast update str timeStr Timestamp of weather forecast update str todayType Day weather type 0: Others, 1: Sunny, 2: Cloudy, 3: Overcast, 4: Rain, 5: Heavy Rain, 6: Thunderstorm, 7: Snow, 8: Sleet, 9: Typhoon,10: sand and dust storm, 11: sunny at night, 12: cloudy at night, 13: hot, 14: cold, 15: fresh wind, 16: strong wind, 17: fog, 18: shower, 19: cloudy to sunny todayMaxTemp Maximum temperature of the day int todayMinTemp Minimum temperature of the day int humidity Humidity int todayUvIntensity UV intensity int todayAqi Air pollution index int future The weather collection for the next three days Format: @{@\"type\":@(0),@\"maxTemp\":@(0),@\"minTemp\":@(0)} Command code Set weather switch Objc: IDOSetWeatherSwitchInfoBluetoothModel * model = [IDOSetWeatherSwitchInfoBluetoothModel currentModel]; [IDOFoundationCommand setWeatherCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetWeatherSwitchInfoBluetoothModel.current(); IDOFoundationCommand.setWeather(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Set weather data Objc: IDOSetWeatherDataInfoBluetoothModel * model = [IDOSetWeatherDataInfoBluetoothModel currentModel]; [IDOFoundationCommand setWeatherDataCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetWeatherDataInfoBluetoothModel.current(); IDOFoundationCommand.setWeatherData(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetHrModeFunction.html":{"url":"set/IDOSetHrModeFunction.html","title":"Set Heart Rate Mode","keywords":"","body":"Set heart rate mode Heart rate model description IDOSetHrModeInfoBluetoothModel Parameters Description Remarks modeType Heart rate mode 0: turn off the heart rate monitoring function, 1: manual mode, 2: automatic mode, 3: continuous monitoring isHasTimeRange Is there a time interval bool startHour Start (hour) int startMinute Start (minutes) int endHour End (hour) int endMinute End (minute) int measurementInterval Measurement interval Unit: minutes Command code Objc: IDOSetHrModeInfoBluetoothModel * model = [IDOSetHrModeInfoBluetoothModel currentModel]; [IDOFoundationCommand setHrModeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetHrModeInfoBluetoothModel.current(); IDOFoundationCommand.setHrMode(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetHrIntervalFunction.html":{"url":"set/IDOSetHrIntervalFunction.html","title":"Set Heart Rate Zone","keywords":"","body":"Set heart rate interval Description of Heart Rate Interval Model IDOSetHrIntervalInfoBluetoothModel Parameters Description Remarks burnFat Fat burning int aerobic Aerobic exercise int limitValue Extreme sports int userMaxHr Maximum heart rate int warmUp Warm-up exercise int anaerobic Anaerobic exercise int minHr Minimum heart rate int maxHrRemind Maximum heart rate reminder switch bool minHrRemind Minimum heart rate reminder switch bool startHour Start (hour) int startMinute Start (minutes) int stopHour End (hour) int stopMinute End (minute) int Command code Objc: IDOSetHrIntervalInfoBluetoothModel * model = [IDOSetHrIntervalInfoBluetoothModel currentModel]; [IDOFoundationCommand setHrIntervalCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetHrIntervalInfoBluetoothModel.current(); IDOFoundationCommand.setHrInterval(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetNoDisturbFunction.html":{"url":"set/IDOSetNoDisturbFunction.html","title":"Set Do Not Disturb Mode","keywords":"","body":"Set Do Not Disturb Mode Do not disturb model description IDOSetNoDisturbModeInfoBluetoothModel Parameters Description Remarks isOpen Switch bool startHour Start (hour) int startMinute Start (minutes) int endHour End (hour) int endMinute End (minute) int isHaveRangRepeat Whether there are repeated reminders at intervals bool repeat Repeat collection [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday] Command code Objc: IDOSetNoDisturbModeInfoBluetoothModel * model = [IDOSetNoDisturbModeInfoBluetoothModel currentModel]; [IDOFoundationCommand setNoDisturbModeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetNoDisturbModeInfoBluetoothModel.current(); IDOFoundationCommand.setNoDisturbMode(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetUnitFunction.html":{"url":"set/IDOSetUnitFunction.html","title":"Set Unit Command","keywords":"","body":"Set unit command Unit model description IDOSetUnitInfoBluetoothModel Parameters Description Remarks distanceUnit Distance units 0x00: invalid, 0x01:km, 0x02:mi weightUnit weight unit 0x00: invalid, 0x01: kg, 0x02: lb, 0x03: Ying Shi tempUnit Temperature unit 0x00: invalid, 0x01: °C, 0x02: °F languageUnit Language unit Invalid: 0, Chinese: 1, English: 2, French: 3, German: 4, Italian: 5, Spanish: 6, Japanese: 7, Polish: 8, Czech: 9, Romania: 10, Lithuanian: 11, Dutch: 12, Slovenia: 13, Hungarian: 14, Russian: 15, Ukrainian: 16, Slovak: 17, Danish: 18, Croatian: 19, Indonesian: 20, Korean: 21, Hindi: 22, Portuguese: 23, Turkey: 24, Thai: 25,Vietnamese: 26, Burmese: 27, Filipino: 28, Traditional Chinese: 29, Greek: 30 Menu judgment strideWalk Walking pace According to male conversion, the default value is 72cm strideRun Run pace According to male conversion, the default value is 90cm strideGps gps calibration step size 0x00: invalid, 0x01: on, 0x02: off timeUnit Time unit 0x00: invalid, 0x01: 24-hour clock, 0x02: 12-hour clock weekStart The start day of the week Sunday: 0x01, Monday: 0x00, Saturday: 0x03 Command code Objc: IDOSetUnitInfoBluetoothModel * model = [IDOSetUnitInfoBluetoothModel currentModel]; [IDOFoundationCommand setUnitCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetUnitInfoBluetoothModel.current(); IDOFoundationCommand.setUnit(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetOneKeySosFunction.html":{"url":"set/IDOSetOneKeySosFunction.html","title":"Set one key to call for help","keywords":"","body":"Set a key to call for help One-click help model description IDOSetOneKeySosInfoBuletoothModel Parameters Description Remarks isOpen Switch bool Command code Objc: IDOSetOneKeySosInfoBuletoothModel * model = [IDOSetOneKeySosInfoBuletoothModel currentModel]; [IDOFoundationCommand setOneKeySosCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetOneKeySosInfoBuletoothModel.current(); IDOFoundationCommand.setOneKeySos(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetShortcutFunction.html":{"url":"set/IDOSetShortcutFunction.html","title":"Set Shortcut","keywords":"","body":"Set shortcut Shortcut model description IDOSetShortcutInfoBluetoothModel Parameters Description Remarks shortcutType Shortcut type 0: invalid, 1: take a picture, 2: sports mode, 3: do not disturb mode Command code Objc: IDOSetShortcutInfoBluetoothModel * model = [IDOSetShortcutInfoBluetoothModel currentModel]; [IDOFoundationCommand setShortcutCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetShortcutInfoBluetoothModel.current(); IDOFoundationCommand.setShortcut(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetBpFunction.html":{"url":"set/IDOSetBpFunction.html","title":"Set Blood Pressure Calibration","keywords":"","body":"Set blood pressure calibration Description of blood pressure calibration model IDOSetBloodPressureInfoBluetoothModel Parameters Description Remarks diastolic Diastolic blood pressure int shrinkage systolic blood pressure int statusCode Return to calibration status 0x01: successfully entered calibration mode, calibrating 0x02: in sport mode, 0x03: device is busy, 0x04: invalid state, 0x06: calibration failed, 0x00: calibration successful flag Blood pressure calibration control 0x01: blood pressure calibration starts, 0x02: blood pressure calibration query Command code Objc: IDOSetBloodPressureInfoBluetoothModel * model = [IDOSetBloodPressureInfoBluetoothModel currentModel]; [IDOFoundationCommand setBpCalCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetBloodPressureInfoBluetoothModel.current(); IDOFoundationCommand.setBpCal(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetSportShortcutFunction.html":{"url":"set/IDOSetSportShortcutFunction.html","title":"Set sport shortcut","keywords":"","body":"Set sport sorting Description of the sports sequencing model IDOSetSportSortingInfoBluetoothModel Parameters Description Remarks sportSortingItems Sequence collection of sport modes Up to 8 or 14 IDOSetSportSortingItemModel Parameters Description Remarks index Sort index From 1, 2, 3, 4...., 0: invalid type Sports mode 0: none, 1: walking, 2: running, 3: cycling, 4: hiking, 5: swimming, 6: mountain climbing, 7: badminton, 8: other, 9: fitness, 10: dynamic Cycling, 11: elliptical machine, 12: treadmill, 13: sit-ups, 14: push-ups, 15: dumbbells, 16: weight lifting, 17: aerobics, 18: yoga, 19: skipping rope, 20 : Table Tennis, 21: Basketball, 22: Football, 23: Volleyball, 24: Tennis, 25: Golf, 26: Baseball, 27: Skiing, 28: Roller Skating, 29: Dancing, 48: Outdoor Running, 49: Indoor running, 50: Outdoor riding, 51: Indoor riding, 52: Outdoor walking, 53: Indoor walking, 54: Swimming in the pool, 55: Swimming in open water, 56: Elliptical machine , 57: rowing machine, 58: high-intensity interval training, 75: cricket sports Command code Objc: IDOSetSportSortingInfoBluetoothModel * model = [IDOSetSportSortingInfoBluetoothModel currentModel]; [IDOFoundationCommand setSportModeSortCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetSportSortingInfoBluetoothModel.current(); IDOFoundationCommand.setSportModeSort(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetSportSortFunction.html":{"url":"set/IDOSetSportSortFunction.html","title":"Set Motion Sort","keywords":"","body":"Set sport sorting Description of the sports sequencing model IDOSetSportSortingInfoBluetoothModel Parameters Description Remarks sportSortingItems Sequence collection of sport modes Up to 8 or 14 IDOSetSportSortingItemModel Parameters Description Remarks index Sort index From 1, 2, 3, 4...., 0: invalid type Sports mode 0: none, 1: walking, 2: running, 3: cycling, 4: hiking, 5: swimming, 6: mountain climbing, 7: badminton, 8: other, 9: fitness, 10: dynamic Cycling, 11: elliptical machine, 12: treadmill, 13: sit-ups, 14: push-ups, 15: dumbbells, 16: weight lifting, 17: aerobics, 18: yoga, 19: skipping rope, 20 : Table Tennis, 21: Basketball, 22: Football, 23: Volleyball, 24: Tennis, 25: Golf, 26: Baseball, 27: Skiing, 28: Roller Skating, 29: Dancing, 48: Outdoor Running, 49: Indoor running, 50: Outdoor riding, 51: Indoor riding, 52: Outdoor walking, 53: Indoor walking, 54: Swimming in the pool, 55: Swimming in open water, 56: Elliptical machine , 57: rowing machine, 58: high-intensity interval training, 75: cricket sports Command code Objc: IDOSetSportSortingInfoBluetoothModel * model = [IDOSetSportSortingInfoBluetoothModel currentModel]; [IDOFoundationCommand setSportModeSortCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetSportSortingInfoBluetoothModel.current(); IDOFoundationCommand.setSportModeSort(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetScreenBrightFunction.html":{"url":"set/IDOSetScreenBrightFunction.html","title":"Set screen brightness","keywords":"","body":"Set screen brightness Screen brightness model description IDOSetScreenBrightnessInfoBluetoothModel Parameters Description Remarks levelValue Screen brightness level 1-100 isManual Whether the user adjusts bool mode Screen brightness level 0x00 turns off automatic adjustment, 0x01 uses ambient light sensor,0x02, automatically adjusts brightness at night,0x03 uses brightness at night to set the time autoAdjustNight Automatic brightness adjustment at night 0x00, invalid, defined by firmware, 0x01 off,0x02, automatic brightness adjustment at night,0x03 night brightness reduction using the set time startHour Start (hour) int startMinute Start (minutes) int endHour End (hour) int endMinute End (minute) int nightLevel Night brightness 1-100 Command code Objc: IDOSetScreenBrightnessInfoBluetoothModel * model = [IDOSetScreenBrightnessInfoBluetoothModel currentModel]; [IDOFoundationCommand setScreenBrightnessCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetScreenBrightnessInfoBluetoothModel.current(); IDOFoundationCommand.setScreenBrightness(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetMusicFunction.html":{"url":"set/IDOSetMusicFunction.html","title":"Set Music Switch","keywords":"","body":"Set music switch Setting up music control requires Bluetooth pairing Music switch model description IDOSetPairingInfoBuletoothModel Parameters Description Remarks pairingTimeStr Pairing time stamp str isPairing Whether to pair bool IDOSetMusicOpenInfoBuletoothModel Parameters Description Remarks isOpen Switch bool Command code Bluetooth pairing Objc: [IDOFoundationCommand setBluetoothPairingCommandWithCallback:^(BOOL isNeedDisconnect, int stateCode) { //Whether the pairing process needs to be disconnected, the state of the pairing process } pairingComplete:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: IDOFoundationCommand.setBluetoothPairingCommandWithCallback({ (isNeedDisconnect, stateCode) in //Whether the pairing process needs to be disconnected, the state of the pairing process }) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6 { //The device does not support }else { //Setup failed } }; Music switch Objc: IDOSetMusicOpenInfoBuletoothModel * model = [IDOSetMusicOpenInfoBuletoothModel currentModel]; [IDOFoundationCommand setOpenMusicCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetMusicOpenInfoBuletoothModel.current(); IDOFoundationCommand.setOpenMusic(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetGpsInfoFunction.html":{"url":"set/IDOSetGpsInfoFunction.html","title":"Set GPS Information","keywords":"","body":"Set GPS information GPS information model description IDOSetGpsConfigInfoBluetoothModel Parameters Description Remarks startMode Startup mode 0x01: cold start, 0x02: hot start gsopOperationMode Operation mode 1: Normal; 2: Low power consumption; 4: Balance, 5:1PPS gsopCycleMs Positioning cycle default 1000 ms gnsValue Positioning star mode 1:GPS, 2:GLONASS, 3:1GPS+GLONASS year (UTC) year int month (UTC)month int day (UTC) Day int hour (UTC) time int minute (UTC) points int second (UTC) seconds int Command code Objc: IDOSetGpsConfigInfoBluetoothModel * model = [IDOSetGpsConfigInfoBluetoothModel currentModel]; [IDOFoundationCommand setGpsInfoCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetGpsConfigInfoBluetoothModel.current(); IDOFoundationCommand.setGpsInfo(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetWatchDiaFunction.html":{"url":"set/IDOSetWatchDiaFunction.html","title":"Set watch face ID","keywords":"","body":"Set dial ID Dial ID model description IDOSetWatchDiaInfoBluetoothModel Parameters Description Remarks dialId Dial ID int Command code Objc: IDOSetWatchDiaInfoBluetoothModel * model = [IDOSetWatchDiaInfoBluetoothModel currentModel]; [IDOFoundationCommand setWatchDiaCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetWatchDiaInfoBluetoothModel.current(); IDOFoundationCommand.setWatchDia(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetWalkRemindFunction.html":{"url":"set/IDOSetWalkRemindFunction.html","title":"Set walking reminder","keywords":"","body":"Set walking reminder Walking reminder model description IDOSetWalkReminderBluetoothModel Parameters Description Remarks onOff Switch bool goalStep Target steps int startHour Start (hour) int startMinute Start (minutes) int endHour End (hour) int endMinute End (minute) int repeat Repeat collection [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday] Command code Objc: IDOSetWalkReminderBluetoothModel * model = [IDOSetWalkReminderBluetoothModel currentModel]; [IDOFoundationCommand setWalkReminderCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetWalkReminderBluetoothModel.current(); IDOFoundationCommand.setWalkReminder(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetV3HrModeFunction.html":{"url":"set/IDOSetV3HrModeFunction.html","title":"Set v3 Heart Rate Mode","keywords":"","body":"Set V3 heart rate mode V3 Heart Rate Mode Model Description IDOSetHrModeInfoBluetoothModel Parameters Description Remarks modeType Heart rate mode 0: turn off the heart rate monitoring function, 1: manual mode, 2: automatic mode, 3: continuous monitoring updateTime Update timestamp str isHasTimeRange Is there a time interval bool startHour Start (hour) int startMinute Start (minutes) int endHour End (hour) int endMinute End (minute) int measurementInterval Measurement interval Unit: minutes Command code Objc: IDOSetV3HeartRateModeBluetoothModel * model = [IDOSetV3HeartRateModeBluetoothModel currentModel]; [IDOFoundationCommand setV3HrModelCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetV3HeartRateModeBluetoothModel.current(); IDOFoundationCommand.setV3HrModel(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetSpo2Function.html":{"url":"set/IDOSetSpo2Function.html","title":"Set Blood Oxygen Switch","keywords":"","body":"Set blood oxygen switch Blood Oxygen Switch Model Description IDOSetSpo2SwitchBluetoothModel Parameters Description Remarks onOff Switch bool startHour Start (hour) int startMinute Start (minutes) int endHour End (hour) int endMinute End (minute) int measurementInterval Measurement interval Unit: minutes Command code Objc: IDOSetSpo2SwitchBluetoothModel * model = [IDOSetSpo2SwitchBluetoothModel currentModel]; [IDOFoundationCommand setSpo2SwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetSpo2SwitchBluetoothModel.current(); IDOFoundationCommand.setSpo2Switch(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetSleepTimeFunction.html":{"url":"set/IDOSetSleepTimeFunction.html","title":"Set Sleep Switch","keywords":"","body":"Set the sleep time period Sleep time period model description IDOSetSleepPeriodInfoBluetoothModel Parameters Description Remarks onOff Switch bool startHour Start (hour) int startMinute Start (minutes) int endHour End (hour) int endMinute End (minute) int Command code Objc: IDOSetSleepPeriodInfoBluetoothModel * model = [IDOSetSleepPeriodInfoBluetoothModel currentModel]; [IDOFoundationCommand setSleepPeriodCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetSleepPeriodInfoBluetoothModel.current(); IDOFoundationCommand.setSleepPeriod(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetPressureSwitchFunction.html":{"url":"set/IDOSetPressureSwitchFunction.html","title":"Set Pressure Switch","keywords":"","body":"Set pressure switch Pressure switch model description IDOSetPressureSwitchBluetoothModel Parameters Description Remarks onOff Switch bool startHour Start (hour) int startMinute Start (minutes) int endHour End (hour) int endMinute End (minute) int Command code Objc: IDOSetPressureSwitchBluetoothModel * model = [IDOSetPressureSwitchBluetoothModel currentModel]; [IDOFoundationCommand setPressureSwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetPressureSwitchBluetoothModel.current(); IDOFoundationCommand.setPressureSwitch(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetMenuListFunction.html":{"url":"set/IDOSetMenuListFunction.html","title":"Setup Menu List","keywords":"","body":"Set menu list Menu list model description IDOGetMenuListInfoBluetoothModel Parameters Description Remarks minShowNum Minimum number of menus displayed No assignment required maxShowNum Maximum number of menus displayed No assignment required maxNum Maximum number supported No assignment required itemList Menu ordered collection 0: invalid, 1: steps, 2: heart rate, 3: sleep, 4: take pictures, 5: alarm clock, 6: music, 7: stopwatch, 8: timer, 9: sports mode,10: weather, 11: breathing exercise, 12: find phone, 13: pressure, 14: data ring, 15: time interface Command code Objc: IDOGetMenuListInfoBluetoothModel * model = [IDOGetMenuListInfoBluetoothModel currentModel]; [IDOFoundationCommand setMenuListCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOGetMenuListInfoBluetoothModel.current(); IDOFoundationCommand.setMenuList(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetMenstruationRemindFunction.html":{"url":"set/IDOSetMenstruationRemindFunction.html","title":"Set physiological cycle reminder","keywords":"","body":"Set reminder of physiological cycle Instruction of physiological cycle reminder model IDOSetMenstruationRemindBluetoothModel Parameters Description Remarks startDay Start day reminder Days in advance ovulationDay Ovulation day reminder Days in advance hour Reminder time (hour) int minute Reminder time (minutes) int Command code Objc: IDOSetMenstruationRemindBluetoothModel * model = [IDOSetMenstruationRemindBluetoothModel currentModel]; [IDOFoundationCommand setMenstrualRemindCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetMenstruationRemindBluetoothModel.current(); IDOFoundationCommand.setMenstrualRemind(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetMenstruationFunction.html":{"url":"set/IDOSetMenstruationFunction.html","title":"Set physiological cycle","keywords":"","body":"Set the physiological cycle Instruction of physiological cycle model IDOSetMenstruationInfoBluetoothModel Parameters Description Remarks onOff Switch bool menstrualLength menstrual period length int menstrualCycle menstrual cycle int lastMenstrualYear Last menstrual period int lastMenstrualMonth Most menstrual period int lastMenstrualDay Date of recent menstrual period int ovulationIntervalDay Interval of ovulation days int ovulationBeforeDay One day before menstruation int ovulationAfterDay One day after menstruation int Command code Objc: IDOSetMenstruationInfoBluetoothModel * model = [IDOSetMenstruationInfoBluetoothModel currentModel]; [IDOFoundationCommand setMenstrualCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetMenstruationInfoBluetoothModel.current(); IDOFoundationCommand.setMenstrual(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetDrinkWaterFunction.html":{"url":"set/IDOSetDrinkWaterFunction.html","title":"Set Drinking Water Reminder","keywords":"","body":"Set drinking reminder Drink water reminder model description IDOSetDrinkReminderModeBluetoothModel Parameters Description Remarks onOff Switch bool interval Reminder interval Unit: minutes startHour Start time (hour) int startMinute Start time (minutes) int endHour End time (hours) int endMinute End time (minutes) int repeat Repeat collection [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday] Command code Objc: IDOSetDrinkReminderModeBluetoothModel * model = [IDOSetDrinkReminderModeBluetoothModel currentModel]; [IDOFoundationCommand setDrinkReminderCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetDrinkReminderModeBluetoothModel.current(); IDOFoundationCommand.setDrinkReminder(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetBreatheFunction.html":{"url":"set/IDOSetBreatheFunction.html","title":"Set Breath Training","keywords":"","body":"Set up breathing training Respiratory training model description IDOSetBreatheTrainBluetoothModel Parameters Description Remarks frequency Breaths per minute int Command code Objc: IDOSetBreatheTrainBluetoothModel * model = [IDOSetBreatheTrainBluetoothModel currentModel]; [IDOFoundationCommand setBreatheTrainCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetBreatheTrainBluetoothModel.current(); IDOFoundationCommand.setBreatheTrain(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"set/IDOSetActivitySwitchFunction.html":{"url":"set/IDOSetActivitySwitchFunction.html","title":"Set Motion Switch","keywords":"","body":"Set motion switch Motion switch model description IDOSetActivitySwitchBluetoothModel Parameters Description Remarks sportTypeOnOff Automatic recognition of movement type switch This parameter is abandoned sportRunOnOff Automatically recognize running switch bool sportBicycleOnOff Automatically recognize bicycle switch bool autoPauseOnOff Sports automatic pause switch bool endRemindOnOff End reminder switch bool Command code Objc: IDOSetActivitySwitchBluetoothModel * model = [IDOSetActivitySwitchBluetoothModel currentModel]; [IDOFoundationCommand setActivitySwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //Set up successfully }else if (errorCode == 6) { //The device does not support }else { //Setup failed } }]; Swift: let model = IDOSetActivitySwitchBluetoothModel.current(); IDOFoundationCommand.setActivitySwitch(model) {(errorCode) in if errorCode == 0 { //Set up successfully }else if errorCode == 6{ //The device does not support this method }else { //Setting error } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"IDOGetFunction.html":{"url":"IDOGetFunction.html","title":"Get Command Function","keywords":"","body":"Get command 7.1 Function Overview The acquisition command is that the mobile terminal sends data to the wristband terminal through the command, the response status is returned by the wristband terminal, and the corresponding data is processed to parse the data and convert the corresponding model. When successful, the setting data is stored, otherwise it is not stored, and the status code Prompt, the errorCode equal to 0 7.2 Main command functions Get Mac Command Get Device Information Get Function List Get Real-Time Data Get Notification Status Get Activity Number Get GPS Status Get Version Information Get OTA Authorization Get Motion Type Get Default Language Get Error Log Get Font Version Get Battery Information Get Menu List Get V3 Alarm Get V3 Heart Rate Mode Get MTU Get Overheat Log 7.3 Demo Get Function Entry Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetMacFunction.html":{"url":"get/IDOGetMacFunction.html","title":"Get Mac Command","keywords":"","body":"Get Mac address Mac address model description IDOGetMacAddrInfoBluetoothModel Parameters Description Remarks macAddr Mac address str Command code Objc: [IDOFoundationCommand getMacAddrCommand:^(int errorCode, IDOGetMacAddrInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getMacAddrCommand {(errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetDeviceInfoFunction.html":{"url":"get/IDOGetDeviceInfoFunction.html","title":"Get Device Information","keywords":"","body":"Get device information Device information model description IDOGetDeviceInfoBluetoothModel Parameters Description Remarks mode Device mode int battStatus Battery status 0x0: normal, 0x01: charging, 0x02: full, 0x03: low battery battLevel Battery level 0～100 rebootFlag Whether to restart int bindTimeStr Binding timestamp str bindState Binding status int bindType Binding type 0x00 default (note the previous ID number customization), the timeout time is invalid, 0x01 (click [button below]), 0x02 (long press [button below]), 0x03 (screen click horizontal confirmation and cancellation, the confirmation is on the left), 0x04 (screen click horizontal confirmation and cancellation, confirmation is on the right), 0x05 (screen click vertical confirmation and cancellation, the confirmation is on the top), 0x06 (screen click, vertical confirmation and cancellation, the confirmation is below), 0x07 click (a button on the right) bindTimeout Binding timeout The longest is 15 seconds, 0 means no timeout platform Bracelet platform 0:nordic,10:realtek 8762x,20:cypress psoc6,30:Apollo3 isSyncConfig Whether the configuration has been synchronized bool Command code Objc: [IDOFoundationCommand getDeviceInfoCommand:^(int errorCode, IDOGetDeviceInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getDeviceInfoCommand {(errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetFuncListFunction.html":{"url":"get/IDOGetFuncListFunction.html","title":"Get function list","keywords":"","body":"Get feature list Function model description The current function list has 29 function sub-tables Global Menu Object Objc: //Menu macro __IDO_FUNCTABLE__ Swift: //Menu table object IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel IDOGetFuncTable1BluetoothModel Parameters Description Remarks ch Chinese bool eng English bool french French bool german German bool italian Italian bool spanish Spanish bool japanese Japanese bool czech Czech bool IDOGetFuncTable2BluetoothModel Parameters Description Remarks romanian Romanian bool lithuanian Lithuanian bool dutch Dutch bool slovenian Slovenian bool hungarian Hungarian bool polish Polish bool russian Russian bool ukrainian Ukrainian bool IDOGetFuncTable3BluetoothModel Parameters Description Remarks slovak Slovak bool danish Danish bool croatian Croatian bool indonesian Indonesian bool korean Korean bool hindi Hindi bool portuguese Portuguese bool turkish Turkish bool IDOGetFuncTable4BluetoothModel Parameters Description Remarks stepCalculation Steps bool sleepMonitor Sleep detection bool singleSport Single exercise bool realtimeData Real-time data bool deviceUpdate Device update bool heartRate Heart rate function bool ancs Notification Center bool timeLine Timeline bool IDOGetFuncTable5BluetoothModel Parameters Description Remarks takePhoto Take a picture bool music Music bool hidPhoto Control taking pictures bool fiveHrInterval 5 heart rate zones bool bindAuth Binding authorization bool fastSync Quick sync bool exFuncTable Notification Center bool bindCodeAuth Binding code authorization bool IDOGetFuncTable6BluetoothModel Parameters Description Remarks wakeUp Get up bool sleep Sleeping bool sport Exercise bool medicine Take medicine bool dating Dating bool party Party bool metting Meeting bool custom Custom bool IDOGetFuncTable7BluetoothModel Parameters Description Remarks calling Call reminder bool callingContact Incoming contact bool callingNum Caller number bool IDOGetFuncTable8BluetoothModel Parameters Description Remarks message SMS bool email Mail bool qq qq bool weixin WeChat bool sinaWeibo Sina bool facebook facebook bool twitter twitter bool IDOGetFuncTable9BluetoothModel Parameters Description Remarks whatsapp whatsapp bool messengre messengre bool instagram instagram bool linkedIn linkedIn bool calendar calendar bool skype skype bool alarmClock alarmClock bool IDOGetFuncTable10BluetoothModel Parameters Description Remarks vkontakte vkontakte bool line line bool viber viber bool kakaoTalk kakaoTalk bool gmail gmail bool outlook outlook bool snapchat snapchat bool telegram telegram bool IDOGetFuncTable11BluetoothModel Parameters Description Remarks sedentariness Sedentary reminder bool antilost Anti-lost reminder bool onetouchCalling One-click calling bool findPhone Find your phone bool findDevice Look for the bracelet bool configDefault Default mode bool upHandGesture gestures bool weather weather forecast bool IDOGetFuncTable12BluetoothModel Parameters Description Remarks tipInfoContact Information contact bool tipInfoNum Prompt message number bool tipInfoContent Reminder message content bool IDOGetFuncTable13BluetoothModel Parameters Description Remarks staticHr Static heart rate bool doNotDisturb Anti-disturbance bool displayMode Display mode bool heartRateMonitor Heart rate monitoring bool bilateralAntiLost Two-way anti-lost bool allAppNotice All notification reminders bool noShowHrInterval Do not show heart rate interval bool flipScreen Flip the screen bool IDOGetFuncTable14BluetoothModel Parameters Description Remarks walk Walking bool run Run bool byBike Cycling bool onFoot On foot bool swim Swimming bool mountainClimbing Mountain climbing bool badminton Badminton bool other Other bool IDOGetFuncTable15BluetoothModel Parameters Description Remarks fitness Fitness bool spinning Elliptical sphere bool treadmill Treadmill bool sitUp Sit-ups bool pushUp Push-ups bool dumbbell Dumbbell bool weightlifting Weightlifting bool IDOGetFuncTable16BluetoothModel Parameters Description Remarks bodybuildingExercise Aerobics bool yoga Yoga bool ropeSkipping Rope skipping bool tableTennis Table tennis bool basketball Basketball bool football Football bool volleyball Volleyball bool tennis Tennis bool IDOGetFuncTable17BluetoothModel Parameters Description Remarks golf Golf bool baseball Baseball bool skiing Skiing bool rollerSkating Roller skating bool dance Dancing bool IDOGetFuncTable18BluetoothModel Parameters Description Remarks logIn Login bool hidPhoto The bracelet comes with a camera to take pictures bool watchDial Dial bool shortcut Shortcut bool unitSet Set units separately bool bloodPressure Blood pressure bool wechatSport WeChat campaign bool fineTimeControl Fine time period control bool IDOGetFuncTable19BluetoothModel Parameters Description Remarks gps gps bool sleepPeriod Sleep time period bool screenBrightness Screen brightness adjustment bool id107Dial id107l dial bool dhNewAppNotice Unknown attribute, consult firmware bool noitice128Byte 128 byte notification bool activityTimeSync Get time synchronization bool v3Log v3 collection bool IDOGetFuncTable20BluetoothModel Parameters Description Remarks menstruation Female physiological cycle bool calorieGoal Calorie goal bool distanceGoal Distance from target bool spo2Data Blood oxygen data bool pressureData Stress data bool getNoDisturb Get Do Not Disturb Mode bool sportModeSort Sequence of sport modes bool noticeByte Notification message byte 250 bool IDOGetFuncTable21BluetoothModel Parameters Description Remarks chatwork chatwork bool slack slack bool tumblr tumblr bool youtube youtube bool yahooPinterest yahoo pinterest bool yahooMail yahoo mail bool IDOGetFuncTable22BluetoothModel Parameters Description Remarks autoPair Automatic pairing after connection bool noDisconnectPair Continuous line matching bool v3HrData v3 heart rate data bool v3SwimData v3 swimming data bool v3ActivityData v3 activity data bool v3GpsData v3 gps data bool drinkWaterReminder Drinking water reminder bool IDOGetFuncTable23BluetoothModel Parameters Description Remarks level5HrInterval 5 level heart rate zone bool walkReminder Move reminder bool breatheTrain Respiratory training bool screenBrightness5Level 5-level brightness adjustment bool activitySwitch Sport mode switch automatic recognition bool disturbHaveRangRepeat Do not disturb Support optional time range and week bool nightAutoBrightness Automatic brightness at night bool longMtu Transmit long packets bool IDOGetFuncTable24BluetoothModel Parameters Description Remarks outdoorRun Outdoor running bool indoorRun Indoor running bool outdoorCycle Outdoor riding bool indoorCycle Indoor cycling bool outdoorWalk walking outdoors bool indoorWalk Indoor walking bool poolSwim Swimming in the pool bool openWaterSwim Open water swimming bool IDOGetFuncTable25BluetoothModel Parameters Description Remarks elliptical Elliptical machine bool rower Rowing machine bool hiit High-intensity interval training method bool cricket Cricket sports bool IDOGetFuncTable26BluetoothModel Parameters Description Remarks factoryReset Support to restore the factory settings for automatic unbinding bool liftingWrisBacklight The command to lift the wrist and light the backlight is the same as the screen to raise the hand,It means the name displayed on the app is different,Cannot coexist with other.upHandGesture bool multiActivityNoUseApp Multi-sports cannot use app bool multiDial Multi-dial bool mediumToHighActiveDuration Medium and high intensity activities bool defaultSportType Get the sports mode of the bracelet bool downloadLanguage Downloadable languages bool flashLog Log function bool IDOGetFuncTable27BluetoothModel Parameters Description Remarks thai Thailand bool vietnamese Vietnamese bool burmese Burmese bool filipino Filipino bool traditionalChinese Traditional Chinese bool greek Greek bool IDOGetFuncTable28BluetoothModel Parameters Description Remarks chargingTime Charging time bool menuList Menu settings bool photoWallpaper Background photos bool voiceTransmission Voice function bool utcTimeZone utc time bool choiceUse New 4 out of 2 features bool heartRateInterval Support heart rate interval setting bool v3SportsType Setting and obtaining sport type of v3 bool IDOGetFuncTable29BluetoothModel Parameters Description Remarks v3SyncAlarm Synchronization of alarm clock of v3 bool ubloxModel Support ublox module bool Command code Objc: [IDOFoundationCommand getFuncTableCommand:^(int errorCode, IDOGetDeviceFuncBluetoothModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getFuncTableCommand {(errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetLiveDataFunction.html":{"url":"get/IDOGetLiveDataFunction.html","title":"Get real-time data","keywords":"","body":"Get real-time data Real-time data model description IDOGetLiveDataBluetoothModel Parameters Description Remarks step Steps int calories Calorie int distances Distance int activeTime Activity duration int heartRate Heart rate int Command code Objc: [IDOFoundationCommand getLiveDataCommand:^(int errorCode, IDOGetLiveDataBluetoothModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getLiveDataCommand {(errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetNoticeFunction.html":{"url":"get/IDOGetNoticeFunction.html","title":"Get Notification Status","keywords":"","body":"Get notification status Notification status model description IDOSetNoticeInfoBuletoothModel Parameters Description Remarks isPairing Whether to pair bool callDelay Incoming call delay Current settings must be greater than or equal to 3 seconds to be effective isOnChild Whether to turn on the sub-switch Only effective for smart reminders, invalid for incoming call reminders isOnCall Call reminder bool isOnSms SMS reminder bool isOnEmail Mail reminder bool isOnWeChat WeChat reminder bool isOnQq qq reminder bool isOnWeibo Weibo reminder bool isOnFaceBook FaceBook reminder bool isOnTwitter Twitter reminder bool isOnWhatsapp Whatsapp reminder bool isOnMessenger Messenger reminder bool isOnInstagram Instagram reminder bool isOnLinkedIn LinkedIn reminder bool isOnCalendar Calendar reminder bool isOnSkype Skype reminder bool isOnAlarm Alarm reminder bool isOnPokeman Pokeman reminder bool isOnVkontakte Vkontakte reminder bool isOnLine Line reminder bool isOnViber Viber reminder bool isOnKakaoTalk KakaoTalk reminder bool isOnGmail Gmail reminder bool isOnOutlook Outlook reminder bool isOnSnapchat Snapchat reminder bool isOnTelegram Telegram reminder bool isOnChatwork Chatwork reminder bool isOnSlack Slack reminder bool isOnYahooMail Yahoo Mail reminder bool isOnTumblr Tumblr reminder bool isOnYoutube Youtube reminder bool isOnYahooPinterest Yahoo Pinterest reminder bool Command code Objc: [IDOFoundationCommand getNoticeStatusCommand:^(int errorCode, IDOSetNoticeInfoBuletoothModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getNoticeStatusCommand {(errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetActivityCountFunction.html":{"url":"get/IDOGetActivityCountFunction.html","title":"Get Activity Number","keywords":"","body":"Get the number of events Description of Activity Quantity Model IDOGetActivityCountBluetoothModel Parameters Description Remarks activityCount Number of events int activityPacketCount Number of activity packages int gpsCount Number of GPS int gpsPacketCount Number of GPS packages int Command code Objc: [IDOFoundationCommand getActivityCountCommand:^(int errorCode, IDOGetActivityCountBluetoothModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getActivityCountCommand {(errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetGpsStateFunction.html":{"url":"get/IDOGetGpsStateFunction.html","title":"Get GPS State","keywords":"","body":"Get GPS status GPS state model description IDOGetGpsStatusBluetoothModel Parameters Description Remarks gpsRunStatus GPS running status 0: Not running, 1: Searching for stars, 2: Tracking isAgpsVaild AGPS is valid The remaining hours of the validity period, non-zero is valid Command code Objc: [IDOFoundationCommand getGpsStatusCommand:^(int errorCode, IDOGetGpsStatusBluetoothModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getGpsStatusCommand {(errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetVersionFunction.html":{"url":"get/IDOGetVersionFunction.html","title":"Get Version Information","keywords":"","body":"Get version information Version information model description IDOGetVersionInfoBluetoothModel Parameters Description Remarks sdkVersion SDK version The value is x10, 11 means version 1.1 hrAlgorithmVersion Heart rate algorithm version The value is x10, 11 means version 1.1 sleepAlgorithmVersion Sleep algorithm version The value is x10, 11 means version 1.1 stepAlgorithmVersion Step counting algorithm version The value is x10, 11 means version 1.1 gestureRecognitionVersion Gesture recognition algorithm The value is x10, 11 means version 1.1 pcbVersion PCB version The value is x10, 11 means version 1.1 Command code Objc: [IDOFoundationCommand getVersionInfoCommand:^(int errorCode, IDOGetVersionInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getVersionInfoCommand {(errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetOtaAuthFuncion.html":{"url":"get/IDOGetOtaAuthFuncion.html","title":"Get OTA authorization","keywords":"","body":"Obtain OTA authorization Authorization status description Parameters Description Remarks stateCode Authorization status 0x00: successful verification, 0x01: ID number verification failure, 0x02: version number verification failure, 0x03: insufficient power, 0x04: other errors Command code Objc: [IDOFoundationCommand getOtaAuthInfoCommand:^(int errorCode, int stateCode) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getOtaAuthInfoCommand {(errorCode, stateCode) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetDefaultSportsFunction.html":{"url":"get/IDOGetDefaultSportsFunction.html","title":"Get Exercise Type","keywords":"","body":"Get the default sport type Sports type model description IDOGetDefaultSportTypeBluetoothModel Parameters Description Remarks sportTypeCount Number of default exercise types int minShowNum Minimum supported quantity int maxShowNum Maximum supported quantity int isSupportSort Whether the default sorting is supported bool sportTypes Sport type value set 0: none, 1: walking, 2: running, 3: cycling, 4: hiking, 5: swimming, 6: climbing, 7: badminton, 8: other, 9: fitness, 10: spinning, 11: elliptical, 12: treadmill, 13: sit-ups, 14: push-ups, 15: dumbbells, 16: weight lifting, 17: aerobics, 18: yoga, 19: Rope skipping, 20: table tennis, 21: basketball, 22: football, 23: volleyball, 24: tennis, 25: golf, 26: baseball, 27: ski, 28: roller skating, 29: dancing 48: outdoor running, 49: indoor running, 50: outdoor cycling, 51: indoor cycling, 52: outdoor walking, 53: indoor walking, 54: swimming pool, 55: open water Swimming, 56: Elliptical machine, 57: Rowing machine, 58: High-intensity interval training, 75: Cricket exercise Command code Objc: [IDOFoundationCommand getDefaultSportTypeCommand:^(int errorCode, IDOGetDefaultSportTypeBluetoothModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getDefaultSportTypeCommand {(errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetLanguageFunction.html":{"url":"get/IDOGetLanguageFunction.html","title":"Get default language","keywords":"","body":"Get the default language Default language model description IDOGetDownLanguageBluetoothModel Parameters Description Remarks useLang Current language used int defaultLang Default language int fixedLangCount Number of fixed storage languages int maxStorageLang Maximum number of stored languages int languageValues Language Collection Invalid: 0, Chinese: 1, English: 2, French: 3, German: 4, Italian: 5, Spanish: 6, Japanese: 7, Polish: 8, Czech: 9, Romania: 10, Lithuanian: 11, Dutch: 12, Slovenia: 13, Hungarian: 14, Russian: 15, Ukrainian: 16, Slovak: 17, Danish: 18, Croatian: 19, Indonesian: 20, Korean: 21, Hindi: 22, Portuguese: 23, Turkey: 24, Thai: 25,Vietnamese: 26, Burmese: 27, Filipino: 28,Traditional Chinese: 29, Greek: 30 Command code Objc: [IDOFoundationCommand getDefaultLanguageCommand:^(int errorCode, IDOGetDownLanguageBluetoothModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getDefaultLanguageCommand {(errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetErrorLogFunction.html":{"url":"get/IDOGetErrorLogFunction.html","title":"Get Error Log","keywords":"","body":"Get error log Error log model description IDOGetErrorLogBluetoothModel Parameters Description Remarks type Operation type 0x00: query, 0x01: clear record resetFlag Reset tag 0x0: normal, 0x01: hard error (Hard Faul), 0x02: watchdog service, 0x03: assert reset, 0x04: power down service, 0x05: other exceptions, this parameter does not need to be assigned hwError Hardware error code 0x00: normal, 0x01: acceleration error,0x02: heart rate error, 0x03:TP error,0x04:flash error,This parameter does not need to be assigned Command code Objc: IDOGetErrorLogBluetoothModel * model = [[IDOGetErrorLogBluetoothModel alloc]init]; model.type = 0x00; [IDOFoundationCommand getErrorLogRecordCommand:model callback:^(int errorCode, IDOGetErrorLogBluetoothModel * _Nullable model) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: let model = IDOGetErrorLogBluetoothModel.init(); model.type = 0x00; IDOFoundationCommand.getErrorLogRecord(model) {(errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetFlashBinFunction.html":{"url":"get/IDOGetFlashBinFunction.html","title":"Get font version","keywords":"","body":"Get font version Font version model description IDOGetFlashBinInfoBluetoothModel Parameters Description Remarks status Status 0x00 is normal, 0x01: invalid font, check error,0x02: version does not match flashVersion Font version int matchVersion Matching the version number, the font version number required by the firmware int checkCode Character checksum int Command code Objc: [IDOFoundationCommand getFlashBinInfoCommand:^(int errorCode, IDOGetFlashBinInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getFlashBinInfoCommand{ (errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetBatteryFunction.html":{"url":"get/IDOGetBatteryFunction.html","title":"Get Battery Information","keywords":"","body":"Get battery information Battery information model description IDOGetDeviceBattInfoBluetoothModel Parameters Description Remarks voltage Voltage, millivolts int status Status 0: Not charged, 1: Charging, 2: Fully charged level Battery level 0-100 lastChargingYear Last charge time (years) int lastChargingMonth Last charge time (month) int lastChargingDay Last charge time (day) int lastChargingHour Last charging time (hours) int lastChargingMinute Last charging time (minutes) int lastChargingSecond Last charge time (seconds) int Command code Objc: [IDOFoundationCommand getBatteryInfoCommand:^(int errorCode, IDOGetDeviceBattInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getBatteryInfoCommand{ (errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetMenuListFunction.html":{"url":"get/IDOGetMenuListFunction.html","title":"Get Menu List","keywords":"","body":"Get menu list Menu list model description IDOGetMenuListInfoBluetoothModel Parameters Description Remarks minShowNum Minimum number of menus displayed int maxShowNum Maximum number of menus displayed int maxNum Maximum number supported int itemList Menu ordered collection 0: Invalid, 1: Steps, 2: Heart rate, 3: Sleep, 4: Taking pictures, 5: Alarm clock, 6: Music, 7: Stopwatch, 8: Timer, 9: Sports mode, 10: Weather, 11: Breathing exercise, 12: Find phone, 13: Stress, 14: Data ring, 15: Time interface Command code Objc: [IDOFoundationCommand getMenuListInfoCommand:^(int errorCode, IDOGetMenuListInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getMenuListInfoCommand{ (errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetV3AlarmFunction.html":{"url":"get/IDOGetV3AlarmFunction.html","title":"Get V3 Alarm Clock","keywords":"","body":"Get V3 alarm clock V3 alarm clock model description IDOSetAlarmInfoBluetoothModel Parameters Description Remarks isOpen Alarm on status bool isSync Whether it is synchronized to the bracelet No assignment is required, the alarm will be automatically assigned after the alarm is set successfully isDelete Delete Default YES type Type 0: get up, 1: sleep, 2: exercise, 3: take medicine, 4: dating, 5: party, 6: meeting, 7: custom hour point int minute seconds int repeat Repeat collection [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday] tsnoozeDuration The length of snooze int alarmId Alarm ID int setTimeStamp Timestamp of alarm modification No assignment is required, the alarm will be automatically assigned after the alarm is set successfully IDOSetExtensionAlarmInfoBluetoothModel Parameters Description Remarks alarmVersion Alarm version number int alarmCount Number of alarm clocks int items Alarm clock collection Initialize the wristband alarm during synchronization configuration Command code Objc: [IDOFoundationCommand getV3AlarmsInfoCommand:^(int errorCode, IDOSetExtensionAlarmInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getV3AlarmsInfoCommand{ (errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetV3HrFunction.html":{"url":"get/IDOGetV3HrFunction.html","title":"Get V3 Heart Rate Mode","keywords":"","body":"Get V3 heart rate mode V3 Heart Rate Mode Model Description IDOSetV3HeartRateModeBluetoothModel Parameters Description Remarks modeType Heart rate mode 0: turn off heart rate monitoring, 1: manual mode, 2: automatic mode, 3: continuous monitoring updateTime Update timestamp str isHasTimeRange Is there a time interval bool startHour Start (hour) int startMinute Start (minutes) int endHour End (hour) int endMinute End (minute) int measurementInterval Measurement interval Unit: minutes Command code Objc: [IDOFoundationCommand getV3HrModeInfoCommand:^(int errorCode, IDOSetV3HeartRateModeBluetoothModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getV3HrModeInfoCommand{ (errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetMtuFunction.html":{"url":"get/IDOGetMtuFunction.html","title":"Get MTU","keywords":"","body":"Get MTU MTU model description IDOGetMtuBlueInfoModel Parameters Description Remarks sendMtu Maximum length of Bluetooth data transmission Default: 20 receiveMtu Maximum length of Bluetooth data reception Default: 20 Command code Objc: [IDOFoundationCommand getMtuInfoCommand:^(int errorCode, IDOGetMtuBlueInfoModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getMtuInfoCommand{ (errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"get/IDOGetOverHeatLogFunction.html":{"url":"get/IDOGetOverHeatLogFunction.html","title":"Get Overheat Log","keywords":"","body":"Get overheat log Description of overheating log model IDOGetOverHeatLogModel Parameters Description Remarks verionNum The version number of the message int devRunTime Total equipment running time Unit: seconds ppgRunTime Working time of ppg sensor Unit: seconds chargingTimes Charge times Unit: times errFlag Collection of reasons for exceptions 0: voltage drops too fast, 1: ppg sensor communication fails, 2: ppg sensor returns abnormal data year year int month month int day Day int hour hour int minute point int second seconds int Command code Objc: [IDOFoundationCommand getOverHeatLogInfoCommand:^(int errorCode, IDOGetOverHeatLogModel * _Nullable data) { if (errorCode == 0) { //Get success }else if (errorCode == 6) { //The device does not support }else { //Get failed } }]; Swift: IDOFoundationCommand.getOverHeatLogInfoCommand{ (errorCode, model) in if errorCode == 0 { //Get success }else if errorCode == 6 { //The device does not support }else { //Get failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"IDOControlFunction.html":{"url":"IDOControlFunction.html","title":"Control Command Function","keywords":"","body":"control commands 8.1 Overview The control command is that the mobile terminal sends data to the wristband terminal through the command, and the wristband terminal returns the response status. According to the status code, the error code equals 0 when the command is successfully sent. 8.2 Main Command Functions Common Control Commands Language Control Command Listen Control Command 8.3 Demo control function entrance Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"control/IDOCommonlyFunction.html":{"url":"control/IDOCommonlyFunction.html","title":"Common control commands","keywords":"","body":"Common control commands The IDOBluetooth library in the SDK is not used, but your Bluetooth manager is used to determine whether the currently connected device is in OTA mode by scanning the connection successfully: Objc: [IDOBlueDataResponse isOtaModeWithPeripheral:Peripheral]; Swift: IDOBlueDataResponse.isOtaMode(with: Peripheral); Device enters OTA mode notification Objc: [IDOFoundationCommand didOta]; Swift: IDOFoundationCommand.didOta(); Device does not enter OTA mode notification Objc: [IDOFoundationCommand disOta]; Swift: IDOFoundationCommand.disOta(); Disconnect notification Objc: [IDOFoundationCommand disConnect]; Swift: IDOFoundationCommand.disConnect(); Notification of connection failure Objc: [IDOFoundationCommand connectionFailed]; Swift: IDOFoundationCommand.connectionFailed(); Delete bracelet log Parameter Description Parameters Description Remarks type Operation type 0x01: Delete overheating log Objc: [IDOFoundationCommand clearLogCommandWithType:type callback:^(int errorCode,int state) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.clearLogCommand(withType: type) {(errorCode,state) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }; Open music control Objc: [IDOFoundationCommand musicStartCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.musicStart {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } } Turn off music control Objc: [IDOFoundationCommand musicStopCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.musicStop{ (errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } } Camera starts Objc: [IDOFoundationCommand cameraStartCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.cameraStart{ (errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } } Camera end Objc: [IDOFoundationCommand cameraStopCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.cameraStop{ (errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } } Device configuration reset Objc: [IDOFoundationCommand setDefaultConfigCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.setDefaultConfig{ (errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } } Control device restart Objc: [IDOFoundationCommand setAppRebootCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.setAppReboot{ (errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } } The device enters ota upgrade mode Objc: [IDOFoundationCommand setOtaCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.setOta{ (errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } } Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"control/IDOVoiceFunction.html":{"url":"control/IDOVoiceFunction.html","title":"Language Control Command","keywords":"","body":"Voice control commands Voice control to open specified activities Initiating motion parameters Parameters Description Remarks sportType Sports type 0: none, 1: walking, 2: running, 3: cycling, 4: hiking, 5: swimming, 6: climbing, 7: badminton, 8: other, 9: fitness, 10: spinning, 11: elliptical, 12: treadmill, 13: sit-ups, 14: push-ups, 15: dumbbells, 16: weight lifting, 17: aerobics, 18: yoga, 19: Rope skipping, 20: table tennis, 21: basketball, 22: football, 23: volleyball, 24: tennis, 25: golf, 26: baseball, 27: ski, 28: roller skating, 29: dancing 48: outdoor running, 49: indoor running, 50: outdoor cycling, 51: indoor cycling, 52: outdoor walking, 53: indoor walking, 54: swimming pool, 55: open water Swimming, 56: Elliptical machine, 57: Rowing machine, 58: High-intensity interval training, 75: Cricket exercise Objc: [IDOFoundationCommand voiceControlActivityWithType:sportType callback:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControlActivity(withType: sportType) {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }; Voice control enables real-time heart rate Open real-time heart rate parameters Parameters Description Remarks isOpen Whether to open bool Objc: [IDOFoundationCommand voiceControlRealTimeHrWithSwitch:isOpen callback:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControlRealTimeHr(withSwitch: isOpen) {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }; Voice control do not disturb mode Do not disturb mode parameters Parameters Description Remarks isOpen Whether to open bool Objc: [IDOFoundationCommand voiceControlNoDisturbWithSwitch:isOpen callback:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControlNoDisturb(withSwitch: isOpen) {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }; Voice control to raise wrist and bright screen Lifting the wrist bright screen parameters Parameters Description Remarks isOpen Whether to open bool Objc: [IDOFoundationCommand voiceControlWristBrightScreenWithSwitch:isOpen callback:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControlWristBrightScreen(withSwitch: isOpen) {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }; Voice control music Control music parameters Parameters Description Remarks controlType Control type 1: previous song, 2: next song, 3: increase volume, 4: decrease volume, 5: play music, 6: pause music Objc: [IDOFoundationCommand voiceControlMusicWithType:controlType callback:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControlMusic(withType: controlType) {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }; Voice control screen brightness Screen brightness parameters Parameters Description Remarks brightLevel Screen brightness 0-100 Objc: [IDOFoundationCommand voiceControlBrightScreenWithLevel:brightLevel callback:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControlBrightScreen(withLevel: brightLevel) {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }; Voice control jump stopwatch interface Objc: [IDOFoundationCommand voiceControlToStopWatchCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControl(toStopWatch: {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }); Voice control jump countdown interface Objc: [IDOFoundationCommand voiceControlToCountDownCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControl(toCountDown: {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }); Voice control jump heart rate detection interface Objc: [IDOFoundationCommand voiceControlToHeartRateCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControl(toHeartRate: {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }); Voice control jump pressure detection interface Objc: [IDOFoundationCommand voiceControlToPressureCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControl(toPressure: {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }); Voice control jump breath training interface Objc: [IDOFoundationCommand voiceControlToBreathingCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControl(toBreathing: {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }); Voice control jump to sleep record interface Objc: [IDOFoundationCommand voiceControlToSleepRecordCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControl(toSleepRecord: {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }); Voice control jump movement record interface Objc: [IDOFoundationCommand voiceControlToSportRecordCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControl(toSportRecord: {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }); Voice control to jump to the weather interface Objc: [IDOFoundationCommand voiceControlToWeatherCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControl(toWeather: {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }); Voice control to find mobile phone Objc: [IDOFoundationCommand voiceControlToFindPhoneCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControl(toFindPhone: {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }); Voice control off screen Objc: [IDOFoundationCommand voiceControlToBlackScreenCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControl(toBlackScreen: {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }); Voice control jump restart interface Objc: [IDOFoundationCommand voiceControlToRebootCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControl(toReboot: {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }); Voice control jump information interface Objc: [IDOFoundationCommand voiceControlToNotifyCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.voiceControl(toNotify: {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }); Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"control/IDOListenFunction.html":{"url":"control/IDOListenFunction.html","title":"Monitor Control Command","keywords":"","body":"Listen to control commands The monitoring and photographing method is used in conjunction with the control photographing command. The former is a wristband initiated control, the latter is [App initiated control] (IDOCommonlyFunction.md) Monitor and take pictures Objc: [IDOFoundationCommand listenPhotoStartCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.listenPhotoStart {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }; Monitor the end of the photo Objc: [IDOFoundationCommand listenPhotoEndCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.listenPhotoEnd {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }; Monitor single shot Objc: [IDOFoundationCommand listenPhotoSingleShotCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.listenPhotoSingleShot {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }; The method of monitoring and searching for mobile phones is used in conjunction with setting and searching for mobile phone commands. The former is the control initiated by the bracelet, the latter is [App initiated settings] (../set/IDOSetFindPhoneFunction.md) Monitor to start looking for mobile phone Objc: [IDOFoundationCommand listenFindPhoneStartCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.listenFindPhoneStart {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }; Monitor to stop looking for mobile phone Objc: [IDOFoundationCommand listenFindPhoneStopCommand:^(int errorCode) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.listenFindPhoneStop {(errorCode) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }; Obtain the voice data of the wristband and execute the corresponding [voice control command] (IDOVoiceFunction.md) through the semantic command conversion of Alexa voice service The bracelet sends voice data Objc: [IDOFoundationCommand listenVoiceFileDataCommand:^(int state, int errorCode) { if (errorCode == 0) { if (state == 1) { //Start }else if(state == 2) { //stop } }else { //Voice error } } complete:^(NSString * _Nullable filePath) { // Voice processing is completed, and return to the local path of voice, pcm format voice }]; Swift: IDOFoundationCommand.listenVoiceFileDataCommand({ (state, errorCode) in if errorCode == 0 { if state == 1 { //Start }else if state == 2 { //stop } }else { //Voice error } }) {(filePath) in // Voice processing is completed, and return to the local path of voice, pcm format voice }; Monitor the status of the bracelet IDOControlDataUpdateModel Parameters Description Remarks unbindState Unbind state 0: invalid, 1: the bracelet has been untied hrModeState Heart rate mode status 0: invalid, 2: heart rate mode changed alarmState Alarm status 0: invalid, 1: alarm clock modification overHeat Firmware overheating abnormal alarm 0: invalid, 1: overheat warning Objc: [IDOFoundationCommand listenStateChangeCommand:^(int errorCode,IDOControlDataUpdateModel *_Nullable model) { if (errorCode == 0) { //Control successful }else if (errorCode == 6) { //The device does not support }else { //Control failure } }]; Swift: IDOFoundationCommand.listenStateChange {(errorCode,model) in if errorCode == 0 { //Control successful }else if errorCode == 6 { //The device does not support }else { //Control failed. } }; Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"IDOSyncDataFunction.html":{"url":"IDOSyncDataFunction.html","title":"Data synchronization function","keywords":"","body":"Data synchronization function 9.1Feature overview Synchronizing device data is a very important function. It is recommended not to execute other commands during the synchronization process, even if the command is executed, it is invalid. The synchronization configuration is executed after the first successful binding of the connected device, and the device needs to perform the synchronization configuration when it is restored to the factory settings. Progress will be returned during synchronization, and the completion status will be returned after each item is synchronized. According to the synchronization status, it is judged whether the synchronization is completed. During the synchronization, the synchronization log is recorded and stored. 9.2 Synchronous initialization Objc: initSyncManager().wantToSyncType = IDO_WANT_TO_SYNC_CONFIG_ITEM_TYPE | IDO_WANT_TO_SYNC_HEALTH_ITEM_TYPE | IDO_WANT_TO_SYNC_ACTIVITY_ITEM_TYPE | IDO_WANT_TO_SYNC_GPS_ITEM_TYPE; Swift: initSyncManager().wantToSyncType = IDO_WANT_TO_SYNC_ITEM_TYPE.CONFIG_ITEM_TYPE | IDO_WANT_TO_SYNC_ITEM_TYPE.HEALTH_ITEM_TYPE |IDO_WANT_TO_SYNC_ITEM_TYPE.ACTIVITY_ITEM_TYPE | IDO_WANT_TO_SYNC_ITEM_TYPE.GPS_ITEM_TYPE; 9.3 Parameter Description Parameters Description Remarks isSyncHealthRun Whether the currently connected device is syncing readonly,bool isSyncConfigRun Whether the currently connected device is synchronizing configuration information readonly,bool isNeedSyncConfig Does the currently connected device need to be synchronized to configure readonly,bool wantToSyncType Set options that need to be synchronized Sync configuration, sync health,sync activity, sync GPS isSave Whether the synchronized data is stored in the SDK database Default YES itemSyncTimeout Timeout duration of each item synchronization default 60 seconds 9.4 Basic methods Objc: //Start synchronization [IDOSyncManager startSync]; //End synchronization [IDOSyncManager stopSync]; Swift: //Start synchronization IDOSyncManager.startSync(); //End synchronization IDOSyncManager.stopSync(); 9.5 Execute callback method Objc: initSyncManager().addSyncComplete(^(IDO_SYNC_COMPLETE_STATUS stateCode) { //Sync completed status }).addSyncProgess(^(IDO_CURRENT_SYNC_TYPE type, float progress) { //Sync item, sync progress (0-1) }).addSyncFailed(^(int errorCode) { //Sync failed }).addSyncSwim(^(NSString * jsonStr){ //If stored in SDK database, this method can not be added //Synchronized swimming data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }).addSyncHeartRate(^(NSString * jsonStr){ //If stored in SDK database, this method can not be added //Sync heart rate data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }).addSyncBloodOxygen(^(NSString * jsonStr){ //If stored in SDK database, this method can not be added //Synchronized blood oxygen data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }).addSyncBp(^(NSString * jsonStr){ //If stored in SDK database, this method can not be added //Synchronize blood pressure data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }).addSyncSleep(^(NSString * jsonStr){ //If stored in SDK database, this method can not be added //Synchronized sleep data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }).addSyncGps(^(NSString * jsonStr){ //If stored in SDK database, this method can not be added //Sync GPS data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }).addSyncSport(^(NSString * jsonStr){ //If stored in SDK database, this method can not be added //Synchronous step data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }).addSyncPressure(^(NSString * jsonStr){ //If stored in SDK database, this method can not be added //Synchronized pressure data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }).addSyncActivity(^(NSString * jsonStr){ //If stored in SDK database, this method can not be added //Synchronize activity data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }).addSyncConfig(^(NSString * logStr){ //This method can not be added //Synchronization configuration completed a configuration synchronization callback a log }).addSyncConfigInitData(^NSArray * (IDO_SYNC_CONFIG_DATA_TYPE type){ //According to the returned synchronization type, the initialized data model collection is returned corresponding to the business requirements return [NSArray array]; }).mandatorySyncConfig(YES or NO); // The binding needs to perform synchronization configuration, and subsequent reconnection does not need to perform synchronization configuration Swift: initSyncManager().addSyncComplete!{(stateCode)in //Sync completed status }.addSyncProgess!{(type,progress)in //Sync item, sync progress (0-1) }.addSyncFailed!{(errorCode)in //Sync failed }.addSyncSwim!{(jsonStr)in //If stored in SDK database, this method can not be added //Synchronized swimming data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }.addSyncHeartRate!{(jsonStr)in //If stored in SDK database, this method can not be added //Sync heart rate data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }.addSyncBloodOxygen!{(jsonStr)in //If stored in SDK database, this method can not be added //Synchronized blood oxygen data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }.addSyncBp!{(jsonStr)in //If stored in SDK database, this method can not be added //Synchronize blood pressure data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }.addSyncSleep!{(jsonStr)in //If stored in SDK database, this method can not be added //Synchronized sleep data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }.addSyncGps!{(jsonStr)in //If stored in SDK database, this method can not be added //Sync GPS data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }.addSyncSport!{(jsonStr)in //If stored in SDK database, this method can not be added //Synchronous step data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }.addSyncPressure!{(jsonStr)in //If stored in SDK database, this method can not be added //Synchronized pressure data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }.addSyncActivity!{(jsonStr)in //If stored in SDK database, this method can not be added //Synchronize activity data, json data can be stored in the business layer, //If the business layer stores data, it is recommended to set the SDK not to store isSave = false }.addSyncConfig!{(logStr)in //This method can not be added //Synchronization configuration completed a configuration synchronization callback a log }.addSyncConfigInitData!{(type)in //According to the returned synchronization type, the initialized data model collection is returned corresponding to the business requirements return []; }.mandatorySyncConfig!(true or false);//The binding needs to perform synchronization configuration, and subsequent reconnection does not need to perform synchronization configuration 9.6 Demo synchronization function entry Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"IDOExchangeFunction.html":{"url":"IDOExchangeFunction.html","title":"Data Exchange Function","keywords":"","body":"Data exchange function 10.1 Function Overview When initiating exercise in the App, the bracelet will calculate the heart rate and calories from the exercise data generated by the App and return it to the App for data exchange; When the bracelet initiates a movement, the movement data generated by the bracelet is regularly sent to the App to display the movement data in real time. The exchange data is based on time as the only reference. The exchange process needs to determine the current activity data through the movement start time. If the time does not correspond, the data cannot be exchanged. 10.2 Initialize motion data Objc: //Initialize exchange data IDODataExchangeModel * dataModel = [IDODataExchangeModel new]; //Start time of exercise IDOSetTimeInfoBluetoothModel * timeModel = [IDOSetTimeInfoBluetoothModel currentModel]; dataModel.day = timeModel.day; dataModel.hour = timeModel.hour; dataModel.minute = timeModel.minute; dataModel.second = timeModel.second; //Sport type dataModel.sportType = sportType; //Target type dataModel.targetType = targetType; //Target value datModel.targetValue = targetValue; Swift: //Initialize exchange data let dataModel = IDODataExchangeModel.init(); //Start time of exercise let timeModel = IDOSetTimeInfoBluetoothModel.current(); dataModel.day = timeModel!.day; dataModel.hour = timeModel!.hour; dataModel.minute = timeModel!.minute; dataModel.second = timeModel!.second; //Sport type dataModel.sportType = sportType; //Target type dataModel.targetType = targetType; //Target value datModel.targetValue = targetValue; 10.3App initiated data exchange method App starts the movement Objc: //dataModel global motion data model [IDOFoundationCommand appStartSportCommand:dataModel startCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //Successfully launched the campaign }else if (model.retCode == 2) { //The battery is too low }else { //Failed to initiate the campaign } }]; Swift: //dataModel global motion data model IDOFoundationCommand.appStartSportCommand(dataModel) {(model, errorCode) in if errorCode == 0 && model.retCode == 0{ //Successfully launched the campaign }else if model.retCode == 2 { //The battery is too low }else { //Failed to initiate the campaign } }; App initiates sports pause Objc: //dataModel global motion data model [IDOFoundationCommand appPauseSportCommand:dataModel pauseCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //Sports paused successfully }else if (model.retCode == 2) { //The battery is too low }else { //Failed to exercise pause } }]; Swift: //dataModel global motion data model IDOFoundationCommand.appPauseSportCommand(dataModel) {(model, errorCode) in if errorCode == 0 && model.retCode == 0{ //Sports paused successfully }else if model.retCode == 2 { //The battery is too low }else { //Failed to exercise pause } }; App initiates sports recovery Objc: //dataModel global motion data model [IDOFoundationCommand appRestoreSportCommand:dataModel appRestoreCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //Successful recovery of exercise }else if (model.retCode == 2) { //The battery is too low }else { //Recovery failed } }]; Swift: //dataModel global motion data model IDOFoundationCommand.appRestoreSportCommand(dataModel) {(model, errorCode) in if errorCode == 0 && model.retCode == 0{ //Successful recovery of exercise }else if model.retCode == 2 { //The battery is too low }else { //Recovery failed } }; App initiates the sports data exchange process Objc: //dataModel global motion data model [IDOFoundationCommand appIngSportCommand:dataModel appIngCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //Sport data exchange succeeded }else if (model.retCode == 2) { //The battery is too low }else { //Sport data exchange failed } }]; Swift: //dataModel global motion data model IDOFoundationCommand.appIngSportCommand(dataModel) {(model, errorCode) in if errorCode == 0 && model.retCode == 0{ //Sport data exchange succeeded }else if model.retCode == 2 { //The battery is too low }else { //Sport data exchange failed } }; App initiated the end of the campaign Objc: //dataModel global motion data model [IDOFoundationCommand appEndSportCommand:dataModel appEndcallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //Sports ended successfully }else if (model.retCode == 2) { //The battery is too low }else { //Failed to finish the exercise } }]; Swift: //dataModel global motion data model IDOFoundationCommand.appEndSportCommand(dataModel) {(model, errorCode) in if errorCode == 0 && model.retCode == 0{ //Sports ended successfully }else if model.retCode == 2 { //The battery is too low }else { //Failed to finish the exercise } }; App initiates the movement, the bracelet pauses Objc: //dataModel global motion data model [IDOFoundationCommand appBlePauseReplyCommand:dataModel appBlePauseCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //Sports bracelet suspended successfully }else if (model.retCode == 2) { //The battery is too low }else { //The sports bracelet failed to suspend } }]; Swift: //dataModel global motion data model IDOFoundationCommand.appBlePauseReply(dataModel) {(model, errorCode) in if errorCode == 0 && model.retCode == 0{ //Sports bracelet suspended successfully }else if model.retCode == 2 { //The battery is too low }else { //The sports bracelet failed to suspend } }; App initiates the movement and the bracelet resumes Objc: //dataModel global motion data model [IDOFoundationCommand appBleRestoreReplyCommand:dataModel appBleRestoreCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //The sports bracelet recovered successfully }else if (model.retCode == 2) { //The battery is too low }else { //Recovery of sports bracelet failed } }]; Swift: //dataModel global motion data model IDOFoundationCommand.appBleRestoreReply(dataModel) {(model, errorCode) in if errorCode == 0 && model.retCode == 0{ //The sports bracelet recovered successfully }else if model.retCode == 2 { //The battery is too low }else { //Recovery of sports bracelet failed } }; The app initiates the movement and the bracelet ends Objc: //dataModel global motion data model [IDOFoundationCommand appBleEndReplyCommand:dataModel appBleEndCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //Sports bracelet ended successfully }else if (model.retCode == 2) { //The battery is too low }else { //The sports bracelet failed to end } }]; Swift: //dataModel global motion data model IDOFoundationCommand.appBleEndReply(dataModel) {(model, errorCode) in if errorCode == 0 && model.retCode == 0{ //Sports bracelet ended successfully }else if model.retCode == 2 { //The battery is too low }else { //The sports bracelet failed to end } }; 10.4Ble initiate data exchange method The bracelet starts the movement Objc: //dataModel global motion data model [IDOFoundationCommand bleStartSportCommand:dataModel bleStartCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //The bracelet started the movement and started successfully }else if (model.retCode == 2) { //The battery is too low }else { //Bracelet failed to start movement } }]; Swift: //dataModel global motion data model IDOFoundationCommand.bleStartSportCommand(dataModel) {(model, errorCode) in if errorCode == 0 && model.retCode == 0{ //The bracelet started the movement and started successfully }else if model.retCode == 2 { //The battery is too low }else { //Bracelet failed to start movement } }; The bracelet initiates a sports pause Objc: //dataModel global motion data model [IDOFoundationCommand blePauseSportCommand:dataModel blePauseCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //The wristband initiated a successful sports pause }else if (model.retCode == 2) { //The battery is too low }else { //The bracelet failed to initiate a sports pause } }]; Swift: //dataModel global motion data model IDOFoundationCommand.blePauseSportCommand(dataModel) {(model, errorCode) in if errorCode == 0 && model.retCode == 0{ //The wristband initiated a successful sports pause }else if model.retCode == 2 { //The battery is too low }else { //The bracelet failed to initiate a sports pause } }; Bracelet initiates movement recovery Objc: //dataModel global motion data model [IDOFoundationCommand bleRestoreSportCommand:dataModel bleRestoreCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //Bracelet initiated a successful sports recovery }else if (model.retCode == 2) { //The battery is too low }else { //Bracelet failed to initiate movement recovery } }]; Swift: //dataModel global motion data model IDOFoundationCommand.bleRestoreSportCommand(dataModel) {(model, errorCode) in if errorCode == 0 && model.retCode == 0{ //Bracelet initiated a successful sports recovery }else if model.retCode == 2 { //The battery is too low }else { //Bracelet failed to initiate movement recovery } }; The wristband initiates movement to stop Objc: //dataModel global motion data model [IDOFoundationCommand bleEndSportCommand:dataModel bleEndCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //The bracelet started the movement and stopped successfully }else if (model.retCode == 2) { //The battery is too low }else { //The bracelet failed to initiate movement } }]; Swift: //dataModel global motion data model IDOFoundationCommand.bleEndSportCommand(dataModel) {(model, errorCode) in if errorCode == 0 && model.retCode == 0{ //The bracelet started the movement and stopped successfully }else if model.retCode == 2 { //The battery is too low }else { //The bracelet failed to initiate movement } }; Bracelet initiates sports to exchange data Objc: //dataModel global motion data model [IDOFoundationCommand bleIngSportCommand:dataModel bleIngCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //The bracelet successfully initiated the movement to exchange data }else if (model.retCode == 2) { //The battery is too low }else { //The bracelet failed to initiate movement to exchange data } }]; Swift: //dataModel global motion data model IDOFoundationCommand.bleIngSportCommand(dataModel) {(model, errorCode) in if errorCode == 0 && model.retCode == 0{ //The bracelet successfully initiated the movement to exchange data }else if model.retCode == 2 { //The battery is too low }else { //The bracelet failed to initiate movement to exchange data } }; 10.5 Demo data exchange function entrance Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"IDOApgsUpdateFunction.html":{"url":"IDOApgsUpdateFunction.html","title":"AGPS file update","keywords":"","body":"AGPS file update 11.1 Function Overview AGPS is an assisted global satellite positioning system, which refers to a GPS operating mode. It can use information from mobile phone base stations and cooperate with traditional GPS satellites to make positioning faster. It should be noted that the AGPS file update: 15 seconds after the bracelet connects to the App, the GPS status is not checked to update the AGPS file, otherwise the update will fail. 11.2 Corresponding function table //gps funcTable19Model.gps 11.3 Get GPS status =>Get GPS State 11.4AGPS update method Objc: initTransferManager().transferType = IDO_DATA_FILE_TRAN_AGPS_TYPE; initTransferManager().compressionType = IDO_DATA_TRAN_COMPRESSION_NO_USE_TYPE; initTransferManager().isSetConnectParam = YES; initTransferManager().fileName = fileName; initTransferManager().filePath = filePath; initTransferManager().addDetection(^(int errorCode) { if(errorCode == 0) { //The test was successful before the update }else { //Detect errors before update } }).addProgress(^(int progress) { //Update file progress (0-100) }).addTransfer(^(int errorCode) { if(errorCode == 0) { //The file is transferred successfully }else { //File transfer failed } }).addWrite(^(int errorCode) { if(errorCode == 0) { //The file was written successfully }else { //File writing failed } }); [IDOTransferFileManager startTransfer]; Swift: initTransferManager().transferType = IDO_DATA_FILE_TRAN_TYPE.AGPS_TYPE; initTransferManager().compressionType = IDO_DATA_TRAN_COMPRESSION_TYPE.NO_USE_TYPE; initTransferManager().isSetConnectParam = true; initTransferManager().fileName = fileName; initTransferManager().filePath = filePath; initTransferManager().addDetection!{(errorCode)in if errorCode == 0{ //The test was successful before the update }else { //Detect errors before update } }.addProgress!{(progress)in //Update file progress (0-100) }.addTransfer!{(errorCode)in if errorCode == 0 { //The file is transferred successfully }else { //File transfer failed } }.addWrite!{(errorCode)in if errorCode == 0 { //The file was written successfully }else { //File writing failed } }; IDOTransferFileManager.startTransfer(); 11.5 DemoAGPS update function entrance Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"IDOFlashUpdateFunction.html":{"url":"IDOFlashUpdateFunction.html","title":"Update Font File","keywords":"","body":"Font file update 12.1 Function Overview The language font storage space of the bracelet is limited. The language of the bracelet can be switched by dynamically updating the font. Each time the font file is transferred, the original cloud font file will be overwritten. 12.2 Corresponding function table //Device update funcTable27Model.downloadLanguage 12.3 Get the default language =>Get Default Language 12.4 Font update method Objc: initTransferManager().transferType = IDO_DATA_FILE_TRAN_WORD_TYPE; initTransferManager().compressionType = IDO_DATA_TRAN_COMPRESSION_FASTLZ_TYPE; initTransferManager().isSetConnectParam = YES; initTransferManager().fileName = fileName; initTransferManager().filePath = filePath; initTransferManager().addDetection(^(int errorCode) { if(errorCode == 0) { //The test was successful before the update }else { //Detect errors before update } }).addProgress(^(int progress) { //Update file progress (0-100) }).addTransfer(^(int errorCode) { if(errorCode == 0) { //The file is transferred successfully }else { //File transfer failed } }); [IDOTransferFileManager startTransfer]; Swift: initTransferManager().transferType = IDO_DATA_FILE_TRAN_TYPE.WORD_TYPE; initTransferManager().compressionType = IDO_DATA_TRAN_COMPRESSION_TYPE.FASTLZ_TYPE; initTransferManager().isSetConnectParam = true; initTransferManager().fileName = fileName; initTransferManager().filePath = filePath; initTransferManager().addDetection!{(errorCode)in if errorCode == 0{ //The test was successful before the update }else { //Detect errors before update } }.addProgress!{(progress)in //Update file progress (0-100) }.addTransfer!{(errorCode)in if errorCode == 0 { //The file is transferred successfully }else { //File transfer failed } }; IDOTransferFileManager.startTransfer(); 12.5 Demo font update function entry Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"IDOPhotoUpdateFunction.html":{"url":"IDOPhotoUpdateFunction.html","title":"Wallpaper file update","keywords":"","body":"Wallpaper file update 13.1 Function Overview This function can dynamically update the wallpaper of the bracelet. According to the obtained screen information of the bracelet, the pictures of corresponding size are transmitted. 13.2 Corresponding function table //Background photos funcTable28Model.photoWallpaper 13.3 Wallpaper update method Objc: initMakePhotoManager().fileName = fileName; initMakePhotoManager().filePath = filePath; initMakePhotoManager().addPhotoProgress(^(int progress) { //Update file progress (0-100) }).addPhotoTransfer(^(int errorCode) { if(errorCode == 0) { //The file is transferred successfully }else { //File transfer failed } }); [IDOMakePhotoManager startPhotoTransfer]; Swift: initMakePhotoManager().fileName = fileName; initMakePhotoManager().filePath = filePath; initMakePhotoManager().addPhotoProgress!{(progress)in //Update file progress (0-100) }.addPhotoTransfer!{(errorCode)in if errorCode == 0 { //The file is transferred successfully }else { //File transfer failed } }; IDOMakePhotoManager.startPhotoTransfer(); 13.4 Demo wallpaper update function entrance Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"IDOQueryDataFunction.html":{"url":"IDOQueryDataFunction.html","title":"Data query function","keywords":"","body":"Data query function 14.1 Function Overview In each model class, there is a query synchronization data encapsulation method. Only the encapsulated method query has detailed data, and the data queried by the custom query method does not have detailed data. The detailed data needs to be converted and assigned by itself. It is recommended that database operations do not delete database data, but only insert or update data. The current data can only be queried after the synchronization is completed, and the unsynchronized data is still in the bracelet. 14.2 Main query interface Step data query Sleep data query Heart rate data query Blood pressure data query Blood Oxygen Data Query Pressure data query Activity data query GPS data query 14.3 Demo query data entry Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"query/IDOQuerySportFunction.html":{"url":"query/IDOQuerySportFunction.html","title":"Step data query","keywords":"","body":"Step data query Query steps by year Objc: [IDOSyncSportDataModel queryOneYearSportsWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: IDOSyncSportDataModel.queryOneYearSports(withYear: year, macAddr: macAddr, isQueryItems: false); Query steps by month Objc: [IDOSyncSportDataModel queryOneMonthSportsWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: IDOSyncSportDataModel.queryOneMonthSports(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); Query steps by week Objc: [IDOSyncSportDataModel queryOneWeekSportsWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: IDOSyncSportDataModel.queryOneWeekSports(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Query steps by day Objc: [IDOSyncSportDataModel queryOneDaySportDetailWithMac:macAddr year:year month:month day:day]; Swift: IDOSyncSportDataModel.queryOneDaySportDetail(withMac:macAddr, year:year, month:month, day:day); Query all steps Objc: [IDOSyncSportDataModel queryAllSportsWithMac:macAddr]; Swift: IDOSyncSportDataModel.queryAllSports(withMac:macAddr); The query only includes the total steps and all the steps of the date and time stamp Objc: [IDOSyncSportDataModel queryAllContractedSportsWithMac:macAddr]; Swift: IDOSyncSportDataModel.queryAllContractedSports(withMac:macAddr); Calculate the average number of steps in a day Objc: [IDOCalculateSportBluetoothModel calculateOneDaySportDataWithSportModel:model]; Swift: IDOCalculateSportBluetoothModel.calculateOneDaySportData(withSportModel:model); Calculate the average number of steps in one week and one month Objc: [IDOCalculateSportBluetoothModel calculateOneMonthOrWeekSportDataWithSportModels:models]; Swift: IDOCalculateSportBluetoothModel.calculateOneMonthOrWeekSportData(withSportModels:models); Calculate the average number of steps in a year Objc: [IDOCalculateSportBluetoothModel calculateOneYearSportDataWithSportModels:models]; Swift: IDOCalculateSportBluetoothModel.calculateOneYearSportData(withSportModels:models); Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"query/IDOQuerySleepFunction.html":{"url":"query/IDOQuerySleepFunction.html","title":"Sleep Data Query","keywords":"","body":"Sleep data query Check sleep by year Objc: [IDOSyncSleepDataModel queryOneYearSleepsWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: IDOSyncSleepDataModel.queryOneYearSleeps(withYear: year, macAddr: macAddr, isQueryItems: false); Query sleep by month Objc: [IDOSyncSleepDataModel queryOneMonthSleepsWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: IDOSyncSleepDataModel.queryOneMonthSleeps(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); Check sleep by week Objc: [IDOSyncSleepDataModel queryOneWeekSleepsWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: IDOSyncSleepDataModel.queryOneWeekSleeps(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Query sleep by day Objc: [IDOSyncSleepDataModel queryOneDaySleepsDetailWithMac:macAddr year:year month:month day:day]; Swift: IDOSyncSleepDataModel.queryOneDaySleepsDetail(withMac:macAddr, year:year, month:month, day:day); Check all sleep Objc: [IDOSyncSleepDataModel queryAllSleepsWithMac:macAddr]; Swift: IDOSyncSleepDataModel.queryAllSleeps(withMac:macAddr); The query only includes all sleeps with total sleep duration and date and time stamp Objc: [IDOSyncSleepDataModel queryAllContractedSleepsWithMac:macAddr]; Swift: IDOSyncSleepDataModel.queryAllContractedSleeps(withMac:macAddr); Calculate the average value of one-day sleep Objc: [IDOCalculateSleepBluetoothModel calculateOneDaySleepDataWithSleepModel:model]; Swift: IDOCalculateSleepBluetoothModel.calculateOneDaySleepData(withSleepModel:model); Calculate the average sleep for one week and one month Objc: [IDOCalculateSleepBluetoothModel calculateOneMonthOrWeekSleepDataWithSleepModels:models]; Swift: IDOCalculateSleepBluetoothModel.calculateOneMonthOrWeekSleepData(withSleepModels:models); Calculate the average value of one-year sleep Objc: [IDOCalculateSleepBluetoothModel calculateOneYearSleepDataWithSleepModels:models]; Swift: IDOCalculateSleepBluetoothModel.calculateOneYearSleepData(withSleepModels:models); Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"query/IDOQueryHrFunction.html":{"url":"query/IDOQueryHrFunction.html","title":"Heart rate data query","keywords":"","body":"Heart rate data query Query heart rate by year Objc: if(__IDO_FUNCTABLE__.funcTable22Model.v3HrData) { [IDOSyncHeartRateDataModel queryOneYearSecHearRatesWithYear:year macAddr:macAddr isQueryItems:NO]; }else { [IDOSyncHeartRateDataModel queryOneYearHearRatesWithYear:year macAddr:macAddr isQueryItems:NO]; } Swift: let funcTable = IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel; if funcTable.funcTable22Model.v3HrData { IDOSyncHeartRateDataModel.queryOneYearSecHearRates(withYear: year, macAddr:macAddr, isQueryItems: false); }else { IDOSyncHeartRateDataModel.queryOneYearHearRates(withYear: year, macAddr:macAddr, isQueryItems: false); } Query heart rate by month Objc: if(__IDO_FUNCTABLE__.funcTable22Model.v3HrData) { [IDOSyncHeartRateDataModel queryOneMonthSecHearRatesWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; }else { [IDOSyncHeartRateDataModel queryOneMonthHearRatesWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; } Swift: let funcTable = IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel; if funcTable.funcTable22Model.v3HrData { IDOSyncHeartRateDataModel.queryOneMonthSecHearRates(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); }else { IDOSyncHeartRateDataModel.queryOneMonthHearRates(withYear: year, macAddr:macAddr, isQueryItems: false); } Query heart rate by week Objc: if(__IDO_FUNCTABLE__.funcTable22Model.v3HrData) { [IDOSyncHeartRateDataModel queryOneWeekSecHearRatesWithWeekIndex:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; }else { [IDOSyncHeartRateDataModel queryOneWeekHearRatesWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; } Swift: let funcTable = IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel; if funcTable.funcTable22Model.v3HrData { IDOSyncHeartRateDataModel.queryOneWeekSecHearRates(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); }else { IDOSyncHeartRateDataModel.queryOneWeekHearRates(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); } Query heart rate by day Objc: if(__IDO_FUNCTABLE__.funcTable22Model.v3HrData) { [IDOSyncHeartRateDataModel queryOneDaySecHearRatesDetailWithMac:macAddr year:year month:month day:day isQueryItems:NO]; }else { [IDOSyncHeartRateDataModel queryOneDayHearRatesDetailWithMac:macAddr year:year month:month day:day]; } Swift: let funcTable = IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel; if funcTable.funcTable22Model.v3HrData { IDOSyncHeartRateDataModel.queryOneDaySecHearRatesDetail(withMac:macAddr, year:year, month:month, day:day isQueryItems: false); }else { IDOSyncHeartRateDataModel.queryOneDayHearRatesDetail(withMac:macAddr, year:year, month:month, day:day); } Check all heart rates Objc: if(__IDO_FUNCTABLE__.funcTable22Model.v3HrData) { [IDOSyncHeartRateDataModel queryAllSecHearRatesWithMac:macAddr]; }else { [IDOSyncHeartRateDataModel queryAllHearRatesWithMac:macAddr]; } Swift: let funcTable = IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel; if funcTable.funcTable22Model.v3HrData { IDOSyncHeartRateDataModel.queryAllSecHearRates(withMac:macAddr); }else { IDOSyncHeartRateDataModel.queryAllHearRates(withMac:macAddr); } Query all heart rates including meditation heart rate and date time stamp Objc: if(__IDO_FUNCTABLE__.funcTable22Model.v3HrData) { [IDOSyncHeartRateDataModel queryAllContractedSecHearRatesWithMac:macAddr]; }else { [IDOSyncHeartRateDataModel queryAllContractedHearRatesWithMac:macAddr]; } Swift: let funcTable = IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel; if funcTable.funcTable22Model.v3HrData { IDOSyncHeartRateDataModel.queryAllContractedSecHearRates(withMac:macAddr); }else { IDOSyncHeartRateDataModel.queryAllContractedHearRates(withMac:macAddr); } Calculate the average of one-day heart rate Objc: [IDOCalculateHrBluetoothModel calculateOneDayHrDataWithHrModel:model] Swift: IDOCalculateHrBluetoothModel.calculateOneDayHrData(withHrModel:model); Calculate the average of heart rate for one week and one month Objc: [IDOCalculateHrBluetoothModel calculateOneMonthOrWeekHrDataWithHrModels:models] Swift: IDOCalculateHrBluetoothModel.calculateOneMonthOrWeekHrData(withHrModels:models); Calculate the average one-year heart rate Objc: [IDOCalculateHrBluetoothModel calculateOneYearHrDataWithHrModels:models] Swift: IDOCalculateHrBluetoothModel.calculateOneYearHrData(withHrModels:models); Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"query/IDOQueryBpFunction.html":{"url":"query/IDOQueryBpFunction.html","title":"Query Blood Pressure Data","keywords":"","body":"Blood pressure data query Check blood pressure by year Objc: [IDOSyncBpDataModel queryOneYearBloodPressuresWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: IDOSyncBpDataModel.queryOneYearBloodPressures(withYear: year, macAddr: macAddr, isQueryItems: false); Check blood pressure by month Objc: [IDOSyncBpDataModel queryOneMonthBloodPressuresWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: IDOSyncBpDataModel.queryOneMonthBloodPressures(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); Check blood pressure by week Objc: [IDOSyncBpDataModel queryOneWeekBloodPressuresWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: IDOSyncBpDataModel.queryOneWeekBloodPressures(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Check blood pressure by day Objc: [IDOSyncBpDataModel queryOneDayBloodPressureDetailWithMac:macAddr year:year month:month day:day]; Swift: IDOSyncBpDataModel.queryOneDayBloodPressureDetail(withMac:macAddr, year:year, month:month, day:day); Check all blood pressure Objc: [IDOSyncBpDataModel queryAllBloodPressuresWithMac:macAddr]; Swift: IDOSyncBpDataModel.queryAllBloodPressures(withMac:macAddr); Check the blood pressure of the last day Objc: [IDOSyncBpDataModel queryLastDayBloodPressureDetailWithMac:macAddr]; Swift: IDOSyncBpDataModel.queryLastDayBloodPressureDetail(withMac:macAddr); Calculate the average blood pressure for one day Objc: [IDOCalculateBpBluetoothModel calculateOneDayBpDataWithBpModel:model]; Swift: IDOCalculateBpBluetoothModel.calculateOneDayBpData(withBpModel: model); Calculate the average blood pressure for one week and one month Objc: [IDOCalculateBpBluetoothModel calculateOneMonthOrWeekBpDataWithBpModels:models allDayCalculateBpModels:&calculateBpModels]; Swift: IDOCalculateBpBluetoothModel.calculateOneMonthOrWeekBpData(withBpModels: models, allDayCalculateBpModels:&calculateBpModels); Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"query/IDOQueryBopFunction.html":{"url":"query/IDOQueryBopFunction.html","title":"Blood Oxygen Data Query","keywords":"","body":"Blood oxygen data query Query blood oxygen by year Objc: [IDOSyncSpo2DataModel queryOneYearBloodOxygenWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: IDOSyncSpo2DataModel.queryOneYearBloodOxygen(withYear: year, macAddr: macAddr, isQueryItems: false); Check blood oxygen by month Objc: [IDOSyncSpo2DataModel queryOneMonthBloodOxygenWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: IDOSyncSpo2DataModel.queryOneMonthBloodOxygen(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); Check blood oxygen by week Objc: [IDOSyncSpo2DataModel queryOneWeekBloodOxygenWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: IDOSyncSpo2DataModel.queryOneWeekBloodOxygen(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Inquire blood oxygen by day Objc: [IDOSyncSpo2DataModel queryOneDayBloodOxygenDetailWithMac:macAddr year:year month:month day:day]; Swift: IDOSyncSpo2DataModel.queryOneDayBloodOxygenDetail(withMac:macAddr, year:year, month:month, day:day); Check all blood oxygen Objc: [IDOSyncSpo2DataModel queryAllBloodOxygensWithMac:macAddr]; Swift: IDOSyncSpo2DataModel.queryAllBloodOxygens(withMac:macAddr); Calculate the average value of blood oxygen in one day Objc: [IDOCalculateBloodOxygenBluetoothModel calculateOneDayBoDataWithBoModel:model]; Swift: IDOCalculateBloodOxygenBluetoothModel.calculateOneDayBoData(withBoModel:model); Calculate the average value of blood oxygen in one week and one month Objc: [IDOCalculateBloodOxygenBluetoothModel calculateOneMonthOrWeekBoDataWithBoModels:models]; Swift: IDOCalculateBloodOxygenBluetoothModel.calculateOneMonthOrWeekBoData(withBoModels:models); Calculate the average value of blood oxygen in one year Objc: [IDOCalculateBloodOxygenBluetoothModel calculateOneYearBoDataWithBoModels:models]; Swift: IDOCalculateBloodOxygenBluetoothModel.calculateOneYearBoData(withBoModels:models); Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"query/IDOQueryPressureFunction.html":{"url":"query/IDOQueryPressureFunction.html","title":"Pressure data query","keywords":"","body":"Pressure data query Query pressure by year Objc: [IDOSyncPressureDataModel queryOneYearPressureWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: IDOSyncPressureDataModel.queryOneYearPressure(withYear: year, macAddr: macAddr, isQueryItems: false); Query pressure by month Objc: [IDOSyncPressureDataModel queryOneMonthPressureWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: IDOSyncPressureDataModel.queryOneMonthPressure(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); Check pressure by week Objc: [IDOSyncPressureDataModel queryOneWeekPressureWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: IDOSyncPressureDataModel.queryOneWeekPressure(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); Inquire daily pressure Objc: [IDOSyncPressureDataModel queryOneDayPressureDetailWithMac:macAddr year:year month:month day:day]; Swift: IDOSyncPressureDataModel.queryOneDayPressureDetail(withMac:macAddr, year:year, month:month, day:day); Check all pressures Objc: [IDOSyncPressureDataModel queryAllPressuresWithMac:macAddr]; Swift: IDOSyncPressureDataModel.queryAllPressures(withMac:macAddr); Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"query/IDOQueryActivityFunction.html":{"url":"query/IDOQueryActivityFunction.html","title":"Activity Data Query","keywords":"","body":"Active data query Query activity by timestamp Objc: if (__IDO_FUNCTABLE__.funcTable29Model.v3SyncActivity) { [IDOSyncV3ActivityDataModel queryOneV3ActivityDataWithTimeStr:timeStr macAddr:macAddr]; } else { [IDOSyncActivityDataModel queryOneActivityDataWithTimeStr:timeStr macAddr:macAddr]; } Swift: let funcTable = IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel; if funcTable.funcTable29Model.v3SyncActivity { IDOSyncV3ActivityDataModel.queryOneV3ActivityData(withTimeStr:timeStr, macAddr: macAddr); } else { IDOSyncActivityDataModel.queryOneActivityData(withTimeStr:timeStr, macAddr: macAddr); } Inquiry activities by day Objc: if (__IDO_FUNCTABLE__.funcTable29Model.v3SyncActivity) { [IDOSyncV3ActivityDataModel queryOneDayV3ActivityDataWithMacAddr:macAddr year:year month:month day:day]; } else { [IDOSyncActivityDataModel queryOneDayActivityDataWithMacAddr:macAddr year:year month:month day:day]; } Swift: let funcTable = IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel; if funcTable.funcTable29Model.v3SyncActivity { IDOSyncV3ActivityDataModel.queryOneDayV3ActivityData(withMacAddr:macAddr, year:year,month:month,day:day); } else { IDOSyncActivityDataModel.queryOneDayActivityData(withMacAddr:macAddr, year:year,month:month,day:day); } Query activity by month Objc: if (__IDO_FUNCTABLE__.funcTable29Model.v3SyncActivity) { [IDOSyncV3ActivityDataModel queryOneMonthV3ActivityDataWithMacAddr:macAddr year:year month:month]; } else { [IDOSyncActivityDataModel queryOneMonthActivityDataWithMacAddr:macAddr year:year month:month]; } Swift: let funcTable = IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel; if funcTable.funcTable29Model.v3SyncActivity { IDOSyncV3ActivityDataModel.queryOneMonthV3ActivityData(withMacAddr:macAddr, year:year,month:month); } else { IDOSyncActivityDataModel.queryOneMonthActivityData(withMacAddr:macAddr, year:year,month:month); } Query activity by year Objc: if (__IDO_FUNCTABLE__.funcTable29Model.v3SyncActivity) { [IDOSyncV3ActivityDataModel queryOneYearV3ActivityDataWithMacAddr:macAddr year:year]; } else { [IDOSyncActivityDataModel queryOneYearActivityDataWithMacAddr:macAddr year:year]; } Swift: let funcTable = IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel; if funcTable.funcTable29Model.v3SyncActivity { IDOSyncV3ActivityDataModel.queryOneYearV3ActivityData(withMacAddr:macAddr, year:year); } else { IDOSyncActivityDataModel.queryOneYearActivityData(withMacAddr:macAddr, year:year); } Paging query activity Objc: if (__IDO_FUNCTABLE__.funcTable29Model.v3SyncActivity) { [IDOSyncV3ActivityDataModel queryOnePageV3ActivityDataWithPageIndex:pageIndex numOfPage:numOfPage macAddr:macAddr ]; } else { [IDOSyncActivityDataModel queryOnePageActivityDataWithPageIndex:pageIndex numOfPage:numOfPage macAddr:macAddr ]; } Swift: let funcTable = IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel; if funcTable.funcTable29Model.v3SyncActivity { IDOSyncV3ActivityDataModel.queryOnePageV3ActivityData(withPageIndex:pageIndex, numOfPage:numOfPage,macAddr:macAddr); } else { IDOSyncActivityDataModel.queryOnePageActivityData(withPageIndex:pageIndex, numOfPage:numOfPage,macAddr:macAddr); } All track movements Objc: if (__IDO_FUNCTABLE__.funcTable29Model.v3SyncActivity) { [IDOSyncV3ActivityDataModel queryAllTrajectorySportV3ActivitysWithMac:macAddr]; } else { [IDOSyncActivityDataModel queryAllTrajectorySportActivitysWithMac:macAddr]; } Swift: let funcTable = IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel; if funcTable.funcTable29Model.v3SyncActivity { IDOSyncV3ActivityDataModel.queryAllTrajectorySportV3Activitys(withMac:macAddr); } else { IDOSyncActivityDataModel.queryAllTrajectorySportActivitys(withMac:macAddr); } All light sports Objc: if (__IDO_FUNCTABLE__.funcTable29Model.v3SyncActivity) { [IDOSyncV3ActivityDataModel queryAllLightSportV3ActivitysWithMac:macAddr]; } else { [IDOSyncActivityDataModel queryAllLightSportActivitysWithMac:macAddr]; } Swift: let funcTable = IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel; if funcTable.funcTable29Model.v3SyncActivity { IDOSyncV3ActivityDataModel.queryAllLightSportV3Activitys(withMac:macAddr); } else { IDOSyncActivityDataModel.queryAllLightSportSportActivitys(withMac:macAddr); } Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"query/IDOQueryGpsFunction.html":{"url":"query/IDOQueryGpsFunction.html","title":"GPS data query","keywords":"","body":"GPS data query Query GPS information by time stamp Objc: [IDOSyncGpsDataModel queryOneActivityCoordinatesWithTimeStr:timeStr macAddr:macAddr]; Swift: IDOSyncGpsDataModel.queryOneActivityCoordinates(withTimeStr:timeStr, macAddr: macAddr); Determine whether there is a track for an activity Objc: [IDOSyncGpsDataModel queryActivityHasCoordinatesWithTimeStr:timeStr macAddr:macAddr]; Swift: IDOSyncGpsDataModel.queryActivityHasCoordinates(withTimeStr:timeStr, macAddr: macAddr); Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "},"IDOWatchDialFunction.html":{"url":"IDOWatchDialFunction.html","title":"Dial Setting Function","keywords":"","body":"Dial setting function 15.1 Function Overview The dial function mainly includes the function of obtaining watch screen information, the function of obtaining dial list information, the function of setting the current dial information, and the transmission of dial files. 15.2 Current Menu funcTable26Model.multiDial 15.3 Dial information acquisition function Get current device screen information Objc: initWatchDialManager().getDialScreenInfo(^(IDOWatchScreenInfoModel * _Nullable model, int errorCode) { if (errorCode == 0) { //Get screen information successfully }else if (errorCode == 6) { //This function is not supported }else { //Failed to obtain screen information } }); Swift: initWatchDialManager().getDialListInfo!{(model,errorCode)in if errorCode == 0{ //Get screen information successfully }else if errorCode == 6 { //This function is not supported }else { //Failed to obtain screen information } }; Get all dial information Objc: initWatchDialManager().getDialListInfo(^(IDOWatchScreenInfoModel * _Nullable model, int errorCode) { if (errorCode == 0) { //Successfully obtained dial information }else if (errorCode == 6) { //This function is not supported }else { //Failed to obtain dial information } }); Swift: initWatchDialManager().getDialListInfo!{(model,errorCode)in if errorCode == 0{ //Get screen information successfully }else if errorCode == 6 { //This function is not supported }else { //Failed to obtain screen information } }; Get current dial information Objc: initWatchDialManager().getCurrentDialInfo(^(IDOWatchScreenInfoModel * _Nullable model, int errorCode) { if (errorCode == 0) { //Successfully obtained the current dial information }else if (errorCode == 6) { //This function is not supported }else { //Failed to obtain current dial information } }); Swift: initWatchDialManager().getCurrentDialInfo!{(model,errorCode)in if errorCode == 0{ //Successfully obtained the current dial information }else if errorCode == 6 { //This function is not supported }else { //Failed to obtain current dial information } }; 15.4 Dial information setting function Set the current dial Objc: initWatchDialManager().setCurrentDial(^(IDOWatchScreenInfoModel * _Nullable model, int errorCode) { if (errorCode == 0) { //Set the current dial successfully }else if (errorCode == 6) { //This function is not supported }else { //Failed to set current dial } },currentModel); Swift: initWatchDialManager().setCurrentDial!(currentModel){(model,errorCode)in if errorCode == 0{ //Set the current dial successfully }else if errorCode == 6 { //This function is not supported }else { //Failed to set current dial } }; 15.5 Dial file transfer function Objc: initWatchDialManager().addDialProgress(^(int progress) { //Dial transmission progress (0-100) }).addDialTransfer(^(int errorCode) { if (errorCode == 0) { //Transfer completed }else if (errorCode == 6) { //Transmission is not supported }else { //Transmission failed } }).filePath = filePath; [IDOWatchDialManager startDialTransfer]; Swift: initWatchDialManager().addDialProgress!{(progress)in //Dial transmission progress (0-100) }.addDialTransfer!{(errorCode)in if errorCode == 0{ //Transfer completed }else if errorCode == 6{ //Transmission is not supported }else { //Transmission failed } }.filePath = filePath; IDOWatchDialManager.startDialTransfer(); 15.6 Demo dial function entry Copyright © 2015-2020年 IDO. All rights reserved. all right reserved，powered by Gitbook该文件修订时间： 2020-06-05 15:31:09 "}}