{"./":{"url":"./","title":"IDO标准化说明文档","keywords":"","body":"{IDO标准化说明文档} IDO SDK 桥接说明 IDO标准化Flutter接口说明 IDO基础事件字段说明 IDO模拟器事件字段说明 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-23 14:22:47 "},"IDOSDK.html":{"url":"IDOSDK.html","title":"IDO SDK 桥接说明","keywords":"","body":"IDO SDK 文件本地引入 pubspec.yaml protocol_lib: path: protocol_alexa: path: flutter_bluetooth: path: SDK 初始化 void main() async{ await registerProtocolSDK(); await registerBluetoothSDK(); await registerProtocolAlexa(); await bridgeConnect(); } ///注册协议库 registerProtocolSDK() async { // 注册协议库 await IDOProtocolLibManager.register(outputToConsole: true); // ios注册监听更新消息图标 libManager.messageIcon.registerListenUpdate(); // 监听设备状态 libManager.listenDeviceNotification((event) { print('listenDeviceNotification: ${event.toMap().toString()}'); }); } ///注册蓝牙库 registerBluetoothSDK() async { await bluetoothManager.register(); /// 获取版本号 final version = bluetoothManager.getSdkVersion(); } ///注册Alexa ///注意：IDOProtocolAlexa依赖协议库, 其注册需写在协议库注册之后 registerProtocolAlexa() async { final clientId = \"amzn1.application-oa2-client.xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"; await IDOProtocolAlexa.registerAlexa(clientId: clientId); } /// 蓝牙与协议库桥接 bridgeConnect() async { // 处理蓝牙返回数据 bluetoothManager.receiveData().listen((event) { if (event.data != null) { libManager.receiveDataFromBle(event.data!, event.macAddress, event.spp ?? false ? 1 : 0); } }); /// 监听协议库状态改变 libManager.listenStatusNotification((status) async { if (status == IDOStatusNotification.protocolConnectCompleted) { /// 协议库设备连接完成初始化 } else if (status == IDOStatusNotification.fastSyncCompleted) { /// 快速配置完成 /// 保存设备信息，安卓bt配对 bluetoothManager.setPair(); } else if (status == IDOStatusNotification.deviceInfoUpdateCompleted) { /// 设备信息更新完成 } else if (status == IDOStatusNotification.unbindOnBindStateError) { /// 绑定状态错误，解绑删除当前设备 } else if (status == IDOStatusNotification.fastSyncFailed) { /// 快速配置失败，功能表获取失败 /// 保存设备信息，安卓bt配对 ，下次同步时候继续快速配置直至成功 bluetoothManager.setPair(); } }); // 写数据到蓝牙设备 IDOBluetoothWriteType rs = IDOBluetoothWriteType.withoutResponse; libManager.registerWriteDataToBle((event) async { rs = await bluetoothManager.writeData(event.data, type: event.type); if (rs == IDOBluetoothWriteType.withoutResponse && Platform.isIOS) { /// 无响应发送数据 libManager.writeDataComplete(); } }); // 蓝牙写入状态回调 bluetoothManager.writeState().listen((event) { if (event.state ?? false) { if (Platform.isAndroid || event.type == IDOBluetoothWriteType.withResponse) { /// 写入完成 libManager.writeDataComplete(); } } }); //监听连接状态 bluetoothManager.deviceState().listen((value) async { if (value.errorState == IDOBluetoothDeviceConnectErrorType.pairFail) { // 配对异常提示去忽略设备 } if ((value.state == IDOBluetoothDeviceStateType.connected && (value.macAddress != null && value.macAddress!.isNotEmpty))) { // 设备连接成功 /// 获取ota枚举类型 final isTlwOta = bluetoothManager.currentDevice?.isTlwOta ?? false final isOta = bluetoothManager.currentDevice?.isOta ?? false final otaType = isTlwOt ? IDOOtaType.telink : isOta ? IDOOtaType.nordic : IDOOtaType.none; /// 获取设备名字 final devicenName = bluetoothManager.currentDevice?.name; /// 获取设备uuid(只有ios) final uuid = bluetoothManager.currentDevice?.uuid; /// 执行协议库连接设备 libManager.markConnectedDevice( macAddress: value.macAddress!, otaType: otaType, isBinded: deviceList != null, deviceName: devicenName, uuid: uuid); } else if (value.state == IDOBluetoothDeviceStateType.disconnected) { // 设备断线 await libManager.markDisconnectedDevice( macAddress: value.macAddress, uuid: value.uuid); } }); /// 监听蓝牙状态 bluetoothManager.bluetoothState().listen((event) async { /// 获取设备mac地址 final macAddress = bluetoothManager.currentDevice?.macAddress; /// 获取设备uuid(只有ios) final uuid = bluetoothManager.currentDevice?.uuid; if (event.state == IDOBluetoothStateType.poweredOff) { /// 蓝牙关闭 await libManager.markDisconnectedDevice(macAddress: macAddress,uuid: uuid); } }); } Alexa 接口使用 /// Alexa使用示例 useAlexa() { // 切换语言 (可选，默认英语） IDOProtocolAlexa.changeLanguage(AlexaLanguageType.usa); // 设置代理 IDOProtocolAlexa().delegate = ; // 添加监听 IDOProtocolAlexa().listenLoginStateChanged((state) { // 登录状态变更 }); // 登录alexa // productId 在alexa后台注册的产品ID // func 回调，Alexa认证需要打开的url和userCode IDOProtocolAlexa().authorizeRequest( productId: 'productId', func: (userCode, url) { // userCode为alexa登录需要使用的验证码 // url 跳转alexa官方登录地址 // 添加打开webView并打开url的相关代码 }).then((rs) { if (rs == LoginResponse.successful) { print('登录成功'); } else { print('登录失败 $rs'); } }); // 取消登录请求 IDOProtocolAlexa().stopLogin(); // 退出alexa登录 IDOProtocolAlexa().logout(); } 蓝牙库接口使用 useBluetooth() { /// 当前连接的设备 /// last connected device final device = bluetoothManager.currentDevice; /// 开始搜索 /// macAddress（Android）:根据Mac地址搜索 /// 返回指定搜索的设备，如未指定返回null /// start searching /// macAddress（Android）:Search by macAddress /// Returns the specified search device, or null if not specified bluetoothManager.startScan(); /// 停止搜索 /// stop searching bluetoothManager.stopScan(); /// 搜索结果 /// deviceName: 只搜索deviceName的设备 /// deviceID：只搜索deviceID的设备 /// search results /// deviceName: Only search devices with deviceName /// deviceID：Only search for devices with deviceID bluetoothManager.scanResult(deviceNames,deviceIDs,macAddresss,uuids).listen((event) { }); /// 监听设备状态状态 /// Monitor device status status bluetoothManager.deviceState().listen((event) { }); /// 监听蓝牙状态 /// Monitor Bluetooth status bluetoothManager.bluetoothState().listen((event) { }); /// 扫描列表选择连接 bluetoothManager.connect(device); /// 使用这个重连设备 /// Use this to reconnect the device bluetoothManager.needAutoConnect(true); bluetoothManager.autoConnect(device); /// 取消连接 /// cancel connection bluetoothManager.cancelConnect(); /// 获取蓝牙状态 /// get bluetooth status final bluetoothState = await getBluetoothState(); /// 获取设备连接状态 /// Get device connection status final deviceState = await getDeviceState(); /// bt配对（android） /// bt pairing (android) bluetoothManager.setBtPair(device); /// 取消配对（android） /// unpair (android) bluetoothManager.cancelPair(); /// 发送数据 /// data:数据 /// device: 发送数据的设备 /// type:0 BLE数据, 1 SPP数据 /// send data /// data: data /// device: device sending data /// type:0 BLE data, 1 SPP data bluetoothManager.writeData(data,device,type).listen; /// 发送数据状态 /// Send data status bluetoothManager.writeState(device).listen; /// 收到数据 /// received data bluetoothManager.receiveData(device).listen; /// 连接SPP（android） /// Connect to SPP (android) bluetoothManager.connectSPP(btMacAddress); /// btMacAddress 断开SPP（android） /// btMacAddress disconnect SPP (android) bluetoothManager.disconnectSPP(btMacAddress); /// 发起dfu升级 (nordic 升级) /// Initiate dfu upgrade bluetoothManager.startNordicDFU(config); /// 监听dfu进度，外部调用 /// progress： 进度 /// state： Completed升级完成 /// error: 不为空就是错误 /// Monitor dfu progress, external call /// progress： progress /// state： 'Completed' Upgrade completed /// error: error bluetoothManager.dfuProgress().listen((event) { if (event['progress'] != null && event['progress'] is int) { /// 进度 final progress = event['progress'] as int; } else if (event['state'] != null && event['state'] is String && event['state'] == 'Completed') { /// 升级完成 } else if (event['error'] != null && event['error'] is String) { /// 升级错误 final error = event['error'] as String; } }); /// 日志路径 /// log path bluetoothManager.logPath(); } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-24 15:50:47 "},"IDOFlutter.html":{"url":"IDOFlutter.html","title":"IDO标准化Flutter接口说明","keywords":"","body":"{IDO标准化Flutter接口说明} Flutter API： 1.下发基础事件 1.1 功能概括: APP可以通过这个接口下发指定事件到设备，事件包括设置指令、获取指令、通知指令、控制指令等，实现APP与设备交互基础功能。 1.2 API ID: Stream send({required CmdEvtType evt, String? json = '{}'}); 1.3 API参数说明: @Param:evt 基础事件号 @Param:json 基础事件项内容，JSON字符串格式 事件号说明和对应事件项内容说明跳转到 => [IDO基础事件字段说明]( 2.蓝牙响应数据总入口 2.1 功能概括: 蓝牙库将接收到的字节数据通过这个接口解析，完成后以Json字符串的格式将结果通过注册的函数回调给APP。 2.2 API ID: void receiveDataFromBle(Uint8List data, String? macAddress, int type); 2.3 API参数说明: @Param:data 字节数据 @Param:macAddress 设备MAC地址 @Param:type 通道类型，0:BLE 1:SPP 3.初始化C库 （废弃） 3.1 功能概括: 初始化C库，完成C库的定时器创建，解析函数的注册，发送队列的创建的功能，创建示例的时候调用。 3.2 API ID: Future initClib(); 3.3 API参数说明: 无 4.设置C库日志模式（废弃） 4.1 功能概括: 设置C库日志等级，DEBUG为调试模式；RELEASE线上版本，对日志的输出做了优化。 4.2 API ID: void setClibRunMode({required bool isDebug}); 4.3 API参数说明: @Param:isDebug 日志模式，true:调试模式 false:发布版本 4.注册协议库（新增） 4.1 功能概括: 注册协议库，内置初始化C库，完成C库的定时器创建，解析函数的注册，发送队列的创建的功能， 需在使用libManager前注册。 4.2 API ID: static Future register({ bool outputToConsole = false, bool outputToConsoleClib = false, bool isReleaseClib = true} 4.3 API参数说明: @Param:outputToConsole log打印到控制台 @Param:outputToConsoleClib c库log打印到控制台 @Param:isReleaseClib c库运行模式(release只打印重要log) 5.注册蓝牙数据发送函数 5.1 功能概括: APP调用下发基础事件接口send(evt,json)后，C库通过注册的蓝牙发送函数将转换好的字节数据上报。 5.2 API ID: void registerWriteDataToBle(void Function(CmdRequest data) func); 5.3 API参数说明: @Param:func 蓝牙发送函数 4.蓝牙数据发送完成 6.1 功能概括: C库通过蓝牙数据发送函数上报的数据，通过蓝牙发送完成时调用。 6.2 API ID: void writeDataComplete(); 6.3 API参数说明: 无 7.标记设备已连接(蓝牙连接时调用) 7.1 功能概括: 连接时标记设备已连接。 7.2 API ID: Future markConnectedDeviceSafe({required String uniqueId,required IDOOtaType otaType,required bool isBinded,String? deviceName = ''}); 7.3 API参数说明: @Param:uniqueId (安卓:当前连接设备的mac地址)，iOS(当前连接设备的mac地址或uuid) @Param:otaMode 设置ota模式 @Param:isBinded 绑定状态 @Param:deviceName 设备名称 8.标记设备已断开(蓝牙断开时调用) 8.1 功能概括: 连接时标记设备已断连。 8.2 API ID: Future markDisconnectedDevice({String? macAddress, String? uuid}); 8.3 API参数说明: @Param:macAddress 当前断开连接设备的mac地址 @Param:uuid 9.清除所有待执行任务 9.1 功能概括: 清除所有执行的任务。 9.2 API ID: void dispose(); 9.3 API参数说明: 无 11.文件传输工具入口 11.1 功能概括: 提供传输文件的能力。 11.2 API ID: IDOFileTransfer get transFile; 11.3 API参数说明: 跳转到文件传输工具接口说明 => IDO文件传输接口说明 12.查询是否处于已连接状态 12.1 功能概括: SDK内部使用。 12.2 API ID: bool get isConnected; 12.3 API参数说明: @Param:isConnected 已连接标志，false:未连接，true:已连接////TODO 13.查询是否处于连接中状态 13.1 功能概括: 切换设备会受限制，在连接中状态不能切换设备。 13.2 API ID: bool get isConnecting; 13.3 API参数说明: @Param:isConnecting 连接中标志，false:未在连接中状态，true:连接中。 14.查询是否处于绑定中状态 14.1 功能概括: 切换设备会受限制，在绑定中状态不能切换设备。 14.2 API ID: bool get isBinding; 14.3 API参数说明: @Param:isBinding 绑定中标志，false:未在绑定中状态，true:绑定中。 15.查询是否处于执行快速配置中状态 15.1 功能概括: 执行快速配置期间，外部指令将直接返回失败。 15.2 API ID: bool get isFastSynchronizing; 15.3 API参数说明: @Param:isFastSynchronizing 快速配置中标志，false:未在快速配置状态中，true:快速配置中。 16.查询OTA类型 16.1 功能概括: 无 16.2 API ID: IDOOtaType get otaType; 16.3 API参数说明: @Param:otaType Ota状态，包括： enum IDOOtaType { none = 0, /// 无升级 telink = 1, /// 泰凌微设备OTA nordic = 2, /// nordic设备OTA } 17.查询当前连接的设备MAC地址 17.1 功能概括: 无 17.2 API ID: String get macAddress; 17.3 API参数说明: @Param:macAddress 当前设备的MAC地址，字符串，未标记为已连接时，将固定返回\"UNKNOWN\" 18.功能表入口 18.1 功能概括: 提供查询、刷新、清除功能表的能力。 18.2 API ID: IDOFunctionTable get funTable; 18.3 API参数说明: 跳转到功能表接口说明 => IDO功能表接口说明 19.数据同步入口 19.1 功能概括: 提供查询数据同步状态、开启数据同步及结束数据同步的能力。 19.2 API ID: IDOSyncData get syncData; 19.3 API参数说明: 跳转到数据同步接口说明 => IDO数据同步接口说明 20.设备信息入口 20.1 功能概括: 提供外部同步获取设备信息的能力。 20.2 API ID: IDODeviceInfo get deviceInfo; 20.3 API参数说明: 跳转到设备信息接口说明 => IDO设备信息接口说明 21.绑定设备入口 21.1 功能概括: 提供查询绑定状态、发起绑定和解绑、监听绑定模式的能力。 21.2 API ID: IDODeviceBind get deviceBind; 21.3 API参数说明: 跳转到设备绑定接口说明 => IDO设备绑定接口说明 22.消息图标入口 22.1 功能概括: 提供设置国家编码、缓存服务器地址、APP Key、语言成员接口，提供查询更新图标状态、APP包名、获取&删除本地沙盒缓存、下发应用图标接口的能力。 22.2 API ID: IDOMessageIcon get messageIcon; 22.3 API参数说明: 跳转到消息图标接口说明 => IDO消息图标接口说明 23.数据交换入口 23.1 功能概括: 提供发起数据交换、监听BLE设备的回复及BLE设备发起的数据交换的能力。 23.2 API ID: IDOExchangeData get exchangeData; 23.3 API参数说明: 跳转到数据交换接口说明 => IDO数据交换接口说明 24.设备日志入口 24.1 功能概括: 提供查询是否支持获取固件日志接口，查询日志目录地址，开始启动获取日志和取消获取日志的能力。 24.2 API ID: IDODeviceLog get deviceLog; 24.3 API参数说明: 跳转到设备日志接口说明 => IDO设备日志接口说明 25.其他工具接口 25.1 功能概括: 提供查询是否支持获取固件日志接口，查询日志目录地址，开始启动获取日志和取消获取日志的能力。////TODO 25.2 API ID: IDOTool get tools; 25.3 API参数说明: 跳转到工具接口说明 => IDO工具接口说明 26.来电提醒&消息入口 26.1 功能概括: 提供通知设备来电提醒和消息提醒(v2)的能力。 26.2 API ID: IDOCallNotice get callNotice; 26.3 API参数说明: 跳转到来电提醒和消息提醒的接口说明 => IDO来电提醒和消息提醒接口说明 27.协议库缓存入口 27.1 功能概括: 提供查询log、alexa、设备缓存根目录，导出日志，加载设备功能表和连接过的设备列表信息的能力。 27.2 API ID: IDOCache get cache; 27.3 API参数说明: 跳转到协议库缓存的接口说明 => IDO协议库缓存接口说明 28.log初始化 28.1 功能概括: 提供设置log日志打印，写文件权限和日志等级的能力。 28.2 API ID: static Future initLog( {bool outputToConsole = true}) async { return _IDOProtocolLibManager.initLog( writeToFile: true, outputToConsole: outputToConsole, logLevel: LoggerLevel.verbose); } 28.3 API参数说明: @param:outputToConsole bool类型，是否打印到控制台，true:打印，false:不打印。 29.监听协议库状态通知 29.1 功能概括: 提供监听状态通知的能力，监听协议库状态通知。 29.2 API ID: StreamSubscription listenStatusNotification( void Function(IDOStatusNotification status) func); 29.3 API参数说明: @return:回调状态，包括： enum IDOStatusNotification { protocolConnectCompleted = 0, /// 协议库完成蓝牙库桥接，此时缓存数据已经初始化 functionTableUpdateCompleted = 1, /// 功能表获取完成 deviceInfoUpdateCompleted = 2, /// 设备信息获取完成 deviceInfoFwVersionCompleted = 3, /// 三级版本获取完成 unbindOnAuthCodeError = 4, /// 绑定授权码异常，设备强制解绑 unbindOnBindStateError = 5, /// 绑定状态异常，需要解绑 (本地绑定状态和设备信息不一致时触发) fastSyncCompleted = 6, /// 快速配置完成 fastSyncFailed = 7, /// 快速配置失败，需业务层重新触发快速配置 deviceInfoBtAddressUpdateCompleted = 8, /// BT MacAddress获取完成 macAddressError = 9, /// 快速配置获取到的macAddress和markConnectedDevice传入的不一致时上报此错误 syncHealthDataIng = 10,/// 同步健康数据中 syncHealthDataCompleted = 11 /// 同步健康数据完成 } 30.监听设备通知/控制事件 30.1 功能概括: 提供监听手表/手环设备的通知事件、控制事件、快捷短信和固件错误码的能力。 30.2 API ID: StreamSubscription listenDeviceNotification( void Function(IDODeviceNotificationModel model) func); 30.3 API参数说明: @return:IDODeviceNotificationModel 跳转到 => IDO设备通知/控制事件模型说明 31.查询Alexa是否登陆 31.1 功能概括: 无。 31.2 API ID: bool get isLogin; 31.3 API参数说明: @return:是否已登录标志，bool类型，fasle:未登录，true:已登录。 32.查询Alexa当前语言 32.1 功能概括: 无。 32.2 API ID: AlexaLanguageType get currentLanguage; 32.3 API参数说明: @return:返回alexa当前国家及语言，包括： enum AlexaLanguageType { german('de-DE') = 0, /// 德语 australia('en-AU') = 1, /// 英语 澳大利亚 canadaEn('en-CA') = 2, /// 英语 加拿大 unitedKingdom('en-GB') = 3, /// 英语 英国 india('en-IN') = 4, /// 英语 印度 usa('en-US') = 5, /// 英语 美国 spainEs('es-ES') = 6, /// 西班牙语 西班牙 mexico('es-MX') = 7, /// 西班牙语 墨西哥 spainUs('es-US') = 8, /// 西班牙语 美国 frenchCanada('fr-CA') = 9, /// 法语 加拿大 frenchFrench('fr-FR') = 10, /// 法语 法国 hindiIndia('hi-IN') = 11, /// 印地语 印度 italianItaly('it-IT') = 12, /// 意大利语 japan('ja-JP') = 13, /// 日语 portugal('pt-BR') = 14; /// 葡萄牙语 } 33.指定Alexa代理 ////TODO 33.1 功能概括: 提供指定Alexa代理的能力。////TODO 功能作用待补充 33.2 API ID: set delegate(IDOAlexaDelegate delegate) 33.3 API参数说明: ////TODO 34.注册Alexa 34.1 功能概括: 提供注册Alexa，初始化Alexa日志权限的能力。 34.2 API ID: static Future registerAlexa( {required String clientId, bool outputToConsole = true}) async { await _IDOProtocolAlexa.initLog( outputToConsole: outputToConsole); await _IDOProtocolAlexa.registerAlexa(clientId: clientId); } 34.3 API参数说明: @param:clientId Alexa后台生成的ID。 @param:outputToConsole bool类型，是否打印Alexa log到控制台，true:打印，false:不打印。 35.Alexa切换语言 35.1 功能概括: 提供通知Alexa服务器切换当前语言的能力。 35.2 API ID: static Future changeLanguage(AlexaLanguageType type) 35.3 API参数说明: @param:type 设置的语言类型，包括: enum AlexaLanguageType { german('de-DE') = 0, /// 德语 australia('en-AU') = 1, /// 英语 澳大利亚 canadaEn('en-CA') = 2, /// 英语 加拿大 unitedKingdom('en-GB') = 3, /// 英语 英国 india('en-IN') = 4, /// 英语 印度 usa('en-US') = 5, /// 英语 美国 spainEs('es-ES') = 6, /// 西班牙语 西班牙 mexico('es-MX') = 7, /// 西班牙语 墨西哥 spainUs('es-US') = 8, /// 西班牙语 美国 frenchCanada('fr-CA') = 9, /// 法语 加拿大 frenchFrench('fr-FR') = 10, /// 法语 法国 hindiIndia('hi-IN') = 11, /// 印地语 印度 italianItaly('it-IT') = 12, /// 意大利语 japan('ja-JP') = 13, /// 日语 portugal('pt-BR') = 14; /// 葡萄牙语 } 36.Alexa CBL授权 36.1 功能概括: 无。 36.2 API ID: Future authorizeRequest( {required String productId, required CallbackPairCode func}); 36.3 API参数说明: @param:productId alexa后台注册的产品ID。 @param:func 回调函数，回调Alexa认证需要打开的url和userCode。 @return:LoginResponse 登录相应结果，包括： enum LoginResponse { successful = 0, /// 成功 failed = 1, /// 失败 timeout = 2, /// 超时 } 37.Alexa停止登录 37.1 功能概括: 提供结束当前执行中的相关登录操作的能力。 37.2 API ID: void stopLogin(); 37.3 API参数说明: 无。 38.Alexa退出登录 38.1 功能概括: 无。 38.2 API ID: void logout(); 38.3 API参数说明: 无。 39.注册监听Alexa登录状态 39.1 功能概括: 提供注册监听Alexa的登录状态的能力。 39.2 API ID: StreamSubscription listenLoginStateChanged( void Function(LoginState state) func); 39.3 API参数说明: @return:回调登录状态，包括： enum LoginState { logging = 0, /// 登录中 logined = 1, /// 已登录 logout = 2, /// 未登录 } 40.注册监听Alexa语音状态 40.1 功能概括: 提供注册监听手环/手表的传输语音状态的能力。 40.2 API ID: StreamSubscription listenVoiceStateChanged( void Function(VoiceState state) func); 40.3 API参数说明: @return:回调语音状态，包括： enum VoiceState { none = 0, /// 无状态 ready = 1, /// 准备 starting = 2, /// 开始 finished = 3, /// 结束 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-24 15:50:47 "},"doc/IDOProtocolIntroduction.html":{"url":"doc/IDOProtocolIntroduction.html","title":"IDO基础事件字段说明","keywords":"","body":"{IDO基础事件字段说明} 1.功能概述 基础事件流程：APP下发基础事件通过Flutter接口libManager.send(evt,json)，将事件号和对应事件号的事件项通过C库组包成字节数据，再有蓝牙库将字节数据发送到设备，等待设备回应字节数据后，蓝牙库通过Flutter接口receiveDataFromBle(data,macaddress,type)解析字节数据，最终APP的到的Json格式的回应内容，实现APP与设备的交互。 为了帮助APP开发，这个入口介绍基础事件的事件号和事件项内容。 2.基础事件 V2设置指令事件 V2获取指令事件 V3长包指令事件 OTA指令事件 APP发起通知/控制事件 设备主动通知/控制事件 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOTranFileIntroduction.html":{"url":"doc/IDOTranFileIntroduction.html","title":"IDO文件传输接口说明","keywords":"","body":"{IDO文件传输接口说明} 1.功能概述 提供传输单个/多个文件的能力，文件包括(固件包，图库包，字库包，语言包，BT升级包，表盘，通讯录，AGPS，GPS，消息图标，运动图标，EPO升级包，提示音文件，血压校准文件)。 提供获取文件传输进度，传输状态，当前文件传输类型能力。 2.接口能力 1.查询传输状态： 1.1 功能概括: 无 1.2 API ID: bool get isTransmitting; 1.3 API参数说明: @Param:isTransmitting 传输标志，false:空闲，true:传输中 2.查询当前传输中的文件类型： 2.1 功能概括: 无 2.2 API ID: FileTransType? get transFileType; 2.3 API参数说明: @Param:transFileType 文件类型 ////TODO 3.监听当前上传的文件类型： 3.1 功能概括: 监听方法，文件开始传输、传输完成及失败都会回调此处。 3.2 API ID: StreamSubscription listenTransFileTypeChanged(void Function(FileTransType? fileType) func); 3.3 API参数说明: @Param:fileType 正在上传的文件类型，null表示无文件在上传。 ////TODO 4.传输单个文件： 4.1 功能概括: 提供传输文件、获取文件传输状态、获取传输进度、获取传输错误码及取消传输单个文件的能力。 4.2 API ID: Stream transferSingle( {required BaseFileModel fileItem, required CallbackFileTransStatusSingle funcStatus, required CallbackFileTransProgressSingle funcProgress, CallbackFileTransErrorCode? funError, bool cancelPrevTranTask}); 4.3 API参数说明: 4.3.1 @Param:fileItem 文件配置信息，包括： class BaseFileModel{ final FileTransType fileType; /// 文件类型 final String filePath; /// 文件绝对地址 final String fileName; /// 文件名 int? fileSize; /// 文件大小 int? originalFileSize; /// 原始文件大小(压缩前),暂时只用于表盘 } 4.3.2 @Param:funcStatus 传输的状态，包括： typedef CallbackFileTransStatusSingle = void Function(FileTransStatus status); enum FileTransStatus { none = 0, invalid = 1, /// 无效类型 notExists = 2, /// 文件不存在 busy = 3, /// 存在传输任务 config = 4, /// 配置 beforeOpt = 5, /// 传输前操作 trans = 6, /// 传输中 finished = 7, /// 传输完成 onFastSynchronizing = 8, /// 快速配置中，不支持文件传输 error = 9, /// 传输失败 } 4.3.3 @Param:funcProgress 传输进度。 4.3.4 @Param:funError 传输错误码，包括： typedef CallbackFileTransErrorCode = void Function( int index, int errorCode, int errorCodeFromDevice, int finishingTime); @Param:index 当前传输的文件索引。 @Param:errorCode C库返回的错误码。 @Param:errorCodeFromDevice 固件返回的错误码，当errorCode是24、25，该值等于errorCode。 @Param:finishingTime 固件预计整理时长，当errorCode是24、25的时候，才会返回值，其它情况都是0。 4.3.5 @Param:cancelPrevTranTask 取消存在的上传任务 默认为false。 5.传输多个文件： 5.1 功能概括: 提供传输多个文件、获取文件传输状态、获取传输进度、获取传输错误码及取消传输单个文件的能力。 5.2 API ID: Stream> transferMultiple( {required List fileItems, required CallbackFileTransStatusMultiple funcStatus, required CallbackFileTransProgressMultiple funcProgress, CallbackFileTransErrorCode? funError, bool cancelPrevTranTask}); 5.3 API参数说明: 5.3.1 @Param:fileItem 文件配置信息，包括： class BaseFileModel{ final FileTransType fileType; /// 文件类型 final String filePath; /// 文件绝对地址 final String fileName; /// 文件名 int? fileSize; /// 文件大小 int? originalFileSize; /// 原始文件大小(压缩前),暂时只用于表盘 } 5.3.2 @Param:funcStatus 传输的状态，包括： typedef CallbackFileTransStatusMultiple = void Function(int index, FileTransStatus status); enum FileTransStatus { none = 0, invalid = 1, /// 无效类型 notExists = 2, /// 文件不存在 busy = 3, /// 存在传输任务 config = 4, /// 配置 beforeOpt = 5, /// 传输前操作 trans = 6, /// 传输中 finished = 7, /// 传输完成 onFastSynchronizing = 8, /// 快速配置中，不支持文件传输 error = 9, /// 传输失败 } 5.3.3 @Param:funcProgress 传输进度，包括： typedef CallbackFileTransProgressMultiple = void Function(int currentIndex, int totalCount, double currentProgress, double totalProgress); @Param:currentIndex 当前传输的文件索引(0 ~ totalCount-1。 @Param:totalCount 要传的文件数(>= 1)。 @Param:currentProgress 当前文件传输进度(0 ~ 1.0) @Param:totalProgress 总进度(0 ~ 1.0) 5.3.4 @Param:funError 传输错误码，包括： typedef CallbackFileTransErrorCode = void Function( int index, int errorCode, int errorCodeFromDevice, int finishingTime); @Param:index 当前传输的文件索引。 @Param:errorCode C库返回的错误码。 @Param:errorCodeFromDevice 固件返回的错误码，当errorCode是24、25，该值等于errorCode。 @Param:finishingTime 固件预计整理时长，当errorCode是24、25的时候，才会返回值，其它情况都是0。 5.3.5 @Param:cancelPrevTranTask 取消存在的上传任务 默认为false。 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOFunctionTableIntroduction.html":{"url":"doc/IDOFunctionTableIntroduction.html","title":"IDO功能表接口说明","keywords":"","body":"{IDO功能表接口说明} 1.功能概述 提供查询功能表状态、刷新功能表及清除功能表的能力。 2.接口能力 1.刷新功能表： 1.1 功能概括: 获取设备功能表，刷新本地功能表。 1.2 API ID: Future refreshFuncTable(); 1.3 API参数说明: @return 功能表，null则获取失败。 2.清除功能表： 2.1 功能概括: 无 2.2 API ID: void cleanDataOnMemory() { _ft = null; } 2.3 API参数说明: 无 3.导出功能表： 3.1 功能概括: 功能表信息导出文本到storage根目录中，文本名称是func_table.json 3.2 API ID: Future exportFuncTableFile(); 3.3 API参数说明: @return 返回func_table.json绝对路径，null则导出失败。 4.查询某个功能表状态： 4.1 功能概括: 直接查询某个功能表的状态，false关闭，true开启。 4.2 API ID: class BaseFunctionTable { ... } 4.3 API参数说明: @return 返回功能表状态，bool类型，false关闭，true开启。 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOSyncHealthDataIntroduction.html":{"url":"doc/IDOSyncHealthDataIntroduction.html","title":"IDO数据同步接口说明","keywords":"","body":"{IDO数据同步接口说明} 1.功能概述 提供查询数据同步状态、开启数据同步及结束数据同步的能力。 2.接口能力 1.查询数据同步状态： 1.1 功能概括: 无。 1.2 API ID: SyncStatus get syncStatus; 1.3 API参数说明: @param syncStatus 数据同步状态，包括 enum SyncStatus { init = 0, /// 初始化 syncing = 1, /// 同步中 finished = 2, /// 同步完成 canceled = 3, /// 同步取消 stopped = 4, /// 同步停止 timeout = 5, /// 同步超时 error = 6 /// 同步错误 } 2.开始数据同步： 2.1 功能概括: 无。 2.2 API ID: Stream startSync({ required CallbackSyncProgress funcProgress, required CallbackSyncData funcData, required CallbackSyncCompleted funcCompleted }); 2.3 API参数说明: 2.3.1 @param funcProgress 数据同步进度，百分比0~100。 2.3.2 @param funcData 同步数据内容回调，包括： typedef CallbackSyncData = void Function(SyncDataType type,String jsonStr,int errorCode); @param:type 回调的数据类型，包括： enum SyncDataType { nullType, // 0 stepCount, // 1 步数 heartRate, // 2 心率 sleep, // 3 睡眠 bloodPressure, // 4 血压 bloodOxygen, // 5 血氧 pressure, // 6 压力 noise, // 7 噪音 piven, // 8 皮温 respirationRate, // 9 呼吸率 bodyPower, // 10 身体电量 HRV, // 11 HRV activity, // 12 多运动 GPS, // 13 GPS swim, // 14 游泳 v2StepCount, // 15 V2步数 v2Sleep, // 16 V2睡眠 v2HeartRate, // 17 V2心率 v2BloodPressure, // 18 V2血压 v2GPS, // 19 V2GPS v2Activity // 20 V2多运动 } @param:jsonStr 回调的同步数据内容。 @param:errorCode 回调的错误码，0是正常解析数据。 备注：数据类型对应的同步数据内容跳转到 => IDO同步健康数据内容说明 2.3.3 @param funcCompleted 同步数据完成错误码回调， 3.结束数据同步： 3.1 功能概括: 无。 3.2 API ID: void stopSync(); 3.3 API参数说明: 无。 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOV3HealthSyncEvtIntroduction.html":{"url":"doc/IDOV3HealthSyncEvtIntroduction.html","title":"IDO同步健康数据内容说明","keywords":"","body":"{IDO同步健康数据内容说明} 数据类型及对应功能： 数据类型 功能 1 同步运动 2 同步心率 3 同步睡眠 4 同步血压 5 同步血氧 6 同步压力 7 同步环境音量(噪声) 8 同步体温 9 同步呼吸率数据 10 同步身体电量数据 11 同步HRV数据 12 同步多运动及运动课程 13 同步GPS 14 同步游泳 15 V2运动 16 V2睡眠 17 V2心率 18 V2血压 19 V2GPS 20 V2多运动 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-11-10 12:15:03 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSpo2.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSpo2.html","title":"同步血氧","keywords":"","body":"同步血氧 App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 start_time int 开始时间,单位秒,距离0点的偏移 data_type int 0为无效,1为一个值,2为最大和最小值预留 items 集合 offset&value的集合 字段名 字段类型 字段说明 offset int 默认偏移 单位秒 如果配置了功能表 getSpo2OffChangeV3 数据偏移就是按照分钟 value int 血氧平均值 示例： { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"data_type\":1, \"items\":[ { \"offset\":30, \"value\":30, }, { \"offset\":30, \"value\":30, } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-14 12:27:09 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncHR.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncHR.html","title":"同步心率","keywords":"","body":"同步心率 App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 start_time int 开始时间,单位秒,距离0点的偏移 data_type int 0为无效,1为一个值,2为最大和最小值 (预留字段) silent_hr int 静息心率 five_min_max_data int 五分钟心率最大值(预留) five_min_min_data int 五分钟心率最小值(预留) five_min_avg_data int 五分钟心率平均值(预留) five_min_data int [] 五分钟心率全部心率值(预留) hr_data_count int 过高过低时的心率数据个数 v3SupportSyncOverHighLowHeartData功能表未开启的时候返回0 hr_interval 集合 5个心率区间:热身心率区间 极限心率区间 燃脂心率区间 有氧耐力心率区间 无氧耐力心率区间threshold & minute的集合 items 集合 心率数据 offset & heart_rateVal的集合 hr_data 集合 心率过高过低数据 hour & minute & type & heart_rate 的集合v3SupportSyncOverHighLowHeartData功能表未开启的时候返回0 字段名 字段类型 字段说明 offset int 偏移 单位秒 heart_rateVal int 心率值 字段名 字段类型 字段说明 threshold int 阀值 minute int 分钟 字段名 字段类型 字段说明 hour int 过高过低时的心率数据时间 时v3SupportSyncOverHighLowHeartData功能表未开启的时候返回0 minute int 过高过低时的心率数据时间 分v3SupportSyncOverHighLowHeartData功能表未开启的时候返回0 type int 心率值类型 0：心率过低时的心率值 1：心率过高时的心率值v3SupportSyncOverHighLowHeartData功能表未开启的时候返回0 heart_rate int 心率值 单位：次/分v3SupportSyncOverHighLowHeartData功能表未开启的时候返回0 示例： { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"data_type\":0, \"silent_hr\":85, \"hr_data_count\":2, \"hr_interval\":[ { \"threshold\": 80, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 }, { \"threshold\": 85, \"minute\": 5 } ], \"items\":[ { \"offset\":80, \"heart_rateVal\":5 }, { \"offset\":83, \"heart_rateVal\":5 } ], \"hr_data\":[ { \"hour\":11, \"minute\":25, \"type\":1, \"heart_rate\":120 }, { \"hour\":11, \"minute\":25, \"type\":0, \"heart_rate\":70 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-11-10 14:25:15 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncPressure.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncPressure.html","title":"同步压力","keywords":"","body":"同步压力 App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 start_time int 开始时间,单位秒,距离0点的偏移 data_type int 0为无效,1为一个值,2为最大和最小值 (预留字节) items 集合 offset & value的集合 字段名 字段类型 字段说明 offset int 偏移 单位分钟 value int 压力值 示例： { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"data_type\":1, \"items\":[ { \"offset\":30, \"value\":30, }, { \"offset\":30, \"value\":30, } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-14 12:05:09 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncActivity.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncActivity.html","title":"同步多运动及运动课程","keywords":"","body":"同步多运动及跑步课程 App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号该条报文的版本号默认0 setSupportSportPlan功能表开启version=16,syncRealTimeV3功能表开启version=32 data_length int 数据长度固件开启功能表setSupportSportPlan(version=16)或syncRealTimeV3(version=32)的情况下该值为0 packet_count int 包个数 固件开启功能表setSupportSportPlan(version=16)或syncRealTimeV3(version=32)的情况下该值为0 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 hour int 数据日期 时 minute int 数据日期 分 second int 数据日期 秒 type int 运动枚举 connect_app int 手环是否连接app，用app评产生何种报告1是连接，0是未连接 sport_start_type int 0:无效， 1 : app发起的运动， 2：手表发起的运动 hr_data_interval_minute int 心率数据间隔 单位分钟 step int 步数 durations int 运动时长 单位:秒结束时间说明：功能表syncHealthSyncV3ActivityEndTimeUseUtcMode没有开启的情况下，运动结束时间=开始时间+运动时长功能表syncHealthSyncV3ActivityEndTimeUseUtcMode开启后，运动结束时间通过字段end_month & end_day &end_hour & end_minute & end_year & end_sec calories int 卡路里 单位:千卡 distance int 距离 单位:米 avg_hr_value int 平均心率值单位:BPM max_hr_value int 最大心率值单位:BPM min_hr_value Int 最小心率值setSupportSportPlan or getOxygenDataSupportGradeV3 功能表未开启的时候返回0 avg_step_frequency int 平均步频 单位:步/分钟 max_step_frequency int 最大步频 单位:步/分钟 avg_step_stride int 平均步幅单位:厘米 max_step_stride int 最大步幅单位:厘米 avg_speed int 平均速度 km/h 固件是 扩大100倍 max_speed int 最快速度 km/h 固件是 扩大100倍 avg_pace_speed int 平均配速 传过来的是秒钟 比如361 361/60=6分 余数是1s 6''1' , 公里和英里是按照 英里= 公里*1609/1000fsetSupportSportPlan or getOxygenDataSupportGradeV3 功能表未开启的时候返回0 max_pace_speed int 最快配速setSupportSportPlan or getOxygenDataSupportGradeV3 功能表未开启的时候返回0 avg_km_speed int 平均公里配速 传过来的是秒钟 比如361 361/60=6分 余数是1s 6''1' , 公里和英里是按照 英里= 公里*1609/1000f max_km_speed int 最快公里配速每公里需要的时间(秒) warm_up_mins int 热身运动的累计时长 分钟部分 fat_burning_mins int 脂肪燃烧的累计时长 分钟部分 aerobic_exercise_mins int 有氧运动的累计时长 分钟部分 anaerobic_exercise_mins int 无氧运动的累计时长 分钟部分 extreme_exercise_mins int 极限锻炼的累计时长 分钟部分 warm_up_sec int 热身运动的累计时长 秒钟部分 fat_burning_sec int 脂肪燃烧的累计时长 秒钟部分 aerobic_exercise_sec int 有氧运动的累计时长 秒钟部分 anaerobic_exercise_sec int 无氧运动的累计时长 秒钟部分 extreme_exercise_sec Int 极限锻炼的累计时长 秒钟部分 vo2max Int 最大摄氧量 单位：毫升/公斤/分钟范围 0-80 不放大100倍 （该字段在前） grade Int 摄氧量等级 1：低等 2：业余 3：一般 4：平均 5：良好 6：优秀 7：专业 setSupportSportPlan or getOxygenDataSupportGradeV3 固件开启则有效否则为0，为0则不支持摄氧量等级 recovery_time_year int 恢复时间点年setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 recovery_time_mon int 恢复时间点月setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 recovery_time_day int 恢复时间点日setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 recovery_time_hour int 恢复时间点时setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 recovery_time_min int 恢复时间点分setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 recovery_time_s int 恢复时间点秒setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 training_effect int 训练效果 单位：无 范围： 1.0 - 5.0 （扩大10倍传输）setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 mi_speed_count int 英里配速个数 hr_item_count int 心率个数 activity_data_item_count int 洪堡定制数据字段详情个数，一分钟存一个 km_speed_count int 公里配速的个数 最大100 mi_speed_count int 英里配速个数 pace_count int 实时配速个数setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 frequency_count int 步频个数 paddle_number_count int 桨次个数 setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 paddle_frequency_count int 桨频个数 setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 tread_frequency_count int 踏频个数 V3_sync_v3_activity_add_param或v3_support_activity_sync_real_time功能表未开启的时候返回0 real_speed_count int 实时速度个数syncRealTimeV3功能表未开启的时候返回0 end_month int 运动结束时间 月考虑到运动后用户暂停运动，导致运动结束后运动结束时间与app的运动结束时间有差异，此时的运动结束时间由固件返回，不支持该协议的返回0即可 app判断月份是否为0判断是否采用以下字段作为运动结束时间setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0syncHealthSyncV3ActivityEndTimeUseUtcMode功能表开启有效 end_day int 运动结束时间 日setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0syncHealthSyncV3ActivityEndTimeUseUtcMode功能表开启有效 end_hour int 运动结束时间 时setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0syncHealthSyncV3ActivityEndTimeUseUtcMode功能表开启有效 end_minute int 运动结束时间 分V3_sync_v3_activity_add_param或v3_support_activity_sync_real_time功能表未开启的时候返回0syncHealthSyncV3ActivityEndTimeUseUtcMode功能表开启有效 end_year int 结束时间 年syncHealthSyncV3ActivityEndTimeUseUtcMode功能表开启有效 end_sec int 结束时间 秒syncHealthSyncV3ActivityEndTimeUseUtcMode功能表开启有效 training_offset int 训练的课程日期偏移 从零开始setSupportSportPlan功能表未开启的时候返回0 act_type int 计划类型：1:跑步计划3km2:跑步计划5km3:跑步计划10km4:半程马拉松训练（二期）5:马拉松训练（二期） 64:6分钟轻松跑65:10分钟轻松跑66:15分钟轻松跑67:走跑结合初级68:走跑结合进阶69:走跑结合强化70:跑后拉伸setSupportSportPlan功能表未开启的时候返回0 in_class_calories int 课程内运动热量 单位千卡 completion_rate int 动作完成率 0—100 hr_completion_rate int 心率控制率 0—100 smart_competitor int 0:无效 1:非智能陪跑运动 2:智能陪跑运动功能表supportSmartCompetitor开启有效 ai_image_id int ai形象ID功能表supportSmartCompetitor开启有效 user_image_id int 用户形象ID功能表supportSmartCompetitor开启有效 bg_image_id int 背景形象ID功能表supportSmartCompetitor开启有效 smart_competitor_pace int 智能陪跑对手配速功能表supportSmartCompetitor开启有效 warm_up_performance int 热身表现 0-100 setSupportSportPlan and supportWarmUpBeforeRunning开启有效 gps_status int GPS状态 0:无效 1:开启 2:未开启(未开启时展示距离 开启则展示3D距离)setSupportSportPlan & version=0x30时有效 distance3d int 3d距离 单位米supportSyncActivityData3dDistanceSpeed, setSupportSportPlan & version=0x30时有效 avg_3d_speed int 平均3d速度 单位km/h app收到需要/100 扩大100倍传supportSyncActivityData3dDistanceSpeed, setSupportSportPlan & version=0x30时有效 avg_vertical_speed int 平均垂直速度 单位m/h app收到需要/10 扩大10倍传supportSyncActivityDataAvgSlope, setSupportSportPlan & version=0x30时有效 avg_slope int 平均坡度 单位度 -90 ~ 90supportSyncActivityDataAvgSlope, setSupportSportPlan & version=0x30时有效 max_altitude int 最高海拔高度 单位米-500 ~ 9000getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan & version=0x30时有效 mix_altitude int 最低海拔高度 单位米-500 ~ 9000getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan & version=0x30时有效 cumulative_altitude_rise int 累计海拔上升 单位米getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan & version=0x30时有效 cumulative_altitude_loss int 累计海拔下降 单位米getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan & version=0x30时有效 altitude_count int 海拔高度详情个数getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan & version=0x30时有效 avg_altitude int 平均海拔高度 单位米 -500 ~ 9000getSupportSyncActivityDataAltitudeInfo, setSupportSportPlan & version=0x30时有效 act_count int 动作详情个数 hr_data_vlaue int [] 心率数据详情 frequency_items int [] 步频数据详情 items_mi_speed int [] 英里配速详情 pace_speed_items int [] 实时配速详情setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 paddle_number_items int [] 桨次详情setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 paddle_frequency_items int [] 桨频详情setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 tread_frequency_items int [] 踏频详情setSyncV3ActivityAddParam or syncRealTimeV3 功能表未开启的时候返回0 act_items int [] 动作详情setSupportSportPlan功能表未开启的时候返回0 item_real_speed_temp int [] 实时速度详情setSupportSportPlan功能表开启时返回0syncRealTimeV3功能表未开启的时候返回0 altitude_item int [] 海拔高度数据 单位米 范围-500~9000getSupportSyncActivityDataAltitudeInfo&setSupportSportPlan & version=0x30时有效 items 集合 洪堡定制字段数据详情，steps & calories & distance的集合 items_km_speed 集合 公里配速数据详情，second的集合 字段名 字段类型 字段说明 steps int 步频 calories int 卡路里 distance int 距离单位:米 字段名 字段类型 字段说明 second int 公里配速单位:秒 示例： { \"act_type\" : 0, \"action_temp\" : null, \"activity_data_item_count\" : 0, \"aerobic_exercise_mins\" : 0, \"aerobic_exercise_sec\" : 0, \"anaerobic_exercise_mins\" : 0, \"anaerobic_exercise_sec\" : 0, \"avg_hr_value\" : 0, \"avg_km_speed\" : 0, \"avg_pace_speed\" : 0, \"avg_speed\" : 0, \"avg_step_frequency\" : 0, \"avg_step_stride\" : 0, \"calories\" : 0, \"completion_rate\" : 0, \"connect_app\" : 0, \"data_length\" : 0, \"day\" : 0, \"distance\" : 0, \"durations\" : 0, \"end_day\" : 0, \"end_hour\" : 0, \"end_minute\" : 0, \"end_month\" : 0, \"extreme_exercise_mins\" : 0, \"extreme_exercise_sec\" : 0, \"fat_burning_mins\" : 0, \"fat_burning_sec\" : 0, \"frequency_count\" : 0, \"frequency_items\" : null, \"grade\" : 0, \"hour\" : 0, \"hr_completion_rate\" : 0, \"hr_data_interval_minute\" : 0, \"hr_data_vlaue\" : null, \"hr_item_count\" : 0, \"in_class_calories\" : 0, \"item_real_speed_temp\" : null, \"items\" : null, \"items_km_speed\" : null, \"items_mi_speed\" : null, \"km_speed_count\" : 0, \"max_hr_value\" : 0, \"max_km_speed\" : 0, \"max_pace_speed\" : 0, \"max_speed\" : 0, \"max_step_frequency\" : 0, \"max_step_stride\" : 0, \"mi_speed_count\" : 0, \"min_hr_value\" : 0, \"minute\" : 0, \"month\" : 0, \"pace_count\" : 0, \"pace_speed_items\" : null, \"packet_count\" : 0, \"paddle_frequency_count\" : 0, \"paddle_frequency_items\" : null, \"paddle_number_count\" : 0, \"paddle_number_items\" : null, \"real_speed_count\" : 0, \"recovery_time_day\" : 0, \"recovery_time_hour\" : 0, \"recovery_time_min\" : 0, \"recovery_time_mon\" : 0, \"recovery_time_s\" : 0, \"recovery_time_year\" : 0, \"second\" : 0, \"sport_start_type\" : 0, \"step\" : 0, \"training_effect\" : 0, \"training_offset\" : 0, \"tread_frequency_count\" : 0, \"tread_frequency_items\" : null, \"type\" : 0, \"vO2max\" : 0, \"version\" : 0, \"warm_up_mins\" : 0, \"warm_up_sec\" : 0, \"year\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-12-21 12:12:44 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncGPS.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncGPS.html","title":"同步GPS","keywords":"","body":"同步GPS App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 hour int 数据日期 时 minute int 数据日期 分 second int 数据日期 秒 data_interval int 数据偏移 stringItems char [] GPS数组详情 示例： { \"data_interval\" : 2, \"day\" : 12, \"hour\" : 10, \"minute\" : 32, \"month\" : 10, \"second\" : 56, \"stringItems\" : [ \"11358.563600E,2241.361300N\", \"11358.563800E,2241.361500N\", \"11358.563800E,2241.361600N\", \"11358.563700E,2241.361600N\", \"11358.563800E,2241.361700N\", \"11358.563800E,2241.361800N\", \"11358.563800E,2241.361900N\", \"11358.563900E,2241.362100N\", \"11358.564000E,2241.362100N\", \"11358.564000E,2241.362000N\", \"11358.564200E,2241.361900N\", \"11358.564400E,2241.361800N\", \"11358.564500E,2241.361800N\", \"11358.564500E,2241.361800N\", \"11358.564500E,2241.361700N\", \"11358.564500E,2241.361700N\", \"11358.564400E,2241.361600N\", \"11358.564200E,2241.361600N\", \"11358.564100E,2241.361600N\", \"11358.563900E,2241.361600N\", \"11358.563900E,2241.361600N\", \"11358.563800E,2241.361600N\", \"11358.563800E,2241.361600N\", \"11358.563900E,2241.361500N\", \"11358.563900E,2241.361500N\", \"11358.563900E,2241.361600N\", \"11358.563900E,2241.361600N\", \"11358.563800E,2241.361600N\", \"11358.563800E,2241.361600N\", \"11358.563800E,2241.361600N\", \"11358.563800E,2241.361600N\", \"11358.563800E,2241.361600N\", \"11358.563800E,2241.361500N\", \"11358.563800E,2241.361500N\", \"11358.563800E,2241.361500N\", \"11358.563800E,2241.361500N\", \"11358.563800E,2241.361500N\", \"11358.563800E,2241.361500N\", \"11358.563700E,2241.361500N\", \"11358.563700E,2241.361500N\", \"11358.563700E,2241.361500N\", \"11358.563700E,2241.361300N\" ], \"year\" : 2023 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-11-20 15:26:09 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSwim.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSwim.html","title":"同步游泳","keywords":"","body":"同步游泳 App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 hour int 数据日期 时 minute int 数据日期 分 second int 数据日期 秒 version int 协议版本号 type int 类型 0 无效,1 为室内游泳,2 为开阔水域游泳 calories int 卡路里单位:Kcal distance int 距离单位:米 confirm_distance int 用户确认距离单位:米 duration int 时长单位:秒 trips int 游泳趟数 average_swolf int 平均划水效率 total_strokes_number int 总划水次数 swimming_posture int 主泳姿 0 : 混合泳 1 : 自由泳 2 : 蛙泳 3 : 仰泳4 : 蝶泳 pool_distance int 泳池距离单位:米 avg_speed int 平均配速秒/百米 一百米用了多少秒 单位:秒version=1有效,否则字段是0 avg_frequency Int 平均划水频率单位:次/分version=1有效,否则字段是0 items 集合 游泳数据详情，swolf & strokesNumber & duration & swimmingPosture & distance & frequency& speed & stop_time & difference_time的集合 字段名 字段类型 字段说明 swolf int 划水效率 swimming_posture int 泳姿0 : 混合泳 1 : 自由泳 2 : 蛙泳 3 : 仰泳4 : 蝶泳 strokes_number int 划水次数 duration int 时间单位:秒 distance int 距离单位:米 frequency int 频率单位:次/分version=1有效,否则字段是0 speed int 配速秒/百米 一百米用了多少秒 单位:秒version=1有效,否则字段是0 stop_time int 结束时间单位:秒version=1有效,否则字段是0 difference_time int 两趟之间的休息时间单位:秒version=1有效,否则字段是0 示例： { } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-14 10:54:01 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSleep.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSleep.html","title":"同步睡眠","keywords":"","body":"同步睡眠 App收到的json字段： 字段名 字段类型 字段说明 data_type int 1:科学睡眠（有REM、呼吸得分）2:午睡 4:普通睡眠6:午睡且不支持科学睡眠 fall_asleep_year int 入睡时间 年 fall_asleep_month int 入睡时间 月 fall_asleep_day int 入睡时间 日 fall_asleep_hour int 入睡时间 时 fall_asleep_minte int 入睡时间 分 get_up_year int 起床时间 年 get_up_month int 起床时间 月 get_up_day int 起床时间 日 get_up_hour int 起床时间 时 get_up_minte int 起床时间分 total_sleep_time_mins int 睡眠总时长 单位：分 wake_mins int 总清醒时长 单位：分 light_mins int 总浅眠时长 单位：分 rem_mins int 总眼动时长 单位：分 deep_mins int 总深眠时长 单位：分 wake_count int 清醒次数 light_count int 浅眠次数 rem_count int 眼动次数 deep_count int 深眠次数 awrr_status int 呼吸状况 sleep_score int 睡眠得分 breath_quality int 呼吸质量 （0 - 100） 无单位 sleep_avg_hr_value int 睡眠阶段的心率平均值 sleep_avg_spo2_value int 睡眠阶段的血氧平均值 sleep_avg_respir_rate_value int 睡眠阶段的呼吸率平均值 item_count int 睡眠详情个数 items 集合 睡眠详情，stage & duration的集合 字段名 字段类型 字段说明 stage int 阶段 1:醒着2:浅睡3:深睡 4:眼动 duration int 时长 单位秒 示例： { \"awrr_status\" : 0, \"breath_quality\" : 0, \"data_type\" : 1, \"deep_count\" : 0, \"deep_mins\" : 0, \"fall_asleep_day\" : 0, \"fall_asleep_hour\" : 0, \"fall_asleep_minte\" : 0, \"fall_asleep_month\" : 0, \"fall_asleep_year\" : 0, \"get_up_day\" : 0, \"get_up_hour\" : 0, \"get_up_minte\" : 0, \"get_up_month\" : 0, \"get_up_year\" : 0, \"item_count\" : 0, \"items\" : null, \"light_count\" : 0, \"light_mins\" : 0, \"rem_count\" : 0, \"rem_mins\" : 0, \"sleep_score\" : 0, \"total_sleep_time_mins\" : 0, \"wake_count\" : 0, \"wake_mins\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-14 15:43:13 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSport.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncSport.html","title":"同步运动","keywords":"","body":"同步运动 App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号 0：没有佩戴标识数据16：有佩戴标识数据,需要固件配置v3SupportWearFlag功能表 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 start_time int 开始时间,单位分钟,距离0点的偏移 per_minute int 每条数据产生的间隔 分钟 （15分钟默认） 206定制新增：时长间隔 1分钟产生间隔若为一分钟 需要app判断 supportPerMinuteOne 来判断固件是否支持一分钟同步类型 total_step int 总步数 total_rest_activity_calories int 总活动+静息卡路里 total_distances int 总距离 英里数据 = 固件距离（米）乘以0.00062 total_active_time int 当天的活动时间 单位分钟 total_activity_calories int 总活动卡路里 walk_goal_time int 固件实际走动时长 需要配置 单位小时 item_count int 运动数据详情个数 wear_flag_array int [] 24小时的每个小时的佩戴分钟数，最大24个字节v3SupportSyncOverHighLowHeartData功能表未开启的时候返回0 items 集合 运动数据详情，mode&step_count&active_time&activity_calories&distance&rest_activity_calories的集合 字段名 字段类型 字段说明 mode int 模式 00：安静， 01：轻微，10：中等活跃， 11：激烈 step_count int 步数个数 active_time int 活跃时长 单位分钟， 最大per_minute参数决定 目前是15分钟 activity_calories int 活动卡路里 distance int 距离，单位米 rest_activity_calories int 活动+静息卡路里 示例： { \"day\" : 26, \"item_count\" : 47, \"items\" : [ { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 }, { \"active_time\" : 0, \"activity_calories\" : 0, \"distance\" : 0, \"mode\" : 0, \"rest_activity_calories\" : 0, \"step_count\" : 0 } ], \"month\" : 12, \"per_minute\" : 15, \"start_time\" : 0, \"total_active_time\" : 0, \"total_activity_calories\" : 0, \"total_distances\" : 0, \"total_rest_activity_calories\" : 0, \"total_step\" : 0, \"version\" : 0, \"walk_goal_time\" : 0, \"wear_flag_array\" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], \"year\" : 2022 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-14 14:13:40 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncNoise.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncNoise.html","title":"同步环境音量(噪声)","keywords":"","body":"同步环境音量(噪声) App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 hour int 数据日期 时 minute int 数据日期 分 second int 数据日期 秒 version int 协议版本号 0 start_time int 开始的同步时间 单位秒 interval_mode int 2个数据的间隔 单位秒 avg_noise int 平均的噪音 max_noise int 最大噪音 min_noise int 最小噪音 noise_count int 噪声详情个数 items 集合 噪声详情，offset&value的集合 字段名 字段类型 字段说明 offset int 数据的偏移 value int 噪声值 示例： { \"year\":2022, \"month\":12, \"day\":26, \"hour\":11, \"minute\":58, \"second\":30, \"version\":0, \"start_time\":0, \"interval_mode\":30, \"avg_noise\":50, \"max_noise\":60, \"min_noise\":40, \"noise_count\":2, \"items\":[ { \"offset\":30, \"value\":50 }, { \"offset\":30, \"value\":50 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-14 11:44:27 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncTemperature.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncTemperature.html","title":"同步体温","keywords":"","body":"同步体温 App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 hour int 数据日期 时 minute int 数据日期 分 start_time int 开始的同步时间 单位秒 interval_mode int 自动体温数据保存的间隔单位秒预留 avg_temperature int 平均的温度 保留一位小数 扩大十倍传输 max_temperature int 最大的温度 保留一位小数 扩大十倍传输 min_temperature int 最少的温度 保留一位小数 扩大十倍传输 temperature_count int 体温详情个数 items 集合 体温详情，offset&value的集合 字段名 字段类型 字段说明 offset int 数据的偏移 value int 体温值 示例： { \"avg_temperature\" : 0, \"day\" : 0, \"hour\" : 0, \"interval_mode\" : 0, \"items\" : null, \"max_temperature\" : 0, \"min_temperature\" : 0, \"minute\" : 0, \"month\" : 0, \"start_time\" : 0, \"temperature_count\" : 0, \"year\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-14 10:55:26 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncBP.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncBP.html","title":"同步血压","keywords":"","body":"同步血压数据 App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 start_time int 开始时间,单位秒,距离0点的偏移 sleep_avg_bp int 睡眠平均血压值 max_bp int 血压最大值 item_count int 血压详情个数 items 集合 血压详情，offset&sys_blood&dias_blood的集合 字段名 字段类型 字段说明 offset int 数据偏移 单位：分钟 （血压数据间隔按分钟偏移） sys_blood int 较大收缩压 dias_blood int 较小收缩压 示例： { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"sleep_avg_bp\":0, \"max_bp\":0, \"item_count\":3, \"items\":[ { \"offset\":5, \"sys_blood\":120, \"dias_blood\":70 }, { \"offset\":5, \"sys_blood\":120, \"dias_blood\":70 }, { \"offset\":5, \"sys_blood\":120, \"dias_blood\":70 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-14 11:39:38 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncRespirRate.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncRespirRate.html","title":"同步呼吸率数据","keywords":"","body":"同步呼吸率数据 App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 item_count int 呼吸率详情个数 items 集合 呼吸率详情，start_time&respid的集合 字段名 字段类型 字段说明 start_time int 开始时间,单位秒,距离0点的偏移 respid int 呼吸率值 示例： { \"year\":2022, \"month\":12, \"day\":26, \"item_count\":3, \"items\":[ { \"start_time\":0, \"respid\":80 }, { \"start_time\":100, \"respid\":80 }, { \"start_time\":100, \"respid\":80 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-14 12:05:24 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncBodyPower.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncBodyPower.html","title":"同步身体电量数据","keywords":"","body":"同步身体电量数据 App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 start_time int 开始时间,单位秒,距离0点的偏移 data_type int 预留 items 集合 身体电量详情，offset&type&value&diff_value的集合 字段名 字段类型 字段说明 offset int 默认偏移 单位秒 type int 标签类型 0: 未佩戴 1：锻炼(运动模式下) 2：放松 3：压力 4：活动 5：锻炼(日常状态) value int 实际产生值 有小数 固件返回值应将实际值乘以100 diff_value int 零为基准值 相对于上一个值的差值 正为恢复 负为消耗 示例： { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"data_type\":0, \"items\":[ { \"offset\":5, \"type\":0, \"value\":80, \"diff_value\":0 }, { \"offset\":5, \"type\":0, \"value\":81, \"diff_value\":1 }, { \"offset\":5, \"type\":0, \"value\":79, \"diff_value\":-2 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-14 11:38:57 "},"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncHRV.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3HealthSyncEvt/IDOV3HealthSyncHRV.html","title":"同步HRV数据","keywords":"","body":"同步HRV数据 App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 start_time int 开始时间,单位秒,距离0点的偏移 items 集合 HRV数据详情，min_offset&hrv_value的集合 字段名 字段类型 字段说明 min_offset int 默认偏移 单位分钟 hrv_value int HRV数据 示例： { \"year\":2022, \"month\":12, \"day\":26, \"start_time\":0, \"items\":[ { \"min_offset\":5, \"hrv_value\":0 }, { \"min_offset\":5, \"hrv_value\":0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-14 11:44:07 "},"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncSport.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncSport.html","title":"同步V2运动","keywords":"","body":"同步运动数据 App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 total_step int 当天总步数 total_cal int 当天总卡路里 total_distances int 当天总距离 total_active_time int 当天总活跃时长 minute_offset int 数据的距离0点的开始时间，单位分钟 per_minute int 数据的间隔时间 单位分钟， 一般是15分钟 keyword int 预留 items 集合 运动详情sport_count & active_time & calories & distance的集合 字段名 字段类型 字段说明 sport_count int 步数 active_time int 运动数据 单位分钟 calories int 卡路里 distance int 距离 单位米 示例： { \"year\":2022, \"month\":12, \"day\":23, \"total_step\":20, \"total_cal\":200, \"total_distances\":500, \"total_active_time\":6, \"minute_offset\":0, \"per_minute\":15, \"keyword\":0, \"items\":[ { \"sport_count\":2, \"active_time\":2, \"calories\":50, \"distance\":100, }, { \"sport_count\":8, \"active_time\":2, \"calories\":50, \"distance\":200, }, { \"sport_count\":10, \"active_time\":2, \"calories\":100, \"distance\":200, } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncSleep.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncSleep.html","title":"同步V2睡眠","keywords":"","body":"同步睡眠数据 App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 end_time_hour int 睡眠结束时间 时 end_time_minute int 睡眠结束时间 分 total_minute int 总时间 单位分 light_sleep_count int 浅睡眠个数 deep_sleep_count int 深睡眠个数 wake_count int 清醒次数 ligth_sleep_minute int 浅睡时间 单位分钟 deep_sleep_minute int 深睡时间 单位分钟 sleep_score int 睡眠分数 items 集合 睡眠详情durations & sleep_status的集合 字段名 字段类型 字段说明 durations int 持续时间 单位分钟 sleep_status int 睡眠状态1：醒着2：浅睡3：深睡 4：眼动 示例： { \"year\":2022, \"month\":12, \"day\":23, \"end_time_hour\":20, \"end_time_minute\":0, \"total_minute\":30, \"light_sleep_count\":3, \"deep_sleep_count\":1, \"wake_count\":1, \"ligth_sleep_minute\":22, \"deep_sleep_minute\":8, \"sleep_score\":75, \"items\":[ { \"durations\":5, \"sleep_status\":1 }, { \"durations\":10, \"sleep_status\":2 }, { \"durations\":10, \"sleep_status\":2 }, { \"durations\":2, \"sleep_status\":2 }, { \"durations\":8, \"sleep_status\":3 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncHR.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncHR.html","title":"同步V2心率","keywords":"","body":"同步心率数据 App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 start_time int 数据距离0点的偏移 单位分钟 silent_heart_rate int 静息心率 burn_fat_threshold int 心率区间的阈值，脂肪燃烧 aerobic_threshold int 心率区间的阈值，有氧运动 limit_threshold int 心率区间的阈值，极限运动 burn_fat_mins int 脂肪燃烧的心率持续时间，单位分钟 aerobic_mins int 有氧运动的持续时间 limit_mins int 极限锻炼的持续时间 warm_up_threshold int 心率区间的阈值，热身运动 warm_up_mins int 热身运动的持续时间 anaerobic_threshold int 心率区间的阈值，无氧运动 anaerobic_mins int 无氧运动的持续时间 items 集合 心率的详情offset_minute & heart_rave_value的集合 字段名 字段类型 字段说明 offset_minute int 数据的偏移，单位分钟，用于定位数据的时间 heart_rave_value int 心率值 示例： { \"year\":2022, \"month\":12, \"day\":23, \"start_time\":0, \"silent_heart_rate\":80, \"burn_fat_threshold\":0, \"aerobic_threshold\":0, \"limit_threshold\":0, \"burn_fat_mins\":0, \"aerobic_mins\":0, \"limit_mins\":0, \"warm_up_threshold\":0, \"warm_up_mins\":0, \"anaerobic_threshold\":0, \"anaerobic_mins\":0, \"items\":[ { \"offset_minute\":5, \"heart_rave_value\":90 }, { \"offset_minute\":5, \"heart_rave_value\":80 }, { \"offset_minute\":5, \"heart_rave_value\":85 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncBP.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncBP.html","title":"同步V2血压","keywords":"","body":"同步血压数据 App收到的json字段： 字段名 字段类型 字段说明 year int 数据日期 年 month int 数据日期 月 day int 数据日期 日 sleep_avg_bp int 睡眠平均血压 max_bp int 血压最大值 minute_offset int 数据的距离0点的开始时间，单位分钟 items 集合 血压详情offset & dias_blood & sys_blood的集合 字段名 字段类型 字段说明 offset int 数据的偏移，单位分钟，用于定位数据的时间 dias_blood int 舒张压(低压) sys_blood int 收缩压(高压) 示例： { \"year\":2022, \"month\":12, \"day\":26, \"sleep_avg_bp\":86, \"max_bp\":90, \"minute_offset\":15, \"items\":[ { \"offset\":5, \"dias_blood\":70, \"sys_blood\":90 }, { \"offset\":5, \"dias_blood\":69, \"sys_blood\":87 }, { \"offset\":5, \"dias_blood\":76, \"sys_blood\":88 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncGPS.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncGPS.html","title":"同步V2GPS","keywords":"","body":"同步GPS数据 App收到的json字段： 字段名 字段类型 字段说明 year int 年 month int 月 day int 日 hour int 时 minute int 分 second int 秒 data_interval int 数据间隔 单位秒 items char [] gps坐标字符串 示例： { \"year\":2022, \"month\":12, \"day\":26, \"hour\":10, \"minute\":22, \"second\":36, \"data_interval\":5, \"items\":\"\", } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncActivity.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2HealthSyncEvt/IDOV2HealthSyncActivity.html","title":"同步V2多运动","keywords":"","body":"同步活动(多运动)数据 App收到的json字段： 字段名 字段类型 字段说明 year int 年 month int 月 day int 日 hour int 时 minute int 分 second int 秒 data_length int 数据长度 hr_data_interval_minute int 心率数据间隔 hr_item_count int 心率个数 packet_count int 包数量统计 type int 运动类型 step int 步数/个数 durations int 时长 calories int 卡路里 distance int 距离 avg_hr_value int 平均心率 max_hr_value int 最大心率 burn_fat_mins int 脂肪燃烧时间 aerobic_mins int 有氧运动时间 limit_mins int 极限锻炼时间 range1 int 热身运动的累积时长 单位分钟 range2 int 脂肪燃烧的累积时长 单位分钟 range3 int 有氧运动的累积时长 单位分钟 range4 int 无氧运动的累积时长 单位分钟 range5 int 极限锻炼的累积时长 单位分钟 hr_data_vlaue int [] 心率数据详情最大个数68535 示例： { \"year\":2022, \"month\":12, \"day\":26, \"hour\":10, \"minute\":38, \"second\":20, \"data_length\":10, \"hr_data_interval_minute\":5, \"hr_item_count\":10, \"packet_count\":1, \"type\":1, \"step\":200, \"durations\":10, \"calories\":50, \"distance\":200, \"avg_hr_value\":85, \"max_hr_value\":90, \"burn_fat_mins\":0, \"aerobic_mins\":0, \"limit_mins\":0, \"range1\":0, \"range2\":0, \"range3\":0, \"range4\":0, \"range5\":0, \"hr_data_vlaue\":[ 85, 87, 90, 93, 91, 80, 90, 81, 83, 86 ], } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDODeviceInfoIntroduction.html":{"url":"doc/IDODeviceInfoIntroduction.html","title":"IDO设备信息接口说明","keywords":"","body":"{IDO设备信息接口说明} 1.功能概述 提供提供查询与设备相关的信息的能力，例如设备平台、设备型号、设备电池电量、设备版本和设备绑定状态等的能力。 2.接口能力 1.查询设备模式： 1.1 功能概括: 无 1.2 API ID: int get deviceMode => _device?.mode ?? 0; 1.3 API参数说明: @return:deviceMode 设备模式 0:运动模式,1:睡眠模式 2.查询设备电量状态： 2.1 功能概括: 无 2.2 API ID: int get battStatus => _device?.battStatus ?? 0; 2.3 API参数说明: @return:battStatus 电量状态 0:正常, 1:正在充电, 2:充满, 3:电量低 3.查询设备电量级别： 3.1 功能概括: 无。 3.2 API ID: int get battLevel => _device?.energe ?? 0; 3.3 API参数说明: @return:battLevel 电量级别 0～100。 4.查询设备重启状态： 4.1 功能概括: 无。 4.2 API ID: int get rebootFlag => _device?.reboot ?? 0; 4.3 API参数说明: @return:rebootFlag 是否重启 0:未重启 1:重启 5.查询设备绑定状态： 5.1 功能概括: 无。 5.2 API ID: int get bindState => _device?.pairFlag ?? 0; 5.3 API参数说明: @return:bindState 绑定状态 0:未绑定 1:已绑定 6.查询设备绑定类型： 6.1 功能概括: 无。 6.2 API ID: int get bindType => _device?.bindConfirmMethod ?? 0; 6.3 API参数说明: @return:bindType 绑定类型，包括： 绑定类型 0:默认 1:单击 2:长按 3:屏幕点击 横向确认和取消,确认在左边 4:屏幕点击 横向确认和取消,确认在右边 5:屏幕点击 竖向确认和取消,确认在上边 6:屏幕点击 竖向确认和取消,确认在下边 7:点击(右边一个按键) 7.查询设备超时时长： 7.1 功能概括: 无。 7.2 API ID: int get bindTimeout => _device?.bindConfirmTimeout ?? 0; 7.3 API参数说明: @return:bindTimeout 绑定超时 最长为15秒,0表示不超时。 8.查询设备超时时长： 8.1 功能概括: 无。 8.2 API ID: int get platform => _device?.platform ?? 0; 8.3 API参数说明: @return:platform 设备平台，包括： 0:nordic 10:realtek 8762x 20:cypress psoc6 30:Apollo3 40:汇顶 50:nordic+泰凌微 60:泰凌微+5340+no nand flash 70:汇顶+富瑞坤 80:5340 90:炬芯 99:思澈 9.查询设备形状： 9.1 功能概括: 无。 9.2 API ID: int get deviceShapeType => _device?.shape ?? 0; 9.3 API参数说明: @return:deviceShapeType 设备形状类型 0:无效 1:圆形 2:方形的 3:椭圆。 10.查询设备类型： 10.1 功能概括: 无。 10.2 API ID: int get deviceType => _device?.devType ?? 0; 10.3 API参数说明: @return:deviceType 设备类型 0:无效,1:手环,2:手表。 11.查询设备自定义表盘主版本： 11.1 功能概括: 无。 11.2 API ID: int get dialMainVersion => _device?.userDefinedDialMainVersion ?? 0; 11.3 API参数说明: @return:dialMainVersion 自定义表盘主版本 从1开始 0:不支持对应的自定义表盘功能。 12.查询设备绑定时是否显示‘✓ ’ui界面： 12.1 功能概括: 无。 12.2 API ID: int get showBindChoiceUi => _device?.showBindChoiceUi ?? 0; 12.3 API参数说明: @return:showBindChoiceUi 固件绑定时候显示勾ui界面 0:不需要 1:需要。 13.查询设备ID： 13.1 功能概括: 无。 13.2 API ID: int get deviceId => _device?.deivceId ?? 0; 13.3 API参数说明: @return:deviceId 设备id。 14.查询设备主版本号(一级版本号)： 14.1 功能概括: 无。 14.2 API ID: int get firmwareVersion => _device?.firmwareVersion ?? 0; 14.3 API参数说明: @return:firmwareVersion 设备固件主版本号。 15.查询设备sn序列号： 15.1 功能概括: 无。 15.2 API ID: String? get sn => _device?.snString(); 15.3 API参数说明: @return:sn 设备固件sn序列号。 16.查询设备BT名称： 16.1 功能概括: 无。 16.2 API ID: String? get btName => _device?.btNameString(); 16.3 API参数说明: @return:btName 设备BT名称。 17.查询设备固件三级版本号： 17.1 功能概括: 无。 17.2 API ID: int get fwVersion1 => _fw?.firmwareVersion1 ?? 0; int get fwVersion2 => _fw?.firmwareVersion2 ?? 0; int get fwVersion3 => _fw?.firmwareVersion3 ?? 0; 17.3 API参数说明: @return:fwVersion1,fwVersion2,fwVersion3，组成fwVersion1.fwVersion2.fwVersion3的三级版本号。 18.查询设备BT版本是否生效： 18.1 功能概括: 无。 18.2 API ID: int get fwBtFlag => _fw?.btFlag ?? 0; 18.3 API参数说明: @return:fwBtFlag，BT版本生效标志位 0:无效 1:说明固件有对应的BT固件。 19.查询设备BT三级版本号： 19.1 功能概括: 无。 19.2 API ID: int get fwBtVersion1 => _fw?.btVersion1 ?? 0; int get fwBtVersion2 => _fw?.btVersion2 ?? 0; int get fwBtVersion3 => _fw?.btVersion3 ?? 0; 19.3 API参数说明: @return:fwBtVersion1,fwBtVersion2,fwBtVersion3，组成fwBtVersion1.fwBtVersion2.fwBtVersion3的三级版本号。 20.查询设备BT所需要匹配的版本号： 20.1 功能概括: 无。 20.2 API ID: int get fwBtMatchVersion1 => _fw?.btMatchVersion1 ?? 0; int get fwBtMatchVersion2 => _fw?.btMatchVersion2 ?? 0; int get fwBtMatchVersion3 => _fw?.btMatchVersion3 ?? 0; 20.3 API参数说明: @return:fwBtMatchVersion1,fwBtMatchVersion2,fwBtMatchVersion3，组成fwBtMatchVersion1.fwBtMatchVersion2.fwBtMatchVersion3的三级版本号。 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDODeviceBindIntroduction.html":{"url":"doc/IDODeviceBindIntroduction.html","title":"IDO设备绑定接口说明","keywords":"","body":"{IDO设备绑定接口说明} 1.功能概述 提供查询绑定状态、发起绑定和解绑、监听绑定模式能力。 2.接口能力 1.查询绑定状态： 1.1 功能概括: 无 1.2 API ID: Future get isBinded; 1.3 API参数说明: @return:isBinded 是否绑定标志，bool类型，false:非绑定状态，true:绑定状态。 2.查询当前是否在绑定中： 2.1 功能概括: 绑定中，切换设备将受到限制。 2.2 API ID: bool get isBinding; 2.3 API参数说明: @return:isBinding 是否在绑定中的标志，bool类型，false:不在绑定中，true:绑定中。 3.发起绑定： 3.1 功能概括: 发起绑定，绑定成功后通过回调返回设备的设备信息和功能表信息。////TODO 3.2 API ID: /// 发起绑定 /// osVersion: 系统版本 (取主版本号) Stream startBind( {required int osVersion, required BindValueCallback deviceInfo, required BindValueCallback functionTable}); 3.3 API参数说明: @param:osVersion 系统版本，取主版本号。 @param:deviceInfo 发起绑定后，回调绑定设备的设备信息。 @param:functionTable 发起绑定后，回调绑定设备的功能表信息。 ////TODO 4.发起解绑： 4.1 功能概括: 对指定MAC的设备发起解绑，可强制解绑设备。 4.2 API ID: Future unbind({required String macAddress, bool isForceRemove = false}); 4.3 API参数说明: @param:macAddress MAC地址。 @param:isForceRemove 是否强制解绑设备，设备无响应也删除，true强制解绑和删除设备，默认为false。 5.发起授权码绑定： 5.1 功能概括: 无。 5.2 API ID: Stream setAuthCode(String code, int osVersion); 5.3 API参数说明: @param:code 配对码 @param:osVersion 系统版本(取主版本号) 6.注册更新模式监听回调： 6.1 功能概括: 监听目前的更新模式回调注册方法。////TODO 6.2 API ID: StreamSubscription listenUpdateSetModeNotification( void Function(int mode) func); 6.3 API参数说明: @param:func 回调方法，mode包括:0 没有绑定, 1 已经绑定, 2 升级模式, 3 重连, 4 泰凌微 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOMessageIconIntroduction.html":{"url":"doc/IDOMessageIconIntroduction.html","title":"IDO消息图标接口说明","keywords":"","body":"{IDO消息图标接口说明} 1.功能概述 提供设置国家编码、缓存服务器地址、APP Key、语言成员接口，提供查询更新图标状态、APP包名、获取&删除本地沙盒缓存、下发应用图标接口的能力。 2.接口能力 1.国家编码(IOS)： 1.1 功能概括: 提供国家编码成员，只有IOS使用。 1.2 API ID: String? ios_countryCode; 1.3 API参数说明: @param:ios_countryCode 国家编码，例如：美国 'US'，中国 'CN'。 2.缓存服务器地址(IOS)： 2.1 功能概括: 提供缓存服务器地址成员，只有IOS使用。 2.2 API ID: String? ios_baseUrlPath; 2.3 API参数说明: @param:ios_baseUrlPath 缓存服务器地址，例如：https://cn-user.idoocloud.com/api/ios/lookup/get，如果未赋值则走Apple接口(请求速度较慢)。 3.APP KEY(IOS)： 3.1 功能概括: 提供appkey成员，只有在使用缓存服务器才有效，只有IOS使用。 3.2 API ID: String? ios_appKey; 3.3 API参数说明: @param:ios_languageUnit 后台分配，每个app有独立的app key，具体咨询后台开发人员，例如：800a6444f9c0433c8e88741b6ddf1443。 4.语言单位(IOS)： 4.1 功能概括: 提供语言单位成员，只有IOS使用。 4.2 API ID: int? ios_languageUnit; 4.3 API参数说明: @param:ios_languageUnit 语言单位，未设语言单位，默认为英文。 跳转到语言单位内容说明 => IDO语言单位内容说明 5.查询图标更新状态： 5.1 功能概括: 提供查询当前的更新状态的能力。 5.2 API ID: Future get updating; 5.3 API参数说明: @return:updating 更新标志，Future bool类型，false:空闲，true:正在更新图标和名字。 6.查询设备支持默认app信息集合： 6.1 功能概括: 提供查询设备支持的默认消息提醒的APP包名的能力 ios 只有默认的包名 android 会包含默认的event_type 如果已经安装的应用则包含图标地址 6.2 API ID: Future> getDefaultAppInfo(); 6.3 API参数说明: @return:字符串集合，APP包名集合，包括： class IDOAppIconInfoModel { int? version; /// 版本号 int? iconWidth; /// icon宽度 int? iconHeight; /// icon高度 int? colorFormat; /// 颜色格式 int? blockSize; /// 压缩块大小 int? totalNum; /// 总个数 List? items; /// 包名详情集合 }; class IDOAppIconItemModel extends IDOAppInfo { int? itemId; /// 每个包名给一个id 由0开始 int? msgCount; /// 消息收到次数 String? iconCloudPath; /// icon 云端地址 int? state; /// 消息图标更新状态 0：不需要更新 1：需要更新icon ，2：需要更新app名，3：icon和app都需要更新 String? iconLocalPathBig;/// icon沙盒大图标地址(app列表上展示) String? countryCode; /// 国家编码 bool? isDownloadAppInfo; /// 是否已经下载APP信息 bool? isUpdateAppName; /// 是否已经更新应用名称 bool? isUpdateAppIcon; /// 是否已经更新应用图标 bool? isDefault; /// 是否为默认应用 } 7.查询缓存的APP信息(IOS)： 7.1 功能概括: 提供查询缓存中版本号、icon信息(尺寸、颜色格式、数量、压缩块大小)、包名具体详情的能力 如果有动态更新app图标则会缓存数据，获取数据显示到开关控制列表 7.2 API ID: Future getCacheInfoModel(); 7.3 API参数说明: @return:缓存的APP信息，包括： class IDOAppIconInfoModel { int? version; /// 版本号 int? iconWidth; /// icon宽度 int? iconHeight; /// icon高度 int? colorFormat; /// 颜色格式 int? blockSize; /// 压缩块大小 int? totalNum; /// 总个数 List? items; /// 包名详情集合 }; class IDOAppIconItemModel extends IDOAppInfo { int? itemId; /// 每个包名给一个id 由0开始 int? msgCount; /// 消息收到次数 String? iconCloudPath; /// icon 云端地址 int? state; /// 消息图标更新状态 0：不需要更新 1：需要更新icon ，2：需要更新app名，3：icon和app都需要更新 String? iconLocalPathBig;/// icon沙盒大图标地址(app列表上展示) String? countryCode; /// 国家编码 bool? isDownloadAppInfo; /// 是否已经下载APP信息 bool? isUpdateAppName; /// 是否已经更新应用名称 bool? isUpdateAppIcon; /// 是否已经更新应用图标 bool? isDefault; /// 是否为默认应用 } 8.查询Icon图片存放目录地址(IOS)： 8.1 功能概括: 提供查询Icon图片存放目录地址的能力，只有IOS使用。 8.2 API ID: Future getIconDirPath(); 8.3 API参数说明: @return:icon图片存放目录，字符串类型。 9.重置APP图标信息(IOS)： 9.1 功能概括: 提供删除本地沙盒缓存的图片的能力，只有IOS使用。 9.2 API ID: Future resetIconInfoData({required String macAddress, bool deleteIcon = true}); 9.3 API参数说明: @param:macAddress 需要清除数据的MAC地址 @param:deleteIcon 是否删除icon 图片文件，默认删除 @return:删除缓存结果，fasle:失败，true:成功。 10.注册监听更新消息图标(IOS)： 10.1 功能概括: 提供注册更新消息图标监听的能力，全局注册一次即可，只有IOS使用。 10.2 API ID: void registerListenUpdate(); 10.3 API参数说明: 无。 11.android已安装所有app信息集合： 11.1 功能概括: 提供查询android已安装所有app信息集合的能力，只有Android使用。 ios需要执行获取默认的APP包名列表信息，因为event_type是固件分配的(force强制更新应用名称) 11.2 API ID: Future> firstGetAllAppInfo({bool force = false}); 11.3 API参数说明: @param:force,强制更新Android 消息图标和名字 @param:消息应用图标内容，包括： class IDOAppIconInfoModel { int? version; /// 版本号 int? iconWidth; /// icon宽度 int? iconHeight; /// icon高度 int? colorFormat; /// 颜色格式 int? blockSize; /// 压缩块大小 int? totalNum; /// 总个数 List? items; /// 包名详情集合 }; class IDOAppIconItemModel extends IDOAppInfo { int? itemId; /// 每个包名给一个id 由0开始 int? msgCount; /// 消息收到次数 String? iconCloudPath; /// icon 云端地址 int? state; /// 消息图标更新状态 0：不需要更新 1：需要更新icon ，2：需要更新app名，3：icon和app都需要更新 String? iconLocalPathBig;/// icon沙盒大图标地址(app列表上展示) String? countryCode; /// 国家编码 bool? isDownloadAppInfo; /// 是否已经下载APP信息 bool? isUpdateAppName; /// 是否已经更新应用名称 bool? isUpdateAppIcon; /// 是否已经更新应用图标 bool? isDefault; /// 是否为默认应用 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-25 14:52:21 "},"doc/IDOLanguageUnit.html":{"url":"doc/IDOLanguageUnit.html","title":"IDO语言单位内容说明","keywords":"","body":"{IDO语言单位内容说明} 语言单位CODE及对应功能表： 代码 语言 功能表id 0x00(0) 无效 - 0x01(1) 中文 languageCh 0x02(2) 英文 languageEnglish 0x03(3) 法语 languageFrench 0x04(4) 德语 languageGerman 0x05(5) 意大利语 languageItalian 0x06(6) 西班牙语 languageSpanish 0x07(7) 日语 languageJapanese 0x08(8) 波兰语 languagePolish 0x09(9) 捷克语 languageCzech 0x0A(10) 罗马尼亚 languageRomanian 0x0B(11) 立陶宛语 languageLithuanian 0x0C(12) 荷兰语 languageDutch 0x0D(13) 斯洛文尼亚语 languageSlovenian 0x0E(14) 匈牙利语 languageHungarian 0x0F(15) 俄罗斯语 languageRussian 0x10(16) 乌克兰语 languageUkrainian 0x11(17) 斯洛伐克语 languageSlovak 0x12(18) 丹麦语 languageDanish 0x13(19) 克罗地亚语 languageCroatian 0x14(20) 印尼语 languageIndonesian 0x15(21) 韩语 languageKorean 0x16(22) 印地语 languageHindi 0x17(23) 葡萄牙语 languagePortuguese 0x18(24) 土耳其语 languageTurkish 0x19(25) 泰国语 languageThai 0x1A(26) 越南语 languageVietnamese 0x1B(27) 缅甸语 languageBurmese 0x1C(28) 菲律宾语 languageFilipino 0x1D(29) 繁体中文 languageTraditionalChinese 0x1E(30) 希腊语 languageGreek 0x1F(31) 阿拉伯语 languageArabic 0x20(32) 瑞典语 languageSweden 0x21(33) 芬兰语 languageFinland 0x22(34) 波斯语 languagePersia 0x23(35) 挪威语 languageNorwegian Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataIconIntroduction.html":{"url":"doc/IDOExchangeDataIconIntroduction.html","title":"IDO数据交换接口说明","keywords":"","body":"{IDO数据交换接口说明} 1.功能概述 提供发起数据交换、监听BLE设备的回复及BLE设备发起的数据交换的能力。 2.接口能力 1.查询是否支持V3运动数据交换： 1.1 功能概括: 无。 1.2 API ID: bool get supportV3ActivityExchange; 1.3 API参数说明: @return:bool 支持功能表，fasle:不支持，true:支持。 2.查询数据交换状态： 2.1 功能概括: 无。 2.2 API ID: ExchangeStatus? get status; 2.3 API参数说明: @param:ExchangeStatus 数据交换状态，包括： enum ExchangeStatus { init = 0, /// 初始化 appStart = 1, /// app发起开始 appStartReply = 2, /// app发起开始 ble回复 appEnd = 3, /// app发起结束 appEndReply = 4, /// app发起结束 ble回复 appPause = 5, /// app发起暂停 appPauseReply = 6, /// app发起暂停 ble回复 appRestore = 7, /// app发起恢复 appRestoreReply = 8, /// app发起恢复 ble回复 appIng = 9, /// app发起交换 appIngReply = 10, /// app发起交换 ble回复 getActivity = 11, /// 获取最后运动数据 getActivityReply = 12, /// 获取最后运动数据 ble回复 getHr = 13, /// 获取一分钟心率 getHrReply = 14, /// 获取一分钟心率 ble回复 getActivityGps = 15, /// 获取活动GPS getActivityGpsReply = 16, /// 获取活动GPS ble回复 appStartPlan = 17, /// app开始运动计划 appStartPlanReply = 18, /// app开始运动计划 ble回复 appPausePlan = 19, /// app暂停运动计划 appPausePlanReply = 20, /// app暂停运动计划 ble回复 appRestorePlan = 21, /// app恢复运动计划 appRestorePlanReply = 22, /// app恢复运动计划 ble回复 appEndPlan = 23, /// app结束运动计划 appEndPlanReply = 24, /// app结束运动计划 ble回复 appSwitchAction = 25, /// app切换动作 appSwitchActionReply= 26, /// app结束运动计划 ble回复 appBlePause = 27, /// app发起的运动 ble发起暂停 appBlePauseReply = 28, /// app发起的运动 ble发起暂停 app回复 appBleRestore = 29, /// app发起的运动 ble发起恢复 appBleRestoreReply = 30, /// app发起的运动 ble发起恢复 app回复 appBleEnd = 31, /// app发起的运动 ble发起结束 appBleEndReply = 32, /// app发起的运动 ble发起结束 app回复 bleStart = 33, /// ble发起的运动 ble发起开始 bleStartReply = 34, /// ble发起的运动 ble发起开始 app回复 bleEnd = 35, /// ble发起的运动 ble发起结束 bleEndReply = 36, /// ble发起的运动 ble发起结束 app回复 blePause = 37, /// ble发起的运动 ble发起暂停 blePauseReply = 38, /// ble发起的运动 ble发起暂停 app回复 bleRestore = 39, /// ble发起的运动 ble发起恢复 bleRestoreReply = 40, /// ble发起的运动 ble发起恢复 app回复 bleIng = 41, /// ble发起的运动 ble发起交换 bleIngReply = 42, /// ble发起的运动 ble发起交换 app回复 bleStartPlan = 43, /// ble开始运动计划 blePausePlan = 44, /// ble暂停运动计划 bleRestorePlan = 45, /// ble恢复运动计划 bleEndPlan = 46, /// ble结束运动计划 bleSwitchAction = 47, /// ble切换动作 bleOperatePlanReply = 48, /// ble操作运动计划 app回复 } 3.APP执行数据交换： 3.1 功能概括: 提供发起运动开始、结束、暂停、恢复，运动中的数据交互及执行运动计划的能力。 3.2 API ID: void appExec({required IDOBaseExchangeModel model}); 3.3 API参数说明: @param:执行类型，包括： IDOAppStartExchangeModel // 执行发起运动开始 IDOAppEndExchangeModel // 执行发起运动结束 IDOAppIngExchangeModel // 执行交换运动数据 IDOAppPauseExchangeModel // 执行交换运动数据暂停 IDOAppRestoreExchangeModel // 执行交换运动数据恢复 IDOAppIngV3ExchangeModel // 执行v3交换运动数据 IDOAppOperatePlanExchangeModel // 执行操作运动计划 =>跳转到APP发起数据交换模型说明 4.APP执行数据交换回复： 4.1 功能概括: 提供当由设备发起运动/运动执行运动交换时，APP回复设备请求的能力。 4.2 API ID: void appReplyExec({required IDOBaseExchangeModel model}); 4.3 API参数说明: @param:执行类型，包括： IDOBleStartReplyExchangeModel // app回复ble设备发送交换运动数据开始 IDOBleIngReplyExchangeModel // app回复ble设备交换运动数据过程中 IDOBleEndReplyExchangeModel // app回复ble设备发送交换运动数据结束 IDOBlePauseReplyExchangeModel // app回复ble设备发送交换运动数据暂停 IDOBleRestoreReplyExchangeModel // app回复ble设备发送交换运动数据恢复 IDOBleOperatePlanReplyExchangeModel // app回复ble设备操作运动计划 IDOAppBlePauseReplyExchangeModel // app回复ble设备发送交换运动数据暂停 IDOAppBleRestoreReplyExchangeModel // app回复ble设备发送交换运动数据恢复 IDOAppBleEndReplyExchangeModel // app回复ble设备发送交换运动数据结束 =>App回复BLE设备发起交换运动的模型说明 5.APP获取多运动交互结束后的多运动数据： 5.1 功能概括: 无。 5.2 API ID: Stream getLastActivityData(); 5.3 API参数说明: @return:多运动数据模型IDOAppActivityDataV3ExchangeModel，模型成员包括： int? day; /// 日期 int? hour; /// 时 int? minute; /// 分 int? second; /// 秒 int? sportType; /// 运动类型 int? year; /// 年份 int? month; /// 月份 int? version; /// 协议库版本号 int? hrInterval; /// 心率间隔 单位分钟 int? step; /// 步数 int? durations; /// 持续时间 单位秒 int? calories; /// 卡路里 单位大卡 int? distance; /// 距离 单位米 int? burnFatMins; /// 脂肪燃烧的心率持续时间 单位分钟 int? aerobicMins; /// 有氧运动的持续时间 单位分钟 int? limitMins; /// 极限锻炼的持续时间 单位分钟 int? warmUp; /// 热身运动 int? fatBurning; /// 脂肪燃烧 int? aerobicExercise; /// 有氧训练 int? anaerobicExercise; /// 无氧训练 int? extremeExercise; /// 极限训练 int? warmUpTime; /// 热身运动的累计时长 单位秒 int? fatBurningTime; /// 脂肪燃烧的累计时长 单位秒 int? aerobicExerciseTime; /// 有氧运动的累计时长 单位秒 int? anaerobicExerciseTime;/// 无氧运动的累计时长 单位秒 int? extremeExerciseTime; /// 极限锻炼的累计时长 单位秒 int? avgSpeed; /// 平均速度 单位km/h int? maxSpeed; /// 最快速度 单位km/h int? avgStepStride; /// 平均步幅 单位cm int? maxStepStride; /// 最大步幅 单位cm int? kmSpeed; /// 平均公里配速 单位秒/百米 int? fastKmSpeed; /// 最快公里配速 单位秒/百米 int? avgStepFrequency; /// 平均步频 单位步/分钟 int? maxStepFrequency; /// 最大步频 单位步/分钟 int? avgHrValue; /// 平均心率 单位BPM int? maxHrValue; /// 最大心率 单位BPM int? recoverTime; /// 恢复时长 单位小时 app收到该数据之后，每过1小时需要自减1 int? vo2max; /// 最大摄氧量 单位 ml/kg/min int? trainingEffect; /// 训练效果 范围：1.0 - 5.0 （扩大10倍传输） int? grade; /// 摄氧量等级 1：低等 2：业余 3：一般 4：平均 5：良好 6：优秀 7：专业 int? stepsFrequencyCount; /// 步频详情个数 int? miSpeedCount; /// 英里配速个数 int? realSpeedCount; /// 实时速度个数 int? paceSpeedCount; /// 实时配速个数 int? kmSpeedCount; /// 公里配速详情个数 int? actionDataCount; /// 本次动作训练个数 List? kmSpeeds; /// 每公里耗时秒数 配速集合 List? stepsFrequency; /// 步频集合 单位步/分钟 List? itemsMiSpeed; /// 英里配速数组 List? itemRealSpeed; /// 实时速度数组 单位km/h List? paceSpeedItems; /// 实时配速数组 /// 动作完成内容 /// type : 动作类型 1快走；2慢跑; 3中速跑；4快跑 /// heart_con_value : 每个动作心率控制 /// time : 动作完成时间 单位秒 /// goal_time ：动作目标时间 List>? actionData; 6.APP获取多运动交互结束后的心率数据： 6.1 功能概括: 无。 6.2 API ID: Stream getActivityHrData(); 6.3 API参数说明: @return:一分钟心率模型IDOAppHrDataExchangeModel，模型成员包括： int? day; /// 日期 int? hour; /// 时 int? minute; /// 分 int? second; /// 秒 int? sportType; /// 运动类型 int? version; /// 协议版本号 int? heartRateHistoryLen;/// 心率数据数组长度 最大60 int? interval; /// 心率间隔 单位秒 List? heartRates; /// 心率数据数组 存一分钟的心率数据,1s存一个 7.APP监听设备发起数据交换： 7.1 功能概括: 提供监听设备主动发起数据交换的能力，监听到后APP执行数据交换回复。 7.2 API ID: Stream appListenBleExec(); 7.3 API参数说明: @return:监听响应类型，包括： IDOBleStartExchangeModel // ble设备发送交换运动数据开始 IDOBleIngExchangeModel // ble设备交换运动数据过程中 IDOBleEndExchangeModel // ble设备发送交换运动数据结束 IDOBlePauseExchangeModel // ble设备发送交换运动数据暂停 IDOBleRestoreExchangeModel // ble设备发送交换运动数据恢复 IDOBleOperatePlanExchangeModel // ble设备操作运动计划 IDOAppBlePauseExchangeModel // ble设备通知交换运动数据暂停 IDOAppBleRestoreExchangeModel // ble设备通知交换运动数据恢复 IDOAppBleEndExchangeModel // ble设备通知交换运动数据结束 =>跳转到BLE发起数据交换模型说明 8.APP监听APP执行数据交换后设备响应： 8.1 功能概括: 提供监听APP主动发起交换数据后，设备响应的能力。 8.2 API ID: Stream appListenAppExec(); 8.3 API参数说明: @return:监听响应类型，包括： IDOAppStartReplyExchangeModel // ble设备的回复app开始发起运动 IDOAppEndReplyExchangeModel // ble设备的回复app发起运动结束 IDOAppIngReplyExchangeModel // ble设备的回复app交换运动数据 IDOAppPauseReplyExchangeModel // ble设备的回复app交换运动数据暂停 IDOAppRestoreReplyExchangeModel // ble设备的回复app交换运动数据恢复 IDOAppIngV3ReplyExchangeModel // ble设备的回复appv3交换运动数据 IDOAppOperatePlanReplyExchangeModel // ble设备的回复app操作运动计划 =>跳转到BLE响应APP发起数据交换的模型说明 9.APP监听交换V2运动数据响应 9.1 功能概括: 提供监听APP执行V2交换运动数据后BLE设备响应的能力。 9.2 API ID: Stream v2_exchangeData(); 9.3 API参数说明: @return:监听返回模型IDOV2ExchangeModel，模型成员包括： int? day; /// 日期 int? hour; /// 时 int? minute; /// 分 int? second; /// 秒 int? sportType; /// 运动类型 int? operate; /// 1:请求app打开gps 2：发起运动请求 int? targetValue; /// 0: 无目标,1: 重复次数，单位:次,2: 距离,单位:米,3:卡路里,单位:大卡,4:时长,单位:分钟,5:步数,单位:步 int? targetType; /// 目标数值 int? forceStart; /// 是否强制开始 0:不强制,1:强制 int? retCode; /// 0:成功; 1:设备已经进入运动模式失败;2: 设备电量低失败; 3:手环正在充电 4:正在使用Alexa 5:通话中 int? calories; /// 卡路里 (单位:Kcal) int? distance; /// 距离 (单位:米) int? durations; /// 持续时间 (单位:秒钟) int? step; /// 步数 (单位:步) int? avgHr; /// 平均心率 int? maxHr; /// 最大心率 int? curHr; /// 当前心率 int? hrSerial; /// 序列号 int? burnFatMins; /// 燃烧脂肪时长 (单位：分钟) int? aerobicMins; /// 有氧时长 (单位：分钟) int? limitMins; /// 极限时长 (单位：分钟) bool? isSave; /// 是否存储数据 int? status; /// 0:全部有效 1:距离无效 2:gps信号弱 int? interval; /// 心率间隔 List? hrValues = [];/// 心率数据集合 10.APP监听交换V3运动数据响应 10.1 功能概括: 提供监听APP执行V3交换运动数据后BLE设备响应的能力。 10.2 API ID: Stream v3_exchangeData(); 10.3 API参数说明: @return:监听返回模型IDOV3ExchangeModel，模型成员包括： int? year; /// 训练课程年份 int? month; /// 训练课程月份 int? day; /// 日期 int? hour; /// 时 int? minute; /// 分 int? second; /// 秒 int? sportType; /// 运动类型 int? planType; /// 计划类型 1：跑步计划3km 2：跑步计划5km 3：跑步计划10km 4：半程马拉松训练(二期) 5：马拉松训练（二期） int? actionType; /// 动作类型 1:快走 2:慢跑 3:中速跑 4快跑 5:结束课程运动(还要等待用户是否有自由运动) 6:课程结束后自由运动(此字段当operate为5起作用) int? version; /// 数据版本 int? operate; /// 1:请求app打开gps 2：发起运动请求 int? targetValue;/// 0:无目标,1:重复次数,单位：次,2:距离,单位：米,3:卡路里,单位：大卡,4:时长,单位：分钟,5:步数,单位：步 int? targetType; /// 目标数值 int? forceStart; /// 是否强制开始 0:不强制,1:强制 int? retCode; /// 0:成功; 1:设备已经进入运动模式失败;2: 设备电量低失败; 3:手环正在充电 4:正在使用Alexa 5:通话中 int? calories; /// 卡路里 (单位:kcal) int? distance; /// 距离 (单位:米) int? durations; /// 持续时间 (单位:秒钟) int? step; /// 步数 (单位:步) int? swimPosture;/// 0: 混合泳; 1: 自由泳; 2: 蛙泳; 3: 仰泳; 4: 蝶泳; int? status; /// 手环返回的状态 开始:1,暂停:2, 结束:3,0:无效状态 int? signalFlag; /// 信号强弱 0: 表示信号弱， 1: 表示信号强 bool? isSave; /// 是否存储数据 int? realTimeSpeed; /// app计算显示实时速度 单位km/h 100倍 15秒一个记录 int? realTimePace; /// app计算显示实时配速 单位 s int? interval; /// 心率间隔 int? hrCount; /// 心率个数 int? burnFatMins; /// 燃烧脂肪时长 (单位：分钟) int? aerobicMins; /// 有氧时长 (单位：分钟) int? limitMins; /// 极限时长 (单位：分钟) List? hrValues = []; /// 心率数据集合 int? warmUpSecond; /// 热身锻炼时长(秒钟) int? anaeroicSecond; /// 无氧锻炼时长(秒钟) int? fatBurnSecond; /// 燃脂锻炼时长(秒钟) int? aerobicSecond; /// 有氧锻炼时长(秒钟) int? limitSecond; /// 极限锻炼时长(秒钟) int? avgHr; /// 平均心率 int? maxHr; /// 最大心率 int? curHr; /// 当前心率 int? warmUpValue; /// 热身运动值 int? fatBurnValue; /// 脂肪燃烧运动值 int? aerobicValue; /// 有氧运动值 int? limitValue; /// 极限运动值 int? anaerobicValue; /// 无氧运动值 int? avgSpeed; /// 平均速度 大美味哦km/h int? maxSpeed; /// 最大速度 单位km/h int? avgStepFrequency; /// 平均步频 单位步/分钟 int? maxStepFrequency; /// 最大步频 单位步/分钟 int? avgStepStride; /// 平均步幅 单位厘米 int? maxStepStride; /// 最大步幅 单位厘米 int? kmSpeed; /// 平均公里配速 单位厘米 int? fastKmSpeed; /// 最快公里配速 单位厘米 int? kmSpeedCount; /// 公里配速个数 List? kmSpeeds = []; /// 公里配速集合 int? mileCount; /// 英里配速个数 List? mileSpeeds = []; /// 英里配速集合 int? stepsFrequencyCount; /// 步频个数 List? stepsFrequencys = [];/// 步频集合 int? trainingEffect; /// 训练效果 单位：无 范围 1.0 ~ 5.0 （*10倍） int? anaerobicTrainingEffect; /// 无氧训练效果 单位：无 范围 1.0 ~ 5.0 （*10倍） int? vo2Max; /// 最大摄氧量 单位：毫升/公斤/分钟 范围0-80 int? actionDataCount; /// 本次动作训练个数 int? inClassCalories; /// 课程内运动热量 单位千卡 int? completionRate; /// 动作完成率 0—100 int? hrCompletionRate; /// 心率控制率 0—100 int? recoverTime; /// 恢复时长：单位小时(app收到该数据之后，每过一小时需要自减一) int? avgWeekActivityTime; /// 上个月平均每周的运动时间 单位分钟 int? grade; /// 摄氧量等级 1:低等 2:业余 3:一般 4：平均 5：良好 6：优秀 7：专业 /// 动作完成内容 /// type : 动作类型 1快走；2慢跑; 3中速跑；4快跑 /// heart_con_value : 每个动作心率控制 /// time : 动作完成时间 单位秒 /// goal_time ：动作目标时间 List>? actionData = []; int? trainingOffset; /// 训练的课程日期偏移 从0开始 int? countHour; /// 运动倒计时 int? countMinute; /// 运动倒计时分 int? countSecond; /// 运动倒计时秒 int? time; /// 动作目标时间 单位秒 int? lowHeart; /// 心率范围低值 int? heightHeart; /// 心率范围高值 int? paceSpeedCount; /// 实时配速个数 List? paceSpeeds = [];/// 实时配速数组 传过来的是秒 每5s算一次 int? realSpeedCount; /// 实时速度个数 List? realSpeeds = [];/// 实时速度数组 传过来的是秒 每5s算一次 int? intervalSecond; /// gps 坐标点时间间隔 int? gpsCount; /// gps个数 /// gps数据详情集合 [{'latitude':0,'longitude':0}] List>? gpsData = []; 11.APP获取多运动交互一段时间的gps数据： 11.1 功能概括: 无。 11.2 API ID: Stream getActivityGpsData(); 11.3 API参数说明: @return:GPS数据模型，模型成员包括： int? day; /// 日期 int? hour; /// 时 int? minute; /// 分 int? second; /// 秒 int? sportType; /// 运动类型 int? version; /// 协议版本号 int? intervalSecond; /// 坐标点时间间隔 单位秒 int? gpsCount; /// 坐标点个数 /// gps数据详情集合 [{'latitude':0,'longitude':0}] List>? gpsData; Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-11-27 09:59:07 "},"doc/IDOExchangeDataModal/IDOExchangeDataAppSendModel.html":{"url":"doc/IDOExchangeDataModal/IDOExchangeDataAppSendModel.html","title":"APP发起数据交换模型说明","keywords":"","body":"{APP发起数据交换模型说明} 1.APP发送交换运动数据开始模型： 1.1 模型ID class IDOAppStartExchangeModel extends IDOBaseExchangeModel 1.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? targetType; /// 目标类型 int? targetValue; /// 目标值 int? forceStart; /// 是否强制开始 0:不强制,1:强制 int? vo2max; /// 最大摄氧量 单位 ml/kg/min int? recoverTime; /// 恢复时长：单位小时 int? avgWeekActivityTime; /// 上个月平均每周的运动时间 单位分钟 =>跳转到jsonData说明(内部开发使用) 2.APP发送交换运动数据结束模型： 2.1 模型ID class IDOAppEndExchangeModel extends IDOBaseExchangeModel 2.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? duration; /// 持续时长（单位：s） int? calories; /// 卡路里，单位大卡 int? distance; /// 距离（单位：米） int? isSave; /// 0:不保存，1:保存 =>跳转到jsonData说明(内部开发使用) 3.APP交换运动数据过程中模型： 3.1 模型ID class IDOAppIngExchangeModel extends IDOBaseExchangeModel 3.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? duration; /// 持续时长 单位s int? calories; /// 卡路里 单位大卡 int? distance; /// 距离 单位0.01km int? status; /// 0:全部有效 1:距离无效 2:GPS信号弱 =>跳转到jsonData说明(内部开发使用) 4.APP发送交换运动数据暂停模型： 4.1 模型ID class IDOAppPauseExchangeModel extends IDOBaseExchangeModel 4.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? pauseHour; /// 暂停时 int? pauseMinute; /// 暂停分 int? pauseSecond; /// 暂停秒 =>跳转到jsonData说明(内部开发使用) 5.APP发送交换运动数据恢复模型： 5.1 模型ID class IDOAppRestoreExchangeModel extends IDOBaseExchangeModel 5.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 =>跳转到jsonData说明(内部开发使用) 6.APP执行V3交换运动数据模型： 6.1 模型ID class IDOAppIngV3ReplyExchangeModel extends IDOBaseExchangeModel 6.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? version; /// 协议版本号 int? signal; /// 0: 表示信号弱 2: 表示信号强 int? distance; /// app距离 int? speed; /// app计算显示实时配速，单位km/h，100倍 int? duration; /// 持续时间 int? calories; /// 卡路里 =>跳转到jsonData说明(内部开发使用) 7.APP操作运动计划模型： 7.1 模型ID class IDOAppOperatePlanExchangeModel extends IDOBaseExchangeModel 7.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? operate; /// 1:开始运动 2：暂停运动 3:恢复运动 4：结束运动 5: 切换动作 int? trainingOffset;/// 训练的课程日期偏移 从0开始 int? planType; /// 计划类型 1:跑步计划3km 2:跑步计划5km 3:跑步计划10km 4:半程马拉松训练(二期) 5:马拉松训练(二期) =>跳转到jsonData说明(内部开发使用) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-23 14:21:01 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchStart.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchStart.html","title":"APP发送交换运动数据开始","keywords":"","body":"APP发送交换运动数据开始命令 App下发的json字段: 字段名 字段类型 字段说明 day int 开始时间 日 hour int 开始时间 时 minute int 开始时间 分 second int 开始时间 秒 sport_type int 运动类型 target_type int 运动目标0：无目标1：重复次数 单位：次2：距离 单位：米3：卡路里 单位：大卡4：时长 单位：分钟5：步数 单位：步 target_value int 目标值 force_start int 强制开始1：强制开始有效，0：强制开始无效（只有用户可以使用） vo2max int 最大摄氧量 单位 ml/kg/min(app收到手表发送的该数据之后，仅起保存作用) recover_time int 恢复时长单位小时（app收到该数据之后，每过一小时需要自减一） avg_week_activity_time int 上个月平均每周的运动时间 单位分钟 （运动总时间 = （手机单独发起的运动 + 手机连接手环发起的运动 + 手环单独发起的运动）/4） 示例： { \"day\":26, \"hour\":10, \"minute\":43, \"second\":10, \"sport_type\":10, \"target_type\":1, \"target_value\":1, \"force_start\":0, \"vo2max\":10, \"recover_time\":1, \"avg_week_activity_time\":1 } App收到的json字段： 字段名 字段类型 字段说明 ret_code int 0：成功1：设备已经进入运动模式失败2：设备电量低失败3：充电中4：处于alexa不让开始 示例： { \"ret_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchEnd.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchEnd.html","title":"APP发送交换运动数据结束","keywords":"","body":"APP发送交换运动数据结束 App下发的json字段: 字段名 字段类型 字段说明 day int 开始时间 日 hour int 开始时间 时 minute int 开始时间 分 second int 开始时间 秒 duration int 持续时长 单位s calories int 卡路里 单位大卡 distance int 距离 单位0.01km sport_type int 运动类型 is_save int 0:不保存，1:保存 示例： { \"day\":26, \"hour\":10, \"minute\":50, \"second\":50, \"duration\":10, \"calories\":10, \"distance\":10, \"sport_type\":1, \"is_save\":0 } App收到的json字段： 字段名 字段类型 字段说明 err_code int err_code0:成功；1:设备没进入运动模式失败2:设备未开启运动(设备已结束运动) step int 步数/次数 calories int 卡路里 单位：大卡 distance int 距离 单位：0.01km avg_hr_value int 平均心率 max_hr_value int 最大心率 burn_fat_mins int 脂肪燃烧时长 单位分钟 aerobic_mins int 心肺锻炼时长 单位分钟 limit_mins int 极限锻炼时长 单位分钟 示例： { \"err_code\":0, \"step\":200, \"calories\":20, \"distance\":50, \"avg_hr_value\":80, \"max_hr_value\":90, \"burn_fat_mins\":0, \"aerobic_mins\":0, \"limit_mins\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchData.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchData.html","title":"APP交换运动数据过程","keywords":"","body":"APP交换运动数据过程 App下发的json字段: 字段名 字段类型 字段说明 day int 开始时间 日 hour int 开始时间 时 minute int 开始时间 分 second int 开始时间 秒 duration int 持续时长 单位s calories int 卡路里 单位大卡 distance int 距离 单位0.01km status int 0：全部有效1：距离无效2：gps信号弱 示例： { \"day\":26, \"hour\":10, \"minute\":46, \"second\":30, \"duration\":80, \"calories\":300, \"distance\":500, \"status\":0 } App收到的json字段： 字段名 字段类型 字段说明 status int 1:成功2:设备没有进入运动模式失败 step int 步数/次数 calories int 卡路里 单位：大卡 distance int 距离 单位：0.01km cur_hr_value int 心率数据当前心率 interval_second int 心率间隔 单位s hr_value_serial int 序列号 hr_value int [] 心率值数据 示例： { \"status\":1, \"step\":200, \"calories\":200, \"distance\":50, \"cur_hr_value\":80, \"interval_second\":5, \"hr_value_serial\":0, \"hr_value\":[ 85, 86, 90, 79, 88, 92 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchPause.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchPause.html","title":"APP发送交换运动数据暂停","keywords":"","body":"APP发送交换运动数据暂停 App下发的json字段: 字段名 字段类型 字段说明 day int 开始时间 日 hour int 开始时间 时 minute int 开始时间 分 second int 开始时间 秒 sport_hour int sport_minute int sport_second int 示例： { \"day\":26, \"hour\":10, \"minute\":54, \"second\":50, \"sport_hour\":10, \"sport_minute\":54, \"sport_second\":50 } App收到的json字段： 字段名 字段类型 字段说明 err_code int err_code0：成功1：没有进入运动模式失败 示例： { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchRestore.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchRestore.html","title":"APP发送交换运动数据恢复","keywords":"","body":"APP发送交换运动数据恢复 App下发的json字段: 字段名 字段类型 字段说明 day int 恢复时间 日 hour int 恢复时间 时 minute int 恢复时间 分 second int 恢复时间 秒 示例： { \"day\":26, \"hour\":10, \"minute\":55, \"second\":53 } App收到的json字段： 字段名 字段类型 字段说明 err_code int err_code0：成功1：没有进入运动模式失败 示例： { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOV3ActivityDataExchange.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOV3ActivityDataExchange.html","title":"V3多运动数据交互","keywords":"","body":"V3多运动数据交互 功能表：syncV3ActivityExchangeData 【syncExchangeDataReplyAddRealTimeSpeedPaceV3，setSupportSportPlan，setSupportExchangeSetGpsCoordinates】 Flutter示例： /// app发起数据v3交换过程事件号 exchangeAppV3Ing( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_activity_data_exchange), /// app发起数据v3交换过程 libManager.send(evt: CmdEvtType.exchangeAppV3Ing, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议版本号 默认0 固件开启功能表syncExchangeDataReplyAddRealTimeSpeedPaceV3时version=16 固件开启功能表setSupportSportPlan时version=32 type int 运动类型 signal_flag int 0 ：表示信号弱 1 ：表示信号强 distance int app距离单位米app信号强的时候ble使用app的距离数据计算 app信号弱的时候ble不使用app的数据，app显示使用手环的数据 real_time_speed int app计算显示实时配速，预留单位km/h，100倍 duration int 持续时间 预留单位米 calories int 卡路里 预留单位Kcal gps_info_count int gps坐标个数，最大支持下发30功能表setSupportExchangeSetGpsCoordinates开启时支持 gps 集合 gps坐标详情，latitude&longitude的集合最大支持下发30组功能表setSupportExchangeSetGpsCoordinates开启时支持 字段名 字段类型 字段说明 latitude int 纬度下发的数值 x10^6 正数北纬 负数南纬 longitude int 经度 下发的数值 x10^6正数东经 负数西经 示例： { \"version\":0, \"type\":31, \"signal_flag\":0, \"distance\":0, \"real_time_speed\":0, \"duration\":0, \"calories\":0, \"gps_info_count\" : 2, \"gps\" : [ { \"latitude\" :22543100, \"longitude\" :114057800 }, { \"latitude\" :23129100, \"longitude\" :113264400 } ] } App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号0：基础版本16：biggerfive定制项目需要固件开启syncExchangeDataReplyAddRealTimeSpeedPaceV332：新增跑步计划数据 需要固件开启功能表setSupportSportPlan时version=32 type int 运动类型act_type为0有效 day int 数据时间 日 hour int 数据时间 时 minute int 数据时间 分 second int 数据时间 秒 heart_rate int 心率数据单位:bpm distance int 距离 单位根据单位设置的单位显示 real_time_speed int 实时速度，单位km/h，扩大100倍 km_speed int 实时公里配速 单位s/公里 real_time_calories int 动态卡路里 steps int 步数 swim_posture int 主泳姿 status int 状态 0：无效1：开始2：手动暂停3：结束4：自动暂停 duration int 持续时间 秒钟数据 real_time_speed_pace int 实时的配速 单位秒 5秒使用滑动平均，第5秒使用1-5秒数据，第6秒使用2-6秒数据。第1-4秒不显示配速或速度需要固件开启功能表syncExchangeDataReplyAddRealTimeSpeedPaceV3功能表未开启返回0 te int 有氧训练效果等级 单位无 范围 0-50 扩大10倍传输需要固件开启功能表syncExchangeDataReplyAddRealTimeSpeedPaceV3功能表未开启返回0 tean int 无氧运动训练效果等级 单位无 范围 0-50 扩大10倍传输需要固件开启功能表syncExchangeDataReplyAddRealTimeSpeedPaceV3功能表未开启返回0 action_type int 动作类型 1快走2慢跑3中速跑4快跑 5结束课程运动 （还要等待用户是否有自由运动）6课程结束后自由运动（此字段当operate为5起作用）运动累积时间=课程内训练时间+课程结束后计时需要固件开启功能表setSupportSportPlan 功能表未开启返回0 count_hour int action_type = 1—5时，该字段是运动倒计时时间（注：时间递减）action_type = 6时，该字段是课程结束后计时（注：时间递增）需要固件开启功能表setSupportSportPlan 功能表未开启返回0 count_minute int action_type = 1—5时，该字段是运动倒计时时间（注：时间递减）action_type = 6时，该字段是课程结束后计时（注：时间递增）需要固件开启功能表setSupportSportPlan 功能表未开启返回0 count_second int action_type = 1—5时，该字段是运动倒计时时间（注：时间递减）action_type = 6时，该字段是课程结束后计时（注：时间递增）需要固件开启功能表setSupportSportPlan 功能表未开启返回0 示例： { \"version\":0, \"type\":0, \"day\":0, \"hour\":0, \"minute\":0, \"second\":0, \"heart_rate\":0, \"distance\":0, \"real_time_speed\":0, \"km_speed\":0, \"real_time_calories\":0, \"steps\":0, \"swim_posture\":0, \"status\":0, \"duration\":0, \"real_time_speed_pace\":0, \"te\":0, \"tean\":0, \"action_type\":0, \"count_hour\":0, \"count_minute\":0, \"count_second\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-11-24 15:11:44 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOV3SetCutoverSport.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOV3SetCutoverSport.html","title":"V3APP通知设备运动过程切换","keywords":"","body":"V3APP通知设备运动过程切换 Flutter示例： /// app运动计划操作事件号 exchangeAppPlan( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_app_to_ble_sport_cutover), /// app运动计划操作 libManager.send(evt: CmdEvtType.exchangeAppPlan, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 operate int 操作1：开始运动 2：暂停运动 3：恢复运动 4：结束运动 5：切换动作 type int 计划类型1：跑步计划3km2：跑步计划5km3：跑步计划10km4：半程马拉松训练（二期）5：马拉松训练（二期）6：跑后拉伸7：6分钟轻松跑 8：10分钟轻松跑 9：15分钟轻松跑 10：走跑结合初级 11：走跑结合进阶 12：走跑结合强化 training_offset int 训练的课程日期偏移 从零开始 hour int 开始、暂停、恢复、结束时间 由operate决定是什么时间类型时间 时 minute int 时间 分 second int 时间 秒 示例： { \"operate\":1, \"type\":1, \"action_type\":1, \"year\":2022, \"month\":12, \"day\":26, \"time\":200, \"low_heart\":80, \"height_heart\":110, \"cur_day\":1, \"hour\":0, \"minute\":0, \"second\": 0 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 0:成功 其他失败 operate int 操作1：开始运动2：暂停运动 3：恢复运动4：结束运动 5：切换动作 type int 计划类型1：跑步计划3km2：跑步计划5km3：跑步计划10km4：半程马拉松训练（二期）5：马拉松训练（二期） action_type int 动作类型 1：快走2：慢跑3：中速跑4：快跑5：结束课程运动（还要等待用户是否有自由运动）（此字段当operate为5起作用） 示例： { \"err_code\":0 \"operate\":1, \"type\":1, \"action_type\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-22 20:17:27 "},"doc/IDOExchangeDataModal/IDOExchangeDataBleNoticeAppReplyModel.html":{"url":"doc/IDOExchangeDataModal/IDOExchangeDataBleNoticeAppReplyModel.html","title":"App回复BLE设备发起交换运动的模型说明","keywords":"","body":"{App回复BLE设备发起交换运动的模型说明} 1.APP回复BLE设备发送交换运动数据开始模型： 1.1 模型ID class IDOBleStartReplyExchangeModel extends IDOBaseExchangeModel 1.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? operate; /// 1:请求app打开gps 2:发起运动请求 int? retCode; /// 0:成功 非0失败 =>跳转到jsonData说明(内部开发使用) 2.APP回复BLE设备交换运动数据过程中模型： 2.1 模型ID class IDOBleIngReplyExchangeModel extends IDOBaseExchangeModel 2.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? distance; /// 距离 单位：0.01km =>跳转到jsonData说明(内部开发使用) 3.APP回复BLE设备发送交换运动数据结束模型： 3.1 模型ID class IDOBleEndReplyExchangeModel extends IDOBaseExchangeModel 3.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? retCode; /// 0:成功 非0失败 =>跳转到jsonData说明(内部开发使用) 4.APP回复BLE设备发送交换运动数据暂停模型： 4.1 模型ID class IDOBlePauseReplyExchangeModel extends IDOBaseExchangeModel 4.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? retCode; /// 0:成功 非0失败 =>跳转到jsonData说明(内部开发使用) 5.APP回复BLE设备发送交换运动数据恢复模型： 5.1 模型ID class IDOBleRestoreReplyExchangeModel extends IDOBaseExchangeModel 5.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? retCode; /// 0:成功 非0失败 =>跳转到jsonData说明(内部开发使用) 6.APP回复BLE设备操作运动计划模型： 6.1 模型ID class IDOBleOperatePlanReplyExchangeModel extends IDOBaseExchangeModel 6.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? operate; /// 1:开始运动 2：暂停运动 3:恢复运动 4:结束运动 5:切换动作 int? planType; /// 计划类型 1:跑步计划3km 2:跑步计划5km 3:跑步计划10km 4:半程马拉松训练(二期) 5:马拉松训练(二期) int? actionType;/// 动作类型 1:快走 2:慢跑 3:中速跑 4:快跑 5:结束课程运动(还要等待用户是否有自由运动) 6:课程结束后自由运动(此字段当operate为5起作用) int? errorCode;/// 0为成功，非0为失败 =>跳转到jsonData说明(内部开发使用) 7.APP回复BLE设备通知交换运动数据暂停模型(APP发起的运动)： 7.1 模型ID class IDOAppBlePauseReplyExchangeModel extends IDOBaseExchangeModel 7.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? errorCode; /// 0:成功 1:没有进入运动模式失败 =>跳转到jsonData说明(内部开发使用) 8.APP回复BLE设备通知交换运动数据恢复模型(APP发起的运动)： 8.1 模型ID class IDOAppBleRestoreReplyExchangeModel extends IDOBaseExchangeModel 8.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? errorCode; /// 0:成功 1:没有进入运动模式失败 =>跳转到jsonData说明(内部开发使用) 9.APP回复BLE设备通知交换运动数据结束模型(APP发起的运动)： 9.1 模型ID class IDOAppBleEndReplyExchangeModel extends IDOBaseExchangeModel 9.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? errorCode; /// 0:成功 1:没有进入运动模式失败 int? duration; /// 持续时长 单位s int? calories; /// 卡路里 单位大卡 int? distance; /// 距离 单位0.01km =>跳转到jsonData说明(内部开发使用) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-23 14:40:07 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchStartFromDevice.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchStartFromDevice.html","title":"设备发送交换运动数据开始","keywords":"","body":"设备发送交换运动数据开始命令 App收到的json字段： 字段名 字段类型 字段说明 day int 开始时间 日 hour int 开始时间 时 minute int 开始时间 分 second int 开始时间 秒 type int 运动类型 operate int 1：请求app打开gps 2：发起运动请求3：发起运动开始后台联动请求 示例： { \"day\":26, \"hour\":11, \"minute\":2, \"second\":50, \"type\":1, \"operate\":2 } App下发的json字段: 字段名 字段类型 字段说明 ret_code int 0:成功；1：失败 operate int 1：请求app打开gps 2：发起运动请求3：发起运动开始后台联动请求 示例： { \"ret_code\":0, \"operate\":2 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-22 19:54:45 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDataFromDevice.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDataFromDevice.html","title":"设备交换运动数据过程中","keywords":"","body":"设备交换运动数据过程中 App收到的json字段： 字段名 字段类型 字段说明 day int 开始时间 日 hour int 开始时间 时 minute int 开始时间 分 second int 开始时间 秒 distance int 距离单位：0.01km 示例： { \"day\":26, \"hour\":11, \"minute\":3, \"second\":15, \"distance\":10 } App下发的json字段: 字段名 字段类型 字段说明 distance int 距离单位：0.01kmapp需要判断distance是否合理（可以根据当前的gps信号强度和常识） 示例： { \"distance\":10 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchEndFromDevice.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchEndFromDevice.html","title":"设备发送交换运动数据结束","keywords":"","body":"设备发送交换运动数据结束命令 App收到的json字段： 字段名 字段类型 字段说明 day int 结束时间 日 hour int 结束时间 时 minute int 结束时间 分 second int 结束时间 秒 示例： { \"day\":26, \"hour\":11, \"minute\":3, \"second\":15 } App下发的json字段: 字段名 字段类型 字段说明 ret_code int 0：成功1：没有进入运动模式失败 示例： { \"ret_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchPauseFromDevice.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchPauseFromDevice.html","title":"设备发送交换运动数据暂停","keywords":"","body":"设备发送交换运动数据暂停命令 App收到的json字段： 字段名 字段类型 字段说明 day int 暂停时间 日 hour int 暂停时间 时 minute int 暂停时间 分 second int 暂停时间 秒 示例： { \"day\":26, \"hour\":11, \"minute\":3, \"second\":15 } App下发的json字段: 字段名 字段类型 字段说明 ret_code int 0：成功1：没有进入运动模式失败 示例： { \"ret_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchRestoreFromDevice.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchRestoreFromDevice.html","title":"设备发送交换运动数据恢复","keywords":"","body":"设备发送交换运动数据恢复命令 App收到的json字段： 字段名 字段类型 字段说明 day int 暂停时间 日 hour int 暂停时间 时 minute int 暂停时间 分 second int 暂停时间 秒 示例： { \"day\":26, \"hour\":11, \"minute\":3, \"second\":15 } App下发的json字段: 字段名 字段类型 字段说明 ret_code int 0：成功1：没有进入运动模式失败 示例： { \"ret_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOV3CutoverSportFromDevice.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOV3CutoverSportFromDevice.html","title":"V3设备通知APP运动过程切换","keywords":"","body":"V3设备通知APP运动过程切换 功能表：setSupportSportPlan App下发的json字段: 字段名 字段类型 字段说明 operate int 操作1：开始运动 2：暂停运动 3：恢复运动 4：结束运动 5：切换动作 type int 计划类型1：跑步计划3km 2：跑步计划5km 3：跑步计划10km 4：半程马拉松训练（二期） 5：马拉松训练（二期） action_type int 动作类型 1：快走2：慢跑3：中速跑4：快跑 5：结束课程运动（还要等待用户是否有自由运动）（此字段当operate为5起作用） err_code int 0:成功 其他失败 示例： { \"operate\":1, \"type\":1, \"action_type\":1, \"err_code\":0 } App收到的json字段： 字段名 字段类型 字段说明 operate int 1：开始运动 2：暂停运动 3：恢复运动 4：结束运动5：切换动作 type int 计划类型1：跑步计划3km2：跑步计划5km 3：跑步计划10km 4：半程马拉松训练（二期）5：马拉松训练（二期） action_type int 动作类型 1：快走2：慢跑3：中速跑4：快跑 5：结束课程运动 （还要等待用户是否有自由运动）；6课程结束后自由运动 （此字段当operate为5起作用） year int 训练的课程日期(训练日的日期) 年 month int 训练的课程日期(训练日的日期) 月 day int 训练的课程日期(训练日的日期) 日 time int 动作目标时间 单位秒 low_heart int 心率范围低值 height_heart int 心率范围高值 cur_day int 开始/暂停/恢复/结束时间，由operate决定是什么时间类型时间 日 hour int 时间 时 minute int 时间 分 second int 时间 秒 示例： { \"operate\":1, \"type\":1, \"action_type\":1, \"year\":2022, \"month\":12, \"day\":26, \"time\":200, \"low_heart\":80, \"height_heart\":110, \"cur_day\":1, \"hour\":0, \"minute\":0, \"second\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-22 20:07:57 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDeviceNoticePause.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDeviceNoticePause.html","title":"设备通知APP交换数据暂停","keywords":"","body":"设备通知APP交换数据暂停 App收到的json字段： 字段名 字段类型 字段说明 day int 恢复时间 日 hour int 恢复时间 时 minute int 恢复时间 分 second int 恢复时间 秒 示例： { \"day\":26, \"hour\":10, \"minute\":56, \"second\":15 } App下发的json字段: 字段名 字段类型 字段说明 err_code int err_code0：成功1：没有进入运动模式失败 示例： { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDeviceNoticeRestore.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDeviceNoticeRestore.html","title":"设备通知APP交换数据恢复","keywords":"","body":"设备通知APP交换数据恢复 App收到的json字段： 字段名 字段类型 字段说明 day int 恢复时间 日 hour int 恢复时间 时 minute int 恢复时间 分 second int 恢复时间 秒 示例： { \"day\":26, \"hour\":10, \"minute\":55, \"second\":53 } App下发的json字段: 字段名 字段类型 字段说明 err_code int err_code0：成功1：没有进入运动模式失败 示例： { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDeviceNoticeEnd.html":{"url":"doc/IDOExchangeDataModal/IDOSportSwitchEvt/IDOSportSwitchDeviceNoticeEnd.html","title":"设备通知APP交换数据结束","keywords":"","body":"设备通知APP交换数据结束 App收到的json字段： 字段名 字段类型 字段说明 day int 开始时间 日 hour int 开始时间 时 minute int 开始时间 分 second int 开始时间 秒 duration int 持续时长 单位s calories int 卡路里 单位大卡 distance int 距离 单位0.01km sport_type int 运动类型 avg_hr_value int 平均心率 max_hr_value int 最大心率 burn_fat_mins int 脂肪燃烧时长 单位分钟 aerobic_mins int 心肺锻炼时长 单位分钟 limit_mins int 极限锻炼时长 单位分钟 is_save int 0:不保存，1:保存 示例： { \"day\":26, \"hour\":10, \"minute\":50, \"second\":50, \"duration\":10, \"calories\":10, \"distance\":10, \"sport_type\":1, \"avg_hr_value\":80, \"max_hr_value\":90, \"burn_fat_mins\":0, \"aerobic_mins\":0, \"limit_mins\":0, \"is_save\":0 } App下发的json字段: 字段名 字段类型 字段说明 err_code int err_code0：成功1：没有进入运动模式失败 duration int 持续时长 单位s calories int 卡路里 单位大卡 distance int 距离 单位0.01km 示例： { \"err_code\":0, \"duration\":10, \"calories\":50, \"distance\":50 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOExchangeDataModal/IDOExchangeDataBleNoticeModel.html":{"url":"doc/IDOExchangeDataModal/IDOExchangeDataBleNoticeModel.html","title":"BLE发起数据交换模型说明","keywords":"","body":"{BLE发起数据交换模型说明} 1.BLE设备发送交换运动数据开始模型： 1.1 模型ID class IDOBleIngExchangeModel extends IDOBaseExchangeModel 1.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? operate; /// 1:请求app打开gps 2:发起运动请求 0x03:发起运动开始后台联动请求 =>跳转到jsonData说明(内部开发使用) 2.BLE设备交换运动数据过程中模型： 2.1 模型ID class IDOBleIngExchangeModel extends IDOBaseExchangeModel 2.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? distance; /// 距离 单位：0.01km =>跳转到jsonData说明(内部开发使用) 3.BLE设备发送交换运动数据结束模型： 3.1 模型ID class IDOBleEndExchangeModel extends IDOBaseExchangeModel 3.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 =>跳转到jsonData说明(内部开发使用) 4.BLE设备发送交换运动数据暂停模型： 4.1 模型ID class IDOBlePauseExchangeModel extends IDOBaseExchangeModel 4.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 =>跳转到jsonData说明(内部开发使用) 5.BLE设备发送交换运动数据恢复模型： 5.1 模型ID class IDOBleRestoreExchangeModel extends IDOBaseExchangeModel 5.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 =>跳转到jsonData说明(内部开发使用) 6.BLE设备操作运动计划模型： 6.1 模型ID class IDOBleOperatePlanExchangeModel extends IDOBaseExchangeModel 6.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? operate; /// 1:开始运动，2：暂停运动, 3:恢复运动 ，4：结束运动, 5: 切换动作 int? planType; /// 计划类型 1:跑步计划3km 2:跑步计划5km 3:跑步计划10km 4:半程马拉松训练(二期)，5:马拉松训练(二期) int? actionType; ///动作类型 1:快走；2:慢跑；3:中速跑；4:快跑 5:结束课程运动(还要等待用户是否有自由运动) 6:课程结束后自由运动 (此字段当operate为5起作用) int? errorCode; /// 0为成功，非0为失败 int? trainingYear; /// 训练课程年份 int? trainingMonth;/// 训练课程月份 int? trainingDay; /// 训练课程日期 int? time; /// 动作目标时间 单位秒 int? lowHeart; /// 心率范围低值 int? heightHeart; /// 心率范围高值 =>跳转到jsonData说明(内部开发使用) 7.BLE设备通知交换运动数据暂停模型(APP发起的运动)： 7.1 模型ID class IDOAppBlePauseExchangeModel extends IDOBaseExchangeModel 7.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 =>跳转到jsonData说明(内部开发使用) 8.BLE设备通知交换运动数据恢复模型(APP发起的运动)： 8.1 模型ID class IDOAppBleRestoreExchangeModel extends IDOBaseExchangeModel 8.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 =>跳转到jsonData说明(内部开发使用) 9.BLE设备通知交换运动数据结束模型(APP发起的运动)： 9.1 模型ID class IDOAppBleRestoreExchangeModel extends IDOBaseExchangeModel 9.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? duration; /// 持续时长 单位s int? calories; /// 卡路里 单位大卡 int? distance; /// 距离 单位0.01km int? avgHr; /// 平均心率 int? maxHr; /// 最大心率 int? burnFatMins; /// 脂肪燃烧时长 单位分钟 int? aerobicMins; /// 心肺锻炼时长 单位分钟 int? limitMins; /// 极限锻炼时长 单位分钟 int? isSave; /// 0:不保存，1:保存 =>跳转到jsonData说明(内部开发使用) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-23 14:43:17 "},"doc/IDOExchangeDataModal/IDOExchangeDataAppSendReplyModel.html":{"url":"doc/IDOExchangeDataModal/IDOExchangeDataAppSendReplyModel.html","title":"BLE响应APP发起数据交换的模型说明","keywords":"","body":"{BLE响应APP发起数据交换的模型说明} 1.BLE设备回复APP发送交换运动数据开始模型： 1.1 模型ID class IDOAppStartReplyExchangeModel extends IDOBaseExchangeModel 1.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? retCode; /// 0:成功 1:设备已经进入运动模式失败 2:设备电量低失败 /// 3:手环正在充电 4:正在使用Alexa 5:通话中 =>跳转到jsonData说明(内部开发使用) 2.BLE设备回复APP发送交换运动数据结束模型： 2.1 模型ID class IDOAppEndReplyExchangeModel extends IDOBaseExchangeModel 2.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? errorCode; /// 0:成功; 1:设备结束失败 int? calories; /// 卡路里，单位大卡 int? distance; /// 距离（单位：米） int? step; /// 步数 (单位:步) int? avgHr; /// 平均心率 int? maxHr; /// 最大心率 int? burnFatMins; /// 脂肪燃烧时长 单位分钟 int? aerobicMins; /// 心肺锻炼时长 单位分钟 int? limitMins; /// 极限锻炼时长 单位分钟 =>跳转到jsonData说明(内部开发使用) 3.BLE设备回复APP交换运动数据过程中模型： 3.1 模型ID class IDOAppIngReplyExchangeModel extends IDOBaseExchangeModel 3.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? calories; /// 卡路里 单位大卡 int? distance; /// 距离 单位0.01km int? status; /// 0:全部有效 1:距离无效 2:GPS信号弱 int? step; /// 步数 int? currentHr; /// 当前心率 int? interval; /// 心率间隔 单位秒 int? hrSerial; /// 序列号 List? hrJson; /// 心率值数据 =>跳转到jsonData说明(内部开发使用) 4.BLE设备回复APP发送交换运动数据暂停模型： 4.1 模型ID class IDOAppPauseReplyExchangeModel extends IDOBaseExchangeModel 4.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? errCode; /// 暂停错误码 0:成功 非0:失败 =>跳转到jsonData说明(内部开发使用) 5.BLE设备回复APP发送交换运动数据恢复模型： 5.1 模型ID class IDOAppRestoreReplyExchangeModel extends IDOBaseExchangeModel 5.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? errCode; /// 暂停错误码 0:成功 非0:失败 =>跳转到jsonData说明(内部开发使用) 6.BLE设备回复APP执行V3交换运动数据模型： 6.1 模型ID class IDOAppIngV3ReplyExchangeModel extends IDOBaseExchangeModel 6.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? version; /// 协议版本号 int? heartRate; /// 心率数据 int? distance; /// 距离 单位根据单位设置的单位显示 int? duration; /// 持续时间 秒钟 int? realTimeCalories; /// 动态卡路里 int? realTimeSpeed; /// 实时速度，单位km/h，扩大100倍 int? kmSpeed; /// 实时公里配速 单位s/公里 int? steps; /// 步数 int? swimPosture; /// 主泳姿 int? status; /// 状态 0：无效 1：开始 2：手动暂停 3：结束 4：自动暂停 int? realTimeSpeedPace; /// 实时的配速，单位秒，5秒使用滑动平均，第5秒使用1-5秒数据，第6秒使用2-6秒数据 int? trainingEffect; /// 有氧训练效果等级 单位无 范围 0-50 扩大10倍传输 int? anaerobicTrainingEffect;/// 无氧运动训练效果等级 单位无 范围 0-50 扩大10倍传输 /// 动作类型 /// 1快走 /// 2慢跑 /// 3中速跑 /// 4快跑 /// 5结束课程运动 （还要等待用户是否有自由运动） /// 6课程结束后自由运动（此字段当operate为5起作用） /// 运动累积时间=课程内训练时间+课程结束后计时 int? actionType; /// 需要固件开启功能表 /// action_type = 1—5时，该字段是运动倒计时时间（注：时间递减） /// action_type = 6时，该字段是课程结束后计时（注：时间递增） int? countHour; /// 需要固件开启功能表 /// action_type = 1—5时，该字段是运动倒计时时间（注：时间递减） /// action_type = 6时，该字段是课程结束后计时（注：时间递增） int? countMinute; /// 需要固件开启功能表 /// action_type = 1—5时，该字段是运动倒计时时间（注：时间递减） /// action_type = 6时，该字段是课程结束后计时（注：时间递增） int? countSecond; =>跳转到jsonData说明(内部开发使用) 7.BLE设备回复APP操作运动计划模型： 7.1 模型ID class IDOAppOperatePlanReplyExchangeModel extends IDOBaseExchangeModel 7.2 模型成员: int? day; /// 日期 int? hour; /// 时 int? minute; /// 分钟 int? second; /// 秒钟 int? sportType; /// 运动类型 int? planType; /// 计划类型：1：跑步计划3km，2：跑步计划5km，3：跑步计划10km，4：半程马拉松训练（二期，5：马拉松训练（二期） int? operate; /// 1:开始运动，2：暂停运动, 3:恢复运动 ，4：结束运动, 5: 切换动作 int? actionType; /// 动作类型 1:快走 2:慢跑 3:中速跑 4:快跑 5:结束课程运动(还要等待用户是否有自由运动) 6:课程结束后自由运动 （此字段当operate为5起作用） int? errorCode; /// 0为成功，非0为失败 =>跳转到jsonData说明(内部开发使用) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-23 14:33:39 "},"doc/IDODeviceLogIconIntroduction.html":{"url":"doc/IDODeviceLogIconIntroduction.html","title":"IDO设备日志接口说明","keywords":"","body":"{IDO设备日志接口说明} 1.功能概述 提供查询是否支持获取固件日志接口，查询日志目录地址，开始启动获取日志和取消获取日志的能力。 2.接口能力 1.查询是否支持获取固件日志： 1.1 功能概括: 无。 1.2 API ID: bool get getLogIng; 1.3 API参数说明: @return:bool 支持功能表，fasle:不支持，true:支持。////TODO？ 2.查询所有日志目录地址： 2.1 功能概括: 无。 2.2 API ID: Future get logDirPath; 2.3 API参数说明: @return:String 所有日志的目录地址，每个日志目录下存放以时间戳命名的文件，所有日志目录名称： flash日志目录 -> Flash 电池日志目录 -> Battery 过热日志目录 -> Heat 旧的重启日志目录 -> Reboot 3.开始获取日志： 3.1 功能概括: 无。 3.2 API ID: Stream startGet(List types); 3.3 API参数说明: @return:bool 支持功能表，fasle:不支持，true:支持。 @param:types 日志列表，日志类型包括： enum IDOLogType { init = 0, reboot = 1, // 旧的重启日志 general = 2, // 通用日志 reset = 3, // 复位日志 hardware = 4, // 硬件日志 algorithm = 5, // 算法日志 restart = 6, // 新重启日志 battery = 7, // 电池日志 heat = 8 // 过热日志 } 4.取消获取日志： 4.1 功能概括: 无。 4.2 API ID: void cancel(); 4.3 API参数说明: 无。 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOCLibToolFunctionIconIntroduction.html":{"url":"doc/IDOCLibToolFunctionIconIntroduction.html","title":"IDO工具接口说明","keywords":"","body":"{IDO工具接口说明} 1.功能概述 提供查询是否支持获取固件日志接口，查询日志目录地址，开始启动获取日志和取消获取日志的能力。 2.接口能力 1.PNG格式图片转BMP格式： 1.1 功能概括: 提供转换图片格式的能力(png to bmp)。 1.2 API ID: int png2Bmp( {required String inPath, required String outPath, required ImageFormatType format}) 1.3 API参数说明: @param:inPath 素材路径，png图片路径，包含素材文件名和文件后缀。 @param:outPath 目标路径，bmp图片路径，包含目标文件名和文件后缀。 @param:format 目标文件(bmp图片)格式，5:RGB565，8:RGB888。 @return:0 成功。 2.压缩png图片质量： 2.1 功能概括: 提供压缩png图片质量的能力。 2.2 API ID: int compressToPNG( {required String inputFilePath, required String outputFilePath}) 2.3 API参数说明: @param:inputFilePath 素材路径，包含素材文件名和文件后缀。 @param:outputFilePath 目标路径，包含目标文件名和文件后缀。 @return:0 成功 2.压缩png图片质量： 2.1 功能概括: 提供压缩png图片质量的能力。 2.2 API ID: int compressToPNG( {required String inputFilePath, required String outputFilePath}) 2.3 API参数说明: @param:inputFilePath 素材路径，包含素材文件名和文件后缀。 @param:outputFilePath 目标路径，包含目标文件名和文件后缀。 @return:0 成功 3.制作EPO文件： 3.1 功能概括: 提供一个三合一的制作EPO.DAT文件的能力。 3.2 API ID: Future makeEpoFile({ required String dirPath, required String epoFilePath, }) 3.3 API参数说明: @param:dirPath 素材目录路径，字符串，末尾需要填‘/’。 @param:epoFilePath 目标文件名，包含文件后缀，固定为EPO.DAT。 @return:0 成功 4.设置流数据输出到日志开关： 4.1 功能概括: 提供写入流数据指令到日志文件的开关，默认不写入。 4.2 API ID: bool setWriteStreamByte(bool isWrite) 4.3 API参数说明: @param:isWrite 流数据写入日志文件的开关，true:写入，fasle:不写入。 @return:0 成功 5.初始化运动速度阈值： 5.1 功能概括: gsp运动后优化轨迹，根据运动类型初始化速度阈值。 5.2 API ID: int gpsInitType(int motionTypeIn) 5.3 API参数说明: @param:motionTypeIn 运动类型，若输入其他运动类型，会导致无运动轨迹，包括： 户外走路 = 52, 走路 = 1, 徒步 = 4, 运动类型设为0 户外跑步 = 48, 跑步 = 2, 运动类型设为1 户外骑行 = 50, 骑行 = 3, 运动型性设为2 @return:满足运动类型输出结果为1，否则为0。 6.GPS数据实时处理： 6.1 功能概括: 提供处理GPS数据方法，对输出的坐标进行判断。 6.2 API ID: String gpsAlgProcessRealtime({required String json}) 6.3 API参数说明: @param:json GPS坐标数据，json格式字符串，json key值包括： lon，经度，数据类型double lat，纬度，数据类型double timestamp，时间戳，数据类型int accuracy，定位精度，数据类型double gpsaccuracystatus，定位等级，0:定位未知，1:定位好，2:定位差，数据类型int @return:失败返回null，成功返回json格式字符串，处理后的GPS坐标数据，json key值包括： lon，经度，数据类型double lat，纬度，数据类型double timestamp，时间戳，数据类型int accuracy，定位精度，数据类型double gpsaccuracystatus，定位等级，0:定位未知，1:定位好，2:定位差，数据类型int 7.平滑GPS数据集合： 7.1 功能概括: 传入多组GPS坐标，提供平滑GPS数据集合的能力。 7.2 API ID: String gpsSmoothData({required String json}) 7.3 API参数说明: @param:json GPS坐标数据，json格式字符串，json key值包括： lat，纬度数组，长度为len，数据类型double lon，经度数组，长度为len，数据类型double len，纬度数组和经度数组的组数 @return:失败返回null，成功返回json格式字符串，处理后的GPS坐标数据，json key值包括： lat，纬度数组，长度为len，数据类型double lon，经度数组，长度为len，数据类型double len，纬度数组和经度数组的组数 8.获取log根路径： 8.1 功能概括: 无。 8.2 API ID: Future logPath() async { final pathSDK = await LocalStorage.pathSDKStatic(); return Future.value('$pathSDK/logs'); } 8.3 API参数说明: @return:log根路径，字符串。 9.获取alexa根路径： 9.1 功能概括: 无。 9.2 API ID: Future alexaPath() async { final pathSDK = await LocalStorage.pathSDKStatic(); return Future.value('$pathSDK/alexa'); } 9.3 API参数说明: @return:alexa根路径，字符串。 10.获取alexa测试路径： 10.1 功能概括: 无。 10.2 API ID: Future alexaTestPath() async { final dirDocument = await getApplicationDocumentsDirectory(); return Future.value('${dirDocument.path}/alexa_test_pkg'); } 10.3 API参数说明: @return:alexa测试路径，字符串。 11.获取当前设备缓存根路径： 11.1 功能概括: 无。 11.2 API ID: Future currentDevicePath() async { return storage?.pathRoot(); } 11.3 API参数说明: @return:当前设备缓存根路径，字符串。 12.导出日志： 12.1 功能概括: 无。 12.2 API ID: Future exportLog() async { final pathSDK = await LocalStorage.pathSDKStatic(); return await compute(_doZip, pathSDK); } 12.3 API参数说明: @return: 压缩后日志zip文件绝对路径，字符串。 13.加载指定设备功能表： 13.1 功能概括: 无。 13.2 API ID: Future loadFuncTable( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); return storage?.loadFunctionTableWith(macAddress: macAddr); } 13.3 API参数说明: @param:macAddress 设备MAC地址，字符串。 @return: 成功返回json格式字符串，失败返回null。 14.加载指定设备功能表：////TODO 14.1 功能概括: 无。 14.2 API ID: Future loadFuncTable( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); return storage?.loadFunctionTableWith(macAddress: macAddr); } 14.3 API参数说明: @param:macAddress 设备MAC地址，字符串。 @return: 成功返回json格式字符串，失败返回null。////TODO 15.加载指定设备功能表：////TODO 15.1 功能概括: 无。 15.2 API ID: Future loadFuncTableByDisk( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); final ft = await storage?.loadFunctionTableWith(macAddress: macAddr); logger?.d('loadFuncTableByDisk rs:$ft'); if (ft == null) return null; return BaseFunctionTable()..initFunTableModel(ft); } 15.3 API参数说明: @param:macAddress 设备MAC地址，字符串。 @return: 。 16.加载指定设备绑定状态：////TODO 16.1 功能概括: 无。 16.2 API ID: Future loadBindStatus({required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); final rs = await storage?.loadBindStatus(macAddress: macAddr); return Future(() => rs ?? false); } 16.3 API参数说明: @param:macAddress 设备MAC地址，字符串。 @return: 输入MAC地址对应的绑定状态，bool类型，true:绑定，false:非绑定。 17.查询最后一次连接设备的信息：////TODO 17.1 功能概括: 提供查询最后一次连接的设备的设备信息，包括ota模式，设备名称，uuid(IOS)，bt/mac地址，最后更新时间。 17.2 API ID: Future lastConnectDevice() async { final list = await storage?.loadDeviceExtListByDisk(); return Future(() => list?.first); } 17.3 API参数说明: @return: 最后一次连接设备的设备信息，包括：////TODO final String macAddress; //mac地址 String? macAddressFull; //？ bool otaMode = false; //ota模式？ String uuid; //uuid(IOS) String deviceName; //设备名称 int updateTime; //最后更新时间 单位毫秒 String? macAddressBt; //bt地址 String formatTime(int millisecondsSince) { return DateTime.fromMicrosecondsSinceEpoch(millisecondsSince).toString(); } 18.查询连接过的设备列表：////TODO 18.1 功能概括: 提供查询连接过的设备列表的能力，包括设备的ota模式，设备名称，uuid(IOS)，bt/mac地址，最后更新时间。 18.2 API ID: Future?> loadDeviceExtListByDisk( {bool sortDesc = true}) async { return storage?.loadDeviceExtListByDisk(sortDesc: sortDesc); } 18.3 API参数说明: @return: 连接过的设备列表的设备信息，列表中的每个设备信息包括：////TODO final String macAddress; //mac地址 String? macAddressFull; //？ bool otaMode = false; //ota模式？ String uuid; //uuid(IOS) String deviceName; //设备名称 int updateTime; //最后更新时间 单位毫秒 String? macAddressBt; //bt地址 String formatTime(int millisecondsSince) { return DateTime.fromMicrosecondsSinceEpoch(millisecondsSince).toString(); } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOV2NoticeIntroduction.html":{"url":"doc/IDOV2NoticeIntroduction.html","title":"IDO来电提醒和消息提醒接口说明","keywords":"","body":"{IDO来电提醒和消息提醒接口说明} 1.功能概述 提供通知设备来电提醒和消息提醒(v2)的能力。 2.接口能力 1.V2来电提醒： 1.1 功能概括: 提供向固件发送来电提醒的能力，包括联系人名称及号码，部分设备实现。 1.2 API ID: int setV2CallEvt({ required String contactText, required String phoneNumber, }) 1.3 API参数说明: @param:contactText 联系人，字符串，最大设置63个字节。 @param:phoneNumber 号码，字符串，最大设置31个字节。 @return:0 成功。 2.V2消息提醒： 2.1 功能概括: 提供向固件发送消息提醒的能力，包括消息内容，联系人名称及号码，部分设备实现。 2.2 API ID: int setV2NoticeEvt({ required int type, required String contactText, required String phoneNumber, required String dataText, }) 2.3 API参数说明: @param:type 消息类型，跳转到IDO消息应用类型 @param:contactText 联系人名称，字符串，最大设置63个字节。 @param:phoneNumber 号码，字符串，最大设置31个字节。 @param:dataText 消息内容，字符串，最大设置249个字节。 @return:0 成功。 3.V2来电已接： 3.1 功能概括: 提供向固件发送来电提醒状态为来电已接的能力，通知设备停止提醒用户，部分设备实现。 3.2 API ID: int stopV2CallEvt() 3.3 API参数说明: @return:0 成功。 4.V2来电已拒： 4.1 功能概括: 提供向固件发送来电提醒状态为来电已拒的能力，通知设备停止提醒用户，部分设备实现。 4.2 API ID: int missedV2MissedCallEvt() 4.3 API参数说明: @return:0 成功。 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-06 18:13:53 "},"doc/IDOCacheIconIntroduction.html":{"url":"doc/IDOCacheIconIntroduction.html","title":"IDO协议库缓存接口说明","keywords":"","body":"{IDO协议库缓存接口说明} 1.功能概述 提供查询log、alexa、设备缓存根目录，导出日志，加载设备功能表和连接过的设备列表信息的能力。 2.接口能力 1.获取log根路径： 1.1 功能概括: 无。 1.2 API ID: Future logPath() async { final pathSDK = await LocalStorage.pathSDKStatic(); return Future.value('$pathSDK/logs'); } 1.3 API参数说明: @return:log根路径，字符串。 2.获取alexa根路径： 2.1 功能概括: 无。 2.2 API ID: Future alexaPath() async { final pathSDK = await LocalStorage.pathSDKStatic(); return Future.value('$pathSDK/alexa'); } 2.3 API参数说明: @return:alexa根路径，字符串。 3.获取alexa测试路径： 3.1 功能概括: 无。 3.2 API ID: Future alexaTestPath() async { final dirDocument = await getApplicationDocumentsDirectory(); return Future.value('${dirDocument.path}/alexa_test_pkg'); } 3.3 API参数说明: @return:alexa测试路径，字符串。 4.获取当前设备缓存根路径： 4.1 功能概括: 无。 4.2 API ID: Future currentDevicePath() async { return storage?.pathRoot(); } 4.3 API参数说明: @return:当前设备缓存根路径，字符串。 5.导出日志： 5.1 功能概括: 无。 5.2 API ID: Future exportLog() async { final pathSDK = await LocalStorage.pathSDKStatic(); return await compute(_doZip, pathSDK); } 5.3 API参数说明: @return: 压缩后日志zip文件绝对路径，字符串。 6.加载指定设备功能表： 6.1 功能概括: 无。 6.2 API ID: Future loadFuncTable( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); return storage?.loadFunctionTableWith(macAddress: macAddr); } 6.3 API参数说明: @param:macAddress 设备MAC地址，字符串。 @return: 成功返回json格式字符串，失败返回null。 7.加载指定设备功能表：////TODO 7.1 功能概括: 无。 7.2 API ID: Future loadFuncTable( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); return storage?.loadFunctionTableWith(macAddress: macAddr); } 7.3 API参数说明: @param:macAddress 设备MAC地址，字符串。 @return: 成功返回json格式字符串，失败返回null。////TODO 8.加载指定设备功能表：////TODO 8.1 功能概括: 无。 8.2 API ID: Future loadFuncTableByDisk( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); final ft = await storage?.loadFunctionTableWith(macAddress: macAddr); logger?.d('loadFuncTableByDisk rs:$ft'); if (ft == null) return null; return BaseFunctionTable()..initFunTableModel(ft); } 8.3 API参数说明: @param:macAddress 设备MAC地址，字符串。 @return: 。 9.加载指定设备功能表：////TODO 9.1 功能概括: 无。 9.2 API ID: Future loadFuncTableJsonByDisk( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); final ft = await storage?.loadFunctionTableWith(macAddress: macAddr); logger?.d('loadFuncTableByDisk rs:$ft'); if (ft == null) return null; return jsonEncode(ft.toJson()); } 9.3 API参数说明: @param:macAddress 设备MAC地址，字符串。 @return: 。 10.加载指定设备绑定状态：////TODO 10.1 功能概括: 无。 10.2 API ID: Future loadBindStatus({required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); final rs = await storage?.loadBindStatus(macAddress: macAddr); return Future(() => rs ?? false); } 10.3 API参数说明: @param:macAddress 设备MAC地址，字符串。 @return: 输入MAC地址对应的绑定状态，bool类型，true:绑定，false:非绑定。 11.查询最后一次连接设备的信息：////TODO 11.1 功能概括: 提供查询最后一次连接的设备的设备信息，包括ota模式，设备名称，uuid(IOS)，bt/mac地址，最后更新时间。 11.2 API ID: Future lastConnectDevice() async { final list = await storage?.loadDeviceExtListByDisk(); return Future(() => list?.first); } 11.3 API参数说明: @return: 最后一次连接设备的设备信息，包括：////TODO final String macAddress; //mac地址 String? macAddressFull; //？ bool otaMode = false; //ota模式？ String uuid; //uuid(IOS) String deviceName; //设备名称 int updateTime; //最后更新时间 单位毫秒 String? macAddressBt; //bt地址 String formatTime(int millisecondsSince) { return DateTime.fromMicrosecondsSinceEpoch(millisecondsSince).toString(); } 12.查询连接过的设备列表：////TODO 12.1 功能概括: 提供查询连接过的设备列表的能力，包括设备的ota模式，设备名称，uuid(IOS)，bt/mac地址，最后更新时间。 12.2 API ID: Future?> loadDeviceExtListByDisk( {bool sortDesc = true}) async { return storage?.loadDeviceExtListByDisk(sortDesc: sortDesc); } 12.3 API参数说明: @return: 连接过的设备列表的设备信息，列表中的每个设备信息包括：////TODO final String macAddress; //mac地址 String? macAddressFull; //？ bool otaMode = false; //ota模式？ String uuid; //uuid(IOS) String deviceName; //设备名称 int updateTime; //最后更新时间 单位毫秒 String? macAddressBt; //bt地址 String formatTime(int millisecondsSince) { return DateTime.fromMicrosecondsSinceEpoch(millisecondsSince).toString(); } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDODeviceControlEvtIntroduction.html":{"url":"doc/IDODeviceControlEvtIntroduction.html","title":"IDO设备通知/控制事件说明","keywords":"","body":"{IDO设备通知/控制事件模型说明} 1.功能概述 提供说明固件主动请求的通知/控制事件模型成员的能力。 2.接口能力 1.数据更新请求类型： 1.1 功能概括: 无。 1.2 API ID: final int? dataType; 1.3 API参数说明: @return:数据更新请求类型，包括： 十进制值 说明 0 无效 1 手环已经解绑 2 心率模式改变 3 血氧产生数据，发生改变 4 压力产生数据，发生改变 5 Alexa识别过程中退出 6 固件发起恢复出厂设置，通知app弹框提醒 7 app需要进入相机界面（TIT01定制） 8 sos事件通知（205土耳其定制） 9 alexa设置的闹钟，固件修改，需要发送对应的通知位给app，app收到后发送获取V3的闹钟命令 10 固件有删除日程提醒，app这边需要更新对应的列表数据 11 固件端有修改对应的表盘子样式，通知app获取（command_id为0x33， key为 0x5000） 12 固件通知ios更新通知图标和名字 13 固件通知app图标已经更新，通知app获取已经更新的图标状态 14 固件请求重新设置天气，app收到收，下发天气数据 15 步数每次增加2000步，设备请求app同步数据，app调用同步接口 16 探测到睡眠结束，请求app同步睡眠数据，app调用同步接口同步 17 固件三环数据修改，通知app更新三环数据 18 固件充满电完成发送提醒，app收到后通知栏显示设备充电完成 19 结束运动后，手动测量心率后，手动测量血氧后，手动测量压力后，设备自动请求同步，先检查链接状态，未连接本次同步不执行，满足下个自动同步条件后再次判断发起同步请求 20 固件修改 心率通知状态类型、压力通知状态类型、血氧通知状态类型、生理周期通知状态类型、健康指导通知状态类型、提醒事项通知状态类型通知app更新心率、压力、血氧、生理周期、健康指导、提醒事项通知状态类型 21 固件压力值计算完成，通知app获取压力值 22 固件通知app，固件压力校准失败(固件退出测量界面/检测失败/检测超时/未佩戴) 23 保留 24 固件通知app bt蓝牙已连接 25 固件通知app bt蓝牙断开连接 26 固件蓝牙通话开始 27 固件蓝牙通话结束 28 新版本固件每隔4分30秒发送一个通知命令用于修复ios 会显示离线的问题 29 通知app运动开始（作用于拦截表盘传输同26） 30 通知app运动结束（作用于拦截表盘传输同27） 31 固件重启发送通知给app （app收到通知需要获取固件版本信息） 32 设备空闲时（没有使用aleax），需要上报通知给app（时间间隔为1小时） 33 固件整理空间完成通知app继续下传表盘文件 34 固件通知app结束寻找手环指令 （对应6.3寻找手环） 35 固件进入省电模式通知app 36 固件退出省电模式通知app 37 固件通知请求app下发设置gps热启动参数(废弃) 38 固件传输原始数据完成，通知app获取特性向量信息 39 固件通知app，固件血压校准失败(固件退出测量界面/检测失败/检测超时/未佩戴) 40 固件传输原始数据完成，没有特性向量信息，通知app数据采集结束 41 v3健康数据同步单项数据完成通知 (android 内部使用） 42 固件整理gps数据空间完成通知app下发gps文件 43 固件升级EPO.dat文件失败，通知app再次下发一次该文件 44 固件升级EPO.dat文件成功 45 固件升级GPS失败，通知app重新传输 46 固件升级GPS成功 47 发起运动时, 固件GPS异常，通知app 48 固件润丰外设信息更新，通知app获取 49 固件通知用户取消ble和手表配对,app弹窗处理 50 固件通知app bt配对完成 51 固件设置运动排序,通知app获取运动排序信息 52 固件全天步数目标参数有更改,通知app获取全天步数目标(0208) 53 固件通知app固件进入血压校准界面 54 固件自动识别开关状态更新,通知app获取运动自动识别开关状态(02EA) 55 固件快速模式切换慢速模式 56 固件慢速模式切换快速模式 57 固件更新mtu，APP下发获取mtu更新本地记录的mtu(本地记录的mtu大小大于20Bytes不更新) 58 固件电量变化，APP下发获取电量信息 59 当前处于DFU模式(思澈平台) 60 固件单位切换，通知APP获取单位(0222) 61 固件修改菜单列表(快捷列表)，通知APP获取(02A8) 62 固件修改本地语言，通知APP获取(0222) 2.通知类型： 2.1 功能概括: 无。 2.2 API ID: final int? notifyType; 2.3 API参数说明: @return:notifyType 通知请求类型，包括： 值 说明 位 1 闹钟已经修改 bit0 2 固件过热异常告警 bit1 4 亮屏参数有修改（02 b0） bit2 8 抬腕参数有修改（02 b1） bit3 16 勿擾模式获取（02 30） bit4 32 手机音量的下发（03 0xE3）（删除），app音量修改，直接下发 bit5 3.消息ID： 3.1 功能概括: 无。 3.2 API ID: final int? msgId; 3.3 API参数说明: @return:msgId，每个消息对应一个ID。 4.自定义短信： 4.1 功能概括: 无。 4.2 API ID: final int? msgNotice; 4.3 API参数说明: @return:自定义消息，包括： 值 说明 0 无 1 自定义短信1（正在开会，稍后联系）。 2 自定义短信2 3 自定义短信3 4 自定义短信4 5 自定义短信5 .. ..(依次类推到10) 10 自定义短信10 5.错误状态索引： 5.1 功能概括: 无。 5.2 API ID: final int? errorIndex; 5.3 API参数说明: @return: 错误状态，包括： 值 错误类型 备注 0 没有错误 1 ACC 1~100是固件错误 2 PPG 3 TP 4 FLASH 5 过热（PPG） 6 气压 7 GPS 8 地磁 100 开门狗复位 100~200复位日志码 101 上电复位 102 软件错位复位 103 OTA复位 104 用户主动复位 105 低电关机复位 6.控制事件及对应的事件返回值： 6.1 功能概括: 无。 6.2 API ID: final int? controlEvt; final String? controlJson; 6.3 API参数说明: @return: controlEvt BLE设备控制事件号，controlJson事件返回值，包括： 事件类型 事件号(controlEvt) 事件返回值(controlJson) 设备控制app音乐开始 551 - 设备控制app音乐暂停 552 - 设备控制app音乐停止 553 - 设备控制app音乐上一首 554 - 设备控制app音乐下一首 555 - 设备控制app拍照单拍 556 - 设备控制app拍照连拍 557 - 设备控制app音量加 558 - 设备控制app音量减 559 - 设备控制app打开相机 560 - 设备控制app关闭相机 561 - 设备控制app接听电话 562 - 设备控制app拒接电话 563 - 设备控制app音乐音量百分比 565 跳转到说明 设备控制app寻找手机开始 570 - 设备控制app寻找手机结束 571 - 设备通知app防丢启动 572 - 设备通知app一键呼叫开始 574 跳转到说明 设备通知传感器数据 575 - 设备通知app操作类型 576 跳转到说明 设备通知app数据更新 577 - 设备请求版本检查 578 跳转到说明 设备请求ota 579 跳转到说明 设备通知app短信信息 580 跳转到说明 设备控制app相机 581 跳转到说明 设备通知固件喇叭音量修改 591 跳转到说明 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-11-24 14:57:50 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlVolumePercentage.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlVolumePercentage.html","title":"设备控制app音乐音量百分比","keywords":"","body":"设备控制APP音乐音量百分比 App收到的json字段： 字段名 字段类型 字段说明 volume_percentage int 音量百分比 0-100 示例： { \"volume_percentage\":22 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlOnekeySoSStart.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlOnekeySoSStart.html","title":"设备通知app一键呼叫开始","keywords":"","body":"设备通知APP一键呼叫开始 App收到的json字段： 字段名 字段类型 字段说明 status int 状态：0:开始 ，1：结束 timeout int 超时时间 单位秒 示例： { \"status\":0, \"timeout\":30, } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlOperate.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlOperate.html","title":"设备通知app操作类型","keywords":"","body":"设备通知APP操作类型 App收到的json字段: 字段名 字段类型 字段说明 timeout int 超时时间 单位秒 type int 1 短按,2 长按,3 敲打,4 双敲 示例： { \"timeout\":30, \"type\":1, } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlRequestCheckUpdate.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlRequestCheckUpdate.html","title":"设备请求版本检查","keywords":"","body":"设备请求版本检查 App收到的json字段： 字段名 字段类型 字段说明 App下发的json字段: 字段名 字段类型 字段说明 flag int 0 已经是最新版本,1 有新版本,2 网络错误,3 其他错误 version int 协议版本 示例： { \"flag\":0, \"version\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlRequestStartOta.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlRequestStartOta.html","title":"设备请求ota","keywords":"","body":"设备请求OTA App收到的json字段： 字段名 字段类型 字段说明 App下发的json字段: 字段名 字段类型 字段说明 flag int 0 请求成功,1 发生错误 示例： { \"flag\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlFastMsgUpdate.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlFastMsgUpdate.html","title":"设备通知app短信信息","keywords":"","body":"主动通知APP短信 App下发的json字段: 字段名 字段类型 字段说明 is_success int 0app发送信息失败，1app发送信息成功 msg_ID int 回复的ID :每个消息对应一个ID msg_type int 消息类型 msg_notice int 0是没有对应的短信回复，对应回复列表 示例： { \"is_success\":0, \"msg_ID\":1, \"msg_type\":1, \"msg_notice\":0 } App收到的json字段： 字段名 字段类型 字段说明 msg_type int 回复的消息类型：来电短信（1） QQ，微信 msg_ID int 回复的ID :每个消息对应一个ID msg_notice int 0是没有对应的短信回复，对应回复列表 示例： { \"msg_ID\":1, \"msg_type\":1, \"msg_notice\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlPhotograph.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlPhotograph.html","title":"设备控制app相机","keywords":"","body":"设备控制APP相机 App收到的json字段： 字段名 字段类型 字段说明 type int 0：打开相机 1：点击开始拍照 2：拍照结束 3：请求系统配对 示例： { \"type\":0 } App下发的json字段: 字段名 字段类型 字段说明 type int 0：打开相机 1：点击开始拍照 2：拍照结束 3：请求系统配对 示例： { \"type\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlSpeakerValue.html":{"url":"doc/BaseProtocolEvtExecDoc/IDODeviceControlEvt/IDODeviceControlSpeakerValue.html","title":"设备通知固件喇叭音量修改","keywords":"","body":"设备通知固件喇叭音量修改(alexa) App收到的json字段： 字段名 字段类型 字段说明 value int 固件音量值 0-100 示例： { \"value\":20 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOSetEvtIntroduction.html":{"url":"doc/IDOSetEvtIntroduction.html","title":"V2设置指令事件","keywords":"","body":"{V2设置指令事件} 功能 设置久坐提醒 设置显示模式 设置勿扰模式 设置寻找手机 设置运动目标(设置全天步数) 设置左右手 设置时间 设置用户信息 设置一键呼叫 设置音乐开关 设置防丢 添加闹钟 设置运动模式 设置表盘 设置快捷方式 设置血压校准 设置压力校准 设置心率区间 设置心率模式 设置单位 设置睡眠时间段 设置抬腕亮屏 设置血压测量 设置屏幕亮度 设置GPS信息 设置控制GPS 设置控制连接参数 设置热启动参数 设置经期 设置经期提醒 设置卡路里和距离目标 设置血氧开关 设置压力开关 设置运动模式排序 设置走动提醒 设置呼吸训练 设置运动开关 设置喝水提醒 简单文件操作 设置菜单列表 设置控制拍照 设置通知中心开关 设置删除文件 设置手机音量下发给固件 设置洗手提醒 设置吃药提醒 设置智能心率模式 设置环境音量的开关和阀值 设置科学睡眠开关 设置夜间体温开关 设置健身指导开关 设置未读信息红点提示开关 设置通知应用状态(事项提醒通知类型) 设置呼吸率开关 设置身体电量开关 设置天气开关 设置手机操作系统 设置语音助手开关 设置天气数据 设置天气城市名称 设置日出日落时间 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-09 17:35:31 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetLongSitReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetLongSitReminder.html","title":"设置久坐提醒","keywords":"","body":"设置久坐提醒 功能表: setSedentariness Flutter示例： /// 设置久坐事件号 setLongSit( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_long_sit), /// 设置久坐 libManager.send(evt: CmdEvtType.setLongSit, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 interval int 间隔 取值应大于15分钟 单位分钟 repetitions int 重复及开关 bit0 ：0表示关 1表示开 bit1-7 : 0表示不重复，1表示重复 示例： { \"start_hour\":15, \"start_minute\":40, \"end_hour\":23, \"end_minute\":26, \"interval\":15, \"repetitions\":254 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetDisplayMode.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetDisplayMode.html","title":"设置显示模式","keywords":"","body":"设置显示模式 功能表: displayMode(SDK待补充) Flutter示例： /// 设置显示模式事件号 setDisplayMode( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_display_mode), /// 设置显示模式 libManager.send(evt: CmdEvtType.setDisplayMode, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 模式0:默认1:横屏2:竖屏3:翻转180度 示例： { \"mode\":0 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetDoNotDisturb.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetDoNotDisturb.html","title":"设置勿扰模式","keywords":"","body":"设置勿扰模式 功能表: setDoNotDisturb 【disturbHaveRangRepeat(SDk待补充)，setOnlyNoDisturbAllDayOnOff，setOnlyNoDisturbSmartOnOff】 Flutter示例： /// 设置勿扰模式事件号 setNotDisturb( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_do_not_disturb), /// 设置勿扰模式 libManager.send(evt: CmdEvtType.setNotDisturb, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 switch_flag int 开关1 开启0 关闭 start_hour int 开始时间时 start_minute int 开始时间分 end_hour int 结束时间时 end_minute int 结束时间分 have_time_range int 是否有时间范围 0 无效1 表示无时间范围2 表示有时间范围功能表disturbHaveRangRepeat开启有效 week_repeat int 预留 noontime_rest_on_off int 白天勿扰开关 1 开启0 关闭 noontime_rest_start_hour int 开始时间时 noontime_rest_start_minute int 开始时间分 noontime_rest_end_hour int 结束时间时 noontime_rest_end_minute int 结束时间分 all_day_on_off int 全天勿扰 1 开启0 关闭功能表setOnlyNoDisturbAllDayOnOff开启有效 intelligent_on_off int 智能勿扰开关 1 开启0 关闭功能表setOnlyNoDisturbSmartOnOff开启有效 示例： { \"switch_flag\":1, \"start_hour\":15, \"start_minute\":23, \"end_hour\":23, \"end_minute\":30, \"have_time_range\":2, \"week_repeat\":127, \"noontime_rest_on_off\":1, \"noontime_rest_start_hour\":9, \"noontime_rest_start_minute\":0, \"noontime_rest_end_hour\":12, \"noontime_rest_end_minute\":0, \"all_day_on_off\":0, \"intelligent_on_off\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-19 17:03:06 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetFindPhone.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetFindPhone.html","title":"设置寻找手机","keywords":"","body":"设置寻找手机 功能表: getFindPhone Flutter示例： /// 设置寻找手机 setFindPhone( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_find_phone), /// 设置勿扰模式 libManager.send(evt: CmdEvtType.setNotDisturb, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 on_off int 1:打开0:关闭 示例： { \"on_off\":1 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSportGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSportGoal.html","title":"设置运动目标(设置全天步数目标)","keywords":"","body":"设置运动目标 功能表: 【supportWalkGoalSteps(SDK待补充)，v2SupportSetStepDataType(SDK待补充)】 Flutter示例： /// 设置运动目标事件号 setSportGoal( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sport_goal), /// 设置运动目标 libManager.send(evt: CmdEvtType.setSportGoal, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 sport_step int 步数 walk_goal_steps int 每小时步数目标设置 target_type int 周目标设置0：无效 1：日目标 2：周目标 需要功能表支持 示例： { \"sport_step\":2000, \"walk_goal_steps\":15, \"target_type\":1 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHand.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHand.html","title":"设置左右手","keywords":"","body":"设置左右手 功能表: ////TODO (未找到对应功能表) Flutter示例： /// 设置左右手事件号 setHand( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_hand), /// 设置左右手 libManager.send(evt: CmdEvtType.setHand, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 hand int 0：左手 1：右手 示例： { \"hand\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTime.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTime.html","title":"设置时间","keywords":"","body":"设置时间 Flutter示例： /// 设置时间 setTime( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_time), /// 设置时间 libManager.send(evt: CmdEvtType.setTime, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 year int 年 monuth int 月 day int 日 hour int 时 minute int 分 second int 秒 week int 星期0~6， 表示星期一到星期天 time_zone int 用24时区的，手机端的获取时区是整数0-12东，13-24西,需要功能表支持 示例： { \"year\":2022, \"monuth\":12, \"day\":16, \"hour\":17, \"minute\":49, \"second\":46, \"week\":5, \"time_zone\":8 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUserInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUserInfo.html","title":"设置用户信息","keywords":"","body":"设置用户信息 Flutter示例： /// 设置用户信息事件号 setUserInfo( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_user_info), /// 设置用户信息 libManager.send(evt: CmdEvtType.setUserInfo, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 year int 出生日期 年 month int 出生日期 月 day int 出生日期 日 height int 身高 单位厘米 weight int 体重 单位千克 值需要x100 gender int 性别1：女 0：男 示例： { \"year\":2022, \"monuth\":12, \"day\":16, \"heigh\":173, \"weigh\":7400, \"gender\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 16:53:07 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOOneKeySOS.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOOneKeySOS.html","title":"设置一键呼叫","keywords":"","body":"设置一键呼叫 功能表: onetouchCalling(SDK待补充) Flutter示例： /// 设置一键呼叫事件号 setOnekeySOS( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_onekey_sos), /// 设置一键呼叫 libManager.send(evt: CmdEvtType.setOnekeySOS, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 开关1 开 0 关 phone_type int 0：无效 1：doro手机 2：非doro手机 示例： { \"on_off\":1, \"phone_type\":0 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMusicONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMusicONOFF.html","title":"设置音乐开关","keywords":"","body":"设置音乐开关 功能表: setBleControlMusic 【supportV2SetShowMusicInfoSwitch】 Flutter示例： /// 设置音乐开关事件号 setMusicOnOff( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_muisc_onoff), /// 设置音乐开关 libManager.send(evt: CmdEvtType.setMusicOnOff, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 开关1 开 0 关 show_info_status int 展示歌曲信息开关1:开 0:关需要固件开启功能表支持：supportV2SetShowMusicInfoSwitch 示例： { \"on_off\":1, \"phone_type\":0 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-12 11:43:48 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetLostFind.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetLostFind.html","title":"设置防丢模式","keywords":"","body":"设置防丢模式 功能表: antilost(SDK待补充) Flutter示例： /// 设置防丢事件号 setLostFind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_lost_find), /// 设置防丢 libManager.send(evt: CmdEvtType.setLostFind, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 方式0：不防丢，1：近距离防丢，2:中距离防丢，3：远距离防丢 示例： { \"mode\":0 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetAlarm.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetAlarm.html","title":"添加闹钟","keywords":"","body":"添加闹钟 功能表: Flutter示例： /// 设置闹钟事件号 setAddAlarm( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_add_alarm), /// 设置闹钟 libManager.send(evt: CmdEvtType.setAddAlarm, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 alarm_num int 闹钟个数 alarm_items 集合 闹钟详情 alarm_id & alarm_type & alarm_hour & alarm_minute & alarm_status & tsnooze_duration & repeat的集合 字段名 字段类型 字段说明 alarm_id int 闹钟id号,固定(1~最多支持闹钟个数) alarm_type int 类型：0:起床1:睡觉2:锻炼3:吃药4:约会5:聚会6:会议7:其他8:吃饭9:刷牙10:休息11:课程12:洗澡13:学习14:玩耍时间 alarm_hour int 闹钟时(24小时制) alarm_minute int 闹钟分(24小时制) alarm_status int 状态1:显示0:不显示 tsnooze_duration int 贪睡时长0~600表示不贪睡单位:分钟 repeat int 重复及开关bit0 总开关:0表示关,1表示开 bit1-7 每个bit对应星期1~7 1:重复提醒 0:不重复提醒 示例： { \"alarm_num\":10, \"alarm_items\":[ { \"alarm_id\":1, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":1, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":2, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":0, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":3, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":0, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":4, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":85, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":5, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":0, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":6, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":0, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":7, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":0, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":8, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":0, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":9, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":0, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":10, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":0, \"tsnooze_duration\":5, \"repeat\":285 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-19 16:09:20 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSportMode.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSportMode.html","title":"设置运动模式","keywords":"","body":"设置运动模式 Flutter示例： /// 设置运动模式选择事件号 setSportModeSelect( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sport_mode_select), /// 设置运动模式选择 libManager.send(evt: CmdEvtType.setSportModeSelect, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 flag int 0：无效1：快捷运动类型设置，下发sport_type1 & sport_type2 & sport_type3 & sport_type42：快捷运动类型具体运动设置 sport_type1 int 快捷运动类型1 flag:1有效 sport_type2 int 快捷运动类型2 flag:1有效 sport_type3 int 快捷运动类型3 flag:1有效 sport_type4 int 快捷运动类型4 flag:1有效 sport_type0_walk bool 类型：走路，0不支持，1支持 flag:2有效 sport_type0_run bool 类型：跑步，0不支持，1支持 flag:2有效 sport_type0_by_bike bool 类型：骑行，0不支持，1支持 flag:2有效 sport_type0_on_foot bool 类型：徒步，0不支持，1支持 flag:2有效 sport_type0_swim bool 类型：游泳，0不支持，1支持 flag:2有效 sport_type0_mountain_climbing bool 类型：爬山，0不支持，1支持 flag:2有效 sport_type0_badminton bool 类型：羽毛球，0不支持，1支持 flag:2有效 sport_type0_other bool 类型：其他，0不支持，1支持 flag:2有效 sport_type1_fitness bool 类型：健身，0不支持，1支持 flag:2有效 sport_type1_spinning bool 类型：动感单车，0不支持，1支持 flag:2有效 sport_type1_ellipsoid bool 类型：椭圆球，0不支持，1支持 flag:2有效 sport_type1_treadmill bool 类型：跑步机，0不支持，1支持 flag:2有效 sport_type1_sit_up bool 类型：仰卧起坐，0不支持，1支持 flag:2有效 sport_type1_push_up bool 类型：俯卧撑，0不支持，1支持 flag:2有效 sport_type1_dumbbell bool 类型：哑铃，0不支持，1支持 flag:2有效 sport_type1_weightlifting bool 类型：举重，0不支持，1支持 flag:2有效 sport_type2_bodybuilding_exercise bool 类型：健身操，0不支持，1支持 flag:2有效 sport_type2_yoga bool 类型：瑜伽，0不支持，1支持 flag:2有效 sport_type2_rope_skipping bool 类型：跳绳，0不支持，1支持 flag:2有效 sport_type2_table_tennis bool 类型：乒乓球，0不支持，1支持 flag:2有效 sport_type2_basketball bool 类型：篮球，0不支持，1支持 flag:2有效 sport_type2_footballl bool 类型：足球，0不支持，1支持 flag:2有效 sport_type2_volleyball bool 类型：排球，0不支持，1支持 flag:2有效 sport_type2_tennis bool 类型：网球，0不支持，1支持 flag:2有效 sport_type3_golf bool 类型：高尔夫，0不支持，1支持 flag:2有效 sport_type3_baseball bool 类型：棒球，0不支持，1支持 flag:2有效 sport_type3_skiing bool 类型：滑雪，0不支持，1支持 flag:2有效 sport_type3_roller_skating bool 类型：轮滑，0不支持，1支持 flag:2有效 sport_type3_dance bool 类型：跳舞，0不支持，1支持 flag:2有效 sport_type3_strength_training bool 类型：力量训练，0不支持，1支持 flag:2有效 sport_type3_core_training bool 类型：核心训练，0不支持，1支持 flag:2有效 sport_type3_tidy_up_relax bool 类型：整理放松，0不支持，1支持 flag:2有效 示例： { \"flag\":2, \"sport_type1\":0, \"sport_type2\":0, \"sport_type3\":0, \"sport_type4\":0, \"sport_type0_walk\":1, \"sport_type0_run\":1, \"sport_type0_by_bike\":1, \"sport_type0_on_foot\":1, \"sport_type0_swim\":1, \"sport_type0_mountain_climbing\":1, \"sport_type0_badminton\":1, \"sport_type0_other\":1, \"sport_type1_fitness\":1, \"sport_type1_spinning\":1, \"sport_type1_ellipsoid\":1, \"sport_type1_treadmill\":1, \"sport_type1_sit_up\":1, \"sport_type1_push_up\":1, \"sport_type1_dumbbell\":1, \"sport_type1_weightlifting\":1, \"sport_type2_bodybuilding_exercise\":1, \"sport_type2_yoga\":1, \"sport_type2_rope_skipping\":1, \"sport_type2_table_tennis\":1, \"sport_type2_basketball\":1, \"sport_type2_footballl\":1, \"sport_type2_volleyball\":1, \"sport_type2_tennis\":1, \"sport_type3_golf\":1, \"sport_type3_baseball\":1, \"sport_type3_skiing\":1, \"sport_type3_roller_skating\":1, \"sport_type3_dance\":1, \"sport_type3_strength_training\":1, \"sport_type3_core_training\":1, \"sport_type3_tidy_up_relax\":0 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWatchDial.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWatchDial.html","title":"设置表盘","keywords":"","body":"设置表盘 功能表：WatchDial Flutter示例： /// 设置表盘事件号 setWatchDial( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_watch_dial), /// 设置表盘 libManager.send(evt: CmdEvtType.setWatchDial, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 dial_id int 设置的手环本地表盘表盘id0无效,目前支持1~4 示例： { \"dial_id\":1 } App收到的json字段： 字段名 字段类型 字段说明 ret_code int 0 成功，非0失败 示例： { \"ret_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-12 16:02:30 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetShortcut.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetShortcut.html","title":"设置快捷方式","keywords":"","body":"设置快捷方式 Flutter示例： /// 设置快捷方式 setShortcut( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_shortcut), /// 设置快捷方式 libManager.send(evt: CmdEvtType.setShortcut, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 快捷键1的功能0：无效1：快速进入拍照控制2：快速进入运动模式3：快速进入勿扰开关 示例： { \"mode\":2 } App收到的json字段： 字段名 字段类型 字段说明 ret_code int 0 成功，非0失败 示例： { \"ret_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBpCal.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBpCal.html","title":"设置血压校准","keywords":"","body":"v2血压校准 功能表：getSupportBpSetOrMeasurementV2 Flutter示例： /// 血压校准事件号 setBpCalibration( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_bp_cal), /// 血压校准 libManager.send(evt: CmdEvtType.setBpCalibration, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 flag int 1:血压校准设置 2:血压校准查询结果 diastolic int 收缩压 systolic int 舒张压 示例： { \"flag\":2, \"diastolic\":0, \"systolic\":0 } App收到的json字段： 字段名 字段类型 字段说明 ret_code int 0：成功 1：成功进入校准模式，正在校准 2：在运动模式3：设备忙碌4：无效的状态 示例： { \"ret_code\":4 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetStressCal.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetStressCal.html","title":"设置压力校准","keywords":"","body":"设置压力校准 功能表：setSetStressCalibration Flutter示例： /// 设置压力校准事件号 setStressCalibration( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_stress_cal), /// 设置压力校准 libManager.send(evt: CmdEvtType.setStressCalibration, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 stress_score int 压力分数，1～10 status int 0：开始校准设置 1：取消校准设置 示例： { \"stress_score\":6, \"status\":0 } App收到的json字段： 字段名 字段类型 字段说明 ret_code int 0：成功1：失败-正在校准2：失败-正在充电3：失败-未佩戴4：失败-运动场景中 示例： { \"ret_code\":3, } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHRInterval.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHRInterval.html","title":"设置心率区间","keywords":"","body":"设置心率区间 Flutter示例： /// 设置心率区间事件号 setHeartRateInterval( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_heart_rate_interval), /// 设置心率区间 libManager.send(evt: CmdEvtType.setHeartRateInterval, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 burn_fat_threshold int 脂肪训练心率区间 计算规则:最大心率的50%-69%单位:次/分钟 aerobic_threshold int 心肺训练心率区间 计算规则:最大心率的70%-84%单位:次/分钟 limit_threshold int 峰值训练心率区间 计算规则:最大心率的85%-100%单位:次/分钟 user_max_hr int 心率上限,最大心率提醒单位:次/分钟 range1 int 热身运动心率区间计算规则：(200-年龄) * 50单位:次/分钟 range2 int 脂肪燃烧心率区间计算规则：(200-年龄) * 60单位:次/分钟 range3 int 有氧运动心率区间计算规则：(200-年龄) * 70单位:次/分钟 range4 int 无氧运动心率区间计算规则：(200-年龄) * 80单位:次/分钟 range5 int 极限锻炼心率区间计算规则：(200-年龄) * 90单位:次/分钟 min_hr int 心率最小值单位:次/分钟 max_hr_remind int 最大心率提醒0 关闭,1 开启 min_hr_remind int 最小心率提醒0 关闭,1 开启 remind_start_hour int 提醒开始 时 remind_start_minute int 提醒开始 分 remind_stop_hour int 提醒结束 时 remind_stop_minute int 提醒结束 分 示例： { \"burn_fat_threshold\":113, \"aerobic_threshold\":132, \"limit_threshold\":170, \"user_max_hr\":220, \"range1\":94, \"range2\":113, \"range3\":132, \"range4\":151, \"range5\":170, \"min_hr\":20, \"max_hr_remind\":1, \"min_hr_remind\":0, \"remind_start_hour\":0, \"remind_start_minute\":0, \"remind_stop_hour\":23, \"remind_stop_minute\":59 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-12 15:41:43 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHRMode.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHRMode.html","title":"设置心率模式","keywords":"","body":"设置心率模式 功能表：syncHeartRateMonitor 【exTableMain7HeartRateInterval】 Flutter示例： /// 设置心率模式事件号 setHeartRateMode( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_heart_rate_mode), /// 设置心率模式 libManager.send(evt: CmdEvtType.setHeartRateMode, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 0：关闭1：自动(5min)2：持续监测(5sec)3：手动模式 has_time_range int 时间区间0：无1：有 start_hour int 开始时间时（24小时制0~23） start_minute int 开始时间分（0~59） end_hour int 结束时间时 end_minute int 结束时间分 measurement_interval int 测量间隔单位分钟 示例： { \"mode\":3, \"has_time_range\":1, \"start_hour\":10, \"start_minute\":30, \"end_hour\":20, \"end_minute\":30, \"measurement_interval\":15 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-12 16:00:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUint.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUint.html","title":"设置单位","keywords":"","body":"设置单位 功能表：【setSupportFahrenheit，setSupportCalorieUnit，setSupportSwimPoolUnit，setSupportCyclingUnit，setSupportWalkRunUnit】 Flutter示例： /// 设置单位事件号 setUnit( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_unit), /// 设置单位 libManager.send(evt: CmdEvtType.setUnit, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 dist_unit int 距离单位0：无效1：km(公制)2：mi（英制） weight_unit int 体重单位0：无效1：kg2：lb temp int 温度单位0：无效1：℃2：℉ stride int 走路步长0：无效0：cm language int 语言，参考下面的语言code列表 is_12hour_format int 时间制式0：无效1：24小时制2：12小时制 stride_run int 跑步的步长0：无效1：cm根据男性换算,默认值:90cm stride_gps_cal int 通过手机GPS校准步长开关0：无效1：开2：关 week_start_date int 周起始日 0：星期11：星期天3：星期6 calorie_unit int 卡路里单位设置0：无效1：默认千卡2：大卡3：千焦 swim_pool_unit int 泳池单位设置0：无效1：默认米2：码 cycling_unit int 骑行单位0：无效1：km 公里2：英里 walking_running_unit int 步行或者跑步的单位（公里/英里）设置 0：无效 1：km 公里2：英里需要功能表支持V3_support_walking_running_unit 语言code列表 代码 语言 功能表id -1 无效 - 1 中文 languageCh 2 英文 languageEnglish 3 法语 languageFrench 4 德语 languageGerman 5 意大利语 languageItalian 6 西班牙语 languageSpanish 7 日语 languageJapanese 8 波兰语 languagePolish 9 捷克语 languageCzech 10 罗马尼亚 languageRomanian 11 立陶宛语 languageLithuanian 12 荷兰语 languageDutch 13 斯洛文尼亚语 languageSlovenian 14 匈牙利语 languageHungarian 15 俄罗斯语 languageRussian 16 乌克兰语 languageUkrainian 17 斯洛伐克语 languageSlovak 18 丹麦语 languageDanish 19 克罗地亚语 languageCroatian 20 印尼语 languageIndonesian 21 韩语 languageKorean 22 印地语 languageHindi 23 葡萄牙语 languagePortuguese 24 土耳其语 languageTurkish 25 泰国语 languageThai 26 越南语 languageVietnamese 27 缅甸语 languageBurmese 28 菲律宾语 languageFilipino 29 繁体中文 languageTraditionalChinese 30 希腊语 languageGreek 31 阿拉伯语 languageArabic 32 瑞典语 languageSweden 33 芬兰语 languageFinland 34 波斯语 languagePersia 35 挪威语 languageNorwegian 36 马来语 languageMalay 37 巴西葡语 languageBrazilianPortuguese 38 孟加拉语 languageBengali 39 高棉语 languageKhmer 示例： { \"dist_unit\":1, \"weight_unit\":1, \"temp\":1, \"stride\":1, \"language\":1, \"is_12hour_format\":1, \"stride_run\":1, \"stride_gps_cal\":1, \"week_start_date\":1, \"calorie_unit\":1, \"swim_pool_unit\":1, \"cycling_unit\":1, \"walking_running_unit\":1 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-11-24 15:19:31 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSleepPeriod.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSleepPeriod.html","title":"设置睡眠时间段","keywords":"","body":"设置睡眠时间段 功能表：exSleepPeriod Flutter示例： /// 设置睡眠时间段事件号 setSleepPeriod( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sleep_period), /// 设置睡眠时间段 libManager.send(evt: CmdEvtType.setSleepPeriod, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 开关1 开 0 关 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 示例： { \"on_off\":1, \"start_hour\":23, \"start_minute\":0, \"end_hour\":8, \"end_minute\":0 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUpHandGesture.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUpHandGesture.html","title":"设置抬腕亮屏","keywords":"","body":"设置抬腕亮屏 功能表：getUpHandGesture Flutter示例： /// 抬手亮屏事件号 setUpHandGesture( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_up_hand_gesture), /// 抬手亮屏 libManager.send(evt: CmdEvtType.setUpHandGesture, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 开关1 开 0 关 show_second int 亮屏时间 单位秒 has_time_range int 是否有时间范围1：有0：没有 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 示例： { \"on_off\":1, \"show_second\":10, \"has_time_range\":1, \"start_hour\":8, \"start_minute\":0, \"end_hour\":18, \"end_minute\":0 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBpMeasure.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBpMeasure.html","title":"设置血压测量","keywords":"","body":"设置血压测量 功能表：getSupportBpSetOrMeasurementV2 Flutter示例： /// 血压测量事件号 setBpMeasurement( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_bp_measure), /// 血压测量 libManager.send(evt: CmdEvtType.setBpMeasurement, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 flag int 1：开始测量2：结束测量3：获得血压数据 示例： { \"flag\":1 } App收到的json字段： 字段名 字段类型 字段说明 status int 0：不支持1：正在测量2：测量成功3：测量失败4：设备正在运动模式 systolic_bp int 高压/收缩压 diastolic_bp int 低压/舒张压 示例： { \"status\":2, \"systolic_bp\":120, \"diastolic_bp\":68 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetScreenBrightness.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetScreenBrightness.html","title":"设置屏幕亮度","keywords":"","body":"设置屏幕亮度 功能表：setScreenBrightness 【v2SupportSetBrightScreenTime，v2SupportAdjustNightTurnOnAfterSunset，v2SupportAddNightLevel，nightAutoBrightness】 Flutter示例： /// 设置屏幕亮度事件号 setScreenBrightness( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_screen_brightness), /// 设置屏幕亮度 libManager.send(evt: CmdEvtType.setScreenBrightness, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 level int 亮度等级0-100 opera int 0 自动同步配置1 用户手动调节 mode int 0：指定等级1：使用环境光传感器2：level不起作用 auto_adjust_night int 夜间自动亮度调整 0：无效,由固件定义1：关闭2：夜间自动调整亮度3：夜间降亮度使用设置的时间功能表nightAutoBrightness开启有效 start_hour int 开始时间时功能表v2SupportSetBrightScreenTime开启有效 start_minute int 开始时间分功能表v2SupportSetBrightScreenTime开启有效 end_hour int 结束时间时功能表v2SupportSetBrightScreenTime开启有效 end_minute int 结束时间分功能表v2SupportSetBrightScreenTime开启有效 night_level int 夜间亮度0-100功能表v2SupportAddNightLevel开启有效 show_interval int 显示间隔0无效单位:秒 示例： { \"level\":20, \"opera\":0, \"mode\":0, \"auto_adjust_night\":3, \"start_hour\":18, \"start_minute\":0, \"end_hour\":23, \"end_minute\":0, \"night_level\":20, \"show_interval\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-12 16:24:55 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetConfigGPS.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetConfigGPS.html","title":"设置GPS信息","keywords":"","body":"设置gps信息 Flutter示例： /// 设置夜间体温开关事件号 setTemperatureSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_temperature_switch), /// 设置夜间体温开关 libManager.send(evt: CmdEvtType.setTemperatureSwitch, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 utc_year int 时间 年 utc_month int 时间 月 utc_day int 时间 日 utc_hour int 时间 时 utc_minute int 时间 分 utc_second int 时间 秒 start_mode int 启动模式1 冷启动2 热启动 默认2 gsop_operation_mode int 操作模式1：正常2：低功耗4：为Balance5：1PPS 默认1 gsop_cycle_ms int 定位周期默认1000 1s gns_value int 定位星mode1：GPS2：GLONASS3：1为GPS + GLONASS默认1 示例： { \"utc_year\":2022, \"utc_month\":12, \"utc_day\":19, \"utc_hour\":16, \"utc_minute\":18, \"utc_second\":30, \"start_mode\":2, \"gsop_operation_mode\":1, \"gsop_cycle_ms\":1000, \"gns_value\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-19 16:14:38 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetControlGPS.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetControlGPS.html","title":"设置控制GPS","keywords":"","body":"设置控制gps Flutter示例： /// 设置控制GPS事件号 setGpsControl( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_control_gps), /// 设置控制GPS libManager.send(evt: CmdEvtType.setGpsControl, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 operate int 1：控制 2：查询 type int 1：开启log2：关闭log3：agps写入4：agps 擦除5：gps_fw 写入 示例： { \"operate\":2, \"type\":0 } App收到的json字段： 字段名 字段类型 字段说明 type int 1：开启log2：关闭log3：agps写入4：agps 擦除5：gps_fw 写入 status int 0：为无效1：命令正在执行2：完成 error_code int 成功：0 非0失败 示例： { \"type\":2, \"status\":0, \"error_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetConnectParam.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetConnectParam.html","title":"设置控制连接参数","keywords":"","body":"设置控制连接参数 Flutter示例： /// 控制连接参数事件号 setConnParam( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_conn_param), /// 控制连接参数 libManager.send(evt: CmdEvtType.setConnParam, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 1：控制 2：查询 modify_conn_param int 1：开启log2：关闭log3：agps写入4：agps 擦除5：gps_fw 写入 max_interval int 最大间隔单位秒 min_interval int 最小间隔单位秒 slave_latency int 从设备延迟0-499包设备不回复APP的包数 conn_timeout int 连接超时单位秒 示例： { \"mode\":2, \"modify_conn_param\":0, \"max_interval\":0, \"min_interval\":0, \"slave_latency\":0, \"conn_timeout\":0 } App收到的json字段： 字段名 字段类型 字段说明 cur_mode int 当前模式1 设置快速模式2 慢速模式 err_code int 成功0 非0失败 示例： { \"cur_mode\":2, \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-12 20:32:10 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHotStartParam.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHotStartParam.html","title":"设置热启动参数","keywords":"","body":"设置热启动参数 Flutter示例： /// 设置热启动参数事件号 setHotStartParam( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_hot_start_param), /// 设置热启动参数 libManager.send(evt: CmdEvtType.setHotStartParam, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 longitude int 晶振偏移 latitude int 经度 乘以1000,000传输 altitude int 纬度 乘以1000,000传输 tcxo_offset int 高度 乘以10传输 示例： { \"longitude\":2, \"latitude\":0, \"altitude\":0, \"tcxo_offset\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-12 17:09:03 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMenstruation.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMenstruation.html","title":"设置经期","keywords":"","body":"设置经期 功能表：setMenstruation 【getMenstrualAddNotifyFlagV3，support_set_menstrual_reminder_on_off(SDK待补充)】 Flutter示例： /// 设置经期事件号 setMenstruation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_menstruation), /// 设置经期 libManager.send(evt: CmdEvtType.setMenstruation, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 经期开关 1开0关闭 menstrual_length int 经期长度 menstrual_cycle int 经期周期 last_menstrual_year int 最近一次经期开始时间 年 last_menstrual_month int 最近一次经期开始时间 月 last_menstrual_day int 最近一次经期开始时间 日 ovulation_interval_day int 从下一个经期开始前到排卵日的间隔,一般为14天 ovulation_before_day int 排卵日之前易孕期的天数,一般为5 ovulation_after_day int 排卵日之后易孕期的天数,一般为5 notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知需要固件开启功能表支持 V3_menstrual_add_notify_flag menstrual_reminder_on_off int 经期提醒开关开关1:开0:关闭需要固件开启功能表支持 support_set_menstrual_reminder_on_off该开关无效时，功能开启就默认提醒。 示例： { \"on_off\":1, \"menstrual_length\":7, \"menstrual_cycle\":21, \"last_menstrual_year\":2022, \"last_menstrual_month\":12, \"last_menstrual_day\":19, \"ovulation_interval_day\":15, \"ovulation_before_day\":5, \"ovulation_after_day\":5, \"notify_flag\":1, \"menstrual_reminder_on_off\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMenstruationRemind.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMenstruationRemind.html","title":"设置经期提醒","keywords":"","body":"设置经期提醒 功能表：setMenstruation 【setMenstrualAddPregnancy，not_support_set_ovulation(SDK待补充)】 Flutter示例： /// 设置经期提醒事件号 setMenstruationRemind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_menstruation_remind), /// 设置经期提醒 libManager.send(evt: CmdEvtType.setMenstruationRemind, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 start_day int 开始日提醒 提前天数 ovulation_day int 排卵日提醒 提前天数 hour int 提醒时间 时 minute int 提醒时间 分 pregnancy_day_before_remind int 易孕期 开始的时候 提前多少天提醒 pregnancy_day_end_remind int 易孕期 结束的时候 提前多少天提醒 menstrual_day_end_remind int 经期结束 提前多少天提醒 示例： { \"start_day\":5, \"ovulation_day\":5, \"hour\":21, \"minute\":0, \"pregnancy_day_before_remind\":5, \"pregnancy_day_end_remind\":5, \"menstrual_day_end_remind\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetCalorieDistanceGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetCalorieDistanceGoal.html","title":"设置卡路里和距离目标(日常三环目标)","keywords":"","body":"设置卡路里和距离目标(设置日常三环) 功能表：【setCalorieGoal，exMain3DistanceGoal(SDK待补充)，set_mid_high_time_goal_03_43(c库jsonid SDK待补充)，getSupportGetMainSportGoalV3，getSupportSetGetTimeGoalTypeV2】 Flutter示例： /// 设置日常三环目标事件号 setCalorieDistanceGoal( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_calorie_distance_goal), /// 设置日常三环目标 libManager.send(evt: CmdEvtType.setCalorieDistanceGoal, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 calorie int 活动卡路里目标 单位千卡 distance int 距离 单位米 calorie_min int 活动卡路里最小值 单位千卡 calorie_max int 活动卡路里最大值 单位千卡 mid_high_time_goal int 中高运动时长的目标 单位秒 walk_goal_time int 目标时间单位秒 time_goal_type int 目标类型0：无效 1：日目标 2：周目标 示例： { \"calorie\":500, \"distance\":200, \"calorie_min\":100, \"calorie_max\":666, \"mid_high_time_goal\":600, \"walk_goal_time\":600, \"time_goal_type\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-12 17:16:37 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSp02Data.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSp02Data.html","title":"设置血氧开关","keywords":"","body":"设置血氧开关 功能表：setSpo2Data【setSpo2AllDayOnOff，v3SupportSetSpo2LowValueRemind(SDK待补充)，getSpo2NotifyFlag】 Flutter示例： /// 设置血氧开关事件号 setSpo2Switch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_spo2), /// 设置血氧开关 libManager.send(evt: CmdEvtType.setSpo2Switch, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 全天血氧开关 1开 0关闭 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 low_spo2_on_off int 血氧过低开关 1开 0关闭需要功能表支持V3_support_set_spo2_low_value_remind low_spo2_value int 血氧过低阈值需要功能表支持V3_support_set_spo2_low_value_remind notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知 需要功能表支持 V3_spo2_add_notify_flag 示例： { \"on_off\":1, \"start_hour\":14, \"start_minute\":0, \"end_hour\":20, \"end_minute\":0, \"low_spo2_on_off\":1, \"low_spo2_value\":20, \"notify_flag\":1 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 0是成功，非0是错误码 示例： { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetPressure.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetPressure.html","title":"设置压力开关","keywords":"","body":"设置压力开关 功能表：setPressureData 【getPressureNotifyFlagMode，v2SendCalibrationThreshold(SDK待补充)】 Flutter示例： /// 设置压力开关事件号 setStressSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_pressure), /// 设置压力开关 libManager.send(evt: CmdEvtType.setStressSwitch, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 总开关 1开 0关闭 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 remind_on_off int 压力提醒开关 1开 0关on_off为关则提醒不起作用 repeat int 预留 interval int 提醒间隔,单位分钟 默认60分钟 high_threshold int 压力过高阈值 stress_threshold int 压力校准阈值，默认是80 需要固件开启功能表支持 v2_send_calibration_threshold notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知 需要固件开启功能表支持 V3_pressure_add_notify_flag_and_mode 示例： { \"on_off\":1, \"start_hour\":14, \"start_minute\":0, \"end_hour\":20, \"end_minute\":0, \"remind_on_off\":1, \"repeat\":127, \"interval\":60, \"high_threshold\":170, \"stress_threshold\":80, \"notify_flag\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-19 17:06:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSportModeSort.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSportModeSort.html","title":"设置运动模式排序","keywords":"","body":"设置运动模式排序 功能表：setSportModeSort Flutter示例： /// 设置运动模式排序事件号 setSportModeSort( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sport_mode_sort), /// 设置运动模式排序 libManager.send(evt: CmdEvtType.setSportModeSort, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 items 集合 运动模式排序详情 index & type的集合 字段名 字段类型 字段说明 index int 排序从1开始 0无效 type int 运动模式类型1 走路2 跑步 .. 示例： { \"item\": [ { \"index\": 1, \"type\": 0 }, { \"index\": 2, \"type\": 2 }, { \"index\": 3, \"type\": 4 }, { \"index\": 4, \"type\": 8 }, { \"index\": 5, \"type\": 85 }, { \"index\": 6, \"type\": 78 }, { \"index\": 7, \"type\": 45 }, { \"index\": 8, \"type\": 65 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWalkReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWalkReminder.html","title":"设置走动提醒","keywords":"","body":"设置走动提醒 功能表：setWalkReminder 【setWalkReminderAddNotify，v2SupportSetGetNoReminderOnWalkReminder】 Flutter示例： /// 设置走动提醒事件号 setWalkRemind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_walk_reminder), /// 设置走动提醒 libManager.send(evt: CmdEvtType.setWalkRemind, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 开关0 关,1 开 goal_step int 目标步数预留 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 repeat int 重复bit0无效bit1-bit7分别是星期1到星期7，0不重复 1重复 goal_time int 目标时间 预留 notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知 需要固件开启功能表支持setWalkReminderAddNotify do_not_disturb_on_off int 走动勿扰(免提醒)开关0关 1开需要固件开启功能表支持 v2SupportSetGetNoReminderOnWalkReminder no_disturb_start_hour int 开始时间 时需要固件开启功能表支持 v2SupportSetGetNoReminderOnWalkReminder no_disturb_start_minute int 开始时间 分需要固件开启功能表支持 v2SupportSetGetNoReminderOnWalkReminder no_disturb_end_hour int 结束时间 时需要固件开启功能表支持 v2SupportSetGetNoReminderOnWalkReminder no_disturb_end_minute int 结束时间 分需要固件开启功能表支持 v2SupportSetGetNoReminderOnWalkReminder 示例： { \"on_off\":1, \"goal_step\":2000, \"start_hour\":14, \"start_minute\":0, \"end_hour\":20, \"end_minute\":0, \"repeat\":127, \"goal_time\":60, \"notify_flag\":1, \"do_not_disturb_on_off\":0, \"no_disturb_start_hour\":0, \"no_disturb_start_minute\":0, \"no_disturb_end_hour\":0, \"no_disturb_end_minute\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-19 17:10:06 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBreatheTrain.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBreatheTrain.html","title":"设置呼吸训练","keywords":"","body":"设置呼吸训练 功能表：setSupportBreathRate Flutter示例： /// 呼吸训练事件号 setBreatheTrain( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_breathe_train), /// 呼吸训练 libManager.send(evt: CmdEvtType.setBreatheTrain, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 frequency int 每分钟呼吸次数 示例： { \"frequency\":30 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetActivitySwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetActivitySwitch.html","title":"设置运动模式识别开关","keywords":"","body":"设置运动模式识别开关 功能表：setActivitySwitch【getAutoActivitySetGetUseNewStructExchange】 Flutter示例： /// 运动开关设置事件号 setActivitySwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_activity_switch), /// 运动开关设置 libManager.send(evt: CmdEvtType.setActivitySwitch, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 auto_identify_sport_walk int 自动识别走路开关 0 关闭1 开功能表getAutoActivitySetGetUseNewStructExchange开启后，通过获取识别开关libManager.send(evt: CmdEvtType.setActivitySwitch)判断此开关支不支持(-1 不支持) auto_identify_sport_run int 自动识别跑步开关 0 关闭1 开功能表getAutoActivitySetGetUseNewStructExchange开启后，通过获取识别开关libManager.send(evt: CmdEvtType.setActivitySwitch)判断此开关支不支持(-1 不支持) auto_identify_sport_bicycle int 自动识别自行车开关 0 关闭1 开功能表getAutoActivitySetGetUseNewStructExchange开启后，通过获取识别开关libManager.send(evt: CmdEvtType.setActivitySwitch)判断此开关支不支持(-1 不支持) auto_pause_on_off int 运动自动暂停 0 关闭1 开功能表getAutoActivitySetGetUseNewStructExchange开启后，通过获取识别开关libManager.send(evt: CmdEvtType.setActivitySwitch)判断此开关支不支持(-1 不支持) auto_end_remind_on_off_on_off int 结束提醒 0 关闭1 开功能表getAutoActivitySetGetUseNewStructExchange开启后，通过获取识别开关libManager.send(evt: CmdEvtType.setActivitySwitch)判断此开关支不支持(-1 不支持) auto_identify_sport_elliptical int 自动识别椭圆机开关 0 关闭1 开功能表getAutoActivitySetGetUseNewStructExchange开启后，通过获取识别开关libManager.send(evt: CmdEvtType.setActivitySwitch)判断此开关支不支持(-1 不支持) auto_identify_sport_rowing int 自动识别划船机开关 0 关闭1 开功能表getAutoActivitySetGetUseNewStructExchange开启后，通过获取识别开关libManager.send(evt: CmdEvtType.setActivitySwitch)判断此开关支不支持(-1 不支持) auto_identify_sport_swim int 自动识别游泳开关 0 关闭1 开功能表getAutoActivitySetGetUseNewStructExchange开启后，通过获取识别开关libManager.send(evt: CmdEvtType.setActivitySwitch)判断此开关支不支持(-1 不支持) auto_identify_sport_smart_rope int 自动识别智能跳绳开关 0关闭1开功能表getAutoActivitySetGetUseNewStructExchange开启后，通过获取识别开关libManager.send(evt: CmdEvtType.setActivitySwitch)判断此开关支不支持(-1 不支持) 示例： { \"auto_identify_sport_walk\":1, \"auto_identify_sport_run\":0, \"auto_identify_sport_bicycle\":0, \"auto_pause_on_off\":0, \"auto_end_remind_on_off_on_off\":1, \"auto_identify_sport_elliptical\":0, \"auto_identify_sport_rowing\":0, \"auto_identify_sport_swim\":0, \"auto_identify_sport_smart_rope\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-19 15:41:15 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetDrinkWaterReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetDrinkWaterReminder.html","title":"设置喝水提醒","keywords":"","body":"设置喝水提醒 功能表：DrinkWaterReminder 【setNoReminderOnDrinkReminder，setDrinkWaterAddNotifyFlag】 Flutter示例： /// 设置喝水提醒事件号 setDrinkWaterRemind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_drink_water_reminder), /// 设置喝水提醒 libManager.send(evt: CmdEvtType.setDrinkWaterRemind, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 开关0 关1 开 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 repeat int 重复bit0 无效bit1-bit7 分别是星期1到星期70 不重复 1重复 interval int 提醒间隔单位分钟 notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知 需要固件开启功能表支持 setDrinkWaterAddNotifyFlag do_not_disturb_on_off int 免提醒开关 00关 01开需要固件开启功能表支持 setNoReminderOnDrinkReminder no_disturb_start_hour int 免提醒开始时间 时需要固件开启功能表支持 setNoReminderOnDrinkReminder no_disturb_start_minute int 免提醒开始时间 分需要固件开启功能表支持 setNoReminderOnDrinkReminder no_disturb_end_hour int 免提醒结束时间 时需要固件开启功能表支持 setNoReminderOnDrinkReminder no_disturb_end_minute int 免提醒结束时间 分需要固件开启功能表支持 setNoReminderOnDrinkReminder 示例： { \"on_off\":1, \"start_hour\":18, \"start_minute\":7, \"end_hour\":23, \"end_minute\":12, \"repeat\":127, \"interval\":20, \"notify_flag\":1, \"do_not_disturb_on_off\":1, \"no_disturb_start_hour\":9, \"no_disturb_start_minute\":0, \"no_disturb_end_hour\":12, \"no_disturb_end_minute\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-19 17:11:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSimpleFileOperations.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSimpleFileOperations.html","title":"简单文件操作","keywords":"","body":"设置简单文件操作 Flutter示例： /// 简单文件操作事件号 funcSimpleFileOpt( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_simple_file_operations), /// 简单文件操作 libManager.send(evt: CmdEvtType.funcSimpleFileOpt, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 operate int 操作类型 0 获取1 覆盖2 删除3 复制 index int 索引号 dest_index int 目的索引,只用于复制,其他情况下无效 示例： { \"operate\":0, \"index\":1, \"dest_index\":0 } App收到的json字段： 字段名 字段类型 字段说明 error int 错误码0操作成功,其他值为错误 operate int 操作类型 0 获取1 覆盖1 删除 index int 索引号 示例： { \"error\":0, \"operate\":0, \"index\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMenuList.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetMenuList.html","title":"设置菜单列表","keywords":"","body":"设置菜单列表 功能表：setMenuListMain7【supportCompass(待补充)，supportBarometricAltimeter(待补充)，support_call_list(待补充)，supportSetMenuListTypeMeasure(待补充)】 Flutter示例： /// 设置菜单列表事件号 setMenuList( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_menu_list), /// 设置菜单列表 libManager.send(evt: CmdEvtType.setHeartRateMode, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 items int [] 菜单列表且自带排序无排序情况,有值则显示,无值则不现实有排序情况,需要按照数组从0开始0 无效1 步数2 心率3 睡眠4 拍照5 闹钟6 音乐7 秒表8 计时器9 运动模式10 天气11 呼吸锻炼12 查找手机13 压力14 数据三环15 时间界面16 最近一次活动17 健康数据 18 血氧 19 菜单设置20 (20)alexa语音依次显示 21 X屏（gt01pro-X新增）22 卡路里 （Doro Watch新增）23 距离 （Doro Watch新增）24 一键测量 (IDW05新增) 25 renpho health(润丰健康)(IDW12新增) 26 指南针 (mp01新增)27 气压高度计(mp01新增) 示例： { \"items\": [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTakePicture.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTakePicture.html","title":"设置控制拍照","keywords":"","body":"设置控制拍照 功能表：bleControlTakePhoto(SDK待补充) Flutter示例： /// 控制拍照事件号 setTakePicture( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_take_picture), /// 控制拍照 libManager.send(evt: CmdEvtType.setTakePicture, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 0 关1 开 示例： { \"on_off\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetNotice.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetNotice.html","title":"设置通知中心开关","keywords":"","body":"设置通知中心开关 功能表：ancs(c库jsonid SDK待补充)【setMsgAllSwitch】 Flutter示例： /// 设置通知中心事件号 setNotificationCenter( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_notice), /// 设置通知中心 libManager.send(evt: CmdEvtType.setNotificationCenter, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 notify_switch int 通知提醒开关0：总开关关(预留 无效功能)1：ble总开关开(发起配对 IOS专用)2：设置子开关3：只开bt（开关）4：ble、bt都开（开关） call_switch int 来电子提醒开关 1：开0：关 notify_item1 int 子应用开关1 每个bit代表一个应用 notify_item2 int 子应用开关2 每个bit代表一个应用 call_delay int 来电提醒延时 单位秒 notify_item3 int 子应用开关3 每个bit代表一个应用 notify_item4 int 子应用开关4 每个bit代表一个应用 notify_item5 int 子应用开关5 每个bit代表一个应用 notify_item6 int 子应用开关6 每个bit代表一个应用 notify_item7 int 子应用开关7 每个bit代表一个应用 notify_item8 int 子应用开关8 每个bit代表一个应用 notify_item9 int 子应用开关9 每个bit代表一个应用 notify_item10 int 子应用开关10 每个bit代表一个应用 msg_all_switch int 消息应用总开关 1：开0：关 notify_item11 int 子应用开关11 每个bit代表一个应用 notify_item12 int 子应用开关12 每个bit代表一个应用 示例： { \"call_delay\" : 0, \"call_switch\" : 1, \"msg_all_switch\" : 1, \"notify_item1\" : 0, \"notify_item2\" : 0, \"notify_item3\" : 0, \"notify_item4\" : 0, \"notify_item5\" : 0, \"notify_item6\" : 0, \"notify_item7\" : 0, \"notify_item8\" : 0, \"notify_item9\" : 0, \"notify_item10\" : 0, \"notify_switch\" : 1, \"notify_item11\" : 0, \"notify_item12\" : 0 } App收到的json字段： 字段名 字段类型 字段说明 notify_switch int 通知提醒开关 status_code int 状态0：未知超时 1：成功2：失败（取消）3：固件配对超时 err_code int 0成功 非0失败 示例： { \"notify_switch\" : 1, \"status_code\" : 1, \"err_code\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-06 10:36:10 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetClearOperations.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetClearOperations.html","title":"设置删除文件","keywords":"","body":"设置删除文件 Flutter示例： /// 删除日志事件号 setClearOperation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_clear_operations), /// 删除日志 libManager.send(evt: CmdEvtType.setClearOperation, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 type int 1：过热日志2：电池日志 示例： { \"type\":1 } App收到的json字段： 字段名 字段类型 字段说明 state int 0成功1失败 示例： { \"state\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBleVoice.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBleVoice.html","title":"设置手机音量下发给固件","keywords":"","body":"设置手机音量下发给设备 功能表：setSetPhoneVoice Flutter示例： /// 手机音量下发给设备事件号 setBleVoice( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_ble_voice), /// 手机音量下发给设备 libManager.send(evt: CmdEvtType.setBleVoice, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 total_voice int 总音量 now_voice int 当前的音量 示例： { \"total_voice\" : 100, \"now_voice\" : 85 } App收到的json字段： 字段名 字段类型 字段说明 state int 0是失败1是成功 示例： { \"state\" : 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-19 16:09:51 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHandWashingReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHandWashingReminder.html","title":"设置洗手提醒","keywords":"","body":"设置洗手提醒 功能表：setHandWashReminder Flutter示例： /// 设置洗手提醒事件号 setHandWashingReminder( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_set_hand_washing_reminder), /// 设置洗手提醒 libManager.send(evt: CmdEvtType.setHandWashingReminder, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 0：关1：开 默认是关闭 start_hour int 提醒开始时间 时 start_minute int 提醒开始时间 分 end_hour int 提醒结束时间 时 end_minute int 提醒结束时间 分 repeat int bit0 无效bit1-bit7 分别是星期1到星期7 interval int 提醒间隔 单位分钟 默认60分钟 示例： { \"on_off\":0, \"start_hour\":0, \"start_minute\":0, \"end_hour\":0, \"end_minute\":0, \"repeat\":0, \"interval\":0 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTakingMedicineReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTakingMedicineReminder.html","title":"设置吃药提醒","keywords":"","body":"设置吃药提醒 功能表：exTableMain11TakingMedicine(SDK待补充) Flutter示例： /// 设置吃药提醒事件号 setTakingMedicineReminder( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_taking_medicine_reminder), /// 设置吃药提醒 libManager.send(evt: CmdEvtType.setTakingMedicineReminder, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 taking_medicine_id int id 从1开始 最多5个 on_off int 0：关1：开 默认是关闭 start_hour int 提醒开始时间 时 start_minute int 提醒开始时间 分 end_hour int 提醒结束时间 时 end_minute int 提醒结束时间 分 repeat int bit0 无效bit1-bit7 分别是星期1到星期7 interval int 提醒间隔 单位分钟 默认60分钟 do_not_disturb_on_off int 免提醒时间段开关0：关1：开 默认是关闭 do_not_disturb_start_hour int 勿扰开始时间 时 do_not_disturb_start_minute int 勿扰开始时间 分 do_not_disturb_end_hour int 勿扰结束时间 时 do_not_disturb_end_minute Int 勿扰结束时间 分 示例： { \"taking_medicine_id\":1, \"on_off\":0, \"start_hour\":10, \"start_minute\":22, \"end_hour\":23, \"end_minute\":0, \"repeat\":127, \"interval\":60, \"do_not_disturb_on_off\":0, \"do_not_disturb_start_hour\":0, \"do_not_disturb_start_minute\":0, \"do_not_disturb_end_hour\":0, \"do_not_disturb_end_minute\":0 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHRModeSmart.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetHRModeSmart.html","title":"设置智能心率模式","keywords":"","body":"设置智能心率模式 功能表：setSmartHeartRate Flutter示例： /// 智能心率模式设置事件号 setHeartRateModeSmart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_heart_rate_mode_smart), /// 智能心率模式设置 libManager.send(evt: CmdEvtType.setHeartRateModeSmart, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 开关：0:关1:开 notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知 high_heart_mode int 1：开启智能心率过高提醒开关0：关闭 low_heart_mode int 1：开启智能心率过低提醒开关0：关闭 high_heart_value int 智能心率过高提醒阈值 low_heart_value int 智能心率过低提醒阈值 start_hour int 心率监测时间段设置开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 示例： { \"mode\":1, \"notify_flag\":0, \"high_heart_mode\":0, \"low_heart_mode\":0, \"high_heart_value\":100, \"low_heart_value\":80, \"start_hour\":9, \"start_minute\":0, \"end_hour\":12, \"end_minute\":0 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 0成功非0是错误码 示例： { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-07 10:31:28 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetNoise.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetNoise.html","title":"设置环境音量的开关和阀值","keywords":"","body":"设置环境音量的开关和阀值 功能表：syncV3Noise Flutter示例： /// 环境音量的开关和阀值事件号 setV3Noise( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_v3_noise), /// 环境音量的开关和阀值 libManager.send(evt: CmdEvtType.setV3Noise, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 全天环境音量开关 1:开0:关闭 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 high_noise_on_off int 阀值开关 1:开0:关闭 high_noise_value int 阀值 示例： { \"mode\":1, \"start_hour\":15, \"start_minute\":0, \"end_hour\":20, \"end_minute\":0, \"high_noise_on_off\":1, \"high_noise_value\":100, } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetScientificSleepSwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetScientificSleepSwitch.html","title":"设置科学睡眠开关","keywords":"","body":"设置科学睡眠开关 功能表：setScientificSleepSwitch Flutter示例： /// 设置科学睡眠开关事件号 setScientificSleepSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_scientific_sleep_switch), /// 设置科学睡眠开关 libManager.send(evt: CmdEvtType.setScientificSleepSwitch, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 模式 2：科学睡眠1：普通睡眠 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 示例： { \"mode\":1, \"start_hour\":23, \"start_minute\":0, \"end_hour\":9, \"end_minute\":0 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTemperatureSwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetTemperatureSwitch.html","title":"设置夜间体温开关","keywords":"","body":"设置夜间体温开关 功能表：setTemperatureSwitchSupport Flutter示例： /// 设置夜间体温开关事件号 setTemperatureSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_temperature_switch), /// 设置夜间体温开关 libManager.send(evt: CmdEvtType.setTemperatureSwitch, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 模式 1：开0：关闭 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 unit int 体温单位设置： 1：c（摄氏度） 2：f（华摄氏度） 示例： { \"mode\":1, \"start_hour\":19, \"start_minute\":0, \"end_hour\":23, \"end_minute\":0, \"unit\":1 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetFitnessGuidance.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetFitnessGuidance.html","title":"设置健身指导开关","keywords":"","body":"设置健身指导开关 功能表：setSetFitnessGuidance Flutter示例： /// 健身指导 setFitnessGuidance( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_fitness_guidance), /// 健身指导 libManager.send(evt: CmdEvtType.setFitnessGuidance, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 健身指导模式开关 1:开0:关闭 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知 go_mode int 走动提醒开关 1:开0:关闭 repeat int 重复bit0：无效bit1-7分别对应周一到周天0 不重复 1重复 target_steps int 目标步数 示例： { \"mode\":1, \"start_hour\":9, \"start_minute\":0, \"end_hour\":18, \"end_minute\":0, \"notify_flag\":1, \"go_mode\":0, \"repeat\":127, \"target_steps\":2000 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-19 17:13:41 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUnreadAppReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetUnreadAppReminder.html","title":"设置未读信息红点提示开关","keywords":"","body":"设置未读信息红点提示开关 功能表：setSetUnreadAppReminder Flutter示例： /// 未读信息红点提示开关事件号 setUnreadAppReminder( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_unread_app_reminder), /// 未读信息红点提示开关 libManager.send(evt: CmdEvtType.setUnreadAppReminder, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 开关1：打开 0：关闭 示例： { \"on_off\":0 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetNotificationStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetNotificationStatus.html","title":"设置通知应用状态(事项提醒通知类型)","keywords":"","body":"设置通知应用状态 功能表：setSetNotificationStatus Flutter示例： /// 目前只适配事项提醒，所以这个接口目前默认设置的是事项提醒的通知类型 /// 通知应用状态设置事件号 setNotificationStatus( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_notification_status), /// 手机app通过这个命令开关，实现事项提醒的通知类型设置 libManager.send(evt: CmdEvtType.setNotificationStatus, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 notify_flag int 通知类型：1：允许通知 2：静默通知 3：关闭通知 示例： { \"notify_flag\":1 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-05 14:49:30 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetRespiRateONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetRespiRateONOFF.html","title":"设置呼吸率开关","keywords":"","body":"设置呼吸率开关 功能表：setRespirationRate Flutter示例： /// 设置呼吸率开关事件号 setRRespiRateTurn( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_respi_rate_on_off), /// 设置呼吸率开关 libManager.send(evt: CmdEvtType.setRRespiRateTurn, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 0：关闭 1：开 示例： { \"on_off\":1 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 0是成功，非0是错误码 示例： { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBodyPowerONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetBodyPowerONOFF.html","title":"设置身体电量开关","keywords":"","body":"设置身体电量开关 功能表：syncV3BodyPower Flutter示例： /// 设置身体电量开关事件号 setBodyPowerTurn( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_body_power_on_off), /// 设置身体电量开关 libManager.send(evt: CmdEvtType.setBodyPowerTurn, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 0:关闭 1:开 示例： { \"on_off\":1 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 0是成功，非0是错误码 示例： { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatherSwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatherSwitch.html","title":"设置天气开关","keywords":"","body":"设置天气开关 功能表：setSetV3Weather Flutter示例： /// 设置天气开关事件号 setWeatherSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_weather_switch), /// 设置天气开关 libManager.send(evt: CmdEvtType.setWeatherSwitch, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 0：关闭 1：开 示例： { \"on_off\":1 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-11-24 11:56:48 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatcherData.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatcherData.html","title":"设置天气数据","keywords":"","body":"设置天气数据 功能表：getWeather Flutter示例： /// 设置天气数据事件号 setWeatherData( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_weatcher_data), /// 设置天气数据 libManager.send(evt: CmdEvtType.setWeatherData, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 type int 天气类型 temp int 当前温度 max_temp int 当天最高温度 min_temp int 当天最低温度 humidity int 当前湿度 uv_intensity int 当前紫外线强度 aqi int 当前污染指数 future 集合 未来三天的天气情况type & min_temp & max_temp的集合 字段名 字段类型 字段说明 type int 未来天气类型 min_temp int 未来最高温度 max_temp int 未来最低温度 代码 天气类型 0x00 其他 0x01 晴 0x02 多云 0x03 阴 0x04 雨 0x05 暴雨 0x06 雷阵雨 0x07 雪 0x08 雨夹雪 0x09 台风 0x0A 沙尘暴 0x0B 夜间晴 0x0C 夜间多云 0x0D 热 0x0E 冷 0x0F 清风 0x10 大风 0x11 雾霾 0x12 阵雨 0x13 多云转晴 0x30 雷 0x31 冰雹 0x32 扬沙 0x33 龙卷风 App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-12 18:00:22 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatcherCityName.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatcherCityName.html","title":"设置天气城市名称","keywords":"","body":"设置天气城市名称 功能表：setWeatherCity 【v3SupportV3LongCityName】 Flutter示例： /// 设置天气城市名称事件号 setWeatherCityName( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_weatcher_city_name), /// 设置天气城市名称 libManager.send(evt: CmdEvtType.setWeatherCityName, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 version int 版本号0 city_name char [] 城市名称 v3SupportV3LongCityName开启后后支持74个字节大小的城市名称v3SupportV3LongCityName不开启功能表默认16个字节大小 示例： { \"version\":0, \"city_name\":\"shenzhen\" } App收到的json字段： 字段名 字段类型 字段说明 version int 0是失败1是成功 err_code int 0成功，非0是错误码 示例： { \"version\":0, \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-06 17:25:18 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatcherSunTime.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetWeatcherSunTime.html","title":"设置日出日落时间","keywords":"","body":"设置日出日落时间 功能表：support_set_weatch_sun_time_0a_06(c库jsonid SDK待补充) Flutter示例： /// 设置日出日落时间事件号 setWeatherSunTime( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_weatcher_set_sun_time), /// 设置日出日落时间 libManager.send(evt: CmdEvtType.setWeatherSunTime, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 sunrise_hour int 日出时间 时 sunrise_min int 日出时间 分 sunset_hour int 日落时间 时 sunset_min int 日落时间 分 示例： { \"sunrise_hour\":6, \"sunrise_min\":12, \"sunset_hour\":18, \"sunset_min\":30 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSystemInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetSystemInfo.html","title":"设置手机操作系统","keywords":"","body":"设置手机操作系统 功能表：getSupportAppSendPhoneSystemInfo Flutter示例： /// 设置app系统事件号 setAppOS( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_app_os), /// 设置app系统 libManager.send(evt: CmdEvtType.setAppOS, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 system int 手机操作系统 0x1:ios 0x2:android system_version int 手机系统版本号 预留 示例： { \"system\" : 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-06 17:13:31 "},"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetVoiceAssistant.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2SetEvt/IDOSetVoiceAssistant.html","title":"设置语音助手开关","keywords":"","body":"设置语音助手开关 功能表：getSupportSetVoiceAssistantStatus Flutter示例： /// 设置手机语音助手开关 setVoiceAssistantOnOff( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_voice_assistant_on_off); /// 设置手机语音助手开关 libManager.send(evt: CmdEvtType.setVoiceAssistantOnOff, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 开关0:关1:开 示例： { \"on_off\" : 1 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 0是成功，非0是错误码 示例： { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-09 17:32:18 "},"doc/IDOGetEvtIntroduction.html":{"url":"doc/IDOGetEvtIntroduction.html","title":"V2获取指令事件","keywords":"","body":"{V2获取指令事件} 功能 获取设备MAC地址 获取设备信息 获取bt名称 获取sn序列号 获取功能表 获取通知中心开关 获得实时数据 获取错误记录 获取文件传输配置 获取HID信息 获取GPS信息 获取热启动参数 获取GPS状态 获取版本信息 获取勿扰模式状态 获取MTU信息 获取默认的运动类型 获取下载语言支持 获取电池信息 获取字库信息 获取设备支持的菜单列表 获取屏幕亮度 获取抬腕数据 获取设备升级状态 获取表盘ID 获取手表名字 获取设备的日志状态 获取设置的卡路里/距离/中高运动时长(日常三环) 获取走动提醒 获取所有的健康监测开关 获取运动模式自动识别开关 获得固件三级版本和BT的3级版本 获取压力值 获取血压算法三级版本号信息 获取固件支持的详情最大设置数量 获取固件不可删除的快捷应用列表 获取固件红点提示开关状态 查询获取bt配对开关、连接、a2dp连接、hfp连接状态 获取固件本地保存联系人文件修改时间 获取心率监测模式 获取全天步数目标 获取单位 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-11-24 09:42:28 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMac.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMac.html","title":"获取设备MAC地址","keywords":"","body":"获取设备mac地址 功能表:每个设备支持 【getBtAddrV2】 Flutter示例： /// 获取mac地址事件号 getMac( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_app_get_mac), /// 获取mac地址 libManager.send(evt: CmdEvtType.getMac, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 mac_addr int [6] 设备的id地址 最大6个字节 bt_addr int [6] bt的蓝牙地址 最大6个字节 示例： { \"bt_addr\" : [ 135, 0, 23, 0, 136, 173 ], \"mac_addr\" : [ 173, 136, 0, 23, 0, 135 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDeviceInfoOnly.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDeviceInfoOnly.html","title":"获取设备信息","keywords":"","body":"获取设备信息 功能表:每个设备支持 Flutter示例： /// 获取设备信息事件号 getDeviceInfoOnly( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.intapp_get_device_info), /// 获取设备信息 libManager.send(evt: CmdEvtType.getDeviceInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 deivce_id int 设备id firmware_version int 版本号 mode int 模式0：运动模式，1：睡眠模式 batt_status int 电池状态 0： 正常1：正在充电2：充满3：低电量 energe int 电量等级 pair_flag int 绑定状态 reboot int 是否重启 如果重启 app会再次同步配置信息给手环 bind_confirm_method int 绑定确认方式 0：默认(注意以前ID号定制),超时时间无效1：单击[按键在下面]2：为长按[按键在下面]3：屏幕点击 横向确认和取消,确认在左边4：屏幕点击 横向确认和取消,确认在右边5：屏幕点击 竖向确认和取消，确认在上边6：屏幕点击 竖向确认和取消，确认在下边7：点击(右边一个按键) bind_confirm_timeout int 超时时间最长为15秒 0表示不超时 platform int 手环的平台 0 ：nordic10 ：realtek 8762x 20 ：cypress psoc630：Apollo3 40：为汇顶 50：nordic+泰凌微, 瑞坤 80：5340 90：炬芯 shape int 0：默认（gt01 方形的）1：圆形2：方形的3：椭圆 dev_type int 0：默认（gt01 手表）1： 手环2：手表 user_defined_dial_main_version int 自定义表盘主版本 从1开始 0：不支持对应的自定义表盘功能 cloud_clock_dial_version int 云端表盘版本号 默认从0开始 是否支持云端表盘有对应的功能表multi_dial (废弃 同user_defined_dial_main_version ) show_bind_choice_ui int 固件绑定时候显示勾勾叉叉ui界面 app根据这个位显示提示固件点击绑定 0：不需要app提示 1：需要app提示 bootload_version int nordic平台bootloader版本信息 最小为1 示例： { \"batt_status\" : 0, \"bind_confirm_method\" : 0, \"bind_confirm_timeout\" : 0, \"bootload_version\" : 0, \"cloud_clock_dial_version\" : 2, \"deivce_id\" : 7453, \"dev_type\" : 2, \"energe\" : 32, \"firmware_version\" : 2, \"mode\" : 1, \"pair_flag\" : 1, \"platform\" : 30, \"reboot\" : 0, \"shape\" : 2, \"show_bind_choice_ui\" : 0, \"user_defined_dial_main_version\" : 2 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDeviceInfoWithBTName.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDeviceInfoWithBTName.html","title":"获取BT名称","keywords":"","body":"获取BT名称 功能表:getBtAddrV2 Flutter示例： /// 获取bt蓝牙名称事件号 getBtName( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_bt_name) /// 获取bt蓝牙名称 libManager.send(evt: CmdEvtType.getBtName, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 bt_name char [32] bt蓝牙名称需要固件开启v2_get_bt_addr 且 alarm_count>0才会返回bt名称，否则返回空 示例： { \"bt_name\" : \"ID206\" } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetSnInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetSnInfo.html","title":"获取SN序列号","keywords":"","body":"获取SN信息 功能表:getSupportGetSnInfo Flutter示例： /// 获取sn事件号 getSnInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_sn_info) /// 获取sn libManager.send(evt: CmdEvtType.getSnInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 len int sn字符串长度 sn char [] sn序列号字符串,最大长度17个字节 示例： { \"len\":11, \"sn\":\"as1d65sa2qs\" } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-11-23 16:28:23 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetFuncTableUser.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetFuncTableUser.html","title":"获取功能表","keywords":"","body":"获取功能表 功能表:每个设备支持 Flutter示例： /// 获取功能表事件号 getFuncTable( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_func_table_user), /// 获取功能表 libManager.send(evt: CmdEvtType.getFuncTable, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 .. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetNoticeStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetNoticeStatus.html","title":"获取通知中心开关","keywords":"","body":"获取通知中心开关 功能表:reminderAncs Flutter示例： /// 获取通知中心的状态事件号 getNoticeStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_notice_status), /// 获取通知中心的状态 libManager.send(evt: CmdEvtType.getNoticeStatus, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 notify_switch int 通知提醒开关0：总开关关(预留 无效功能)1：ble总开关开(发起配对 IOS专用)2：设置子开关3：只开bt（开关）4：ble、bt都开（开关）-1：无效 call_switch int 来电子提醒开关 1:开0:关-1:无效 notify_item1 int 子应用开关1 每个bit代表一个应用 notify_item2 int 子应用开关2 每个bit代表一个应用 call_delay int 来电提醒延时 单位秒 notify_item3 int 子应用开关3 每个bit代表一个应用 notify_item4 int 子应用开关4 每个bit代表一个应用 notify_item5 int 子应用开关5 每个bit代表一个应用 notify_item6 int 子应用开关6 每个bit代表一个应用 notify_item7 int 子应用开关7 每个bit代表一个应用 notify_item8 int 子应用开关8 每个bit代表一个应用 notify_item9 int 子应用开关9 每个bit代表一个应用 notify_item10 int 子应用开关10 每个bit代表一个应用 msg_all_switch int 消息应用总开关 1:开0:关-1:无效(不支持) notify_item11 int 子应用开关11 每个bit代表一个应用 notify_item12 int 子应用开关12 每个bit代表一个应用 示例： { \"call_delay\" : 0, \"call_switch\" : 1, \"msg_all_switch\" : 0, \"notify_item1\" : 0, \"notify_item10\" : 0, \"notify_item11\" : 0, \"notify_item12\" : 0, \"notify_item2\" : 0, \"notify_item3\" : 0, \"notify_item4\" : 0, \"notify_item5\" : 0, \"notify_item6\" : 0, \"notify_item7\" : 0, \"notify_item8\" : 0, \"notify_item9\" : 0, \"notify_item10\" : 0, \"notify_switch\" : 1, \"notify_item11\" : 0, \"notify_item12\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-06 10:36:08 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetLiveData.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetLiveData.html","title":"获得实时数据","keywords":"","body":"获得实时数据 功能表:getRealtimeData Flutter示例： /// 获得实时数据事件号 getLiveData( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_live_data), /// 获得实时数据 libManager.send(evt: CmdEvtType.getLiveData, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 flag int 0：无功能1：强制打开心率监测2：强制打开血压监测 App收到的json字段： 字段名 字段类型 字段说明 total_step int 总步数 total_calories int 总卡路里 单位大卡 total_distances int 总距离 单位m total_active_time int 总活动时长单位秒 heart_rate int 心率数据单位bpm如果没有心率功能，该值为0 示例： { \"heart_rate\" : 0, \"total_active_time\" : 0, \"total_calories\" : 0, \"total_distances\" : 0, \"total_step\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetErrorRecord.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetErrorRecord.html","title":"获取错误记录","keywords":"","body":"获取错误记录 功能表:getFlashLog Flutter示例： /// 获取错误记录事件号 getErrorRecord( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_error_record), /// 获取错误记录 libManager.send(evt: CmdEvtType.getErrorRecord, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 type int 0 查询1 清除记录 App收到的json字段： 字段名 字段类型 字段说明 type int 0 查询1 清除记录 reset_flag int 0 正常1 硬错误(Hard Faul)2 看门狗服务3 断言复位4 掉电服务5 其他异常 hw_error int 硬件错误码 0 正常1 加速度错误2 心率错误3 TP错误4 flash错误 示例： { \"type\":0, \"reset_flag\":0, \"hw_error\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDataTranConfig.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDataTranConfig.html","title":"获取文件传输配置","keywords":"","body":"获取图标文件传输配置传输 / 获取图片文件传输配置 功能表:getNotifyIconAdaptive Flutter示例： /// 文件传输配置传输获取事件号 getDataTranConfig( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_data_tran_configure), /// 文件传输配置传输获取 libManager.send(evt: CmdEvtType.getDataTranConfig, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 type int 运动类型 对应的图标类型 0：这个字段无效1：运动小图标2：运动大图标3：运动动画 4：运动等大小图标 5：运动最小图标 evt_type int 事件类型0是这个字段无效 比如 1：短信,2：邮件，3：微信 .... sport_type int 运动类型 0是这个字段无效 运动模式类型1 走路,2 跑步.... 示例： { \"type\":1, \"evt_type\":1, \"sport_type\":1 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 错误码 0是正常，非0是错误 type int 运动类型 对应的图标类型 0：这个字段无效1：运动小图标2：运动大图标 3：运动动画 4：运动中等大小图标 evt_type int 事件类型0是这个字段无效 比如 1：短信,2：邮件，3：微信 .... sport_type int 运动类型0是这个字段无效 运动模式类型, 1 走路,2 跑步.... icon_width int 固件图标需要的宽度（根据type 和 evt_type/sport_type 确定） icon_height int 固件图标需要的高度（根据type 和 evt_type/sport_type 确定） format int 颜色格式 block_size int 压缩块大小 big_sports_num int 运动图标大图标个数 msg_num int 消息图标的个数 small_sports_and_animation_num int 运动动画和小图标的个数 medium_num int 运动中等图标个数 示例： { \"err_code\":0, \"type\":1, \"evt_type\":1, \"sport_type\":1, \"icon_width\":50, \"icon_height\":50, \"format\":133, \"block_size\":1024, \"big_sports_num\":5, \"msg_num\":0, \"small_sports_and_animation_num\":0, \"medium_num\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetHIDInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetHIDInfo.html","title":"获取HID信息","keywords":"","body":"获取HID信息 功能表 /// TODO Flutter示例： /// 获取hid信息事件号 getHidInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_hid_info), /// 获取hid信息 libManager.send(evt: CmdEvtType.getHidInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 is_start int 0没有启动1启动成功 示例： { \"is_start\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetGPSInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetGPSInfo.html","title":"获取GPS信息","keywords":"","body":"获取GPS信息 功能表:getSupportUpdateGps Flutter示例： /// 获取gps信息事件号 getGpsInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_gps_info), /// 获取gps信息 libManager.send(evt: CmdEvtType.getGpsInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 err_code int GPS是否错误0正常 非0异常 fw_version int GPS固件版本 agps_info int AGPS有效期 agps_err_code int AGPS错误值 utc_year int utc时间 年 utc_month int utc时间 月 utc_day int utc时间 日 utc_hour int utc时间 时 utc_minute int utc时间 分 start_mode int 启动模式1 冷启动2 热启动 gns int 定位星选择1 GPS2 GLONASS3 GPS + GLONASS fix_start_bit int 修正标识位默认0 用于调试 示例： { \"err_code\":0, \"fw_version\":512, \"agps_info\":0, \"agps_err_code\":0, \"utc_year\":0, \"utc_month\":0, \"utc_day\":0, \"utc_hour\":0, \"utc_minute\":0, \"start_mode\":2, \"gns\":0, \"fix_start_bit\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetGPSStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetGPSStatus.html","title":"获取GPS状态","keywords":"","body":"获取GPS状态 功能表:getSupportUpdateGps Flutter示例： /// 获取gps状态事件号 getGpsStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_gps_status), /// 获取gps状态 libManager.send(evt: CmdEvtType.getGpsStatus, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 gps_run_status int GPS 运行状态 0 没有运行1 正在搜星2 为正在跟踪 agps_is_valid int agps 是否有效 有效期剩余小时非0为有效 示例： { \"gps_run_status\":0, \"agps_is_valid\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetVersionInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetVersionInfo.html","title":"获取版本信息","keywords":"","body":"获取版本信息 功能表:getVersionInfo Flutter示例： /// 获取版本信息事件号 getVersionInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_version_info), /// 获取版本信息 libManager.send(evt: CmdEvtType.getVersionInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 sdk_version int hr_algorithm_version int 心率算法版本 sleep_algorithm_version int 睡眠算法版本 step_algorithm_version int 计步算法版本 gesture_recognition_version int 手势识别算法版本 pcb_version int PCB 版本 数值为x10,11表示1.1的版本 spo2_version int 穿戴版本 wear_version int 血氧算法版本 stress_version int 压力算法版本 kcal_version int 卡路里算法版本 dis_version int 距离算法版本 axle3_swim_version int 三轴传感器游泳算法版本 axle6_swim_version int 六轴传感器游泳算法版本 act_mode_type_version int 运动自识别算法版本 all_day_hr_version int 全天心率算法版本 gps_version int gps算法版本 peripherals_version int 外设版本 206定制项目外设版本 示例： { \"act_mode_type_version\" : 10, \"all_day_hr_version\" : 45, \"axle3_swim_version\" : 19, \"axle6_swim_version\" : 19, \"dis_version\" : 4, \"gesture_recognition_version\" : 33, \"gps_version\" : 0, \"hr_algorithm_version\" : 45, \"kcal_version\" : 5, \"pcb_version\" : 1, \"peripherals_version\" : 0, \"sdk_version\" : 15, \"sleep_algorithm_version\" : 1, \"spo2_version\" : 24, \"step_algorithm_version\" : 25, \"stress_version\" : 4, \"wear_version\" : 22 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDoNotDisturb.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDoNotDisturb.html","title":"获取勿扰模式状态","keywords":"","body":"获取勿扰模式状态 功能表:getDoNotDisturbMain3 Flutter示例： /// 获取勿扰模式状态事件号 getNotDisturbStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_do_not_disturb), /// 获取勿扰模式状态 libManager.send(evt: CmdEvtType.getNotDisturbStatus, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 switch_flag int 开关状态1 开启0 关闭-1 不支持 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 have_time_range int 是否有时间范围 0 无效1 表示无时间范围2 表示有时间范围 week_repeat int 预留 noontime_rest_on_off int 午休开关免提醒开关1 开启0 关闭-1 不支持 noontime_rest_start_hour int 提醒开始时间 时 noontime_rest_start_minute int 提醒开始时间 分 noontime_rest_end_hour int 提醒结束时间 时 noontime_rest_end_minute int 提醒结束时间 分 all_day_on_off int 全天勿扰开关1 开启0 关闭-1 不支持 intelligent_on_off int 智能勿扰开关1 开启0 关闭-1 不支持 示例： { \"all_day_on_off\" : 0, \"end_hour\" : 7, \"end_minute\" : 0, \"have_time_range\" : 0, \"intelligent_on_off\" : 0, \"noontime_rest_end_hour\" : 7, \"noontime_rest_end_minute\" : 0, \"noontime_rest_on_off\" : 1, \"noontime_rest_start_hour\" : 22, \"noontime_rest_start_minute\" : 0, \"start_hour\" : 22, \"start_minute\" : 0, \"switch_flag\" : 1, \"week_repeat\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-19 17:49:54 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMtuInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMtuInfo.html","title":"获取MTU信息","keywords":"","body":"获取mtu信息 功能表:getMtu Flutter示例： /// 获取mtu信息事件号 getMtuInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_mtu_info), /// 获取mtu信息 libManager.send(evt: CmdEvtType.getMtuInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 status int 0 表示数据有效1 表示数据无效,等一会儿再获取,数据无效的情况下,mtu 都是20 rx_mtu int app接收mtu tx_mtu int app发送mtu phy_speed int 物理层速度0 为无效1000 为1M2000 为2M512为512K dle_length int DLE长度0表示不支持 示例： { \"dle_length\" : 27, \"phy_speed\" : 285, \"rx_mtu\" : 132, \"status\" : 0, \"tx_mtu\" : 132 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDefaultSportType.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDefaultSportType.html","title":"获取默认的运动类型","keywords":"","body":"获取默认的运动类型 功能表:setV3GetSportSortField Flutter示例： /// 获取默认的运动类型事件号 getDefaultSportType( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_default_sport_type), /// 获取默认的运动类型 libManager.send(evt: CmdEvtType.getDefaultSportType, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 default_show_num int 默认显示的数量 min_show_num int 最小支持的数量 max_show_num int 最大支持的数量 is_supports_sort int 是否支持默认排序0 不支持1 支持 sport_types 集合 运动类型列表集合 type的集合 字段名 字段类型 字段说明 type int [8] 运行类型is_supports_sort=1时有效, 最大个数8个空位填0 示例： { \"default_show_num\" : 27, \"min_show_num\" : 285, \"max_show_num\" : 132, \"is_supports_sort\" : 0, \"sport_types\":[ { \"type\":1 }, { \"type\":2 }, { \"type\":3 }, { \"type\":4 }, { \"type\":5 }, { \"type\":6 }, { \"type\":7 }, { \"type\":8 }] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDownloadLanguage.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDownloadLanguage.html","title":"获取下载语言支持","keywords":"","body":"获取下载语言支持 功能表:getDownloadLanguage Flutter示例： /// 获取下载语言支持事件号 getDownLanguage( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_down_language), /// 获取下载语言支持 libManager.send(evt: CmdEvtType.getDownLanguage, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 use_lang int 当前使用的语言 default_lang int 默认语言 fixed_lang int 固定存储语言个数 max_storage_lang int 最大存储语言 lang_array 集合 已经存储语言值列表集合 value的集合 字段名 字段类型 字段说明 value int [14] 已经存储语言值前default_fixed_lang返回是固件固定的，遇0结束 示例： { \"use_lang\" : 27, \"default_lang\" : 285, \"fixed_lang\" : 132, \"max_storage_lang\" : 0, \"lang_array\":[ { \"value\":1 }, { \"value\":2 }, { \"value\":3 }, { \"value\":4 }, { \"value\":5 }, { \"value\":6 }, { \"value\":7 }, { \"value\":8 }] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-11-29 15:29:45 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetBattInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetBattInfo.html","title":"获取电池信息","keywords":"","body":"获取电池信息 功能表:getBatteryInfo Flutter示例： /// 获取电池信息事件号 getBatteryInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_batt_info), /// 获取电池信息 libManager.send(evt: CmdEvtType.getBatteryInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 type int 电池类型：0：可充电锂电池， 1：纽扣电池 voltage int 电量 status int 电池状态0：正常1：正在充电2：充电完成3：低电量 level int 等级 last_charging_year int 最后一次充电时间 年 last_charging_month int 最后一次充电时间 月 last_charging_day int 最后一次充电时间 日 last_charging_hour int 最后一次充电时间 时 last_charging_minute int 最后一次充电时间 分 last_charging_second int 最后一次充电时间 秒 mode int 0：无效1：正常模式（非省电模式） 2：省电模式 示例： { \"last_charging_day\" : 0, \"last_charging_hour\" : 158, \"last_charging_minute\" : 66, \"last_charging_month\" : 0, \"last_charging_second\" : 0, \"last_charging_year\" : 0, \"level\" : 100, \"mode\" : 0, \"status\" : 0, \"type\" : 0, \"voltage\" : 4317 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetFlashBinInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetFlashBinInfo.html","title":"获取字库信息","keywords":"","body":"获取字库信息 功能表:getFlashLog Flutter示例： /// 获取字库信息事件号 getFlashBinInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_flash_bin_info), /// 获取字库信息 libManager.send(evt: CmdEvtType.getFlashBinInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 status int 状态 0正常,1 字库无效 校验错误,2 版本不匹配 version int 版本号 match_version int 匹配版本号,就是固件需要的字库版本号 check_code int 字库校验码 示例： { \"check_code\" : 1211171869, \"match_version\" : 13, \"status\" : 0, \"version\" : 13 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMenuList.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMenuList.html","title":"获取设备支持的菜单列表","keywords":"","body":"获取设备支持的菜单列表 功能表:getMenuList Flutter示例： /// 获取设备支持的列表事件号 getMenuList( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_menu_list), /// 获取设备支持的列表 libManager.send(evt: CmdEvtType.getMenuList, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 min_show_num int 最小显示个数 max_show_num int 最大显示个数 max_num int 目前列表最大个数 current_show_num int 设备当前显示的列表个数 items 集合 设备当前显示的列表详情index & value的集合 字段名 字段类型 字段说明 index int 序号0开始 最大值13 value int 类型0 无效1 步数2 心率3 睡眠4 拍照5 闹钟6 音乐 7 秒表 8 计时器9 运动模式10 天气11 呼吸锻炼12 查找手机13 压力14 数据三环15 时间界面 16 最近一次活动 17 健康数据 18 血氧 19 菜单设置 20 (20)aleax语音依次显示 21 X屏（gt01pro-X新增）22 卡路里 （Doro Watch新增）23 距离 （Doro Watch新增）24 一键测量 (IDW05新增) 25 renpho health(润丰健康)(IDW12新增) 26 指南针 (mp01新增) 27 气压高度计(mp01新增) 示例： { \"current_show_num\" : 5, \"items\" : [ { \"index\" : 0, \"value\" : 17 }, { \"index\" : 1, \"value\" : 2 }, { \"index\" : 2, \"value\" : 13 }, { \"index\" : 3, \"value\" : 16 }, { \"index\" : 4, \"value\" : 20 }, { \"index\" : 5, \"value\" : 6 }, { \"index\" : 6, \"value\" : 10 } ], \"max_num\" : 7, \"max_show_num\" : 7, \"min_show_num\" : 2 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetScreenBrightness.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetScreenBrightness.html","title":"获取屏幕亮度","keywords":"","body":"获取屏幕亮度 功能表:getScreenBrightnessMain9 Flutter示例： /// 获取屏幕亮度事件号 getScreenBrightness( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_screen_brightness), /// 获取屏幕亮度 libManager.send(evt: CmdEvtType.getScreenBrightness, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 level int 亮度等级(0-100) opera int 0 自动1 手动 如果是自动同步配置,请发送00,如果是用户调节请发送01 mode int 0 指定等级1 使用环境光传感器2 level不起作用 auto_adjust_night int 夜间自动亮度调整 0 无效,由固件定义1 关闭2 夜间自动调整亮度3 夜间降亮度使用设置的时间 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 night_level int 夜间亮度 show_interval int 显示间隔 示例： { \"auto_adjust_night\" : 1, \"end_hour\" : 6, \"end_minute\" : 0, \"level\" : 60, \"mode\" : 0, \"night_level\" : 0, \"opera\" : 1, \"show_interval\" : 5, \"start_hour\" : 19, \"start_minute\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUpHandGesture.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUpHandGesture.html","title":"获取抬腕数据","keywords":"","body":"获取抬腕数据 功能表:getUpHandGestureEx Flutter示例： /// 获取抬腕数据事件号 getUpHandGesture( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_up_hand_gesture), /// 获取抬腕数据 libManager.send(evt: CmdEvtType.getUpHandGesture, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 on_off int 开关1 开0 关-1 不支持 show_second int 亮屏时间 单位秒 has_time_range int 是否有时间范围,1 有0 没有 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 示例： { \"end_hour\" : 0, \"end_minute\" : 0, \"has_time_range\" : 0, \"on_off\" : 1, \"show_second\" : 5, \"start_hour\" : 0, \"start_minute\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUpdateStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUpdateStatus.html","title":"获取设备升级状态","keywords":"","body":"获取设备升级状态 功能表:getDeviceUpdateState Flutter示例： /// 获取设备升级状态事件号 getUpdateStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_update_state), /// 获取设备升级状态 libManager.send(evt: CmdEvtType.getUpdateStatus, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 dev_vesion int 固件版本号 state int 0是正常状态1是升级状态 示例： { \"dev_vesion\":0, \"state\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDevicesLogStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetDevicesLogStatus.html","title":"获取设备的日志状态","keywords":"","body":"获取设备的日志状态 功能表:getDeviceLogState Flutter示例： /// 获取设备的日志状态事件号 getDeviceLogState( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_devices_log_state), /// 获取设备的日志状态 libManager.send(evt: CmdEvtType.getDeviceLogState, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 type int 0：没有对应的日志产生 1：固件重启log（100- 200）2：固件异常（0-100） err_code int 固件重启log错误码 0正常 示例： { \"err_code\":4, \"type\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMainSportGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetMainSportGoal.html","title":"获取设置的卡路里/距离/中高运动时长(日常三环)","keywords":"","body":"获取设置的卡路里/距离/中高运动时长 功能表:getSupportGetMainSportGoalV3 【setCalorieGoal，exMain3DistanceGoal(待补充)，setMidHighTimeGoal，getSupportSetGetTimeGoalTypeV2】 Flutter示例： /// 获取设置的卡路里/距离/中高运动时长事件号 getMainSportGoal( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_main_sport_goal), /// 获取设置的卡路里/距离/中高运动时长 libManager.send(evt: CmdEvtType.getMainSportGoal, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 time_goal_type int 0：无效 1：日目标 2：周目标 需要固件开启功能表 getSupportSetGetTimeGoalTypeV2 App收到的json字段： 字段名 字段类型 字段说明 calorie int 活动卡路里目标 单位千卡需要固件开启功能表 setCalorieGoal distance int 距离 单位米 calorie_min int 活动卡路里最小值 calorie_max int 活动卡路里最大值 mid_high_time_goal int 中高运动时长的目标 单位秒需要固件开启功能表setMidHighTimeGoal walk_goal_time int 目标时间单位秒 time_goal_type int 0：无效 1：日目标 2：周目标需要固件开启功能表 getSupportSetGetTimeGoalTypeV2 示例： { \"calorie\" : 4, \"distance\" : 200, \"calorie_min\" : 101, \"calorie_max\" : 500, \"mid_high_time_goal\" : 1, \"walk_goal_time\" : 1, \"time_goal_type\" : 1, } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 11:25:21 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetWalkReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetWalkReminder.html","title":"获取走动提醒","keywords":"","body":"获取走动提醒 功能表:getWalkReminderV3 【setWalkReminderAddNotify，getSupportSetGetNoReminderOnWalkReminderV2】 Flutter示例： /// 获取走动提醒事件号 getWalkRemind( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_walk_reminder), /// 获取走动提醒 libManager.send(evt: CmdEvtType.getWalkRemind, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 on_off int 0 关1 开 goal_step int 目标步数 废弃 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 repeat int 重复bit0无效，bit1~bit7分别是星期1到星期7，1重复，0不重复 goal_time int 目标时间 废弃 notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知需要固件开启功能表setWalkReminderAddNotify do_not_disturb_on_off int 免提醒开关0 关 1开需要固件开启功能表getSupportSetGetNoReminderOnWalkReminderV2 no_disturb_start_hour int 免提醒开始时间 时需要固件开启功能表getSupportSetGetNoReminderOnWalkReminderV2 no_disturb_start_minute int 免提醒开始时间 分需要固件开启功能表getSupportSetGetNoReminderOnWalkReminderV2 no_disturb_end_hour int 免提醒结束时间 时需要固件开启功能表getSupportSetGetNoReminderOnWalkReminderV2 no_disturb_end_minute int 免提醒结束时间 分需要固件开启功能表getSupportSetGetNoReminderOnWalkReminderV2 示例： { \"on_off\" : 0, \"goal_step\" : 0, \"start_hour\" : 18, \"start_minute\" : 0, \"end_hour\" : 23, \"end_minute\" : 0, \"repeat\" : 127, \"goal_time\" : 0, \"notify_flag\" : 2, \"do_not_disturb_on_off\" : 0, \"no_disturb_start_hour\" : 0, \"no_disturb_start_minute\" : 0, \"no_disturb_end_hour\" : 0, \"no_disturb_end_minute\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-19 17:52:51 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetAllHealthSwitchState.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetAllHealthSwitchState.html","title":"获取所有的健康监测开关","keywords":"","body":"获取所有的健康监测开关 功能表:getHealthSwitchStateSupportV3 Flutter示例： /// 获取所有的健康监测开关事件号 getAllHealthSwitchState( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_all_health_switch_state), /// 获取所有的健康监测开关 libManager.send(evt: CmdEvtType.getAllHealthSwitchState, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 heart_mode int 连续测量心率开关 1:开0:关-1:不支持 pressure_mode int 压力自动检测开关 1:开0:关-1:不支持 spo2_mode int 血氧自动检测开关 1:开0:关-1:不支持 science_mode int 科学睡眠模式 2:科学睡眠1:普通睡眠-1:不支持 temperature_mode int 夜间体温开关 1:开0:关-1:不支持 noise_mode int 噪声开关 1:开0:关-1:不支持 menstrual_mode int 生理周期开关 1:开0:关-1:不支持 walk_mode int 走动提醒开关 1:开0:关-1:不支持 handwashing_mode int 洗手提醒开关 1:开0:关-1:不支持 drinkwater_mode int 喝水提醒开关 1是开0是关 respir_rate_state int 呼吸率开关 1:开0:关-1:不支持 body_power_state int 身体电量开关 1:开0:关-1:不支持 heartmode_notify_flag int 心率通知状态类型 0无效 1：允许通知2：静默通知3：关闭通知 pressure_notify_flag int 压力通知状态类型 0无效 1：允许通知2：静默通知3：关闭通知 spo2_notify_flag int 血氧通知状态类型 0无效 1：允许通知2：静默通知3：关闭通知 menstrual_notify_flag int 生理周期通知状态类型 0无效 1：允许通知2：静默通知3：关闭通知 guidance_notify_flag int 健身指导通知状态类型 0无效 1：允许通知2：静默通知3：关闭通知 reminder_notify_flag int 提醒事项通知状态类型 0无效 1：允许通知2：静默通知3：关闭通知 示例： { \"heart_mode\" : 1, \"pressure_mode\" : 1, \"spo2_mode\" : 1, \"science_mode\" : 0, \"temperature_mode\" : 0, \"noise_mode\" : 1, \"menstrual_mode\" : 0, \"walk_mode\" : 0, \"handwashing_mode\" : -1, \"drinkwater_mode\" : -1, \"heartmode_notify_flag\" : -1, \"pressure_notify_flag\" : 1, \"spo2_notify_flag\" : 1, \"menstrual_notify_flag\" : 0, \"guidance_notify_flag\" : -1, \"reminder_notify_flag\" : 0, \"respir_rate_state\" : 0, \"body_power_state\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetActivitySwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetActivitySwitch.html","title":"获取运动模式自动识别开关","keywords":"","body":"获取运动模式自动识别开关 功能表:getActivitySwitch Flutter示例： /// 运动模式自动识别开关获取事件号 getActivitySwitch( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_activity_switch), /// 运动模式自动识别开关获取 libManager.send(evt: CmdEvtType.getActivitySwitch, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 err_code int 0是成功非0 是错误 auto_identify_sport_walk int 自动识别走路开关 0 关闭,1 开,-1 无效(不支持) auto_identify_sport_run int 自动识别跑步开关 0 关闭,1 开,-1 无效(不支持) auto_identify_sport_bicycle int 自动识别自行车开关 0 关闭,1 开,-1 无效(不支持) auto_pause_on_off int 运动自动暂停 0 关闭,1 开,-1 无效(不支持) auto_end_remind_on_off_on_off int 结束提醒 0 关闭,1 开,-1 无效(不支持) auto_identify_sport_elliptical int 自动识别椭圆机开关 0 关闭,1 开,-1 无效(不支持) auto_identify_sport_rowing int 自动识别划船机开关 0 关闭,1 开,-1 无效(不支持) auto_identify_sport_swim int 自动识别游泳开关 0 关闭,1 开,-1 无效(不支持) auto_identify_sport_smart_rope int 自动识别智能跳绳开关 0 关闭,1 开,-1 无效(不支持) 示例： { \"err_code\":0, \"auto_identify_sport_walk\":1, \"auto_identify_sport_run\":1, \"auto_identify_sport_bicycle\":-1, \"auto_pause_on_off\":0, \"auto_end_remind_on_off_on_off\":0, \"auto_identify_sport_elliptical\":0, \"auto_identify_sport_rowing\":0, \"auto_identify_sport_swim\":-1, \"auto_identify_sport_smart_rope\":-1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetFirmwareBtVersion.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetFirmwareBtVersion.html","title":"获得固件三级版本和BT的3级版本","keywords":"","body":"获得固件三级版本和BT的3级版本 功能表:getBleAndBtVersion Flutter示例： /// 获得固件三级版本和bt的3级版本事件号 getFirmwareBtVersion( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_get_firmware_bt_version), /// 获得固件三级版本和bt的3级版本 libManager.send(evt: CmdEvtType.getFirmwareBtVersion, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 firmware_version1 int 固件版本version1 firmware_version2 int 固件版本version2 firmware_version3 int 固件版本version3 BT_flag int BT版本生效标志位0：无效1：说明固件有对应的BT固件 BT_version1 int BT的版本version1 BT_version2 int BT的版本version2 BT_version3 int BT的版本version3 BT_match_version1 int BT的所需要匹配的版本version1 BT_match_version2 int BT的所需要匹配的版本version2 BT_match_version3 int BT的所需要匹配的版本version3 示例： { \"BT_flag\" : 1, \"BT_match_version1\" : 2, \"BT_match_version2\" : 0, \"BT_match_version3\" : 7, \"BT_version1\" : 2, \"BT_version2\" : 0, \"BT_version3\" : 9, \"firmware_version1\" : 2, \"firmware_version2\" : 0, \"firmware_version3\" : 6 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetBpAlgVersion.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetBpAlgVersion.html","title":"获取血压算法三级版本号信息","keywords":"","body":"获取血压算法三级版本号信息 功能表:setSupportV3Bp Flutter示例： /// 获取血压算法三级版本号信息事件号 getBpAlgVersion( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_bp_alg_version), /// 获取血压算法三级版本号信息 libManager.send(evt: CmdEvtType.getBpAlgVersion, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 三级版本号拼接：version1.version2.version3 bp_version_1 int 固件血压算法版本version1 bp_version_2 int 固件血压算法版本version2 bp_version_3 int 固件血压算法版本version3 示例： { \"bp_version_1\":0, \"bp_version_2\":0, \"bp_version_3\":6 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetSupportMaxSetItemNum.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetSupportMaxSetItemNum.html","title":"获取固件支持的详情最大设置数量","keywords":"","body":"获取固件支持的详情最大设置数量 功能表:getSetMaxItemsNum Flutter示例： /// 获取固件支持的详情最大设置数量事件号 getSupportMaxSetItemsNum( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_support_max_set_items_num ), /// 获取固件支持的详情最大设置数量 libManager.send(evt: CmdEvtType.getSupportMaxSetItemsNum, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 contact_max_set_num int 常用联系人 固件支持app下发最大设置数量 0默认10个 reminder_max_set_num int 日程提醒 固件支持app下发最大设置数量 0默认30条 msg_max_buff_size int 消息提醒最大发送缓存大小 0默认250字节 示例： { \"contact_max_set_num\":0, \"reminder_max_set_num\":0, \"msg_max_buff_size\":300, } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 11:32:37 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUndeletableMenuList.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUndeletableMenuList.html","title":"获取固件不可删除的快捷应用列表","keywords":"","body":"获取固件不可删除的快捷应用列表 功能表:getDeletableMenuListV2 Flutter示例： /// 获取固件不可删除的快捷应用列表事件号 getUnerasableMeunList( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_undeleteable_meun_list ), /// 获取固件不可删除的快捷应用列表 libManager.send(evt: CmdEvtType.getUnerasableMeunList, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 num int 列表详情个数 最大个数10 item_list int [10] 不可删除的应用列表0 无效1 步数2 心率3 睡眠4 拍照5 闹钟6 音乐7 秒表8 计时器9 运动模式10 天气11 呼吸锻炼12 查找手机13 压力14 数据三环15 时间界面16 最近一次活动17 健康数据18 血氧 19 菜单设置20 (20)aleax语音依次显示21 X屏（gt01pro-X新增）22 卡路里 （Doro Watch新增）23 距离 （Doro Watch新增）24 一键测量 (IDW05新增)25 renpho health(润丰健康)(IDW12新增) 26 指南针 (mp01新增) 27 气压高度计(mp01新增) 示例： { \"num\":4, \"item_list\":[ 1, 2, 3, 4 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUnreadAppONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUnreadAppONOFF.html","title":"获取固件红点提示开关状态","keywords":"","body":"获取固件红点提示开关状态 功能表:TODO Flutter示例： /// 获取红点提醒开关事件号 getUnreadAppReminder( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_unread_app_onoff ), /// 获取红点提醒开关 libManager.send(evt: CmdEvtType.getUnreadAppReminder, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 on_off int 开关状态 1:打开 0:关闭-1:不支持 示例： { \"on_off\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetBtStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetBtStatus.html","title":"查询获取bt配对开关、连接、a2dp连接、hfp连接状态","keywords":"","body":"查询获取bt配对开关、连接、a2dp连接、hfp连接状态(仅支持带bt蓝牙的设备) 功能表:getBleAndBtVersion Flutter示例： /// 查询bt配对开关、连接、a2dp连接、hfp连接状态(仅支持带bt蓝牙的设备)事件号 getBtNotice( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_set_bt_notice), /// 查询bt配对开关、连接、a2dp连接、hfp连接状态(仅支持带bt蓝牙的设备) libManager.send(evt: CmdEvtType.getBtNotice, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 bt_connect_states int 1：bt连接状态开0：bt连接状态关-1：无效 bt_pair_states int 1：bt配对状态开0：bt配对状态关-1：无效 a2dp_connect_states int 1：a2dp连接状态开0：a2dp连接状态关-1：无效 hfp_connect_states int 1：hfp连接状态开0：hfp连接状态关-1：无效 示例： { \"bt_connect_states\":1, \"bt_pair_states\":1, \"a2dp_connect_states\":1, \"hfp_connect_states\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetContactReviceTime.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetContactReviceTime.html","title":"获取固件本地保存联系人文件修改时间","keywords":"","body":"获取固件本地保存联系人文件修改时间 功能表:TODO Flutter示例： /// 获取固件本地保存联系人文件修改时间事件号 getContactReviseTime( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_contact_revice_time ), /// 获取固件本地保存联系人文件修改时间 libManager.send(evt: CmdEvtType.getContactReviseTime, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 result int 0：不需要下发联系人文件 1：需要下发联系人数据 示例： { \"result\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetHRMode.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetHRMode.html","title":"获取心率监测模式","keywords":"","body":"获取心率监测模式 功能表:getHeartRateModeV2 Flutter示例： /// 获取心率监测模式事件号 getHeartRateMode( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_heart_rate_mode), /// 获取心率监测模式 libManager.send(evt: CmdEvtType.getHeartRateMode, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 mode int 0:关闭1:手动模式2:自动3:持续监测-1:无效 has_time_range int 是否有时间区间 0 无,1 有 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 measurement_interval int 测量间隔单位分钟 示例： { \"mode\":1, \"has_time_range\":0, \"start_hour\":9, \"start_minute\":0, \"end_hour\":12, \"end_minute\":0, \"measurement_interval\":15 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetStepGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetStepGoal.html","title":"获取全天步数目标","keywords":"","body":"获取全天步数目标 功能表:getStepDataTypeV2 Flutter示例： /// 获取全天步数目标事件号 getStepGoal( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_step_goal), /// 获取全天步数目标 libManager.send(evt: CmdEvtType.getStepGoal, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 step int 全天步数日目标 step_week int 全天步数周目标v2_support_set_step_data_type_03_03开启 有效 示例： { \"step\":2000, \"step_week\":6000 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUnit.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV2GetEvt/IDOGetUnit.html","title":"获取单位","keywords":"","body":"获取单位 功能表:getSupportGetUnit Flutter示例： /// 获取单位 getUnit( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_unit), /// 获取单位 libManager.send(evt: CmdEvtType.getUnit, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 dist_unit int 公英制单位设置 -1:无效 1:km(公制) 2:mi(英制) temp int 温度单位设置 -1:无效 1:摄氏度 2:华氏度 swim_pool_unit int 泳池单位设置-1:无效 1:默认米 2:码 language int 语言-1:无效参考语言code表格 语言code列表 代码 语言 功能表id -1 无效 - 1 中文 languageCh 2 英文 languageEnglish 3 法语 languageFrench 4 德语 languageGerman 5 意大利语 languageItalian 6 西班牙语 languageSpanish 7 日语 languageJapanese 8 波兰语 languagePolish 9 捷克语 languageCzech 10 罗马尼亚 languageRomanian 11 立陶宛语 languageLithuanian 12 荷兰语 languageDutch 13 斯洛文尼亚语 languageSlovenian 14 匈牙利语 languageHungarian 15 俄罗斯语 languageRussian 16 乌克兰语 languageUkrainian 17 斯洛伐克语 languageSlovak 18 丹麦语 languageDanish 19 克罗地亚语 languageCroatian 20 印尼语 languageIndonesian 21 韩语 languageKorean 22 印地语 languageHindi 23 葡萄牙语 languagePortuguese 24 土耳其语 languageTurkish 25 泰国语 languageThai 26 越南语 languageVietnamese 27 缅甸语 languageBurmese 28 菲律宾语 languageFilipino 29 繁体中文 languageTraditionalChinese 30 希腊语 languageGreek 31 阿拉伯语 languageArabic 32 瑞典语 languageSweden 33 芬兰语 languageFinland 34 波斯语 languagePersia 35 挪威语 languageNorwegian 36 马来语 languageMalay 37 巴西葡语 languageBrazilianPortuguese 38 孟加拉语 languageBengali 39 高棉语 languageKhmer 获取单位示例： { \"dist_unit\" :1, \"temp\" :1, \"swim_pool_unit\" :1, \"language\" : 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-11-28 12:25:08 "},"doc/IDOOtaEvtIntroduction.html":{"url":"doc/IDOOtaEvtIntroduction.html","title":"OTA指令事件","keywords":"","body":"{OTA事件} 功能 进入升级模式 直接进入升级模式(忽略电量) 设置OTA授权 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOOtaEvt/IDOOtaStart.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOOtaEvt/IDOOtaStart.html","title":"进入升级模式","keywords":"","body":"进入升级模式 Flutter示例： /// 进入升级模式事件号 otaStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_ota_start), /// 进入升级模式 libManager.send(evt: CmdEvtType.otaStart, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 err_flag int 0: 进入OTA成功 1: 失败：电量过低 2: 失败：设备不支持 3: 失败：参数不正确 示例： { \"err_flag\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOOtaEvt/IDOOtaDirectStart.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOOtaEvt/IDOOtaDirectStart.html","title":"直接进入升级模式(忽略电量)","keywords":"","body":"直接进入升级模式(忽略电量) Flutter示例： /// 直接进入升级模式(忽略电量)事件号 otaDirectStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_ota_direct_start), /// 直接进入升级模式(忽略电量) libManager.send(evt: CmdEvtType.otaDirectStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOOtaEvt/IDOOtaAuth.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOOtaEvt/IDOOtaAuth.html","title":"设置OTA授权","keywords":"","body":"设置ota授权 Flutter示例： /// ota授权事件号 otaAuth( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_ota_auth), /// ota授权 libManager.send(evt: CmdEvtType.otaAuth, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 device_id int 设备ID version int 版本0 表示不进行版本校验,用于不能降级的约束,默认0 示例： { \"device_id\":0, \"version\":0 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 错误码0：校验成功1：ID号校验失败2：版本号校验失败3：电量不足4：其他错误 示例： { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOControlEvtIntroduction.html":{"url":"doc/IDOControlEvtIntroduction.html","title":"APP发起通知/控制事件","keywords":"","body":"{APP发起通知/控制事件} 功能 控制设备重启 控制设备断线 清除绑定信息 控制关闭设备 控制设备恢复出厂 控制清除手环缓存 下发通话时间给固件 控制音乐开始 控制音乐停止 控制拍照开始 控制拍照停止 控制寻找手机开始 控制寻找手机停止 控制打开ANCS开始 控制打开ANCS停止 APP传输运动图标信息及状态通知固件 APP通知固件开启BT广播 APP通知固件某些功能的权限状态 APP设置来电快捷回复开关 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-11-24 12:22:42 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlReboot.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlReboot.html","title":"控制设备重启","keywords":"","body":"控制设备重启 Flutter示例： /// 重启设备事件号 reboot(evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_reboot), /// 重启设备 libManager.send(evt: CmdEvtType.reboot, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlDisconnect.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlDisconnect.html","title":"控制设备断线","keywords":"","body":"控制设备断线 Flutter示例： /// 控制断线事件号 controlDisconnect( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_control_disconnect), /// 控制断线 libManager.send(evt: CmdEvtType.controlDisconnect, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlCleanBindInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlCleanBindInfo.html","title":"清除绑定信息","keywords":"","body":"清除绑定信息 Flutter示例： /// 清除绑定信息事件号 cleanBindInfo( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_clean_bond_info), /// 清除绑定信息 libManager.send(evt: CmdEvtType.cleanBindInfo, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlShutdown.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlShutdown.html","title":"控制关闭设备","keywords":"","body":"控制关闭设备 Flutter示例： /// 关闭设备事件号 shutdown( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_shutdown), /// 关闭设备 libManager.send(evt: CmdEvtType.shutdown, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlRestoreFazctory.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlRestoreFazctory.html","title":"控制设备恢复出厂","keywords":"","body":"控制设备恢复出厂 Flutter示例： /// 恢复出厂设置事件号 factoryReset( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_restore_fazctory), /// 恢复出厂设置 libManager.send(evt: CmdEvtType.factoryReset, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 is_success int 1：成功 0：失败 示例： { \"is_success\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlClearCache.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlClearCache.html","title":"控制清除手环缓存","keywords":"","body":"控制清除手环缓存 Flutter示例： /// 清除手环缓存事件号 clearCache( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_clear_cache), /// 清除手环缓存 libManager.send(evt: CmdEvtType.clearCache, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 is_success int 1：成功 0：失败 示例： { \"is_success\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeCallTime.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeCallTime.html","title":"下发通话时间给固件","keywords":"","body":"下发通话时间给固件 Flutter示例： /// 来电接通完成后下发通话时间给固件事件号 setNoticeCallTime( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_notice_call_time), /// 来电接通完成后下发通话时间给固件 libManager.send(evt: CmdEvtType.setNoticeCallTime, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 sec int 通话时间 单位秒 示例： { \"sec\":30 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功1：失败 参数不正确 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlMusicStart.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlMusicStart.html","title":"控制音乐开始","keywords":"","body":"控制音乐开始 Flutter示例： /// 控制音乐开始事件号 musicStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_music_start), /// 控制音乐开始 libManager.send(evt: CmdEvtType.musicStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlMusicStop.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlMusicStop.html","title":"控制音乐停止","keywords":"","body":"控制音乐停止 Flutter示例： /// 控制音乐停止事件号 musicStop( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_music_stop), /// 控制音乐停止 libManager.send(evt: CmdEvtType.musicStop, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlPhotoStart.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlPhotoStart.html","title":"控制拍照开始","keywords":"","body":"控制拍照开始 Flutter示例： /// 开始拍照 (app -> ble)事件号 photoStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_photo_start), /// 开始拍照 (app -> ble) libManager.send(evt: CmdEvtType.photoStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlPhotoStop.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlPhotoStop.html","title":"控制拍照停止","keywords":"","body":"控制拍照停止 Flutter示例： /// 结束拍照 (app -> ble)事件号 photoStop( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_photo_stop), /// 结束拍照 (app -> ble) libManager.send(evt: CmdEvtType.photoStop, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlFindDeviceStart.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlFindDeviceStart.html","title":"控制寻找设备开始","keywords":"","body":"控制寻找设备开始 Flutter示例： /// 寻找设备开始 (app -> ble)事件号 findDeviceStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_find_device_start), /// 寻找设备开始 (app -> ble) libManager.send(evt: CmdEvtType.findDeviceStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlFindDeviceStop.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlFindDeviceStop.html","title":"控制寻找设备停止","keywords":"","body":"控制寻找设备停止 Flutter示例： /// 结束寻找设备 (app -> ble)事件号 findDeviceStop( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_find_device_stop), /// 结束寻找设备 (app -> ble) libManager.send(evt: CmdEvtType.findDeviceStop, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlOpenANCS.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlOpenANCS.html","title":"控制打开ANCS开始","keywords":"","body":"控制打开ancs开始 Flutter示例： /// 打开ancs事件号 openAncs( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_open_ancs), /// 打开ancs libManager.send(evt: CmdEvtType.openAncs, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlCloseANCS.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlCloseANCS.html","title":"控制打开ANCS停止","keywords":"","body":"控制打开ancs停止 Flutter示例： /// 关闭ancs事件号 closeAncs( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_close_ancs), /// 关闭ancs libManager.send(evt: CmdEvtType.closeAncs, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeIconInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeIconInfo.html","title":"APP传输运动图标信息及状态通知固件","keywords":"","body":"APP传输运动图标信息及状态通知固件 Flutter示例： /// app传输运动图标信息及状态通知固件事件号 setNoticeIconInformation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_notcie_icon_informationg ), /// app传输运动图标信息及状态通知固件 libManager.send(evt: CmdEvtType.setNoticeIconInformation, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 states int 1：开始传输 2：结束传输 icon_num int 图标传输数量 示例： { \"states\":1, \"icon_num\":1 } App收到的json字段： 字段名 字段类型 字段说明 status int 成功：0 失败：1 示例： { \"states\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeOpenBroadcast.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeOpenBroadcast.html","title":"APP通知固件开启BT广播","keywords":"","body":"APP通知固件开启bt广播 Flutter示例： /// app通知固件开启bt广播事件号 setNoticeOpenBroadcastn( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_notcie_open_broadcast ), /// app通知固件开启bt广播 libManager.send(evt: CmdEvtType.setNoticeOpenBroadcastn, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 err_code int 成功：0 失败：1 示例： { \"err_code\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeDisableFunction.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeDisableFunction.html","title":"APP通知固件某些功能的权限状态","keywords":"","body":"APP通知固件某些功能的权限状态 Flutter示例： /// app被禁用功能权限导致某些功能无法启用，同时需要告知固件改功能已被禁用 setNoticeDisableFunc( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_notcie_disable_func ), /// app被禁用功能权限导致某些功能无法启用，同时需要告知固件改功能已被禁用 libManager.send(evt: CmdEvtType.setNoticeDisableFunc, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 type int 0：相机权限 enable int 1：启用 0：关闭 示例： { \"type\":0, \"enable\":1 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 成功：0 失败：1 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-04 09:40:49 "},"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeSetCallQuickReplySwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOControlEvt/IDOControlNoticeSetCallQuickReplySwitch.html","title":"APP设置来电快捷回复开关","keywords":"","body":"设置固件来电快捷回复开关 功能表：setSupportSetCallQuickReplyOnOff Flutter示例： /// 设置来电快捷回复开关 setCallQuickReplyOnOff( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_call_quick_reply_on_off), /// 设置来电快捷回复开关 libManager.send(evt: CmdEvtType.setCallQuickReplyOnOff, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 on_off int 0：关闭 1：开 示例： { \"on_off\" :1 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\" :0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-11-24 12:22:37 "},"doc/IDOV3EvtIntroduction.html":{"url":"doc/IDOV3EvtIntroduction.html","title":"V3长包指令事件","keywords":"","body":"{V3长包指令事件} 功能 V3获取表盘列表 V3获取屏幕信息 V3设置表盘 V3设置心率模式 V3控制音乐 V3通知消息提醒 V3设置运动类型排序 V3获取运动默认的类型 V3APP设置ble的闹钟 V3APP获取设备的闹钟 V3APP设置回复快速信息 V3获取设备字库列表 V3语音回复文本 V3设置GPS热启动参数 V3获取固件本地提示音文件信息 V3操作血压校准控制 V3获取表盘列表(新接口) V3设置壁纸表盘颜色和位置 V3设置查询100种运动排序 V3日程提醒 V3设置查询主界面控件排序 V3设置查询运动子项数据排列 V3设置运动城市名称 V3设置单个应用的通知状态 V3获取包名 V3同步协议蓝牙通话常用联系人 V3设置天气数据 V3下发世界时间 V3设置多个走动提醒的时间点 V3获取固件的歌曲名和文件夹 V3操作歌曲或者文件夹 V3通知消息提醒(动态) V3经期的历史数据下发 V3设置表盘顺序 V3APP下发跑步计划(运动计划) V3APP通知设备运动过程切换 V3获取用户习惯信息 V3操作小程序信息 V3智能陪跑信息配置 V3设备通知APP运动过程切换 V3APP获取表盘颜色样式修改 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetDialList.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetDialList.html","title":"V3获取表盘列表","keywords":"","body":"V3获取表盘列表 功能表:getNewWatchList Flutter示例： /// 获取表盘列表事件号 getWatchFaceList( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_get_watch_face_list), /// 获取表盘列表 libManager.send(evt: CmdEvtType.getWatchFaceList, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号 available_count int 剩余个数，可用文件个数 file_max_size int 单个文件最大size 单位KB item 集合 表盘列表详情，file_name的集合 字段名 字段类型 字段说明 file_name char [] 表盘名称 示例： { \"version\":0, \"available_count\":0, \"file_max_size\":140, \"item\":[ { \"file_name\":\"w256.iwf\" }, { \"file_name\":\"w174.iwf\" } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 17:41:38 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetScreenInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetScreenInfo.html","title":"V3获取屏幕信息","keywords":"","body":"V3获取屏幕信息 Flutter示例： /// 获取屏幕信息事件号 getWatchDialInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_get_screen_ifno), /// 获取屏幕信息 libManager.send(evt: CmdEvtType.getWatchDialInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 width int 屏幕宽度 (像素大小) height int 屏幕高度 (像素大小) format int 颜色格式 sizex100 int 尺寸 x100 family_name char [] 家族名称 最大10个字节 block_size int 压缩块大小 示例： { \"block_size\" : 4096, \"family_name\" : \"139\", \"format\" : 133, \"height\" : 280, \"sizex100\" : 0, \"width\" : 240 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 14:28:34 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetDial.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetDial.html","title":"V3设置表盘","keywords":"","body":"V3设置表盘 功能表：getMultiDial 【v3WatchDailSetAddSize】 Flutter示例： /// 设置表盘事件号 setWatchFaceData( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_set_watch_face_data), /// 设置表盘 libManager.send(evt: CmdEvtType.setWatchFaceData, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 operate int 操作 0 查询正在使用表盘1 设置表盘2 删除表盘3 动态申请空间设置对应的空间大小 file_name char [] 表盘名，最大值29个字节 watch_file_size int 未压缩的文件长度固件开启功能表v3WatchDailSetAddSize后app需要下发该字段表盘传输前，固件需要开辟对应的空间保存，需要把未压缩的文件长度传输过去 示例： { \"operate\":0, \"file_name\":\"\", \"watch_file_size\":0 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 错误码，0成功，非0错误 operate int 操作 0 查询正在使用表盘1 设置表盘2 删除表盘3 动态申请空间设置对应的空间大小 file_name char [] 表盘名，最大值29个字节 file_count int 文件的个数需要固件开启功能表v3WatchDailSetAddSize如果operate!=3,这个数据就是1和以前保存一样如果operate =3,动态申请空间设置对应的空间大小，这个对应的就是一个删除的文件名列如果v3WatchDailSetAddSize未开启,该字段默认返回1 示例： { \"err_code\":0, \"operate\":0, \"file_name\":\"w256.iwf\", \"file_count\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 19:42:26 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetHRMode.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetHRMode.html","title":"V3设置心率模式","keywords":"","body":"V3设置心率模式 功能表:setSmartHeartRate 【setSetV3HeartInterval，v3HeartSetRateModeCustom】 Flutter示例： // 设置心率模式事件号 setHeartMode( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_hr_mode), /// 设置心率模式 libManager.send(evt: CmdEvtType.setHeartMode, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 update_time int 更新时间unix 时间戳,秒级 等于0是获取，当前的utc时间挫是设置 mode int 模式0 ：关闭1 ：自动（5分钟）2 ：持续监测（5S）3 ：手动模式(关闭自动)4 ：默认的类型,设置后固件自动设置成默认的模式5 ：设置对应的measurement_interval6 ：智能心率模式(ID206)备注：1.如果配置功能表setSetV3HeartInterval，模式0&模式1&模式2设置无效 2.快速配置的时候，配置setSetV3HeartInterval， 模式5设置起作用3.设置连续心率的时候，如果配置setSetV3HeartInterval这个功能，对应的设置mode是模式5 has_time_range int 是否有时间区间 0 无,1 有 start_hour int 起始时间 时 start_minute int 起始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 measurement_interval int 测量间隔 单位秒 notify_flag int 通知类型 0：无效1：允许通知2：静默通知3：关闭通知固件未开启v3HeartSetRateModeCustom设置无效 high_heart_mode int 1:开启智能心率过高提醒开关0:关闭固件未开启v3HeartSetRateModeCustom设置无效 low_heart_mode int 1:开启智能心率过低提醒开关 0:关闭固件未开启v3HeartSetRateModeCustom设置无效 high_heart_value int 智能心率过高提醒阈值固件未开启v3HeartSetRateModeCustom设置无效 low_heart_value int 智能心率过低提醒阈值固件未开启v3HeartSetRateModeCustom设置无效 APP查询心率模式示例： { \"update_time\":0, \"mode\":0, \"has_time_range\":0, \"start_hour\":0, \"start_minute\":0, \"end_hour\":0, \"end_minute\":0, \"measurement_interval\":0, \"notify_flag\":0, \"high_heart_mode\":0, \"low_heart_mode\":0, \"high_heart_value\":0, \"low_heart_value\":0 } App收到的json字段： 字段名 字段类型 字段说明 update_time int 更新时间unix 时间戳,秒级等于0是获取，当前的utc时间挫是设置 mode int 模式0 ：关闭1 ：自动（5分钟）2 ：持续监测（5S）3 ：手动模式(关闭自动)4 ：默认的类型,设置后固件自动设置成默认的模式5 ：设置对应的measurement_interval6 ：智能心率模式(ID206)-1：无效备注：1.如果配置功能表setSetV3HeartInterval，模式0&模式1&模式2设置无效 2.快速配置的时候，配置setSetV3HeartInterval， 模式5设置起作用3.设置连续心率的时候，如果配置setSetV3HeartInterval这个功能，对应的设置mode是模式5 has_time_range int 是否有时间区间 0 无,1 有 start_hour int 起始时间 时 start_minute int 起始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 measurementInterval int 测量间隔 单位秒 get_sec_mode int 目前手表支持的心率类型全0 ：无效值bit0：5s模式固件未开启setSetV3HeartInterval则返回0 get_min_mode int 目前手表支持的心率类型全0：无效值bit0：1分钟bit1 ：3分钟bit2：5分钟bit3：10分钟bit4：30分钟bit5：255模式bit6：15分钟模式固件未开启setSetV3HeartInterval则返回0 notify_flag int 通知类型 ： 0无效 1：允许通知2：静默通知3：关闭通知固件未开启v3HeartSetRateModeCustom则返回0 high_heart_mode int 1:开启智能心率过高提醒开关0:关闭固件未开启v3HeartSetRateModeCustom则返回0 low_heart_mode int 1:开启智能心率过低提醒开关0:关闭固件未开启v3HeartSetRateModeCustom则返回0 high_heart_value int 智能心率过高提醒阈值固件未开启v3HeartSetRateModeCustom则返回0 low_heart_value Int 智能心率过低提醒阈值固件未开启v3HeartSetRateModeCustom则返回0 Example of the device replying to query the heart rate mode： { \"update_time\":0, \"mode\":5, \"has_time_range\":1, \"start_hour\":9, \"start_minute\":0, \"end_hour\":12, \"end_minute\":19, \"measurement_interval\":5, \"notify_flag\":2, \"high_heart_mode\":0, \"low_heart_mode\":0, \"high_heart_value\":0, \"low_heart_value\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 15:14:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3MusicControl.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3MusicControl.html","title":"V3控制音乐","keywords":"","body":"V3控制音乐 功能表:setBleControlMusic 【v3MusicControl02AddSingerName】 Flutter示例： /// 控制音乐事件号 musicControl( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_music_control), /// 控制音乐 libManager.send(evt: CmdEvtType.musicControl, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 status int 状态0：无效1：播放2：暂停3：停止 cur_time_second int 当前播放时间单位秒 total_time_second int 总时间单位秒 music_name char [] 音乐名称 最大值63个字节 singer_name char [] 歌手名称 最大值63个字节固件未开启v3MusicControl02AddSingerName设置该值无效 示例： { \"status\":1, \"cur_time_second\":5, \"total_time_second\":360, \"music_name\":\"夕阳无限好.mp3\", \"singer_name\":\"eason\" } App收到的json字段： 字段名 字段类型 字段说明 status int 1：成功，0：失败 示例： { \"status\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 18:06:25 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3NoticeMsg.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3NoticeMsg.html","title":"V3通知消息提醒","keywords":"","body":"V3通知消息提醒 功能表:getNotifyMsgV3 Flutter示例： /// 通知消息提醒事件号 noticeMessageV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_notice_message), /// 通知消息提醒 libManager.send(evt: CmdEvtType.noticeMessageV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 verison int 协议库版本号默认version=1version=2是增加msg_id的发送格式 evt_type int 消息应用类型 msg_id int 消息的ID evt_type是消息提醒，起作用 mesg_ID 如果是0这个字段不起作 support_answering bool 支持接听 1 不支持接听 0 support_mute bool 支持静音 1不支持静音 0 support_hang_up bool 支持挂断 1不支持挂断 0 contact char [] 联系人名称 最大63个字节 phone_number char [] 电话号码 最大31个字节 data_text char [] 消息内容 最大249个字节 示例： { \"verison\":2, \"evt_type\":12289, \"msg_id\":1, \"support_answering\":false, \"support_mute\":false, \"support_hang_up\":false, \"msg_data\":\"你好\", \"contact\":\"Lihua\", \"phone_number\":\"13340216580\", \"data_text\":\"123456\" } App收到的json字段： 字段名 字段类型 字段说明 is_success int 1：成功 ， 0失败 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-06 17:34:22 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetSportSort.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetSportSort.html","title":"V3设置运动类型排序","keywords":"","body":"V3设置运动类型排序 功能表:getSportsTypeV3 Flutter示例： /// 设置运动类型排序事件号 setSportSortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_sport_sort), /// 设置运动类型排序 libManager.send(evt: CmdEvtType.setSportSortV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 num int 运动类型详情个数，最大30个 item 集合 运动类型排序详情，index&type的集合 字段名 字段类型 字段说明 index int 排序序号，0无效，从1开始 type int 运动类型，具体看定义的运动类型 示例： { \"num\":3, \"item\":[ { \"index\":1, \"type\":2, }, { \"index\":2, \"type\":22, }, { \"index\":3, \"type\":33, } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 20:09:26 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetAlarm.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetAlarm.html","title":"V3APP设置ble的闹钟","keywords":"","body":"V3APP设置ble的闹钟 功能表:syncV3SyncAlarm Flutter示例： /// v3app设置ble的闹钟事件号 setAlarmV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_alarm), /// v3app设置ble的闹钟 libManager.send(evt: CmdEvtType.setAlarmV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 num int 闹钟详情个数 version int 协议版本号，默认0 item 集合 闹钟详情alarm_id&status&type&hour&minute&repeat&tsnooze_duration&delay_min&name&shock_on_off&repeat_times的集合 字段名 字段类型 字段说明 alarm_id int 闹钟id，从1开始，1~最大支持闹钟个数 status int 0 ：不显示(删除) 1 ：显示 type int 闹钟类型00：起床01：睡觉02：锻炼03：吃药04：约会05：聚会06：会议07：其他 hour int 闹钟时间 时 minute int 闹钟时间 分 repeat int 重复bit 0是总开关位,0关闭 1打开bit1-bit7 周一到周日， 0不重复 1重复 delay_min int 延时分钟单位分钟 name char [] 闹钟名称，最大值23个字节 shock_on_off int 震动开关 0关闭 ，1开启 repeat_times int 重复闹铃次数 重复闹几次,延时开关,设置成0就是关，设置成数字就是重复几次 示例： { \"item\" : [ { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"type\" : 0 } ], \"num\" : 10, \"version\" : 0 } App收到的json字段： 字段名 字段类型 字段说明 status int 0：成功，1：失败 示例： { \"status\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-19 17:19:24 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetAlarm.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetAlarm.html","title":"V3APP获取设备的闹钟","keywords":"","body":"V3APP获取设备的闹钟 功能表:syncV3SyncAlarm Flutter示例： /// v3app获取ble的闹钟事件号 getAlarmV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_alarm), /// v3app获取ble的闹钟 libManager.send(evt: CmdEvtType.getAlarmV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 flag int 获取闹钟标志0:获取所有的闹钟1:收到通知，获取手环修改的闹钟 App收到的json字段： 字段名 字段类型 字段说明 num int 闹钟详情个数 version int 协议版本号，默认0 item 集合 闹钟详情alarm_id&status&type&hour&minute&repeat&delay_min&name&shock_on_off&repeat_times的集合 字段名 字段类型 字段说明 alarm_id int 闹钟id，从1开始，1~最大支持闹钟个数 status int 0 ：不显示(删除) 1 ：显示-1：无效 type int 闹钟类型00：起床01：睡觉02：锻炼03：吃药04：约会05：聚会06：会议07：其他 hour int 闹钟时间 时 minute int 闹钟时间 分 repeat int 重复bit 0是总开关位,0关闭 1打开bit1-bit7 周一到周日， 0不重复 1重复 tsnooze_duration int 预留 delay_min int 延时分钟 name char [24] 闹钟名称，最大值24个字节 shock_on_off int 震动开关0关闭 1开启 repeat_times int 重复闹铃次数 重复闹几次,延时开关,设置成0就是关，设置成数字就是重复几次 示例： { \"item\" : [ { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 } ], \"num\" : 10, \"version\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-19 17:22:59 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetLanguageLibList.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetLanguageLibList.html","title":"V3获取设备字库列表","keywords":"","body":"V3获取设备字库列表 功能表:getLangLibraryV3 Flutter示例： /// v3获取设备字库列表事件号 getLanguageLibraryDataV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_language_library_data), /// v3获取设备字库列表 libManager.send(evt: CmdEvtType.getLanguageLibraryDataV3, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号预留 use_lang int 当前使用的语言 default_lang int 默认语言 fixed_lang int 固定存储语言个数 max_storage_lang int 最大存储语言 items_len int 目前固件支持的语言个数可能没有对应的字库文件 user_len int 目前已经储存的语言个数 items 集合 目前固件支持的语言个数详情集合language_type & language_version的集合 items_user 集合 目前已经储存的语言个数详情集合language_type & language_version的集合 字段名 字段类型 字段说明 language_type int 语言类型0 ：无效 1 ：中文2 ：英文 3 ：法语4 ：德语 5 ：意大利语 6 ：西班牙语7 ：日语 8 ：波兰语 9 ：捷克语10 ：罗马尼亚 11 ：立陶宛语 12 ：荷兰语13 ：斯洛文尼亚语14 ：匈牙利语15 ： 俄罗斯语16 ：乌克兰语 17 ：斯洛伐克语 18 ：丹麦语 19 ：克罗地亚语20 ：印尼语21 ：韩语22 ：印地语23 ：葡萄牙语 24 ：土耳其语25 ：泰国语 26 ：越南语27 ：缅甸语28 ：菲律宾语29：繁体中文30 ：希腊语31 ：阿拉伯语32 ：瑞典语33 ：芬兰语34 ：波斯语35 ：挪威语 language_version int 语言版本号 示例： { \"version\":0, \"use_lang\":1, \"default_lang\":1, \"fixed_lang\":3, \"max_storage_lang\":10, \"items_len\":2, \"user_len\":3, \"items\":[ { \"language_type\":1, \"language_version\":0 }, { \"language_type\":2, \"language_version\":0 } ], \"items_user\":[ { \"language_type\":1, \"language_version\":0 }, { \"language_type\":2, \"language_version\":0 }, { \"language_type\":3, \"language_version\":0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetVoiceReplyTxt.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetVoiceReplyTxt.html","title":"V3语音回复文本","keywords":"","body":"V3语音回复文本 功能表:getSportsTypeV3 Flutter示例： /// v3语音回复文本事件号 setVoiceReplyTxtV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_voice_reply_txt), /// v3语音回复文本 libManager.send(evt: CmdEvtType.setVoiceReplyTxtV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议版本号 2 flag_is_continue int 继续录音的标志0停止录音 1继续录音 title char [] 标题数据最大值31字节 text_content char [] 信息数据最大值511字节 示例： { \"version\":0, \"flag_is_continue\":1, \"title\":\"title\", \"text_content\":\"content\" } App收到的json字段： 字段名 字段类型 字段说明 is_success int 1成功 0失败 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-06 17:37:37 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetHotStartParam.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetHotStartParam.html","title":"V3设置GPS热启动参数","keywords":"","body":"V3设置GPS热启动参数 Flutter示例： /// v3设置gps热启动参数事件号 setHotStartParamV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_hot_start_param), /// v3设置gps热启动参数 libManager.send(evt: CmdEvtType.setHotStartParamV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 accmaj int 参考高度 单位米 accmin int 半主要RMS精度 单位米 accvert int 方向角 单位度 altitude int 高度 x10 bear int 半次要RMS精度 单位米 latitude int 纬度 x10^6 北纬为正数 longitude int 经度 x10^6 东经为正数 tcxo_offset int 晶振偏移 示例： { \"accmaj\":0, \"accmin\":0, \"accvert\":0, \"altitude\":0, \"bear\":0, \"latitude\":0, \"longitude\":0, \"tcxo_offset\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetBleBeep.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetBleBeep.html","title":"V3获取固件本地提示音文件信息","keywords":"","body":"V3获取固件本地提示音文件信息 功能表:getSupportGetBleBeepV3 Flutter示例： /// v3获取固件本地提示音文件信息事件号 getBleBeepV3( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_ble_beep ), /// v3获取固件本地提示音文件信息 libManager.send(evt: CmdEvtType.getBleBeepV3, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号 err_code int 错误码 0成功 非0失败 item_count int 提示音个数 item 集合 提示音文件名列表 name的集合 字段名 字段类型 字段说明 name char [] 提示音文件名 最大值30个字节 示例： { \"version\":0, \"err_code\":0, \"item_count\":2, \"item\":[ { \"name\":\" \" }, { \"name\":\" \" } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 16:41:12 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3ControlBpCal.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3ControlBpCal.html","title":"V3操作血压校准控制","keywords":"","body":"V3操作血压校准控制 功能表:setSupportV3Bp Flutter示例： /// v3血压校准控制 setBpCalControlV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_bp_cal_control), /// v3血压校准控制 libManager.send(evt: CmdEvtType.setBpCalControlV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 operate int 0：无效1：开始设置血压校准2：停止设置血压校准3：获取特性向量信息 file_path char [] 获取固件血压校准的原始数据后保存到的文件路径路径包含文件名(../../blood.txt)operate=1时有效 示例： { \"operate\": 1, \"file_path\":\"/sdcard/lx/blood.txt\" } App收到的json字段： 字段名 字段类型 字段说明 error_code int 错误码 0成功，非0失败 operate int 操作 0：无效1：开始设置血压校准2：停止设置血压校准 3：获取特性向量 sbp_ppg_feature_num int 高压ppg特性向量组数operate=3有效 dbp_ppg_feature_num int 低压ppg特性向量组数operate=3有效 sbp_ppg_feature_items int [] 高压ppg特性向量数组operate=3有效 dbp_ppg_feature_items int [] 低压ppg特性向量数组operate=3有效 示例： { \"error_code\": 0, \"operate\":1, \"sbp_ppg_feature_num\":0, \"dbp_ppg_feature_num\":0, \"dbp_ppg_feature_num\":null; \"dbp_ppg_feature_num\":null; } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 16:22:32 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetDailLIstNew.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetDailLIstNew.html","title":"V3获取表盘列表(新接口)","keywords":"","body":"V3获取表盘列表(新接口) 功能表:getNewWatchList 【setWatchCapacitySizeDisplay，v3SupportGetWatchSize】 Flutter示例： /// v3 获取表盘列表事件号 getWatchListV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_watch_list_new), /// v3 获取表盘列表 libManager.send(evt: CmdEvtType.getWatchListV3, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 local_watch_num int 本地表盘的总个数 cloud_watch_num int 云端表盘的总个数 wallpaper_watch_num int 壁纸表盘的总个数 user_cloud_watch_num int 云端表盘的已经使用个数 user_wallpaper_watch_num int 壁纸表盘的已经使用个数 now_show_watch_name char [] 当前显示的表盘ID 最大30个字节 watch_frame_main_version int 框架版本号 从1开始 file_max_size int 单个文件最大size 预留 list_item_numb int 表盘列表详情个数 watch_capacity_size int 表盘的总容量单位Byte固件开启setWatchCapacitySizeDisplay有效,否则字段赋0 user_watch_capacity_size int 表盘的已经使用容量单位Byte固件开启setWatchCapacitySizeDisplay有效,否则字段赋0 usable_max_download_space_size int 最大的可用表盘下载连续空间大小单位Byte固件开启setWatchCapacitySizeDisplay有效,否则字段赋0 item 集合 表盘列表详情 type & watch_version & sort_number &name &size的集合 字段名 字段类型 字段说明 type int 表盘类型 1：普通表盘 2：壁纸表盘 3：云表盘 watch_version int 当前的表盘版本号 云表盘起作用 sort_number int 表盘序号，从0开始 name char [] 表盘名称 size int 当前表盘占用空间 单位Byte固件开启v3SupportGetWatchSize功能表有效, 否则字段无效 示例： { \"local_watch_num\":0, \"cloud_watch_num\":0, \"wallpaper_watch_num\":0, \"user_cloud_watch_num\":0, \"user_wallpaper_watch_num\":0, \"now_show_watch_name\":\"w123.iwf\", \"watch_frame_main_version\":0, \"file_max_size\":0, \"list_item_numb\":2, \"watch_capacity_size\":0, \"user_watch_capacity_size\":0, \"usable_max_download_space_size\":0, \"item\":[ { \"type\":0, \"watch_version\":0, \"sort_number\":0, \"name\":\"w123.iwf\", \"size\":0 }, { \"type\":0, \"watch_version\":0, \"sort_number\":0, \"name\":\"w846.iwf\", \"size\":0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 17:36:01 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWallpaperDialStyle.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWallpaperDialStyle.html","title":"V3设置壁纸表盘颜色和位置","keywords":"","body":"V3设置壁纸表盘颜色和位置 功能表:setWatchPhotoPositionMove Flutter示例： /// v3 设置壁纸表盘列表事件号 setWallpaperDialReplyV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_wallpaper_dial_reply), /// v3 设置壁纸表盘列表 libManager.send(evt: CmdEvtType.setWallpaperDialReplyV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 operate int 操作 0 ：查询, 1： 设置, 2： 删除壁纸表盘 location int 设置的位置信息 参考九宫格0：无效1：表盘（上左）2：表盘（上中）3：表盘（上右) 4：表盘（中左）5：表盘（中中）6：表盘（中右）7：表盘（下左）8：表盘（下中）9：表盘（下右） hide_type int 隐藏类型0：全部显示1：隐藏子控件(图标和数字) time_color int 时间控件颜色 1个Byte预留 + R(1BYTE) + G(1BYTE) + B (1BYTE) widget_type int 控件类型1：星期/日期2：步数3：距离4：卡路里5：心率6：电量 widget_icon_color int 小控件图标颜色 1个Byte预留 + R(1BYTE) + G(1BYTE) + B (1BYTE) widget_num_color int 小控件数字颜色 1个Byte预留 + R(1BYTE) + G(1BYTE) + B (1BYTE) 示例： { \"operate\":0, \"location\":0, \"hide_type\":0, \"time_color\":0, \"widget_type\":0, \"widget_icon_color\":0, \"widget_num_color\":0 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 0成功 非0失败 operate int 操作 0 ：查询1： 设置2： 删除壁纸表盘 location int 设置的位置信息 hide_type int 隐藏类型 time_color int 时间控件颜色 widget_type int 控件类型 widget_icon_color int 小控件图标颜色 1个Byte预留 + R(1BYTE) + G(1BYTE) + B (1BYTE) widget_num_color int 小控件数字颜色 1个Byte预留 + R(1BYTE) + G(1BYTE) + B (1BYTE) 示例： { \"err_code\":0, \"operate\":0, \"location\":1, \"hide_type\":1, \"time_color\":16777215, \"widget_type\":1, \"widget_icon_color\":0, \"widget_num_color\":65535 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetGet100SportSort.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetGet100SportSort.html","title":"V3设置查询100种运动排序","keywords":"","body":"V3设置查询100种运动排序 功能表:getSportsTypeV3 Flutter示例： /// v3 新的100种运动排序事件号 set100SportSortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_100_sport_sort), /// v3 新的100种运动排序 libManager.send(evt: CmdEvtType.set100SportSortV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 operate int 操作 0：无效 1：查询 2：设置 now_user_location int 当前的显示已经添加的运动位置 all_num int 运动排序列表中的个数 items_set int [] 运动排序列表 最大值150个 示例： { \"version\":0, \"operate\":2, \"now_user_location\":2, \"all_num\":6, \"items_set\":[ 2, 3, 50, 198, 20, 32 ] } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 0成功 非0失败 operate int 操作 0：无效 1：查询2：设置 min_show_num int 最少显示个数 最少是1个 max_show_num int 最大显示个数 最大是20个 now_user_location int 当前的显示已经添加的运动位置，app根据这个位置显示，前面的对应的设备是添加的，这边位置后面是未添加的，查询起作用 all_num int 运动排序列表详情个数 查询起作用最多150组items items 集合 运动排序查询的列表 type & flag的集合查询起作用 字段名 字段类型 字段说明 type int 运动类型 flag int 00都没有下载bit0：小图标已下载 bit1：大图标已下载 bit2：中等图标已下载 bit3：最小图标已下载 示例： { \"version\":0, \"err_code\":0, \"operate\":2, \"min_show_num\":1, \"max_show_num\":20, \"now_user_location\":2, \"all_num\":6, \"items\":null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 19:59:35 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3ScheduleReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3ScheduleReminder.html","title":"V3日程提醒","keywords":"","body":"V3日程提醒 功能表:setScheduleReminder 【getSupportSetRepeatWeekTypeOnScheduleReminderV3，getSupportSetRepeatTypeOnScheduleReminderV3】 Flutter示例： /// v3 设置日程提醒事件号 setSchedulerReminderV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_scheduler_reminder), /// v3 设置日程提醒 libManager.send(evt: CmdEvtType.setSchedulerReminderV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 operate int 操作类型0：无效 1：增 2：删 3：查4：改 num int 提醒事件详情个数,items的个数,设置起作用,其他时候是0, 每次发送1个 items 集合 提醒事件详情 最大设置1个数据 字段名 字段类型 字段说明 id int 提醒事件id每次app下发自增1，从0开始 year int 年 mon int 月 day int 日 hour int 时 min int 分 sec int 秒 repeat_type int 重复的时间 开启getSupportSetRepeatWeekTypeOnScheduleReminderV3后重复提醒类型设置星期重复 bit1-bit7 周一到周日 bit 0是总开关位（开关）开启getSupportSetRepeatTypeOnScheduleReminderV3后重复提醒类型设置(0:无效 1:仅一次 2:每天 3:每周 4:每月 5:每年） remind_on_off int 当天提醒开关 0是关， 1是开 state int 状态码 0：无效, 1：删除状态, 2：启用状态 title char [] 标题内容 最大值74个字节 note char [] 提醒内容 最大值149个字节 示例： { \"version\":0, \"operate\":1, \"num\":1, \"items\":[ { \"id\":0, \"year\":2022, \"mon\":12, \"day\":26, \"hour\":15, \"min\":51, \"sec\":20, \"repeat_type\":255, \"remind_on_off\":1, \"state\":2, \"title\":\"提醒事项1\", \"note\":\"记得完成工作\" } ] } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 错误码 0成功，非0是错误码 num Int 固件中目前有多少提醒数据 operate int 操作类型0：无效 1：增 2：删 3：查4：改 items 集合 提醒事件详情 字段名 字段类型 字段说明 id int 提醒事件id每次app下发自增1，从0开始 year int 年 mon int 月 day int 日 hour int 时 min int 分 sec int 秒 repeat_type int 重复的时间 开启getSupportSetRepeatWeekTypeOnScheduleReminderV3后重复提醒类型设置星期重复 bit1-bit7 周一到周日 bit 0是总开关位（开关）开启getSupportSetRepeatTypeOnScheduleReminderV3后重复提醒类型设置(0:无效 1:仅一次 2:每天 3:每周 4:每月 5:每年） remind_on_off int 当天提醒开关 0是关， 1是开 state int 状态码 0：无效, 1：删除状态, 2：启用状态 title char [] 标题内容 最大值74个字节 note char [] 提醒内容 最大值149个字节 示例： { \"version\":0, \"err_code\":0, \"num\":0, \"operate\":1, \"items\":null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 18:20:04 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetGetMainUiSort.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetGetMainUiSort.html","title":"V3设置查询主界面控件排序","keywords":"","body":"V3设置查询主界面控件排序 功能表:setSetMainUiSort Flutter示例： /// v3 设置主界面控件排序事件号 setMainUISortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_main_ui_sort), /// v3 设置主界面控件排序 libManager.send(evt: CmdEvtType.setMainUISortV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 operate int 操作 0：无效 1：查询 2：设置 all_num int 控件排序列表详情的个数 items int [] 控件排序列表详情 location_x int 横轴x 从1开始 location_y int 纵轴y 从1开始 一个y就是一个横向的格子 size_type int 0：无效 1：大图标 2：小图标 widgets_type int 控件类型0：无效1：星期/日期2：步数3：距离4：卡路里5：心率6：电量 示例： { \"version\":0, \"operate\":2, \"all_num\":3, \"items\":[ 1, 2, 3 ], \"location_x\":1, \"location_y\":1, \"size_type\":2, \"widgets_type\":1 } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 0成功 非0失败 operate int 操作 0：无效 1：查询 2：设置 all_num int 固件当前的显示的列表的个数 items 集合 固件当前的显示的列表排列的情况 location_x & location_y & size_type & support_size_type & widgets_type的集合 support_items 集合 固件支持的所有的组件类型 support_size_type & widgets_type的集合 字段名 字段类型 字段说明 location_x int 横轴x 从1开始 location_y int 纵轴y 从1开始 一个y就是一个横向的格子 size_type int 0：无效1：大图标2：小图标 support_size_type int 固件支持可以编辑的图标类型0：无效1：大图标2：小图标3：大图标+小图标 widgets_type int 控件类型0：无效1：星期/日期2：步数3：距离4：卡路里5：心率6：电量 字段名 字段类型 字段说明 support_size_type int 固件支持可以编辑的图标类型0： 无效1：大图标2：小图标3：大图标+小图标 widgets_type int 控件类型0：无效1：星期/日期2：步数3：距离4：卡路里5：心率6：电量 示例： { \"version\":0, \"err_code\":0, \"operate\":0, \"all_num\":0, \"items\":[], \"location_x\":0, \"location_y\":0, \"size_type\":0, \"widgets_type\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 20:03:19 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetGetBaseSportParamSort.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetGetBaseSportParamSort.html","title":"V3设置查询运动子项数据排列","keywords":"","body":"V3设置查询运动子项数据排列 功能表:setSet20SportParamSort Flutter示例： /// v3 设置运动子项数据排列事件号 setBaseSportParamSortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_base_sport_param_sort), /// v3 设置运动子项数据排列 libManager.send(evt: CmdEvtType.setBaseSportParamSortV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 operate int 操作 0：无效 1：查询 2：设置 sport_type int 运动类型 now_user_location int 当前的显示已经添加的运动位置 all_num int 运动排序列表中的个数 items int [] 设置列表 最大值50个 示例： { \"version\":0, \"operate\":2, \"sport_type\":2, \"now_user_location\":2, \"all_num\":5, \"items\":[ 1, 2, 3, 4, 5 ] } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 0成功 非0失败 operate int 操作 0：无效 1：查询 2：设置 sport_type int 运动类型 now_user_location int 当前的显示已经添加的运动位置，app根据这个位置显示，前面的对应的设备是添加的，这边位置后面是未添加的，查询起作用 all_num int 运动排序列表详情个数 查询起作用最大50组items items int [] 运动排序查询的列表 运动子项排序枚举列表 示例： { \"version\":0, \"err_code\":0, \"operate\":0, \"sport_type\":0, \"now_user_location\":0, \"all_num\":0, \"items\":[] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 20:01:55 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetLongCityName.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetLongCityName.html","title":"V3设置运动城市名称","keywords":"","body":"V3设置运动城市名称 Flutter示例： /// v3 设置运动城市名称事件号 setLongCityNameV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_long_city_name), /// v3 设置运动城市名称 libManager.send(evt: CmdEvtType.setLongCityNameV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 name char [] 城市名称最大74个字节 示例： { \"version\":0, \"name\":\"shenzhen\" } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 错误码 0成功，非0是错误码 示例： { \"version\":0, \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-06 17:49:37 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetNoticeMegState.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetNoticeMegState.html","title":"V3设置单个应用的通知状态","keywords":"","body":"V3设置单个应用的通知状态 功能表:setSetNotificationStatus 【setNoticeMessageStateUseVersion0x20】 Flutter示例： /// v3 设置消息通知状态事件号 setNoticeMessageState( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.tran_json_set_notice_message_state), /// v3 设置消息通知状态 libManager.send(evt: CmdEvtType.setNoticeMessageState, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 items_num int 消息详情的个数 operat int 操作1：增加 2：修改3：获取查询 all_on_off int 增加、修改有效消息通知总开关 1:开启总通知开关0:关闭总通知开关 all_send_num int 发送的总包数 如果是发大于100的分次发送 all_send_num=now_send_index 发送完成 now_send_index int 当前发送的序列 all_notify_state int 增加、修改有效通知状态总开关0:无效 1:全部允许通知 2:全部静默通知 3:全部关闭通知功能表setNoticeMessageStateUseVersion0x20开启有效 items 集合 消息详情evt_type & notify_state & pic_flag的集合 字段名 字段类型 字段说明 evt_type int 事件类型 notify_state int 通知状态 1：允许通知2：静默通知 3：关闭通知 pic_flag int 回复的时候起作用，设置这个参数填00：无效 1：有下载对应的图片 2：没有对应的图片 APP查询应用通知状态示例： { \"version\": 0, \"items_num\": 0, \"operat\": 3, \"all_on_off\": 1, \"all_send_num\": 1, \"now_send_index\": 1 } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 错误码 0成功，非0失败 operat int 操作1：增加2：修改3：获取查询 all_on_off int 查询时有效回复消息通知总开关状态 1:开启总通知开关0:关闭总通知开关-1:无效 all_notify_state int 查询时有效通知状态总开关 -1:无效 1:全部允许通知 2:全部静默通知 3:全部关闭通知功能表setNoticeMessageStateUseVersion0x20开启有效 items_num int 查询时有效固件目前有的消息详情items的个数 items 集合 消息详情内容，查询时有效 字段名 字段类型 字段说明 evt_type int 事件类型 notify_state int 通知状态 1：允许通知2：静默通知3：关闭通知 pic_flag int 0：无效1：有下载对应的图片2：没有对应的图片 设备回复查询应用状态的示例： { \"version\": 0, \"err_code\": 0, \"operat\": 3, \"all_on_off\": 1, \"items_num\": 2, \"items\": [ { \"evt_type\": 1, \"notify_state\": 1, \"pic_flag\": 1 }, { \"evt_type\": 1, \"notify_state\": 1, \"pic_flag\": 1 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-11-10 16:34:09 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetPackName.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetPackName.html","title":"V3获取包名","keywords":"","body":"V3获取包名 功能表:getNotifyIconAdaptive Flutter示例： /// 获取应用包名事件号 getPackName( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.tran_json_get_app_pack_name ), /// 获取应用包名 libManager.send(evt: CmdEvtType.getPackName, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 operat_flag int 0：获取全部的1：获取增量数据 last_id int operat_flag等于获取增量数据 起作用获取增量数据的时候需要传上次返回的ID，继续获取 示例： { \"operat_flag\":0, \"last_id\":0 } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 icon_width int 宽度(像素块大小) icon_height int 高度(像素块大小) format int 颜色格式 block_size int 压缩块大小 pack_name_num int 包名的个数 package_num int 包名信息详情总个数 items 集合 app包名信息详情item_id & evt_type & need_sync_icon & msg_cout & pack_name_len & pack_name_array的集合 字段名 字段类型 字段说明 item_id int 每个包名给一个id，累加，后续用来拿增量数据，由0开始 evt_type int 事件类型 need_sync_icon int 需要更新图标数据 0：不需要更新 1：需要更新icon2：需要更新app名3：icon和app都需要更新 msg_cout int 该条消息收到次数 pack_name_len int 包名长度 最大50个字节 pack_name_array char [] 包名 示例： { \"version\":0, \"icon_width\":200, \"icon_height\":120, \"format\":133, \"block_size\":1024, \"pack_name_num\":0, \"package_num\":0, \"items\":null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 18:02:16 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SyncContact.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SyncContact.html","title":"V3同步协议蓝牙通话常用联系人","keywords":"","body":"V3同步协议蓝牙通话常用联系人 功能表:setSyncContact,reminderCallContact 【getSupportSetGetEmergencyContactV3】 Flutter示例： /// 同步常用联系人事件号 setSyncContact( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.tran_json_sync_contact ), /// 同步常用联系人 libManager.send(evt: CmdEvtType.setSyncContact, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 operat int 操作 0：无效1：设置联系人2：查询联系人 3：设置紧急联系人 需要功能表支持getSupportSetGetEmergencyContactV34：查询紧急联系人 需要功能表支持getSupportSetGetEmergencyContactV3 items_num int 联系人详情个数 最大默认支持10个 可以通过获取事件号getSupportMaxSetItemsNum获取字段contact_max_set_num，读取设备支持的常用联系人最大设置数量 items 集合 联系人详情 phone & name的集合 字段名 字段类型 字段说明 phone char [] 联系人号码内容 最大支持14个字节 + '\\0'换行符 name char [] 联系人名称内容 最大支持31个字节 + '\\0'换行符 示例： { \"version\":0, \"operat\":1, \"items_num\":1, \"items\":[ { \"phone\":\"13310214520\", \"name\":\"张三\" } ] } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 错误码 0成功，非0是错误码 operat int 操作 0：无效1：设置2：查询3：设置紧急联系人 需要功能表支持getSupportSetGetEmergencyContactV34：查询紧急联系人 需要功能表支持getSupportSetGetEmergencyContactV3 items_num int 联系人详情个数 最大支持10个联系人详情个数 最大默认支持10个 可以通过获取事件号getSupportMaxSetItemsNum获取字段contact_max_set_num，读取设备支持的常用联系人最大设置数量操作码(operat)是查询(2/4)有效 items 集合 联系人详情 phone & name的集合操作码(operat)是查询(2/4)有效 字段名 字段类型 字段说明 phone char [] 联系人号码内容 最大支持14个字节 + '\\0'换行符操作码(operat)是查询(2/4)有效 name char [] 联系人名称内容 最大支持31个字节 + '\\0'换行符操作码(operat)是查询(2/4)有效 示例： { \"version\":0, \"err_code\":0, \"operat\":1, \"items_num\":0, \"items\":null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 20:22:07 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWeather.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWeather.html","title":"V3设置天气数据","keywords":"","body":"V3设置天气数据 功能表:setSetV3Weather Flutter示例： /// v3 下发v3天气协议事件号 setWeatherV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_v3_weather), /// v3 下发v3天气协议 libManager.send(evt: CmdEvtType.setWeatherV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 month int 服务器最新一次同步的月 day int 服务器最后一次同步的日 hour int 服务器最后一次同步的时 min int 服务器最后一次同步的分 sec int 服务器最后一次同步的秒 week int 当前是星期几bit0：星期1bit1：星期2类推到星期天 weather_type int 天气类型0：其他1：晴2：多云3：阴4：雨5：暴雨6：雷阵雨7：雪8：雨夹雪9：台风10：沙尘暴11：夜间晴12：夜间多云13：热14：冷15：清风16：大风17：雾霭18：阵雨19：多云转晴 48：雷 49：冰雹 50：扬沙 51：龙卷风(realme定制天气类型idw02) today_tmp int 当前的温度单位摄氏度适配负数，温度加100传输 today_max_temp int 最大温度单位摄氏度适配负数，温度加100传输 today_min_temp int 最小温度单位摄氏度适配负数，温度加100传输 city_name char [] 城市名称最大74个字节 air_quality int 空气质量扩大10倍传输 precipitation_probability int 降水概率0-100 百分比 humidity int 湿度 today_uv_intensity int 紫外线强度扩大10倍传输 wind_speed int 风速 sunrise_hour int 日出时间 时version为1有效 sunrise_min int 日出时间 分version为1有效 sunset_hour int 日出时间 时version为1有效 sunset_min int 日出时间 分version为1有效 sunrise_item_num int 日出日落时间详情个数天数目前最大暂定为7天version为1无效 air_grade_item char [] 空气质量等级内容version为1无效 hours_weather_items 集合 未来48小时的天气数据集合weather_type & temperature & probability的集合 future_items 集合 未来七天的天气数据weather_type & max_temp & min_temp的集合 sunrise_item 集合 日出日落时间详情sunrise_hour & sunrise_min & sunset_hour & sunset_min的集合version为1无效 字段名 字段类型 字段说明 weather_type int 天气类型 temperature int 温度适配负数，温度加100传输 probability int 温度出现的概率0-100 百分比 字段名 字段类型 字段说明 weather_type int 天气类型 max_temp int 最大温度适配负数，温度加100传输 min_temp int 最小温度适配负数，温度加100传输 字段名 字段类型 字段说明 sunrise_hour int 日出时间 时version为1无效 sunrise_min int 日出时间 分version为1无效 sunset_hour int 日落时间 时version为1无效 sunset_min int 日落时间 分version为1无效 示例： { \"version\":0, \"month\":12, \"day\":26, \"hour\":16, \"min\":31, \"sec\":30, \"week\":1, \"weather_type\":1, \"today_tmp\":21, \"today_max_temp\":23, \"today_min_temp\":12, \"city_name\":\"shenzhen\", \"air_quality\":53, \"precipitation_probability\":1, \"humidity\":0, \"today_uv_intensity\":0, \"wind_speed\":0, \"sunrise_hour\":6, \"sunrise_min\":20, \"sunset_hour\":18, \"sunset_min\":17, \"sunrise_item_num\":0, \"air_grade_item\":[], \"hours_weather_items\":[ { \"weather_type\":1, \"temperature\":0, \"probability\":0 }, { \"weather_type\":1, \"temperature\":0, \"probability\":0 } ], \"future_items\":null, \"sunrise_item\":null } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 错误码 0成功，非0是错误码 示例： { \"version\":0, \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 20:13:20 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWorldTime.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWorldTime.html","title":"V3下发世界时间","keywords":"","body":"V3下发世界时间 功能表:setSetV3WorldTime Flutter示例： /// v3 下发v3世界时间 setWorldTimeV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_world_time), /// v3 下发v3世界时间 libManager.send(evt: CmdEvtType.setWorldTimeV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 items_num int 时钟个数 每次下发所有的时钟最大10个 items 集合 世界时钟详情id & min_offset & city_name & sunrise_hour & sunrise_min & sunset_hour & sunset_min & longitude_flag & longitude & latitude_flag & latitude的集合 字段名 字段类型 字段说明 id int 详情id,唯一 min_offset int 当前的时间和0时区的偏移分钟数据 city_name char [] 城市名称 最大59个字节 sunrise_hour int 日出时间 时 sunrise_min int 日出时间 分 sunset_hour int 日落时间 时 sunset_min int 日落时间 分 longitude_flag int 1：东经 2：西经 longitude int 经度 保留2位小数扩大100倍传输， app需要将对应的分转换成度 latitude_flag int 1：北纬 2：南纬 latitude Int 纬度 保留2位小数扩大100倍传输， app需要将对应的分转换成度 示例： { \"items_num\": 4, \"items\": [{ \"id\": 31, \"min_offset\": 480, \"city_name\": \"北京\", \"sunrise_hour\": 7, \"sunrise_min\": 25, \"sunset_hour\": 16, \"sunset_min\": 49, \"longitude_flag\": 1, \"longitude\": 11641, \"latitude_flag\": 1, \"latitude\": 3990 }, { \"id\": 295, \"min_offset\": 540, \"city_name\": \"东京\", \"sunrise_hour\": 6, \"sunrise_min\": 41, \"sunset_hour\": 16, \"sunset_min\": 28, \"longitude_flag\": 1, \"longitude\": 13965, \"latitude_flag\": 1, \"latitude\": 3568 }, { \"id\": 148, \"min_offset\": 0, \"city_name\": \"伦敦\", \"sunrise_hour\": 7, \"sunrise_min\": 56, \"sunset_hour\": 15, \"sunset_min\": 51, \"longitude_flag\": 2, \"longitude\": 13, \"latitude_flag\": 1, \"latitude\": 5151 }, { \"id\": 197, \"min_offset\": -300, \"city_name\": \"纽约\", \"sunrise_hour\": 7, \"sunrise_min\": 10, \"sunset_hour\": 16, \"sunset_min\": 28, \"longitude_flag\": 2, \"longitude\": 7401, \"latitude_flag\": 1, \"latitude\": 4071 }] } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 错误码 0成功，非0是错误码 示例： { \"version\":0, \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 20:18:07 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWalkRemindTimes.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetWalkRemindTimes.html","title":"V3设置多个走动提醒的时间点","keywords":"","body":"V3设置多个走动提醒的时间点 功能表:setWalkReminderTimeGoal Flutter示例： /// 设置多个走动提醒的时间点事件号 setWalkRemindTimes( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_walk_remind_times), /// 设置多个走动提醒的时间点 libManager.send(evt: CmdEvtType.setWalkRemindTimes, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 verison int 协议库版本号 on_off int 开关1：开0：关 num int items个数，即设置时间点个数 items 集合 走动提醒详情hour &min的集合 字段名 字段类型 字段说明 hour int 走动提醒时间 时 min int 走动提醒时间 分 示例： { \"version\": 0, \"on_off\":1, \"num\":2, \"items\":[ { \"hour\":8, \"min\":0 }, { \"hour\":12, \"min\":30 } ] } App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号 err_code int 错误码 0成功，非0失败 示例： { \"version\": 0, \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 20:11:18 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetMusicInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetMusicInfo.html","title":"V3获取固件的歌曲名和文件夹","keywords":"","body":"V3获取固件的歌曲名和文件夹 功能表:getSupportGetBleMusicInfoVerV3 Flutter示例： /// 获取固件的歌曲名和文件夹事件号 getBleMusicInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_ble_music_info), /// 获取固件的歌曲名和文件夹 libManager.send(evt: CmdEvtType.getBleMusicInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 all_memory int 固件sdk卡信息总的空间单位字节 useful_memory int 固件sdk卡信息可用的空间单位字节 used_memory int 固件sdk卡信息当前使用的空间 单位字节 folder_num int (歌单)文件夹详情个数 music_num int 音乐详情个数 folder_items 集合 (歌单)文件夹详情folder_id & music_num & folder_name & music_index的集合 music_items 集合 音乐详情music_id & music_memory & music_name & singer_name的集合 字段名 字段类型 字段说明 folder_id int 歌单(文件夹) id 1~10 music_num int 歌单中的歌曲数目 最多100个 folder_name char [] 歌单(文件夹)名称 最大19个字节 music_index int [] 歌单中对应歌曲的id，按照添加的先后顺序，依次排列 字段名 字段类型 字段说明 music_id int 音乐id 从1开始 music_memory int 音乐占用的空间单位字节 music_name char [] 音乐名 最大44个字节 singer_name char [] 歌手名 最大29个字节 示例： { \"all_memory\" : 209715200, \"folder_items\" : null, \"folder_num\" : 0, \"music_items\" : [ { \"music_id\" : 1, \"music_memory\" : 50078, \"music_name\" : \"jog for.mp3\", \"singer_name\" : \"jog for\" } ], \"music_num\" : 1, \"used_memory\" : 50078, \"useful_memory\" : 209665122, \"version\" : 16 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 18:00:02 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3OperateMusic.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3OperateMusic.html","title":"V3操作歌曲或者文件夹","keywords":"","body":"V3操作歌曲或者文件夹 Flutter示例： /// 操作歌曲或者文件夹事件号 setMusicOperate( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_operate_ble_music), /// 操作歌曲或者文件夹 libManager.send(evt: CmdEvtType.setMusicOperate, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 music_operate int 音乐操作0：无效操作1：删除音乐2：增加音乐 folder_operate int 文件夹(歌单)操作0：无效操作1：删除文件夹2：增加文件夹3：修改歌单 4：导入歌单 5：音乐删除 music_items 集合 音乐详情music_id & music_memory & music_name & singer_name的集合 folder_items 集合 (歌单)文件夹详情folder_id & music_num & folder_name & music_index的集合 字段名 字段类型 字段说明 folder_id int 歌单(文件夹) id 1~10 music_num int 歌单中的歌曲数目 最多100个 folder_name char [] 歌单(文件夹)名称 最大19个字节 music_index int [] 歌单中对应歌曲的id，按照添加的先后顺序，依次排列 字段名 字段类型 字段说明 music_id int 音乐id 从1开始 music_memory int 音乐占用的空间 music_name char [] 音乐名 最大44个字节 singer_name char [] 歌手名 最大29个字节 示例： { \"version\":0, \"music_operate\":0, \"folder_operate\":2, \"music_items\":null, \"folder_items\": { \"folder_id\":1, \"music_num\":0, \"folder_name\":\"music fold 1\" \"music_index\":[] } } App收到的json字段： 字段名 字段类型 字段说明 operate_type int 操作类型：0：无效操作1：删除音乐2：增加音乐3：删除文件夹4：增加文件夹5：修改歌单 6：导入歌单7：歌单中音乐删除 version int 固件sdk卡信息总的空间 err_code int 0成功 非0失败 music_id int 当操作为 2:增加音乐成功时返回音乐id 音乐id 示例： { \"operate_type\":4, \"version\":0, \"err_code\":0, \"music_id\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-06 17:44:28 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3NoticeMsgDynamic.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3NoticeMsgDynamic.html","title":"V3通知消息提醒(动态)","keywords":"","body":"V3通知消息提醒(动态) Flutter示例： /// V3动态消息通知事件号 setNoticeAppName( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_notice_message_add_app_name ) /// V3动态消息通知 libManager.send(evt: CmdEvtType.setNoticeAppName, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 verison int 协议库版本号 os_platform int 系统0 ：无效 ，1：安卓 ，2：ios evt_type int 当前处于那种模式 0：无效， 1：消息提醒 notify_type int 消息的枚举类型 上限值：20000 msg_ID int 消息的ID evt_type是消息提醒，起作用 mesg_ID 如果是0这个字段不起作用 app_items_len int 国家及语言详情的个数 contact char [] 联系人名称 最大63个字节 phone_number char [] 电话号码 最大31个字节 msg_data char [] 消息内容 最大249个字节 items 集合 国家及语言详情language & name的集合 字段名 字段类型 字段说明 language int 语言类型 name char [] 国家对应的app名称 最大49个字节 示例： { \"verison\":0, \"os_platform\":1, \"evt_type\":1, \"notify_type\":3, \"msg_ID\":1, \"app_items_len\":1, \"contact\":\"张三\", \"phone_number\":\"13425165412\", \"msg_data\":\"你好\", \"items\":[ { \"language\":2, \"name\":\"wechar\" } ] } App收到的json字段： 字段名 字段类型 字段说明 is_success int 1：成功 ， 0失败 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-06 17:57:44 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetHistoricalMenstruation.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetHistoricalMenstruation.html","title":"V3经期的历史数据下发","keywords":"","body":"V3经期的历史数据下发 功能表:setHistoryMenstrual 【supportSetHistoricalMenstruationUseVersion2】 Flutter示例： /// 经期的历史数据下发事件号 getHistoricalMenstruation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_historical_menstruation), /// 经期的历史数据下发 libManager.send(evt: CmdEvtType.getHistoricalMenstruation, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号默认0 avg_menstrual_day int 平均经期长度单位天 avg_cycle_day int 平均周期长度单位天 items_len int 经期历史数据详情items个数，最大5 items 集合 经期历史数据详情year & mon & day & menstrual_day & cycle_day的集合ovulation_interval_day & ovulation_before_day & ovulation_after_day在功能表supportSetHistoricalMenstruationUseVersion2开启时有效 字段名 字段类型 字段说明 year int 经期开始的年 mon int 经期开始的月 day int 经期开始的日 menstrual_day int 经期长度 单位天 cycle_day int 周期长度 单位天 ovulation_interval_day int 从下一个经期开始前到排卵日的间隔,一般为14天功能表supportSetHistoricalMenstruationUseVersion2开启有效 ovulation_before_day int 排卵日之前易孕期的天数,一般为5功能表supportSetHistoricalMenstruationUseVersion2开启有效 ovulation_after_day int 排卵日之后易孕期的天数,一般为5功能表supportSetHistoricalMenstruationUseVersion2开启有效 示例： { \"version\": 2, \"avg_menstrual_day\": 7, \"avg_cycle_day\": 29, \"items_len\": 1, \"items\": [ { \"year\": 2023, \"mon\": 8, \"day\": 1, \"menstrual_day\": 7, \"cycle_day\":30, \"ovulation_interval_day\":14, \"ovulation_before_day\":5, \"ovulation_after_day\":5, }, { \"year\": 2023, \"mon\": 8, \"day\": 31, \"menstrual_day\": 7, \"cycle_day\":28, \"ovulation_interval_day\":14, \"ovulation_before_day\":5, \"ovulation_after_day\":5, } ] } App收到的json字段： 字段名 字段类型 字段说明 err_code int 错误码 0成功，非0失败 示例： { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-26 14:56:54 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetDialSort.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetDialSort.html","title":"V3设置表盘顺序","keywords":"","body":"V3设置表盘顺序 功能表:setWatchDialSort Flutter示例： /// 设置表盘顺序事件号 setWatchDialSort( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_watch_dial_sort), /// 设置表盘顺序 libManager.send(evt: CmdEvtType.setWatchDialSort, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 sort_item_numb int 表盘排序列表内容个数 p_sort_item 集合 表盘排序列表内容type & sort_number & name的集合 字段名 字段类型 字段说明 type int 表盘类型 1：普通表盘 2：壁纸表盘 3：云表盘 sort_number int 序号，从0开始，不超过设备支持的表盘总个数 name char [] 表盘id 最大值29个字节 示例： { \"sort_item_numb\": 2, \"p_sort_item\":[ { \"type\":1, \"sort_number\":0, \"name\":\"w123.iwf\" }, { \"type\":1, \"sort_number\":1, \"name\":\"w555.iwf\" } ] } App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号 err_code int 错误码 0成功，非0失败 示例： { \"version\": 0, \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-06 17:59:15 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetRunPlan.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetRunPlan.html","title":"V3APP下发跑步计划(运动计划)","keywords":"","body":"V3APP下发跑步计划(运动计划) 功能表:setSupportSportPlan Flutter示例： /// app下发跑步计划(运动计划)事件号 setSendRunPlan( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_send_run_plan), /// app下发跑步计划(运动计划) libManager.send(evt: CmdEvtType.setSendRunPlan, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 verison int 协议库版本号 operate int 操作1：开始计划 2：计划数据下发 3：结束计划 4：查询跑步计划 type int 计划类型1：跑步计划3km 2：跑步计划5km 3：跑步计划10km4：半程马拉松训练（二期）5：马拉松训练（二期） year int 计划开始时间 年 month int 计划开始时间 月 day int 计划开始时间 日 hour int 计划开始时间 时 min int 计划开始时间 月 sec int 计划开始时间 日 day_num int 计划天数个数当operate 为2时起作用 items 集合 计划详情 type & num & item的集合 字段名 字段类型 字段说明 type int 训练类型 186：计划休息 187：计划户外跑步 188：计划室内跑步189：计划室内健身 num int 动作个数注：休息时动作个数为零 ，其他动作时个数不为零 item 集合 动作详情 type &time & height_heart& low_heart的集合 字段名 字段类型 字段说明 type int 动作类型 1：快走 2：慢跑 3：中速跑 4：快跑 time int 目标时间 单位秒 height_heart int 心率范围低值 low_heart int 心率范围高值 示例： { \"verison\":0, \"operate\":1, \"type\":1, \"year\":2022, \"month\":12, \"day\":26, \"hour\":17, \"min\":36, \"sec\":0, \"day_num\":1, \"items\":[ { \"type\":186, \"num\":2, \"item\":[ { \"type\":1, \"time\":200, \"height_heart\":110, \"low_heart\":80 }, { \"type\":1, \"time\":500, \"height_heart\":110, \"low_heart\":80 } ] } ], \"item\":[], } App收到的json字段： 字段名 字段类型 字段说明 err_code int 00:成功，01:失败 ，02:已开启另一跑步计划 version int 协议库版本号 operate int 操作：1：开始计划 2：计划数据下发 3：结束计划 4：查询跑步计划 type int 计划类型：1：跑步计划3km 2：跑步计划5km 3：跑步计划10km 4：半程马拉松训练（二期）5：马拉松训练（二期） year int 计划实施开始时间 年 month int 计划实施开始时间 月 day int 计划实施开始时间 日 hour int 计划实施开始时间 时 min int 计划实施开始时间 分 sec int 计划实施开始时间 秒 示例： { \"err_code\":0, \"version\":0, \"operate\":1, \"type\":1, \"year\":2022, \"month\":12, \"day\":26, \"hour\":17, \"min\":36, \"sec\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 20:10:51 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetCutoverSport.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetCutoverSport.html","title":"V3APP通知设备运动过程切换","keywords":"","body":"V3APP通知设备运动过程切换 Flutter示例： /// app运动计划操作事件号 exchangeAppPlan( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_app_to_ble_sport_cutover), /// app运动计划操作 libManager.send(evt: CmdEvtType.exchangeAppPlan, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 operate int 操作1：开始运动 2：暂停运动 3：恢复运动 4：结束运动 5：切换动作 type int 计划类型1：跑步计划3km2：跑步计划5km3：跑步计划10km4：半程马拉松训练（二期）5：马拉松训练（二期）6：跑后拉伸7：6分钟轻松跑 8：10分钟轻松跑 9：15分钟轻松跑 10：走跑结合初级 11：走跑结合进阶 12：走跑结合强化 training_offset int 训练的课程日期偏移 从零开始 hour int 开始、暂停、恢复、结束时间 由operate决定是什么时间类型时间 时 minute int 时间 分 second int 时间 秒 示例： { \"operate\":1, \"type\":1, \"training_offset\":0, \"hour\":15, \"minute\":22, \"second\": 0 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 0:成功 其他失败 operate int 操作1：开始运动2：暂停运动 3：恢复运动4：结束运动 5：切换动作 type int 计划类型1：跑步计划3km2：跑步计划5km3：跑步计划10km4：半程马拉松训练（二期）5：马拉松训练（二期） action_type int 此字段当operate为5起作用动作类型 1：快走2：慢跑3：中速跑4：快跑5：结束课程运动（还要等待用户是否有自由运动） 示例： { \"err_code\":0 \"operate\":1, \"type\":1, \"action_type\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-10 14:14:39 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetHabitInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3GetHabitInfo.html","title":"V3获取用户习惯信息","keywords":"","body":"V3获取用户习惯信息 Flutter示例： /// v3获取固件本地提示音文件信息 getHabitInfoV3( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_habit_information ), /// v3获取固件本地提示音文件信息 libManager.send(evt: CmdEvtType.getHabitInfoV3, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 browse_count int 浏览打点详情个数 implement_count int 执行打点详情个数 bro_items 集合 浏览打点详情type & evt & year & month & day & hour & min & sec &count的集合 imp_items 集合 执行打点详情type & evt & start_year & start_month & start_day & start_hour & start_min & start_sec & end_year & end_month & end_day & end_hour & end_min & end_sec & completion_rate的集合 字段名 字段类型 字段说明 type int 特性名称 1：跑步课程 2：跑步计划3：设备睡眠4：体重 evt int 事件 1：浏览跑步课程 2：浏览跑步计划 3：浏览睡眠 4：睡眠呼吸 5：点击设备体重管理入口 year int 浏览日期 年 month int 浏览日期 月 day int 浏览日期 日 hour int 当天最后一次点击时间 时 min int 当天最后一次点击时间 分 sec int 当天最后一次点击时间 秒 count int 点击次数 字段名 字段类型 字段说明 type int 特性名称 1：跑步课程 2：跑步计划 3：跑后拉伸 evt int 事件 1：使用跑步课程 2：执行跑步计划3：执行跑后拉伸 start_year int 启动时间 年 start_month int 启动时间 月 start_day int 启动时间 日 start_hour int 启动时间 时 start_min int 启动时间 分 start_sec int 启动时间 秒 end_year int 结束时间 年 end_month int 结束时间 月 end_day int 结束时间 日 end_hour int 结束时间 时 end_min int 结束时间 分 end_sec int 结束时间 秒 completion_rate int 点击次数 0到100 示例： { \"browse_count\":1, \"implement_count\":1, \"bro_items\":[ { \"type\":0, \"evt\":0, \"year\":0, \"month\":0, \"day\":0, \"hour\":0, \"min\":0, \"sec\":0, \"count\":0 } ], \"imp_items\":[ \"type\":0, \"evt\":0, \"start_year\":0, \"start_month\":0, \"start_day\":0, \"start_hour\":0, \"start_min\":0, \"start_sec\":0, \"end_year\":0, \"end_month\":0, \"end_day\":0, \"end_hour\":0, \"end_min\":0, \"end_sec\":0, \"completion_rate\":0 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3MiniProgramControl.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3MiniProgramControl.html","title":"V3操作小程序信息(预留)","keywords":"","body":"V3操作小程序信息(预留) App下发的json字段: 字段名 字段类型 字段说明 verison int 协议库版本号 operate int 0:无效 1:启动小程序 2:删除小程序 3:获取已安装的小程序列表 mini_program_name char [] 小程序名称 operate=0/operate=3无效,获取操作不需要下发名称最大29个字节 示例： { \"verison\":0, \"operate\":1, \"mini_program_name\":\"粤康码\" } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 operate int 0:无效 1:启动小程序 2:删除小程序 3:获取已安装的小程序列表 error_code int 0:成功 非0失败 mini_program_num int operate=3有效小程序个数 最多50个 residual_space int 剩余空间 total_space int 总空间 info_item 集合 小程序列表mini_program_name & mini_program_size &mini_program_version的集合operate=3有效 字段名 字段类型 字段说明 mini_program_name char [] 小程序名称 最大值29个字节 mini_program_size int 小程序大小 mini_program_version int 小程序版本号 示例： { \"version\":0, \"operate\":1, \"error_code\":0, \"mini_program_num\":0, \"residual_space\": 0, \"total_space\":0, \"info_item\":null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 18:04:24 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetSmartCompetitorConfigInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3SetSmartCompetitorConfigInfo.html","title":"V3智能陪跑信息配置(预留)","keywords":"","body":"V3智能陪跑信息配置(预留) Flutter示例： //TODO App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 默认0 operate int 操作 0:无效 1:设置 2:查询 background_font_color int 背景文字颜色 设置操作有效 ai_image_id int ai形象ID 设置操作有效 user_image_id int 用户形象ID设置操作有效 bg_image_id Int 背景形象ID设置操作有效 示例： { } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 默认0 err_code int 0成功 非0失败 operate int 操作 0:无效 1:设置 2:查询 background_font_color int 背景文字颜色 查询操作有效 ai_image_id int ai形象ID 查询操作有效 user_image_id int 用户形象ID查询操作有效 bg_image_id Int 背景形象ID查询操作有效 示例： { } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 20:08:48 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3CutoverSportFromDevice.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3CutoverSportFromDevice.html","title":"V3设备通知app运动过程切换","keywords":"","body":"V3设备通知APP运动过程切换 功能表：setSupportSportPlan App下发的json字段: 字段名 字段类型 字段说明 operate int 操作1：开始运动 2：暂停运动 3：恢复运动 4：结束运动 5：切换动作 type int 计划类型1：跑步计划3km 2：跑步计划5km 3：跑步计划10km 4：半程马拉松训练（二期） 5：马拉松训练（二期） action_type int 动作类型 1：快走2：慢跑3：中速跑4：快跑 5：结束课程运动（还要等待用户是否有自由运动）（此字段当operate为5起作用） err_code int 0:成功 其他失败 示例： { \"operate\":1, \"type\":1, \"action_type\":1, \"err_code\":0 } App收到的json字段： 字段名 字段类型 字段说明 operate int 1：开始运动 2：暂停运动 3：恢复运动 4：结束运动5：切换动作 type int 计划类型1：跑步计划3km2：跑步计划5km 3：跑步计划10km 4：半程马拉松训练（二期）5：马拉松训练（二期） action_type int 动作类型 1：快走2：慢跑3：中速跑4：快跑 5：结束课程运动 （还要等待用户是否有自由运动）；6课程结束后自由运动 （此字段当operate为5起作用） year int 训练的课程日期(训练日的日期) 年 month int 训练的课程日期(训练日的日期) 月 day int 训练的课程日期(训练日的日期) 日 time int 动作目标时间 单位秒 low_heart int 心率范围低值 height_heart int 心率范围高值 cur_day int 开始/暂停/恢复/结束时间，由operate决定是什么时间类型时间 日 hour int 时间 时 minute int 时间 分 second int 时间 秒 示例： { \"operate\":1, \"type\":1, \"action_type\":1, \"year\":2022, \"month\":12, \"day\":26, \"time\":200, \"low_heart\":80, \"height_heart\":110, \"cur_day\":1, \"hour\":0, \"minute\":0, \"second\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 16:25:01 "},"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3NoticeDialChange.html":{"url":"doc/BaseProtocolEvtExecDoc/IDOV3Evt/IDOV3NoticeDialChange.html","title":"V3APP获取表盘颜色样式修改","keywords":"","body":"V3APP获取表盘颜色样式修改 Flutter示例： //TODO App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 dail_ID int 表盘ID name char [] 表盘名字 最大30个字节 dial_type int 回复类型目前只有 0：无效,1：颜色 style_enum int 颜色改变的枚举 0无效从一开始就是对应的枚举样式 示例： { \"version\":0, \"dail_ID\":1, \"name\":\"w120.iwf\", \"dial_type\":1, \"style_enum\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-09-13 18:10:55 "},"doc/IDOProtocolSimulatorExec/IDOProtocolSimulatorIntroduction.html":{"url":"doc/IDOProtocolSimulatorExec/IDOProtocolSimulatorIntroduction.html","title":"IDO模拟器事件字段说明","keywords":"","body":"{IDO模拟器事件字段说明} 1.功能概述 模拟器外部通过json将对应基础事件的字段输入，设置对应的基础事件的模拟器回应内容。 这个文件描述对应基础事件的有效的json字段及输入json字段后应该转换得到的字节数据内容。 以下描述中的APP下发的json内容为发送端，APP收到的json字段为模拟器回复APP的内容，为APP预想接收的内容。 2.基础事件 V2设置指令事件 V2获取指令事件 V3长包指令事件 OTA指令事件 APP发起通知/控制事件 设备主动通知/控制事件 ALEXA事件////TODO V2多运动交互事件////TODO V2同步健康数据事件////TODO V3同步健康数据事件////TODO Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-23 14:51:32 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetEvtIntroduction.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetEvtIntroduction.html","title":"V2设置指令事件","keywords":"","body":"{V2设置指令事件} 事件号及对应功能： 事件号 功能 101 设置久坐提醒 108 设置显示模式 116 设置勿扰模式 103 设置寻找手机 105 设置运动目标(设置全天步数) 109 设置左右手 104 设置时间 107 设置用户信息 119 设置一键呼叫 117 设置音乐开关 ////TODO 102 设置防丢 5000 添加闹钟 151 设置运动模式 124 设置表盘 125 设置快捷方式 126 设置血压校准 128 设置压力校准 112 设置心率区间 113 设置心率模式 108 设置单位 152 设置睡眠时间段 114 设置抬腕亮屏 127 设置血压测量 154 设置屏幕亮度 185 设置GPS信息 156 设置控制GPS 157 设置控制连接参数 158 设置热启动参数 159 设置经期 160 设置经期提醒 161 设置卡路里和距离目标 162 设置血氧开关 163 设置压力开关 164 设置运动模式排序 165 设置走动提醒 166 设置呼吸训练 167 设置运动自识别开关 168 设置喝水提醒 5510 简单文件操作 171 设置菜单列表 172 设置控制拍照 111 设置通知中心开关 173 设置删除文件 174 设置手机音量下发给固件 175 设置洗手提醒 177 设置吃药提醒 182 设置智能心率模式 183 设置环境音量的开关和阀值 184 设置科学睡眠开关 185 设置夜间体温开关 186 设置健身指导开关 188 设置未读信息红点提示开关 190 设置通知应用状态(事项提醒通知类型) 191 设置呼吸率开关 192 设置身体电量开关 150 设置天气开关 153 设置天气数据 6500 设置天气城市名称 6504 设置日出日落时间 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 17:24:55 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetLongSitReminder.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetLongSitReminder.html","title":"设置久坐提醒","keywords":"","body":"设置久坐提醒 事件号:101 APP端发送： 发送json字段： 字段名 字段类型 字段说明 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 interval int 间隔 取值应大于15分钟 单位分钟 repetitions int 重复及开关 bit0 ：0表示关 1表示开 bit1-7 : 0表示不重复，1表示重复 交互结构体内容： struct protocol_long_sit { struct protocol_head head;//0x03,0x20 uint8_t start_hour; //开始时间 晚上勿扰 uint8_t start_minute; uint8_t end_hour; uint8_t end_minute; //结束时间 uint16_t interval; //间隔 uint16_t repetitions; //重复 }; 设置久坐提醒信息json示例： { \"start_hour\": 15, \"start_minute\": 40, \"end_hour\": 23, \"end_minute\": 26, \"interval\": 15, \"repetitions\": 254 } 设置久坐提醒信息字节数据： [0x03,0x20,0xf,0x28,0x17,0x1a,0xf,0x0,0xfe,0x0] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 交互结构体内容： struct protocol_reply { struct protocol_head head;//0x03,0x20 uint8_t status_code; }; 回复APP设置久坐提醒信息json示例： { \"status_code\": 0 } 回复APP设置久坐提醒信息字节数据： [0x03,0x20,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 18:09:11 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetDisplayMode.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetDisplayMode.html","title":"设置显示模式","keywords":"","body":"设置显示模式 事件号：108 APP端发送： 发送json字段 字段名 字段类型 字段说明 mode int 模式0:默认1:横屏2:竖屏3:翻转180度 交互结构体内容： //显示模式 struct protocol_display_mode { struct protocol_head head; uint8_t mode; }; 设置显示模式json示例： { \"mode\": 0 } 设置显示模式字节数据： [0x03,0x2B,0x0] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 交互结构体内容： struct protocol_reply { struct protocol_head head;//0x03,0x2B uint8_t status_code; }; 回复APP设置显示模式json示例： { \"status_code\" : 0 } 回复APP设置显示模式字节数据： [0x03,0x2B,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 16:12:17 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetDoNotDisturb.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetDoNotDisturb.html","title":"设置勿扰模式","keywords":"","body":"设置勿扰模式 事件号：116 APP端发送： 发送json字段： 字段名 字段类型 字段说明 switch_flag int 开关1 开启0 关闭 start_hour int 开始时间时 start_minute int 开始时间分 end_hour int 结束时间时 end_minute int 结束时间分 have_time_range int 是否有时间范围 0 无效1 表示无时间范围2 表示有时间范围功能表disturbHaveRangRepeat开启有效 week_repeat int 预留 noontime_rest_on_off int 白天勿扰开关 1 开启0 关闭 noontime_rest_start_hour int 开始时间时 noontime_rest_start_minute int 开始时间分 noontime_rest_end_hour int 结束时间时 noontime_rest_end_minute int 结束时间分 all_day_on_off int 全天勿扰 1 开启0 关闭功能表setOnlyNoDisturbAllDayOnOff开启有效 intelligent_on_off int 智能勿扰开关 1 开启0 关闭功能表setOnlyNoDisturbSmartOnOff开启有效 交互结构体内容： //防打扰 struct protocol_do_not_disturb { struct protocol_head head; uint8_t switch_flag; //0xAA 开启,0x55 关闭 勿擾1开关 晚上勿扰 uint8_t start_hour; uint8_t start_minute; uint8_t end_hour; uint8_t end_minute; uint8_t have_time_range; //是否有时间范围 新增字段,功能表,0x00 无效,0x01 表示无时间范围,0x02 表示有时间范围 uint8_t week_repeat; //预留 uint8_t noontime_rest_on_off;//勿擾2开关 白天勿扰 uint8_t noontime_rest_start_hour; //提醒开始时间 uint8_t noontime_rest_start_minute; uint8_t noontime_rest_end_hour; //提醒结束时间 uint8_t noontime_rest_end_minute; //bool v2_support_disturb_three_on_off_03_29;//idw05新增：勿扰模式设置获取新增全天勿扰开关 //注：之前的全天勿扰开关与智能勿扰开关使用的同一个功能表v2_support_disturb_three_on_off_03_29支持,后续为了方便开发,新固件不需要开启前者,转用以下两个功能表去支持 2022-11-7 //bool support_v2_disturb_all_day_switch_03_29; //支持设置全天勿扰开关 //bool support_v2_disturb_smart_switch_03_29; //支持设置智能勿扰开关 uint8_t all_day_on_off;//20220627新增 全天勿扰开关 uint8_t intelligent_on_off; //20220627新增 智能勿扰开关 }; 设置勿扰模式json示例： { \"switch_flag\": 1, \"start_hour\": 15, \"start_minute\": 23, \"end_hour\": 23, \"end_minute\": 30, \"have_time_range\": 2, \"week_repeat\": 127, \"noontime_rest_on_off\": 1, \"noontime_rest_start_hour\": 9, \"noontime_rest_start_minute\": 0, \"noontime_rest_end_hour\": 12, \"noontime_rest_end_minute\": 0, \"all_day_on_off\": 0, \"intelligent_on_off\": 0 } 设置勿扰模式字节数据： [0x03,0x29,0x1,0xf,0x17,0x17,0x1e,0x2,0x7f,0x1,0x9,0x0,0xc,0x0,0x0,0x0] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd; //0x3 uint8_t key; //0x29 }; 回复设置勿扰模式json示例： 无 回复设置勿扰模式字节数据： [0x03,0x29] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 16:09:49 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetFindPhone.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetFindPhone.html","title":"设置寻找手机","keywords":"","body":"设置寻找手机 事件号：103 APP端发送: 发送json字段： 字段名 字段类型 字段说明 on_off int 1:打开0:关闭 交互结构体内容： //寻找手机 struct protocol_find_phone { struct protocol_head head; uint8_t status; uint8_t timeout; }; 设置寻找手机json示例： { \"on_off\": 1 } 设置寻找手机字节数据： [0x03,0x26,0xAA] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 交互结构体内容： struct protocol_reply { struct protocol_head head;//0x03,0x26 uint8_t status_code; }; 回复APP设置寻找手机json示例： { \"status_code\" : 0 } 回复APP设置寻找手机字节数据： [0x03,0x26,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 16:12:38 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetSportGoal.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetSportGoal.html","title":"设置运动目标(设置全天步数)","keywords":"","body":"设置运动目标 事件号：105 APP端发送： 发送json字段： 字段名 字段类型 字段说明 sport_step int 步数 walk_goal_steps int 每小时步数目标设置 target_type int 0无效 1日目标 2周目标 功能表v2SupportSetStepDataType开启有效 交互结构体内容： //设置目标 struct protocol_set_sport_goal { struct protocol_head head; uint8_t type; //00步数 uint32_t data; //数值 uint8_t sleep_hour; //预留 uint8_t sleep_minute;//预留 uint16_t walk_goal_steps; //每小时步数目标设置 功能表 bool support_walk_goal_steps_03_03 //固件支持每小时目标步数设置和获取 uint8_t target_type;//0无效 1日目标 2周目标 功能表 bool v2_support_set_step_data_type_03_03//支持app设置目标步数类型为周目标 }; 设置运动目标示例： { \"sport_step\": 2000, \"walk_goal_steps\": 15, \"target_type\" : 1 } 设置运动目标字节数据： [0x3,0x3,0x0,0xd0,0x7,0x0,0x0,0x0,0x0,0xf,0x0,0x1] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 交互结构体内容： struct protocol_reply { struct protocol_head head;//0x03,0x03 uint8_t status_code; }; 回复APP设置运动目标的示例： { \"status_code\" : 0 } 回复APP设置运动目标字节数据： [0x3,0x3,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 16:13:15 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetHand.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetHand.html","title":"设置左右手","keywords":"","body":"设置左右手 事件号：109 APP端发送： 发送json字段： 字段名 字段类型 字段说明 hand int 0：左手 1：右手 交互结构体内容： //设置左右手 struct protocol_set_handle { struct protocol_head head; uint8_t hand_type; }; 设置左右手json示例： { \"hand\":0 } 设置左右手字节数据： [0x3,0x22,0x0] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd; //0x3 uint8_t key; //0x22 }; 回复设置左右手json示例： 无 回复设置左右手字节数据： [0x3,0x22] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 16:13:36 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetTime.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetTime.html","title":"设置时间","keywords":"","body":"设置时间 事件号：104 APP端发送： 发送json字段： 字段名 字段类型 字段说明 year int 年 monuth int 月 day int 日 hour int 时 minute int 分 second int 秒 week int 星期0~6， 表示星期一到星期天 time_zone int 用24时区的，手机端的获取时区是整数0-12东，13-24西,需要功能表支持 交互结构体内容： //系统时间 struct protocol_set_time { struct protocol_head head;//0x3,0x1 uint16_t year; uint8_t month; uint8_t day; uint8_t hour; uint8_t minute; uint8_t second; uint8_t week; uint32_t utc_time; //暂时不用兼容硬件部分代码 /* bool v2_support_set_time_zone_float_03_01;//支持世界时钟设备在有此功能表的情况下时间设置中 time_zone为浮点型，小数点后有两位，app此时的时区设定值为实际时区值的扩大一百倍 ，无此功能表则按实际时区值下发 */ uint16_t time_zone; //用24时区的，手机端的获取时区是整数，0-12东，13-24西 }; 设置时间的json示例： { \"year\": 2022, \"monuth\": 12, \"day\": 16, \"hour\": 17, \"minute\": 49, \"second\": 46, \"week\": 5, \"time_zone\": 8 } 设置时间的字节数据： [0x3,0x1,0xe6,0x7,0xc,0x10,0x11,0x31,0x2e,0x5,0x8] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd; //0x3 uint8_t key; //0x1 }; 回复APP设置运动目标的示例： 无 回复APP设置运动目标字节数据： [0x3,0x1] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 16:43:43 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetUserInfo.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetUserInfo.html","title":"设置用户信息","keywords":"","body":"设置用户信息 事件号：107 APP端发送： 发送json字段： 字段名 字段类型 字段说明 year int 出生日期 年 month int 出生日期 月 day int 出生日期 日 height int 身高 单位厘米 weight int 体重 单位千克 值需要x100 gender int 性别1：女 0：男 交互结构体内容： //用户信息 struct protocol_set_user_info { struct protocol_head head;//0x3,0x10 uint8_t height; //身高 uint16_t weight; //体重 uint8_t gender; uint16_t year; //生日 uint8_t month; uint8_t day; }; 设置用户信息json示例： { \"year\": 2022, \"monuth\": 12, \"day\": 16, \"heigh\": 173, \"weigh\": 7400, \"gender\": 0 } 设置用户信息的字节数据： [0x3,0x10,0xad,0xe8,0x1c,0x0,0x0,0xe6,0x7,0xc,0x10] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd; //0x3 uint8_t key; //0x10 }; 回复设置用户信息json示例： 无 回复设置用户信息字节数据： [0x03,0x10] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 17:00:01 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOOneKeySOS.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOOneKeySOS.html","title":"设置一键呼叫","keywords":"","body":"设置一键呼叫 事件号：119 APP端发送： 发送json字段： 字段名 字段类型 字段说明 on_off int 开关1 开 0 关 phone_type int 0：无效 1：doro手机 2：非doro手机 交互结构体内容： //设置一键呼叫开关 struct protocol_set_onekey_sos { struct protocol_head head;//0x3,0x2c uint8_t on_off; //0xAA 开,0x55 关 uint8_t phone_type; //0x00:无效 0x01:doro手机 0x02：非doro手机 }; 设置一键呼叫开关json示例： { \"on_off\": 1, \"phone_type\" : 0 } 设置一键呼叫开关字节数据： [0x3,0x2c,0xaa,0x0] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 交互结构体内容： struct protocol_reply { struct protocol_head head;//0x03,0x2c uint8_t status_code; }; 回复设置一键呼叫开关json示例： { \"status_code\" : 0 } 回复设置一键呼叫开关字节数据： [0x3,0x2c] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 17:08:36 "},"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetMusicONOFF.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2SetEvt/IDOSetMusicONOFF.html","title":"设置音乐开关","keywords":"","body":"设置音乐开关 事件号：117 APP端发送： 发送json字段： 字段名 字段类型 字段说明 on_off int 开关1 开 0 关 show_info_status int 展示歌曲信息开关1:开 0:关需要固件开启功能表支持supportV2SetShowMusicInfoSwitch 交互结构体内容： //音乐开关 struct protocol_music_onoff { struct protocol_head head;//0x3,0x2a uint8_t switch_status; uint8_t show_info_status;//展示歌曲信息开关 0xAA:开 0x55:关 0无效默认开启,需要功能表支持support_v2_set_show_music_info_switch_03_2A }; 设置音乐开关json示例： { \"on_off\":1 } 设置音乐开关字节数据： [0x3,0x2a,0xaa,0x0] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 交互结构体内容： struct protocol_reply { struct protocol_head head;//0x03,0x2a uint8_t status_code; }; 回复设置音乐开关json示例： { \"status_code\" : 0 } 回复设置音乐开关字节数据： [0x3,0x2a,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 17:24:30 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetEvtIntroduction.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetEvtIntroduction.html","title":"V2获取指令事件","keywords":"","body":"{V2获取指令事件} 事件号及对应功能： 事件号 功能 300 获取设备MAC地址 301 获取设备信息 303 获取功能表////TODO 306 获取通知中心开关 304 获得实时数据 320 获取错误记录 334 获取文件传输配置 310 获取HID信息 312 获取GPS信息 ////TODO 313 获取热启动参数 314 获取GPS状态 315 获取版本信息 316 获取勿扰模式状态 317 获取MTU信息 318 获取默认的运动类型 319 获取下载语言支持 321 获取电池信息 322 获取字库信息 323 获取设备支持的菜单列表 325 获取屏幕亮度 326 获取抬腕数据 327 获取设备升级状态 328 获取表盘ID 329 获取手表名字 330 获取设备的日志状态 331 获取设置的卡路里/距离/中高运动时长(日常三环) 332 获取走动提醒 333 获取所有的健康监测开关 335 获取运动模式自动识别开关 336 获得固件三级版本和BT的3级版本 337 获取压力值 338 获取血压算法三级版本号信息 339 获取固件支持的详情最大设置数量 340 获取固件不可删除的快捷应用列表 351 获取固件红点提示开关状态 352 查询获取bt配对开关、连接、a2dp连接、hfp连接状态 353 获取固件本地保存联系人文件修改时间 421 获取心率监测模式 422 获取全天步数目标 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 19:33:25 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetMac.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetMac.html","title":"获取设备MAC地址","keywords":"","body":"获取设备mac地址 事件号：300 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_get { struct protocol_head head;//0x02,0x04 }; 获取设备mac地址json示例： 无 获取设备mac地址字节数据： [0x2,0x4] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 mac_addr int [6] 设备的id地址 最大6个字节 bt_addr int [6] bt的蓝牙地址 最大6个字节 交互结构体内容： //设备mac地址 struct protocol_device_mac { struct protocol_head head; uint8_t mac_addr[6]; uint8_t bt_addr[6];//bt蓝牙地址 功能表支持bool v2_get_bt_addr_02_04 }; 回复APP获取设备mac地址json示例： { \"bt_addr\" : [ 244, 3, 18, 255, 132, 212 ], \"mac_addr\" : [ 244, 3, 18, 255, 132, 212 ] } 回复APP获取设备mac地址字节数据： [0x2,0x4,0xF4,0x3,0x12,0xFF,0x84,0xD4,0xF4,0x03,0x12,0xFF,0x84,0xD4,0x0,0x0,0x0,0x0,0x0,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 17:37:18 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetDeviceInfoOnly.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetDeviceInfoOnly.html","title":"获取设备信息","keywords":"","body":"获取设备信息 事件号:301 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_get { struct protocol_head head;//0x02,0x01 }; 获取设备信息json示例： 无 获取设备信息字节数据： [0x2,0x1] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 deivce_id int 设备id firmware_version int 版本号 mode int 模式0：运动模式，1：睡眠模式 batt_status int 电池状态 0： 正常1：正在充电2：充满3：低电量 energe int 电量等级 pair_flag int 绑定状态 reboot int 是否重启 如果重启 app会再次同步配置信息给手环 bind_confirm_method int 绑定确认方式 0：默认(注意以前ID号定制),超时时间无效1：单击[按键在下面]2：为长按[按键在下面]3：屏幕点击 横向确认和取消,确认在左边4：屏幕点击 横向确认和取消,确认在右边5：屏幕点击 竖向确认和取消，确认在上边6：屏幕点击 竖向确认和取消，确认在下边7：点击(右边一个按键) bind_confirm_timeout int 超时时间最长为15秒 0表示不超时 platform int 手环的平台 0 ：nordic10 ：realtek 8762x 20 ：cypress psoc630：Apollo3 40：为汇顶 50：nordic+泰凌微, 瑞坤 80：5340 90：炬芯 shape int 0：默认（gt01 方形的）1：圆形2：方形的3：椭圆 dev_type int 0：默认（gt01 手表）1： 手环2：手表 user_defined_dial_main_version int 自定义表盘主版本 从1开始 0：不支持对应的自定义表盘功能 cloud_clock_dial_version int 云端表盘版本号 默认从0开始 是否支持云端表盘有对应的功能表multi_dial (废弃 同user_defined_dial_main_version ) show_bind_choice_ui int 固件绑定时候显示勾勾叉叉ui界面 app根据这个位显示提示固件点击绑定 0：不需要app提示 1：需要app提示 bootload_version int nordic平台bootloader版本信息 最小为1 交互结构体内容： //获取信息类 struct protocol_device_info { struct protocol_head head;//0x2,0x1 uint16_t device_id; //设备id uint8_t version; //版本号 uint8_t mode; //模式 uint8_t batt_status; //电池状态 电池状态 （0x00： 正常， 0x01：正在充电，0x02：充满， 0x03：低电量） uint8_t batt_level; //电量等级 uint8_t pair_flag; //绑定状态 uint8_t reboot_flag; //是否重启 ,如果重启，app会再次同步配置信息给手环 uint8_t version_info; //是否存在版本信息; uint8_t bind_confirm_method; /** * 绑定确认方式 低4位为确认方式 &0x0f, * 0x00默认(注意以前ID号定制),超时时间无效, * 0x01(单击[按键在下面]), * 0x02(为长按[按键在下面]), * 0x03(屏幕点击 横向确认和取消,确认在左边), * 0x04(屏幕点击 横向确认和取消,确认在右边)， * 0x05(屏幕点击 竖向确认和取消，确认在上边)， * 0x06(屏幕点击 竖向确认和取消，确认在下边, * 0x07点击(右边一个按键)) * 高4位为超时时间 &0xf0,最长为15秒,0表示不超时 **/ uint8_t platform; /** * 手环的平台 * 0:nordic * 10:realtek 8762x * 20:cypress psoc6 * 30:Apollo3 * 40:汇顶 * 50:nordic+泰凌微 * 60:泰凌微+5340+no nand flash(需要ota模式) * 70:汇顶+富瑞坤 * 80:5340 * 90:炬芯 * 99:思澈 */ uint8_t shape; // 0:默认(gt01方形的) 1:圆形 2:方形的 3:椭圆 uint8_t dev_type; // 0:默认(gt01手表) 1:手环 2:手表 uint8_t user_defined_dial_main_version;//自定义表盘主版本 从1开始 0:不支持对应的自定义表盘功能 uint8_t cloud_clock_dial_version;//云端表盘版本号 默认从0开始，是否支持云端表盘有对应的功能表multi_dial (废弃 同user_defined_dial_main_version ) uint8_t show_bind_choice_ui; //固件绑定时候显示勾勾叉叉ui界面，app根据这个位显示提示固件点击绑定 0:不需要app提示 1:需要app提示 uint8_t bootload_version; //nordic平台bootloader版本信息 最小为1 }; 回复APP获取设备信息的json示例： \"batt_status\" : 0, \"bind_confirm_method\" : 0, \"bind_confirm_timeout\" : 0, \"bootload_version\" : 0, \"cloud_clock_dial_version\" : 5, \"deivce_id\" : 7698, \"dev_type\" : 2, \"energe\" : 56, \"firmware_version\" : 1, \"mode\" : 1, \"pair_flag\" : 1, \"platform\" : 90, \"reboot\" : 0, \"shape\" : 2, \"show_bind_choice_ui\" : 0, \"user_defined_dial_main_version\" : 5 } 回复APP获取设备信息的字节数据： [0x2,0x1,0x12,0x1E,0x1,0x1,0x0,0x38,0x1,0x0,0x1,0x0,0x5A,0x2,0x2,0x3,0x5,0x0,0x0,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 18:08:53 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetNoticeStatus.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetNoticeStatus.html","title":"获取通知中心开关","keywords":"","body":"获取通知中心开关 事件号：306 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_get { struct protocol_head head;//0x02,0x10 }; 获取通知中心开关json示例： 无 获取通知中心开关字节数据： [0x2,0x10] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 notify_switch int 通知提醒开关0：总开关关(预留 无效功能)1：ble总开关开(发起配对 IOS专用)2：设置子开关3：只开bt（开关）4：ble、bt都开（开关）-1：无效 call_switch int 来电子提醒开关 1:开0:关-1:无效 notify_item1 int 子应用开关1 每个bit代表一个应用 notify_item2 int 子应用开关2 每个bit代表一个应用 call_delay int 来电提醒延时 单位秒 notify_item3 int 子应用开关3 每个bit代表一个应用 notify_item4 int 子应用开关4 每个bit代表一个应用 notify_item5 int 子应用开关5 每个bit代表一个应用 notify_item6 int 子应用开关6 每个bit代表一个应用 notify_item7 int 子应用开关7 每个bit代表一个应用 notify_item8 int 子应用开关8 每个bit代表一个应用 notify_item9 int 子应用开关9 每个bit代表一个应用 notify_item10 int 子应用开关10 每个bit代表一个应用 msg_all_switch int 消息应用总开关 1:开0:关-1:无效(不支持) notify_item11 int 子应用开关11 每个bit代表一个应用 notify_item12 int 子应用开关12 每个bit代表一个应用 回复APP获取通知中心json示例： { \"call_delay\" : 0, \"call_switch\" : 1, \"msg_all_switch\" : -1, \"notify_item1\" : 0, \"notify_item10\" : 0, \"notify_item11\" : 0, \"notify_item12\" : 0, \"notify_item2\" : 0, \"notify_item3\" : 0, \"notify_item4\" : 0, \"notify_item5\" : 0, \"notify_item6\" : 0, \"notify_item7\" : 0, \"notify_item8\" : 0, \"notify_item9\" : 0, \"notify_switch\" : 0 } 回复APP获取通知中心字节数据： [0x2,0x10,0xAA,0x0,0x0,0x55,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 18:20:35 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetLiveData.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetLiveData.html","title":"获得实时数据","keywords":"","body":"获得实时数据 事件号：304 APP端发送： 发送json字段： 字段名 字段类型 字段说明 flag int 0：无功能1：强制打开心率监测2：强制打开血压监测 交互结构体内容： //实时数据 struct protocol_get_live_data { struct protocol_head head;//0x2,0xa0 uint8_t flag; }; 获取实时数据json示例： { \"flag\" : 1 } 获取实时数据字节数据： [0x2,0xa0,0x1] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 total_step int 总步数 total_calories int 总卡路里 单位大卡 total_distances int 总距离 单位m total_active_time int 总活动时长单位秒 heart_rate int 心率数据单位bpm如果没有心率功能，该值为0 交互结构体内容： struct protocol_get_live_data_reply { struct protocol_head head; uint32_t step; uint32_t calories; uint32_t distances; uint32_t active_time; uint8_t heart_rate; }; 回复APP获取实时数据json示例： { \"heart_rate\" : 0, \"total_active_time\" : 0, \"total_calories\" : 0, \"total_distances\" : 0, \"total_step\" : 0 } 回复APP获取实时数据字节数据： [0x2,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 18:40:55 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetErrorRecord.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetErrorRecord.html","title":"获取错误记录","keywords":"","body":"获取错误记录 事件号：320 APP端发送： 发送json字段： 字段名 字段类型 字段说明 type int 0 查询1 清除记录 交互结构体内容： struct protocol_get_error_record { struct protocol_head head; uint8_t type; // 0x00 查询,0x01 清除记录 }; 获取错误记录json示例： { \"type\" : 0 } 获取错误记录字节数据： [0x2,0x40,0x0] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 type int 0 查询1 清除记录 reset_flag int 0 正常1 硬错误(Hard Faul)2 看门狗服务3 断言复位4 掉电服务5 其他异常 hw_error int 硬件错误码 0 正常1 加速度错误2 心率错误3 TP错误4 flash错误 交互结构体内容： struct protocol_get_error_record_reply { struct protocol_head head; uint8_t type; //0x00:查询 0x01:清除记录 uint8_t reset_flag; //0x00:正常 0x01:硬错误(Hard Faul) 0x02:看门狗服务 0x03:断言复位 0x04:掉电服务 0x05:其他异常 uint8_t hw_error; //硬件错误码 0:正常 0x01:加速度错误 0x02:心率错误 0x03:TP错误 0x04:flash错误 }; 回复获取错误信息示例： { \"type\":0, \"reset_flag\":0, \"hw_error\":0 } 回复获取错误信息字节数据： [0x2,0x40,0x0,0x0,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-18 18:47:51 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetDataTranConfig.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetDataTranConfig.html","title":"获取文件传输配置","keywords":"","body":"获取图标文件传输配置传输 / 获取图片文件传输配置 事件号：334 APP端发送： 发送json字段： 字段名 字段类型 字段说明 type int 运动类型 对应的图标类型 0：这个字段无效1：运动小图标2：运动大图标3：运动动画 4：运动等大小图标 5：运动最小图标 evt_type int 事件类型0是这个字段无效 比如 1：短信,2：邮件，3：微信 .... sport_type int 运动类型 0是这个字段无效 运动模式类型1 走路,2 跑步.... 交互结构体内容： struct protocol_data_tran_configure_get { struct protocol_head head;//0x2,0xe9 uint8_t type; //运动类型 对应的图标类型 0这个字段无效 1运动小图标 2:运动大图标 3:运动动画 4:运动中等大小图标 uint16_t evt_type; //事件类型 0是这个字段无效 比如0x01短信 0x02邮件 0x03微信 ...(上限值：0x4E20) uint16_t sport_type;//运动类型 0是这个字段无效 运动模式类型0x01走路 0x02跑步 ... }; 获取图标文件传输配置传输json示例： { \"type\" : 1, \"evt_type\" : 1, \"sport_type\" : 1 } 获取图标文件传输配置传输字节数据： [0x2,0xe9,0x1,0x1,0x0,0x1,0x0] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 err_code int 错误码 0是正常，非0是错误 type int 运动类型 对应的图标类型 0：这个字段无效1：运动小图标2：运动大图标 3：运动动画 4：运动中等大小图标 evt_type int 事件类型0是这个字段无效 比如 1：短信,2：邮件，3：微信 .... sport_type int 运动类型0是这个字段无效 运动模式类型, 1 走路,2 跑步.... icon_width int 固件图标需要的宽度（根据type 和 evt_type/sport_type 确定） icon_height int 固件图标需要的高度（根据type 和 evt_type/sport_type 确定） format int 颜色格式 block_size int 压缩块大小 big_sports_num int 运动图标大图标个数 msg_num int 消息图标的个数 small_sports_and_animation_num int 运动动画和小图标的个数 medium_num int 运动中等图标个数 交互结构体内容： struct protocol_data_tran_configure_get_reply { struct protocol_head head; uint8_t err_code; //错误码 0是正常，非0是错误 uint8_t type; //运动类型 对应的图标类型 0这个字段无效 1运动小图标 2运动大图标 3运动动画 4运动中等大小图标 uint16_t evt_type; //事件类型 0是这个字段无效 通消息通知 比如 0x01短信 0x02邮件 0x03微信（上限值：0x4E20） uint16_t sport_type; //运动类型 0是这个字段无效 运动模式类型 0x01走路 0x02跑步 uint16_t icon_width; //固件图标需要的宽度和高度（根据type 和 evt_type/sport_type 确定） uint16_t icon_height; uint8_t format; //颜色格式 uint16_t block_size; //压缩块大小 uint8_t big_sports_num; //运动图标大图标个数 uint8_t msg_num; //消息图标的个数 uint8_t small_sports_and_animation_num; //运动动画和小图标的个数 // -------- 20220707 新增运动最小图标、中等图标个数返回 -------- uint8_t min_samll_num;//运动最小图标个数 uint8_t medium_num; //运动中等图标个数 }; 回复获取图标文件传输配置传输json示例： { \"err_code\": 0, \"type\": 1, \"evt_type\": 1, \"sport_type\": 1, \"icon_width\": 50, \"icon_height\": 50, \"format\": 133, \"block_size\": 1024, \"big_sports_num\": 5, \"msg_num\": 0, \"small_sports_and_animation_num\": 0, \"medium_num\": 0, \"min_samll_num\": 0 } 回复获取图标文件传输配置传输字节数据： [0x2,0xe9,0x0,0x1,0x1,0x0,0x1,0x0,0x32,0x0,0x32,0x0,0x85,0x0,0x4,0x5,0x0,0x0,0x0,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 10:53:07 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetHIDInfo.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetHIDInfo.html","title":"获取HID信息","keywords":"","body":"获取HID信息 事件号：310 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_get { struct protocol_head head;//0x02,0xa2 }; 获取HID信息json示例： 无 获取HID信息字节数据： [0x2,0xa2] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 is_start int 0没有启动1启动成功 交互结构体内容： struct protocol_get_hid_info_reply { struct protocol_head head;//0x2,0xa2 uint8_t is_start; //0没有启动,1启动成功 }; 回复获取HID信息json示例： { \"is_start\" : 0 } 回复获取HID信息字节数据： [0x2,0xa2,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 10:59:31 "},"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetGPSInfo.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV2GetEvt/IDOGetGPSInfo.html","title":"获取GPS信息","keywords":"","body":"获取GPS信息 事件号：312 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_get { struct protocol_head head;//0x02,0xa3 }; 获取GPS信息json示例： 无 获取GPS信息字节数据： [0x2,0xa3] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 err_code int GPS是否错误0正常 非0异常 fw_version int GPS固件版本 agps_info int AGPS有效期 agps_err_code int AGPS错误值 utc_year int utc时间 年 utc_month int utc时间 月 utc_day int utc时间 日 utc_hour int utc时间 时 utc_minute int utc时间 分 start_mode int 启动模式1 冷启动2 热启动 gns int 定位星选择1 GPS2 GLONASS3 GPS + GLONASS fix_start_bit int 修正标识位默认0 用于调试 回复获取GPS信息json示例： { \"err_code\": 0, \"fw_version\": 66051, \"agps_info\": 0, \"agps_err_code\": 0, \"utc_year\": 0, \"utc_month\": 0, \"utc_day\": 0, \"utc_hour\": 0, \"utc_minute\": 0, \"start_mode\": 2, \"gns\": 0, \"fix_start_bit\": 0 } 回复获取GPS信息字节数据： [0x2,0xa3,0x0,0x3,0x2,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 19:33:09 "},"doc/IDOProtocolSimulatorExec/IDOV3Evt/IDOV3EvtIntroduction.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV3Evt/IDOV3EvtIntroduction.html","title":"V3长包指令事件","keywords":"","body":"{V3长包指令事件} 事件号及对应功能： 事件号 功能 5006 V3获取表盘列表 5007 V3获取屏幕信息 ////TODO 5008 V3设置表盘 5010 V3设置心率模式 5011 V3控制音乐 5012 V3通知消息提醒 5013 V3设置运动类型排序 5016 V3获取运动默认的类型 5017 V3APP设置ble的闹钟 5018 V3APP获取设备的闹钟 5020 V3APP设置回复快速信息 5021 V3多运动数据交互 5022 V3多运动数据最后一次数据获取 5023 V3多运动数据数据交换中获取1分钟的心率数据 5024 V3获取设备字库列表 5025 V3语音回复文本 5030 V3多运动数据数据交换中获取一段时间的GPS数据 5070 V3设置GPS热启动参数 5071 V3获取固件本地提示音文件信息 5072 V3操作血压校准控制 5035 V3获取表盘列表(新接口) 5036 V3设置壁纸表盘颜色和位置 5037 V3设置查询100种运动排序 5038 V3日程提醒 5039 V3设置查询主界面控件排序 5040 V3设置查询运动子项数据排列 5041 V3设置运动城市名称 5042 V3设置单个应用的通知状态 5043 V3获取包名 5044 V3同步协议蓝牙通话常用联系人 5045 V3设置天气数据 5046 V3下发世界时间 5047 V3设置多个走动提醒的时间点 5048 V3获取固件的歌曲名和文件夹 5049 V3操作歌曲或者文件夹 5051 V3通知消息提醒(动态) 5052 V3经期的历史数据下发 5053 V3设置表盘顺序 5054 V3APP下发跑步计划(运动计划) 5056 V3APP通知设备运动过程切换 5059 V3获取用户习惯信息 5078 V3操作小程序信息 5080 V3智能陪跑信息配置 5085 V3设备通知APP运动过程切换 5800 V3APP获取表盘颜色样式修改 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 20:14:57 "},"doc/IDOProtocolSimulatorExec/IDOV3Evt/IDOV3GetDialList.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV3Evt/IDOV3GetDialList.html","title":"V3获取表盘列表","keywords":"","body":"V3获取表盘列表 事件号：5006 APP端发送： 发送json字段： 无 交互结构体内容： uint8_t cmd = 0x33; typedef struct protocol_v3_base { uint32_t fixed; uint8_t version; uint16_t length; uint16_t cmd_id; uint16_t nseq; }protocol_v3_base_s; uint16_t crc; 获取表盘列表json示例： 无 获取表盘列表的字节数据： [0x33,0xDA,0xAD,0xDA,0xAD,0x01,0x0B,0x00,0x06,0x00,0x05,0x00,0x5D,0x34] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 version int 协议版本号 available_count int 剩余个数，可用文件个数 file_max_size int 单个文件最大size 单位KB item 集合 表盘列表详情，file_name的集合 字段名 字段类型 字段说明 file_name char [] 表盘名称 交互结构体内容： uint8_t cmd = 0x33; typedef struct protocol_v3_base { uint32_t fixed; uint8_t version; uint16_t length; uint16_t cmd_id; uint16_t nseq; }protocol_v3_base_s; struct protocol_v3_file_list { uint8_t version; //版本号 uint16_t file_count; //表盘已经使用数目 uint16_t available_count; //剩余个数，可用文件个数 uint16_t file_max_size; //单个文件最大sizeKB char file_list[10][30]; //这里的数据用pd解包 }; uint16_t crc; 回复获取表盘列表json示例： { \"available_count\" : 4, \"file_max_size\" : 600, \"item\" : [ { \"file_name\" : \"custom1.iwf\" }, { \"file_name\" : \"watch253.iwf\" } ], \"version\" : 1 } 回复获取表盘列表字节数据： [33 DA AD DA AD 01 33 00 06 00 05 00 01 02 00 04 00 58 02 01 0B 00 00 00 63 75 73 74 6F 6D 31 2E 69 77 66 01 0C 00 00 00 77 61 74 63 68 32 35 33 2E 69 77 66 FD 16] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 20:15:00 "},"doc/IDOProtocolSimulatorExec/IDOV3Evt/IDOV3GetScreenInfo.html":{"url":"doc/IDOProtocolSimulatorExec/IDOV3Evt/IDOV3GetScreenInfo.html","title":"V3获取屏幕信息","keywords":"","body":"V3获取屏幕信息 事件号：5007 APP端发送： 发送json字段： 无 交互结构体内容： uint8_t cmd = 0x33; typedef struct protocol_v3_base { uint32_t fixed; uint8_t version; uint16_t length; uint16_t cmd_id; uint16_t nseq; }protocol_v3_base_s; uint16_t crc; 获取屏幕信息json示例： 无 获取屏幕信息的字节数据： [33 DA AD DA AD 01 0B 00 07 00 05 00 E9 42] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 width int 屏幕宽度 (像素大小) height int 屏幕高度 (像素大小) format int 颜色格式 sizex100 int 尺寸 x100 family_name char [] 家族名称 最大10个字节 block_size int 压缩块大小 交互结构体内容： uint8_t cmd = 0x33; typedef struct protocol_v3_base { uint32_t fixed; uint8_t version; uint16_t length; uint16_t cmd_id; uint16_t nseq; }protocol_v3_base_s; struct protocol_v3_watch_face_info { char family_name[10];//家族名字 uint16_t width; //宽度像素块 uint16_t height; //高度像素块 uint8_t format; //颜色格式 uint16_t sizex100; //尺寸 x100 uint16_t block_size; //压缩块大小 }; uint16_t crc; 回复获取屏幕信息json示例： { \"block_size\" : 1024, \"family_name\" : \"ID206\", \"format\" : 133, \"height\" : 280, \"sizex100\" : 0, \"width\" : 240 } 回复获取屏幕信息字节数据： [33 DA AD DA AD 01 1E 00 07 00 05 00 49 44 32 30 36 00 00 00 00 00 F0 00 18 01 85 00 00 00 04 B6 8E] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-19 20:14:43 "},"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaEvtIntroduction.html":{"url":"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaEvtIntroduction.html","title":"OTA指令事件","keywords":"","body":"{OTA事件} 事件号及对应功能： 事件号 功能 400 进入升级模式 401 直接进入升级模式(忽略电量) 407 设置OTA授权 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 14:24:04 "},"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaStart.html":{"url":"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaStart.html","title":"进入升级模式","keywords":"","body":"进入升级模式 事件号:400 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd; //0x1 uint8_t key; //0x1 }; 设置进入升级模式json示例： 无 设置进入升级模式字节数据： [0x1,0x1] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 err_flag int 0: 进入OTA成功 1: 失败：电量过低 2: 失败：设备不支持 3: 失败：参数不正确 回复设置进入升级模式json示例： { \"err_flag\" : 0 } 回复设置进入升级模式字节数据 [0x1,0x1,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 16:24:02 "},"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaDirectStart.html":{"url":"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaDirectStart.html","title":"直接进入升级模式(忽略电量)","keywords":"","body":"直接进入升级模式(忽略电量) 事件号:401 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd; //0x1 uint8_t key; //0x2 }; 忽略电量直接设置进入升级模式json示例： 无 忽略电量直接设置进入升级模式字节数据： [0x1,0x2] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd; //0x1 uint8_t key; //0x2 }; `回复忽略电量直接设置进入升级模式json示例： 无 回复忽略电量直接设置进入升级模式字节数据： [0x1,0x2] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 17:09:26 "},"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaAuth.html":{"url":"doc/IDOProtocolSimulatorExec/IDOOtaEvt/IDOOtaAuth.html","title":"设置OTA授权","keywords":"","body":"设置ota授权 事件号:407 APP端发送： 发送json字段： 字段名 字段类型 字段说明 device_id int 设备ID version int 版本0 表示不进行版本校验,用于不能降级的约束,默认0 交互结构体内容： struct protocol_ota_auth { struct protocol_head head; uint16_t device_id; //设备ID uint8_t version; //版本0 表示不进行版本校验,用于不能降级的约束,默认0 }; 设置OTA授权json示例： { \"device_id\" : 0, \"version\" : 0 } 设置OTA授权字节数据： [0x1,0x3,0x0,0x0] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 err_code int 错误码0：校验成功1：ID号校验失败2：版本号校验失败3：电量不足4：其他错误 交互结构体内容： struct protocol_ota_auth_reply { struct protocol_head head; uint8_t err_code; //0x00校验成功,0x01 ID号校验失败,0x02 版本号校验失败,0x03 电量不足,0x04 其他错误 }; 回复设置OTA授权json示例： { \"err_code\" : 0 } 回复设置OTA授权字节数据： [0x1,0x3,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 17:09:35 "},"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlEvtIntroduction.html":{"url":"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlEvtIntroduction.html","title":"APP发起通知/控制事件","keywords":"","body":"{APP发起通知/控制事件} 事件号及对应功能： 事件号 功能 403 控制设备重启 404 控制设备断线 405 清除绑定信息 406 控制关闭设备 408 控制设备恢复出厂 409 控制清除手环缓存 ////TODO 415 下发通话时间给固件 500 控制音乐开始 501 控制音乐停止 502 控制拍照开始 503 控制拍照停止 504 控制寻找手机开始 505 控制寻找手机停止 506 控制打开ANCS开始 507 控制打开ANCS停止 511 APP传输运动图标信息及状态通知固件 512 APP通知固件开启BT广播 513 APP通知固件某些功能的权限状态 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:10:36 "},"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlReboot.html":{"url":"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlReboot.html","title":"控制设备重启","keywords":"","body":"控制设备重启 事件号：403 APP端发送： 无 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_reply { struct protocol_head head;//0xf0,0x1 uint8_t status_code; }; 回复APP设置设备重启json字段： { \"status_code\" : 0 } 回复APP设置设备重启的字节数据： [0xf0,0x1,0x0] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 17:24:44 "},"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlDisconnect.html":{"url":"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlDisconnect.html","title":"控制设备断线","keywords":"","body":"控制设备断线 事件号:404 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0xf0 uint8_t key;//0x2 }; 控制设备断线json示例： 无 控制设备断线字节数据： [0xf0,0x2] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0xf0 uint8_t key;//0x2 }; 回复控制设备断线json示例： 无 回复控制设备断线字节数据： [0xf0,0x2] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:13:36 "},"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlCleanBindInfo.html":{"url":"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlCleanBindInfo.html","title":"清除绑定信息","keywords":"","body":"清除绑定信息 事件号:405 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0x3 uint8_t key;//0xd1 }; 控制设备清除绑定信息json示例： 无 控制设备清除绑定信息字节数据： [0x3,0xd1] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0x3 uint8_t key;//0xd1 }; 回复控制设备清除绑定信息json示例： 无 回复控制设备清除绑定信息字节数据： [0x3,0xd1] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:04:28 "},"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlShutdown.html":{"url":"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlShutdown.html","title":"控制关闭设备","keywords":"","body":"控制关闭设备 事件号:406 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0xf0 uint8_t key;//0x3 }; 控制关闭设备json示例： 无 控制关闭设备字节数据： [0xf0,0x3] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0xf0 uint8_t key;//0x3 }; 回复控制关闭设备json示例： 无 回复控制关闭设备字节数据： [0xf0,0x3] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:06:38 "},"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlRestoreFazctory.html":{"url":"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlRestoreFazctory.html","title":"控制设备恢复出厂","keywords":"","body":"控制设备恢复出厂 事件号:408 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0xf0 uint8_t key;//0x4 }; 控制设备恢复出厂json示例： 无 控制设备恢复出厂字节数据： [0xf0,0x4] 设备/模拟器发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0xf0 uint8_t key;//0x4 }; 回复控制设备恢复出厂json示例： 无 回复控制设备恢复出厂字节数据： [0xf0,0x4] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:07:25 "},"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlClearCache.html":{"url":"doc/IDOProtocolSimulatorExec/IDOControlEvt/IDOControlClearCache.html","title":"控制清除手环缓存","keywords":"","body":"控制清除手环缓存 事件号:409 APP端发送： 发送json字段： 无 交互结构体内容： struct protocol_head { uint8_t cmd;//0xf0 uint8_t key;//0x5 }; 控制控制清除手环缓存json示例： 无 控制清除手环缓存字节数据： [0xf0,0x5] 设备/模拟器发送： 发送json字段： 字段名 字段类型 字段说明 is_success int 1：成功 0：失败 交互结构体内容： struct protocol_set_reply { struct protocol_head head;//0xf0,0x5 uint8_t is_success; // 1：成功 ， 0失败 }; 回复控制清除手环缓存json示例： { \"is_success\" : 0 } 回复控制清除手环缓存字节数据： [0xf0,0x5,0x1] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:10:37 "},"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlEvtIntroduction.html":{"url":"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlEvtIntroduction.html","title":"设备主动通知/控制事件","keywords":"","body":"{设备主动通知/控制事件} 事件号及对应功能： 事件号 功能 551 设备控制APP音乐开始 552 设备控制APP音乐暂停 553 设备控制APP音乐停止 554 设备控制APP音乐上一首 555 设备控制APP音乐下一首 556 设备控制APP拍照单拍 ////TODO 557 设备控制APP拍照连拍 558 设备控制APP音量加 559 设备控制APP音量减 560 设备控制APP打开相机 561 设备控制APP关闭相机 562 设备控制APP接听电话 563 设备控制APP拒接电话 565 设备控制APP音乐音量百分比 570 设备控制APP寻找手机开始 571 设备控制APP寻找手机结束 572 设备通知APP防丢启动 574 设备通知APP一键呼叫开始 575 设备通知传感器数据 576 设备通知APP操作类型 577 设备通知APP数据更新 578 设备请求版本检查 579 设备请求OTA 580 主动通知APP短信 581 设备控制APP相机 591 设备通知固件喇叭音量修改(alexa) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-23 11:03:24 "},"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicStart.html":{"url":"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicStart.html","title":"设备控制APP音乐开始","keywords":"","body":"设备控制APP音乐开始 事件号：551 APP端发送： 无 设备/模拟器发送： 发送json字段： 无 设备控制APP音乐开始字节数据： [0x7,0x1,0x1] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:17:14 "},"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicPause.html":{"url":"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicPause.html","title":"设备控制APP音乐暂停","keywords":"","body":"设备控制APP音乐暂停 事件号：552 APP端发送： 无 设备/模拟器发送： 发送json字段： 无 设备控制APP音乐开始字节数据： [0x7,0x1,0x2] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:17:50 "},"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicStop.html":{"url":"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicStop.html","title":"设备控制APP音乐停止","keywords":"","body":"设备控制APP音乐停止 事件号：553 APP端发送： 无 设备/模拟器发送： 发送json字段： 无 设备控制APP音乐开始字节数据： [0x7,0x1,0x3] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:17:55 "},"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicLast.html":{"url":"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicLast.html","title":"设备控制APP音乐上一首","keywords":"","body":"设备控制APP音乐上一首 事件号：554 APP端发送： 无 设备/模拟器发送： 发送json字段： 无 设备控制APP音乐开始字节数据： [0x7,0x1,0x4] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:18:09 "},"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicNext.html":{"url":"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlMusicNext.html","title":"设备控制APP音乐下一首","keywords":"","body":"设备控制APP音乐下一首 事件号：555 APP端发送： 无 设备/模拟器发送： 发送json字段： 无 设备控制APP音乐开始字节数据： [0x7,0x1,0x5] Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-10-20 19:18:20 "},"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlPhotoSingleShot.html":{"url":"doc/IDOProtocolSimulatorExec/IDODeviceControlEvt/IDODeviceControlPhotoSingleShot.html","title":"设备控制APP拍照单拍","keywords":"","body":"设备控制APP拍照单拍 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "},"doc/IDOAppendix/IDODeviceErrorCode.html":{"url":"doc/IDOAppendix/IDODeviceErrorCode.html","title":"固件标准化通用错误码","keywords":"","body":"{固件通用错误码} 备注：以下通用错误码来自固件开发,仅供参考,部分固件项目可能使用的错误码不一致,需要对应不同的固件项目定位错误标志 索引值 ID 描述 0 ERROR_CODE_SUCCESS Successful command 1 ERROR_CODE_SVC_HANDLER_MISSING SVC handler is missing 2 ERROR_CODE_SOFTDEVICE_NOT_ENABLED SoftDevice has not been enabled 3 ERROR_CODE_INTERNAL Internal Error 4 ERROR_CODE_NO_MEM No Memory for operation 5 ERROR_CODE_NOT_FOUND Not found 6 ERROR_CODE_NOT_SUPPORTED Not supported 7 ERROR_CODE_INVALID_PARAM Invalid Parameter 8 ERROR_CODE_INVALID_STATE Invalid state, operation disallowed in this state 9 ERROR_CODE_INVALID_LENGTH Invalid Length 10 ERROR_CODE_INVALID_FLAGS Invalid Flags 11 ERROR_CODE_INVALID_DATA Invalid Data 12 ERROR_CODE_DATA_SIZE Invalid Data size 13 ERROR_CODE_TIMEOUT Operation timed out 14 ERROR_CODE_NULL Null Pointer 15 ERROR_CODE_FORBIDDEN Forbidden Operation 16 ERROR_CODE_INVALID_ADDR Bad Memory Address 17 ERROR_CODE_BUSY Busy 18 ERROR_CODE_CONN_COUNT Maximum connection count exceeded. 19 ERROR_CODE_RESOURCES Not enough resources for operation 20 ERROR_CODE_BT_OTA Bt Bluetooth upgrade error 21 ERROR_CODE_NO_SPACE Not enough space for operation 22 ERROR_CODE_LOW_BATTERY Low Battery 23 ERROR_CODE_INVALID_FILE_NAME Invalid File Name/Format 24 ERROR_SPACE_ORGANIZATION Watch space needs to be organized 25 ERROR_SPACE_ORGANIZATION_ING Watch space is being organized Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-28 10:28:46 "}}