{"./":{"url":"./","title":"前言","keywords":"","body":"IDO 智能手环iOS SDK 1.1功能概述 IDOBluetooth、IDOBlueProtocol、IDOBlueUpdate适用于iOS设备并支持IDO公司的手环，实现蓝牙连接控制框架库。基于iOS系统的蓝牙框架，扩展了蓝牙扫描、连接、绑定、控制、设置、获取、监听、传输等功能。利用c编写的协议库实现结构体数据的转换和健康数据同步过程中逻辑处理，减少了蓝牙通信数据的错误，提高了蓝牙通信的速度和准确性。这个特性丰富的API易于使用。 1.2快速集成 1.2.1 使用 Cocoapods 集成 在Podfile文件中添加以下内容： source 'https://github.com/idoosmart/IDOSmartSpec.git' platform :ios, '8.0' target 'your_target_name' do pod 'IDOBluetooth' pod 'IDOBlueProtocol' pod 'IDOBlueUpdate' end 然后在项目根目录下执行 pod update 命令，集成第三方库。 CocoaPods的使用请参考：CocoaPods Guides 1.3初始化 SDK 打开项目设置，Target => Build Settings，修改 Other Linker Flags 添加 -Objc Objective-C工程需要添加一个空的Swift文件,生成Objective-C Bridging Header 依赖系统库CoreBluetooth.framework``libc++.tbd``libsqlite3.0.tbd 在项目的PrefixHeader.pch文件添加以下内容： #import #import #import Swift 项目添加以下内容 import IDOBlueUpdate import IDOBluetooth import IDOBlueProtocol 1.3.1 注册SDK 打开AppDelegate.m文件，在[AppDelegate application:didFinishLaunchingWithOptions:]方法中注册SDK： 接口说明 IDOBluetoothServices * _Nonnull registrationServices(NSString * _Nullable password) @property (nonatomic,copy,nullable) IDOBluetoothServices *_Nonnull(^outputSdkLog)(BOOL isOutput); @property (nonatomic,copy,nullable) IDOBluetoothServices *_Nonnull(^outputProtocolLog)(BOOL isOutput,BOOL isRecord); @property (nonatomic,copy,nullable) IDOBluetoothServices *_Nonnull(^rawDataLog)(BOOL isRecord); @property (nonatomic,copy,nullable) void(^startScanBule)(void(^ _Nullable getDeviceInfoBlock)(IDOGetDeviceInfoBluetoothModel * _Nullable model)); 参数说明 参数 说明 备注 registrationServices 注册服务初始化 SDK数据库密码，传nil数据库不加密 startConnectDevice 开始启动时告诉SDK需要连接的设备 Mac地址 outputSdkLog 输出sdk日志 debug模式下为YES outputProtocolLog 输出和记录协议日志 debug模式下为YES rawDataLog 记录原始日志 根据项目需要添加 Objc: #ifdef DEBUG registrationServices().outputSdkLog(YES).outputProtocolLog(YES,YES).rawDataLog(YES).startScanBule(^(IDOGetDeviceInfoBluetoothModel * _Nullable model) { //根据绑定状态执行自动扫描连接，初始化蓝牙管理中心 if(__IDO_BIND__)[IDOBluetoothManager startScan]; else [IDOBluetoothManager refreshDelegate]; }); #else registrationServices().outputSdkLog(NO).outputProtocolLog(NO,YES).rawDataLog(YES).startScanBule(^(IDOGetDeviceInfoBluetoothModel * _Nullable model) { //根据绑定状态执行自动扫描连接，初始化蓝牙管理中心 if(__IDO_BIND__)[IDOBluetoothManager startScan]; else [IDOBluetoothManager refreshDelegate]; }); #endif Swift #if DEBUG registrationServices().outputSdkLog!(true).outputProtocolLog!(true,true).rawDataLog!(true).startScanBule!{ (model) in //根据绑定状态执行自动扫描连接，初始化蓝牙管理中心 if IDOBluetoothEngine.shareInstance()?.peripheralEngine.isBind == true { IDOBluetoothManager.startScan() }else { IDOBluetoothManager.refreshDelegate() } } #else registrationServices().outputSdkLog!(false).outputProtocolLog!(false,true).rawDataLog!(true).startScanBule!{ (model) in //根据绑定状态执行自动扫描连接，初始化蓝牙管理中心 if IDOBluetoothEngine.shareInstance()?.peripheralEngine.isBind == true { IDOBluetoothManager.startScan() }else { IDOBluetoothManager.refreshDelegate() } } #endif 1.3.2 SDK通知服务名称 // 蓝牙扫描、连接状态通知监听名字 | Bluetooth scan, connection status notification listener name extern NSString * _Nonnull IDOBluetoothConnectStateNotifyName; // 蓝牙扫描、连接过程错误通知监听名字 | Bluetooth scan, connection process error notification listener name extern NSString * _Nonnull IDOBluetoothConnectErrorNotifyName; // 设备绑定状态通知名字 | device bind status notification name extern NSString * _Nonnull IDOBluetoothDeviceBindNotifyName; // 同步配置获取设备信息通知名字 | get device info notification name extern NSString * _Nonnull IDOBluetoothGetDeviceInfoNotifyName; // 同步配置完成通知名字 | sync config complete notification name extern NSString * _Nonnull IDOBluetoothSyncConfigNotifyName; // 同步健康数据完成通知名字 | sync health data complete notification name extern NSString * _Nonnull IDOBluetoothSyncHealthNotifyName; // 刚连接时快速配置完成通知名字 | fast sync complete notification name extern NSString * _Nonnull IDOBluetoothFastSyncNotifyName; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"IDOBluetooth.html":{"url":"IDOBluetooth.html","title":"蓝牙管理库","keywords":"","body":"蓝牙管理库 2.1功能概述 当您应用一个未连接的绑定设备时，您需要创建一个视图控制器来实现SDK蓝牙代理。扫描外围设备，代理将返回设备集合，在列表中显示，选择需要连接的设备，连接成功后返回设备信息以及设备是否处于OTA模式，连接失败则会有一个错误回调。默认扫描信号过滤参数为80，自动扫描连接超时时间为20秒。蓝牙管理库（IDOBluetooth）是依赖蓝牙协议库（IDOBlueProtocol），所以在使用蓝牙管理库前，先导入蓝牙协议库。 2.2扫描连接流程图 2.3蓝牙初始化 Objc: [IDOBluetoothManager shareInstance].rssiNum = 100; [IDOBluetoothManager shareInstance].delegate = self; Swift: IDOBluetoothManager.shareInstance()?.rssiNum = 100; IDOBluetoothManager.shareInstance()?.delegate = self; 2.4参数说明 参数 说明 备注 timeout 自动扫描连接超时时长 默认20 rssiNum 设置扫描过滤信号 默认值80 isIntervalScan 是否启动超时间隔扫描 默认yes isReconnect 是否需要重连机制 默认yes autoScanInterval 设置扫描间隔时长 默认10秒 isMandatoryManual 强制切换手动模式扫描连接 当前已经绑定设备再次添加设备 scanMode 蓝牙扫描设备模式 readonly state 蓝牙管理连接状态 readonly errorCode 蓝牙连接错误码 readonly manualConnectTotalTime 手动点击连接设备的总时长 readonly autoConnectTotalTime 自动扫描到成功连接设备的总时长 readonly 2.5基础方法 Objc: //开始扫描 [IDOBluetoothManager startScan]; //刷新蓝牙代理 [IDOBluetoothManager refreshDelegate]; //停止扫描 [IDOBluetoothManager stopScan]; //连接设备 [IDOBluetoothManager connectDeviceWithModel:model]; //断开当前外围设备的连接 [IDOBluetoothManager cancelCurrentPeripheralConnection]; Swift: //开始扫描 IDOBluetoothManager.startScan(); //刷新蓝牙代理 IDOBluetoothManager.refreshDelegate(); //停止扫描 IDOBluetoothManager.stopScan(); //连接设备 IDOBluetoothManager .connectDevice(with: model as? IDOPeripheralModel); //断开当前外围设备的连接 IDOBluetoothManager.cancelCurrentPeripheralConnection(); 2.6代理方法 Objc: - (BOOL)bluetoothManager:(IDOBluetoothManager *)manager centerManager:(CBCentralManager *)centerManager didConnectPeripheral:(CBPeripheral *)peripheral isOatMode:(BOOL)isOtaMode { //设备连接成功回调 return YES; } - (void)bluetoothManager:(IDOBluetoothManager *)manager allDevices:(NSArray *)allDevices otaDevices:(NSArray *)otaDevices { //扫描设备实时返回设备集合回调 } - (void)bluetoothManager:(IDOBluetoothManager *)manager didUpdateState:(IDO_BLUETOOTH_MANAGER_STATE)state { //扫描连接状态回调 } - (void)bluetoothManager:(IDOBluetoothManager *)manager connectPeripheralError:(NSError *)error { //扫描连接错误回调 } Swift: IDOBluetoothManagerDelegate func bluetoothManager(_ manager: IDOBluetoothManager!, connectPeripheralError error: Error!) { //扫描连接错误回调 }; func bluetoothManager(_ manager: IDOBluetoothManager!, didUpdate state: IDO_BLUETOOTH_MANAGER_STATE) { //扫描连接状态回调 }; func bluetoothManager(_ manager: IDOBluetoothManager!, allDevices: [IDOPeripheralModel]!, otaDevices: [IDOPeripheralModel]!) { //扫描设备实时返回设备集合回调 }; func bluetoothManager(_ manager: IDOBluetoothManager!, center centerManager: CBCentralManager!, didConnect peripheral: CBPeripheral!, isOatMode isOtaMode: Bool) -> Bool { //设备连接成功回调 return true; }; 2.7蓝牙通知 1.IDOBluetoothConnectStateNotifyName 蓝牙扫描连接状态监听通知名字，一般情况全局监听此通知，当蓝牙状态发生变化时抛出通知，修改对应的UI交互。 2.IDOBluetoothConnectErrorNotifyName 蓝牙扫描连接错误监听通知名字，一般情况全局监听此通知，当蓝牙发生错误时抛出通知，修改对应的UI交互。 3.IDOBluetoothOtaModeNotifyName 蓝牙连接手环为OTA模式监听通知名字，一般情况全局监听此通知，当蓝牙连接后发现当前手环为OTA模式时抛出通知，根据业务进行手环升级操作。 Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"IDOBlueUpdate.html":{"url":"IDOBlueUpdate.html","title":"升级管理库","keywords":"","body":"蓝牙升级库 3.1功能概述 SDK升级功能只负责固件升级。不处理固件版本确定和固件下载。注意固件下载的完整性，在升级期间传入固件本地沙箱路径，监视升级进度和完成状态，以及错误代理回调。升级库的当前版本添加了nordic、realtk、apollo平台。升级管理库（IDOBlueUpdate）是依赖蓝牙协议库（IDOBlueProtocol），所以在使用升级管理库前，先导入蓝牙协议库。 3.2对应功能表 //设备更新 funcTable4Model.deviceUpdate 3.3升级初始化 Objc: [IDOUpdateFirmwareManager shareInstance].delegate = self; [IDOUpdateFirmwareManager shareInstance].updateType = IDO_NORDIC_PLATFORM_TYPE; Swift: IDOUpdateFirmwareManager.shareInstance().delegate = self; IDOUpdateFirmwareManager.shareInstance().updateType = IDO_UPDATE_PLATFORM_TYPE.NORDIC_PLATFORM_TYPE; 3.4参数说明 参数 说明 备注 packagePath 固件包本地路径 本地沙盒路径 errorCode 升级错误码 readonly state 升级状态 readonly updateType 升级平台类型 支持nordic、realtk、apollo 3.5基础方法 Objc: //开始升级 [IDOUpdateFirmwareManager startUpdate]; Swift: //开始升级 IDOUpdateFirmwareManager.startUpdate(); 3.6代理方法 Objc: - (NSString *)currentPackagePathWithUpdateManager:(IDOUpdateFirmwareManager *)manager { // 固件包本地存放路径 return filePath; } - (void)updateManager:(IDOUpdateFirmwareManager *)manager state:(IDO_UPDATE_STATE)state { if (state == IDO_UPDATE_COMPLETED) { //升级完成 }else if state == IDO_UPDATE_DID_ENTER_OTA{ //进入ota模式 }else if state == IDO_UPDATE_STARTING { //升级中 } } - (void)updateManager:(IDOUpdateFirmwareManager *)manager updateError:(NSError *)error { // 升级失败 } - (void)updateManager:(IDOUpdateFirmwareManager *)manager progress:(float)progress message:(NSString *)message { // 升级进度 (0-1) } @optional - (IDO_UPDATE_DFU_FIRMWARE_TYPE)selectDfuFirmwareTypeWithUpdateManager:(IDOUpdateFirmwareManager * _Nullable)manager { // 升级nordic application类型 return IDO_DFU_FIRMWARE_APPLICATION_TYPE; // 升级nordic bootloader类型 return IDO_DFU_FIRMWARE_BOOTLOADER_TYPE; } - (IDO_REALTK_UPDATE_TYPE)selectRealtkTypeWithUpdateManager(IDOUpdateFirmwareManager *_Nullable)manager supportOtaMode:(BOOL)isOtaMode supportSilentMode:(BOOL)isSilentMode { // 升级realtk主控程序 return IDO_NORMAL_MODE_UPDATE_TYPE; // 升级realtk flash 文件 return IDO_SILENT_MODE_UPDATE_TYPE; } - (IDO_DATA_FILE_TRAN_TYPE)selectFileTranTypeUpdateManager:(IDOUpdateFirmwareManager *_Nullable)manager { return IDO_DATA_FILE_TRAN_DIAL_TYPE; } - (IDO_DATA_TRAN_COMPRESSION_TYPE)fileTranCompressionTypeUpdateManager:(IDOUpdateFirmwareManager *)manager { return IDO_DATA_TRAN_COMPRESSION_FASTLZ_TYPE; } - (NSString * _Nullable)fileTranNameUpdateManager:(IDOUpdateFirmwareManager *_Nullable)manager { //固件升级名称: @\".fw\" 图片资源名称: @\".fzbin\" 字库名称:@\".bin\" 语言:@\".lang\",bt升级:@\".bt\" return @\".bt\"; } - (NSInteger)setTransferNumberPacketsUpdateManager:(IDOUpdateFirmwareManager *)manager { //默认值为10 return 10; } Swift: IDOUpdateManagerDelegate func currentPackagePath(withUpdate manager: IDOUpdateFirmwareManager?) -> String? { // 固件包本地存放路径 return filePath; } func update(_ manager: IDOUpdateFirmwareManager?, progress: Float, message: String?) { // 升级进度 (0-1) } func update(_ manager: IDOUpdateFirmwareManager?, state: IDO_UPDATE_STATE) { if state == IDO_UPDATE_STATE.COMPLETED { //升级完成 }else if state == IDO_UPDATE_STATE.DID_ENTER_OTA{ //进入ota模式 }else if state == IDO_UPDATE_STATE.STARTING { //升级中 } } func update(_ manager: IDOUpdateFirmwareManager?, updateError error: Error?) { // 升级失败 } func selectDfuFirmwareType(withUpdate manager: IDOUpdateFirmwareManager?) -> IDO_UPDATE_DFU_FIRMWARE_TYPE { // 升级nordic application类型 return IDO_UPDATE_DFU_FIRMWARE_TYPE.DFU_FIRMWARE_APPLICATION_TYPE; // 升级nordic bootloader类型 return IDO_UPDATE_DFU_FIRMWARE_TYPE.DFU_FIRMWARE_BOOTLOADER_TYPE; } func selectRealtkType(withUpdate manager: IDOUpdateFirmwareManager?, supportOtaMode isOtaMode: Bool, supportSilentMode isSilentMode: Bool) -> IDO_REALTK_UPDATE_TYPE { // 升级realtk主控程序 return IDO_REALTK_UPDATE_TYPE.NORMAL_MODE_UPDATE_TYPE; // 升级realtk flash 文件 return IDO_REALTK_UPDATE_TYPE.SILENT_MODE_UPDATE_TYPE; } func selectFileTranTypeUpdate(_ manager: IDOUpdateFirmwareManager?) -> IDO_DATA_FILE_TRAN_TYPE { return .DIAL_TYPE } func fileTranCompressionTypeUpdate(_ manager: IDOUpdateFirmwareManager?) -> IDO_DATA_TRAN_COMPRESSION_TYPE { return .FASTLZ_TYPE } func fileTranNameUpdate(_ manager: IDOUpdateFirmwareManager?) -> String? { //固件升级名称: @\".fw\" 图片资源名称: @\".fzbin\" 字库名称:@\".bin\" 语言:@\".lang\",bt升级:@\".bt\" return \"bt\" } func setTransferNumberPacketsUpdate(_ manager: IDOUpdateFirmwareManager?) -> Int { return 10 } 3.7 Demo升级功能入口 Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"IDODeviceBinding.html":{"url":"IDODeviceBinding.html","title":"设备绑定解绑","keywords":"","body":"设备绑定解绑 4.1功能概述 第一次连接设备时，需要执行绑定命令，根据绑定命令返回的状态类型，授权绑定和非授权绑定，授权绑定需要输入手环显示的验证码才能绑定成功，非授权绑定不需要确认可直接绑定。设备解绑有连接解绑和断开解绑，连接时解绑是App发送解绑命令实现双方解绑，同时会抹掉手环上的所有数据，断开时解绑是App单方修改绑定状态实现解绑，不会抹掉手环上的数据。 4.2绑定命令 Objc: IDOSetBindingInfoBluetoothModel * model = [[IDOSetBindingInfoBluetoothModel alloc]init]; [IDOFoundationCommand bindingCommand:model waitForSure:^{ //绑定等待的过程 } callback:^(IDO_BIND_STATUS status, int errorCode) { if (errorCode == 0) { if (status == IDO_BLUETOOTH_BIND_SUCCESS) { //绑定成功 }else if (status == IDO_BLUETOOTH_BINDED) { //已经绑定 }else if (status == IDO_BLUETOOTH_BIND_FAILED) { //绑定失败 }else if (status == IDO_BLUETOOTH_NEED_AUTH) { //需要授权绑定 }else if (status == IDO_BLUETOOTH_REFUSED_BINDED) { //拒绝绑定 } }else { //绑定失败 } }]; //如果需要授权绑定，执行下面的代码 IDOSetBindingInfoBluetoothModel * model = [IDOSetBindingInfoBluetoothModel currentModel]; //输入授权码 model.authCode = authCode; [IDOFoundationCommand setAuthCodeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //授权绑定成功 }else { //授权绑定失败 } }]; Swift: let model = IDOSetBindingInfoBluetoothModel.init(); IDOFoundationCommand.bindingCommand(model, callback: {(state,errorCode) in if errorCode == 0 { if state == IDO_BIND_STATUS.BLUETOOTH_BIND_SUCCESS { //绑定成功 }else if state == IDO_BIND_STATUS.BLUETOOTH_BINDED { // 已经绑定 }else if state == IDO_BIND_STATUS.BLUETOOTH_BIND_FAILED { // 绑定失败 }else if state == IDO_BIND_STATUS.BLUETOOTH_NEED_AUTH { // 授权绑定 }else if state == IDO_BIND_STATUS.BLUETOOTH_REFUSED_BINDED { // 拒绝绑定 } }else { //绑定失败 } }); //如果需要授权绑定，执行下面的代码 let currentModel = IDOSetBindingInfoBluetoothModel.current(); currentModel?.authCode = authCode; IDOFoundationCommand.setAuthCode(currentModel, callback: {(errorCode) in if errorCode == 0 { //授权绑定成功 }else { //授权绑定失败 } }); 4.3解绑命令 Objc: /* 此方法在连接状态时，执行成功回调，属于双方解绑，并删除手环数据； 在断开状态时，执行成功回调，App单方解绑，并不会删除手环数据； */ [IDOFoundationCommand mandatoryUnbindingCommand:^(int errorCode) { if (errorCode == 0) { //解绑成功 }else { //解绑失败 } }]; Swift: /* 此方法在连接状态时，执行成功回调，属于双方解绑，并删除手环数据； 在断开状态时，执行成功回调，App单方解绑，并不会删除手环数据； */ IDOFoundationCommand.mandatoryUnbindingCommand { (errorCode) in if errorCode == 0 { //解绑成功 }else { //解绑失败 } }; 4.4 切换设备 Objc: //传入的Mac地址是已经绑定过的设备的Mac地址 [IDOFoundationCommand switchDeviceCommand:model.macAddr isMandatory:YES //NO: 只有绑定的设备才能切换，YES: 未绑定的设备也能切换 callback:^(int errorCode) { if (errorCode == 0) { /** 成功初始化切换设备信息 蓝牙需要设置重连=>YES 连接鉴权设置=>NO */ [IDOBluetoothManager shareInstance].isReconnect = YES; [IDOBluetoothManager shareInstance].isDetectionAuthCode = NO; if (!__IDO_CONNECTED__) {//未连接则执行扫描 [IDOBluetoothManager startScan]; }else {//已连接则断开连接，启动自动扫描连接 [IDOBluetoothManager cancelCurrentPeripheralConnection]; } }else { //切换失败 } }]; //监听设备连接回调，连接失败则切换设备失败，连接成功则执行下面命令 /** 切换设备连接成功，需要检测设备加密授权码，如果当前设备不支持鉴权，则返回错误码6， 请按执行正常完成绑定操作。 */ [IDOFoundationCommand switchDeviceDetectionEncryptionAuthCallback:^(int errorCode) { if(errorCode == 0) { //鉴权设备切换成功 }else if(errorCode == 6){ //普通设备切换成功 [IDOFoundationCommand swithOrdinaryDeviceComplete]; }else if(errorCode == 1041) { //授权码不一致=>设备被其他手机绑定 }else if(errorCode == 1035) { //设备没有绑定 }else { //失败 } }]; Swift: //传入的Mac地址是已经绑定过的设备的Mac地址 IDOFoundationCommand.switchDeviceCommand(\"\", isMandatory: true) { (errorCode) in if errorCode == 0 { /** 成功初始化切换设备信息 蓝牙需要设置重连=>YES 连接鉴权设置=>NO */ IDOBluetoothManager.shareInstance().isReconnect = true IDOBluetoothManager.shareInstance().isDetectionAuthCode = false if !IDOBluetoothEngine.shareInstance().managerEngine.isConnected { //未连接则执行扫描 IDOBluetoothManager.startScan() }else { //已连接则断开连接，启动自动扫描连接 IDOBluetoothManager.cancelCurrentPeripheralConnection() } }else { //切换失败 } } //监听设备连接回调，连接失败则切换设备失败，连接成功则执行下面命令 /** 切换设备连接成功，需要检测设备加密授权码，如果当前设备不支持鉴权，则返回错误码6， 请按执行正常完成绑定操作。 */ IDOFoundationCommand.switchDeviceDetectionEncryptionAuthCallback { (errorCode) in if errorCode == 0 { //鉴权设备切换成功 }else if errorCode == 6 { //普通设备切换成功 IDOFoundationCommand.swithOrdinaryDeviceComplete() }else if errorCode == 1041 { //授权码不一致=>设备被其他手机绑定 }else if errorCode == 1035 { //设备没有绑定 }else { //失败 } } 4.5 Demo解绑功能入口 Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"IDOErrorCode.html":{"url":"IDOErrorCode.html","title":"错误码说明","keywords":"","body":"错误码说明 5.1功能概述 errorCode错误码是全局命令回调的判断状态依据，当errorCode等于0为成功，其他值为失败。可以通过IDOErrorCodeToStr类中的方法获取错误码字符串，也可以通过说明文档对应code的解释。 5.2对应错误码表 错误码 字符串 备注 0 SUCCESS 成功 4 ERROR_NO_MEM 未知 5 ERROR_NOT_FIND 未找到方法 6 ERROR_NOT_SUPPORTED 不支持此功能 7 ERROR_INVALID_PARAM 无效参数 8 ERROR_INVALID_STATE 无效状态 9 ERROR_INVALID_LENGTH 无效数据长度 10 ERROR_INVALID_FLAGS 未知 11 ERROR_INVALID_DATA 无效数据 12 ERROR_DATA_SIZE 错误数据大小 13 ERROR_TIMEOUT 超时 14 ERROR_NULL 空数据 15 ERROR_FORBIDDEN 禁止错误 17 ERROR_BUSY 系统繁忙 18 ERROR_LOW_BATT 电量过低 19 ERROR_SERIAL 蓝牙断线 20 ERROR_TIME_OUT_RECONNECT 蓝牙断线 21 ERROR_APP_TEST 蓝牙断线 22 ERROR_MAX_TIME 蓝牙断线 24 ERROR_WATCH_SPACE_ORGANIZATION 表盘空间够但需要整理 25 ERROR_WATCH_SPACE_ORGANIZATION_ING 表盘空间整理中 1019 ERROR_BLUETOOTH_DISCONNECT 蓝牙断线 1020 ERROR_MODEL_DATA 模型数据错误 1021 ERROR_CURRENT_OTA 当前OTA 1022 ERROR_DEVICE_SYNCING 同步中 1023 ERROR_AUTH_CODE 错误授权码 1024 ERROR_SET_PAIRING_CANCEL 取消配对 1025 ERROR_SET_PAIRING_UNKNOWN_TIMEOUT 配对未知超时 1026 ERROR_SET_PAIRING_RECONNECT 配对重连失败 1027 ERROR_SET_OTA_RECONNECT OTA重连失败 1028 ERROR_TRAN_FILE_NO_EXIST 传输文件不存在传输文件路径错误 1029 ERROR_TRAN_FILE_FAILED 传输文件失败 1030 ERROR_ALARM_ID 闹钟ID错误 1031 ERROR_PAIRING_TIMEOUT 配对超时 1032 ERROR_FAST_CONFIG 快速配送错误 1033 ERROR_MIGRATION_ING 数据迁移中 1034 ERROR_BLUE_PAIRING 蓝牙配对中 1035 ERROR_DEVICE_NO_BIND 设备未绑定 1036 ERROR_TRAN_FILE_GPS_RUN GPS运行中 1037 ERROR_SYNC_ITEM_TYPE 错误同步类项 1038 ERROR_TRAN_FILE_ING 传输文件中 1039 ERROR_METHOD_DEPRECATED 方法弃用 1040 ERROR_ALARM_NAME 闹钟名字错误 1041 ERROR_ENCRYPTED_CODE 鉴权码错误 1042 ERROR_WRITE_VALUE 写入数据错误 1043 ERROR_SYNC_ACTIVITY_EMPTY 同步活动数据为空 1044 ERROR_SYNC_GPS_EMPTY 同步GPS数据为空 Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"IDOSetUpFunction.html":{"url":"IDOSetUpFunction.html","title":"设置命令功能","keywords":"","body":"设置命令 6.1功能概述 设置命令是移动端通过命令发送数据到手环端，以手环端返回响应状态对应处理数据，当成功时存储设置数据，反则不作存储，根据状态码作提示，设置成功是的errorCode等于0 6.2主要命令功能 设置时间命令 设置闹钟命令 设置用户信息 设置寻找手机 设置抬腕命令 设置左右手穿戴 设置防丢失命令 设置显示模式 设置智能提醒 设置久坐提醒 设置天气预报 设置v2心率模式 设置心率区间 设置勿扰模式 设置单位命令 设置一键呼救 设置快捷方式 设置血压校准 设置运动快捷方式 设置运动排序 设置屏幕亮度 设置音乐开关 设置GPS信息 设置表盘ID 设置走动提醒 设置v3心率模式 设置血氧开关 设置睡眠开关 设置压力开关 设置菜单列表 设置生理周期提醒 设置生理周期 设置喝水提醒 设置呼吸训练 设置运动开关 设置吃药提醒 设置呼吸率开关 设置健身指导开关 设置小组件排序 设置经期历史数据 设置环境音量开关 设置第三方应用的通知状态 设置日程提醒 设置科学睡眠开关 设置智能心率模式 设置血氧开关 设置运动子项数据排列 设置日出日落时间 设置所有联系人 设置通话常用联系人 设置夜间体温开关 设置洗手提醒 设置世界时间 压力校准 呼吸率开关 设置身体电量开关 设置权限状态 6.3 Demo设置功能入口 Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"set/IDOSetTimeFunction.html":{"url":"set/IDOSetTimeFunction.html","title":"设置时间命令","keywords":"","body":"设置时间命令 功能表 此功能默认支持 时间模型说明 IDOSetTimeInfoBluetoothModel 参数 说明 备注 year 年 int month 月 int day 日 int hour 时 int minute 分 int second 秒 int weekDay 星期 int timeZone 时区 1-24 功能表第36表中 =>timeZoneFloat 如果支持 时区*100 例如：8.10*100 = 810 timeStamp 时间戳 str 命令代码 Objc: //获取当前时间 IDOSetTimeInfoBluetoothModel * model = [IDOSetTimeInfoBluetoothModel currentModel]; //获取UTC时间 if(__IDO_FUNCTABLE__.funcTable28Model.utcTimeZone) { IDOSetTimeInfoBluetoothModel * model = [IDOSetTimeInfoBluetoothModel getCurrentUtcTimeModel]; } [IDOFoundationCommand setCurrentTimeCommand:model callback:^(int errorCode) { if(errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持此方法 }else { //设置错误 } }]; Swift: let model1:IDOSetTimeInfoBluetoothModel = IDOSetTimeInfoBluetoothModel.current(); if IDOBluetoothEngine.shareInstance().managerEngine.funcTableModel.funcTable28Model.utcTimeZone { let model:IDOSetTimeInfoBluetoothModel = IDOSetTimeInfoBluetoothModel.getCurrentUtcTime(); } IDOFoundationCommand.setCurrentTime(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetAlarmFunction.html":{"url":"set/IDOSetAlarmFunction.html","title":"设置闹钟命令","keywords":"","body":"设置闹钟命令 闹钟模型说明 IDOSetAlarmInfoBluetoothModel 参数 说明 备注 isOpen 闹钟开启状态 bool isSync 是否同步到手环 不需要赋值，闹钟设置成功后会自动赋值 isDelete 是否删除 默认YES type 类型 0：起床， 1：睡觉， 2：锻炼， 3：吃药， 4：约会， 5：聚会， 6:会议，7：其他 8：吃饭， 9：刷牙，10 :休息 11 : 课程 12: 洗澡 13:学习 14: 玩耍 42：自定义名称 hour 分 int minute 秒 int repeat 重复集合 [星期一,星期二,星期三,星期四,星期五,星期六,星期日] tsnoozeDuration 贪睡时长 int alarmId 闹钟ID int setTimeStamp 闹钟修改的时间戳 不需要赋值，闹钟设置成功后会自动赋值 已经废弃 repeatTime 重复闹铃次数 重复闹几次 v3闹钟才有效 shockOnOff 震动开关 v3闹钟才有效 delayMinute 延时分钟 v3闹钟才有效 alarmName 闹钟名字 长度限制 23个字节，v3闹钟才有效 IDOSetExtensionAlarmInfoBluetoothModel 参数 说明 备注 alarmVersion 闹钟版本号 int alarmCount 闹钟个数 int items 闹钟集合 在同步配置时初始化手环闹钟 v2闹钟功能表 __IDO_FUNCTABLE__.alarmCount = 10 v3闹钟功能表 __IDO_FUNCTABLE__.alarmCount = 10 && __IDO_FUNCTABLE__.funcTable29Model.v3SyncAlarm 命令代码 设置v2闹钟 Objc: //所有闹钟 NSArray * alarms = [IDOSetAlarmInfoBluetoothModel queryAllAlarms]; //未开启或删除的闹钟 NSArray * alarms = [IDOSetAlarmInfoBluetoothModel queryAllNoOpenAlarms]; [IDOFoundationCommand setAllAlarmsCommand:alarms callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let alarms = IDOSetAlarmInfoBluetoothModel.queryAllAlarms(); let alarms = IDOSetAlarmInfoBluetoothModel.queryAllNoOpenAlarms(); IDOFoundationCommand.setAllAlarms(alarms) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; 设置v3闹钟 Objc: IDOSetExtensionAlarmInfoBluetoothModel * alarmModel = [IDOSetExtensionAlarmInfoBluetoothModel currentModel]; [IDOFoundationCommand setV3AllAlarmsCommand:alarmModel callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetExtensionAlarmInfoBluetoothModel.current(); IDOFoundationCommand.setV3AllAlarms(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetUserInfoFunction.html":{"url":"set/IDOSetUserInfoFunction.html","title":"设置用户信息","keywords":"","body":"设置用户信息 命令代码 设置用户信息 IDOSetUserInfoBuletoothModel 参数 说明 备注 year 年 int month 月 int day 日 int height 身高 单位:厘米 weight 体重 单位:千克 gender 性别 1:男,2:女 用户信息功能表 此功能默认支持 Objc: IDOSetUserInfoBuletoothModel * model = [IDOSetUserInfoBuletoothModel currentModel]; [IDOFoundationCommand setUserInfoCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetUserInfoBuletoothModel.current(); IDOFoundationCommand.setUserInfo(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; 设置v2运动目标 📢 ：每设置一个目标类型就执行一次命令 IDOSetUserInfoBuletoothModel 参数 说明 备注 goalSleepDataHour 目标睡眠 (时) int goalSleepDataMinute 目标睡眠 (分) int goalStepData 目标步数 单位:步 goalCalorieData 目标卡路里 单位:大卡 goalDistanceData 目标距离 单位:米 goalWeightData 目标体重 单位:千克*100 goalType 目标类型 0:步数,1:卡路里,2:距离 v2运动目标功能表 此功能默认支持 Objc: IDOSetUserInfoBuletoothModel * model = [IDOSetUserInfoBuletoothModel currentModel]; [IDOFoundationCommand setTargetInfoCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetUserInfoBuletoothModel.current(); IDOFoundationCommand.setUserInfo(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; 设置v3运动目标 IDOSetUserInfoBuletoothModel 参数 说明 备注 goalCalorieData 目标卡路里 单位:大卡 goalDistanceData 目标距离 单位:米 goalMidHighTimeData 中高运动时长的目标 单位:秒 goalWalkTime 走动目标时间 单位:时 calorieMax 活动卡路里最大值 单位：千卡 calorieMin 活动卡路里最小值 单位：千卡 v3运动目标功能表 __IDO_FUNCTABLE__.funcTable20Model.calorieGoal __IDO_FUNCTABLE__.funcTable20Model.distanceGoal Objc: IDOSetUserInfoBuletoothModel * model = [IDOSetUserInfoBuletoothModel currentModel]; [IDOFoundationCommand setCalorieAndDistanceGoalCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetUserInfoBuletoothModel.current(); IDOFoundationCommand.setCalorieAndDistanceGoal(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetFindPhoneFunction.html":{"url":"set/IDOSetFindPhoneFunction.html","title":"设置寻找手机","keywords":"","body":"设置寻找手机 功能表 __IDO_FUNCTABLE__.funcTable11Model.findPhone 寻找手机模型说明 IDOSetFindPhoneInfoBuletoothModel 参数 说明 备注 isOpen 寻找手机开关 bool 命令代码 Objc: IDOSetFindPhoneInfoBuletoothModel * model = [IDOSetFindPhoneInfoBuletoothModel currentModel]; [IDOFoundationCommand setFindPhoneCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetFindPhoneInfoBuletoothModel.current(); IDOFoundationCommand.setFindPhone(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"set/IDOSetHandUpFunction.html":{"url":"set/IDOSetHandUpFunction.html","title":"设置抬腕命令","keywords":"","body":"设置抬腕命令 抬腕功能表 __IDO_FUNCTABLE__.funcTable11Model.upHandGesture 抬腕模型说明 IDOSetHandUpInfoBuletoothModel 参数 说明 备注 isOpen 开关 bool isHasTimeRange 是否有相隔时间 bool showSecond 显示时长 3～10 秒 startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int 命令代码 Objc: IDOSetHandUpInfoBuletoothModel * model = [IDOSetHandUpInfoBuletoothModel currentModel]; [IDOFoundationCommand setHandUpCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetHandUpInfoBuletoothModel.current(); IDOFoundationCommand.setHandUp(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetLeftRightFundation.html":{"url":"set/IDOSetLeftRightFundation.html","title":"设置左右手穿戴","keywords":"","body":"设置左右手穿戴 功能表 默认支持 左右手穿戴模型说明 IDOSetLeftOrRightInfoBuletoothModel 参数 说明 备注 isRight 是否右手佩戴 bool 命令代码 Objc: IDOSetLeftOrRightInfoBuletoothModel * model = [IDOSetLeftOrRightInfoBuletoothModel currentModel]; [IDOFoundationCommand setLeftRightHandCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetLeftOrRightInfoBuletoothModel.current(); IDOFoundationCommand.setLeftRightHand(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"set/IDOPreventLostFunction.html":{"url":"set/IDOPreventLostFunction.html","title":"设置防丢失命令","keywords":"","body":"设置防丢失命令 功能表 __IDO_FUNCTABLE__.funcTable11Model.antilost 防丢模型说明 IDOSetPreventLostInfoBuletoothModel 参数 说明 备注 levelType 防丢失级别 0:不防丢,1:近距离防丢,2:中距离防丢,3:远距离防丢 命令代码 Objc: IDOSetPreventLostInfoBuletoothModel * model = [IDOSetPreventLostInfoBuletoothModel currentModel]; [IDOFoundationCommand setPreventLostCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetPreventLostInfoBuletoothModel.current(); IDOFoundationCommand.setPreventLost(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetDisplayFunction.html":{"url":"set/IDOSetDisplayFunction.html","title":"设置显示模式","keywords":"","body":"设置显示模式 功能表 __IDO_FUNCTABLE__.funcTable13Model.displayMode 显示模式模型说明 IDOSetDisplayModeInfoBluetoothModel 参数 说明 备注 modeType 显示模式 0:默认,1:横屏,2:竖屏,3:旋转180度 命令代码 Objc: IDOSetDisplayModeInfoBluetoothModel * model = [IDOSetDisplayModeInfoBluetoothModel currentModel]; [IDOFoundationCommand setDisplayModeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetDisplayModeInfoBluetoothModel.current(); IDOFoundationCommand.setDisplayMode(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetNoticeFunction.html":{"url":"set/IDOSetNoticeFunction.html","title":"设置智能提醒","keywords":"","body":"设置智能提醒 设置智能提醒先发起配对，再开启对应通知的开关 功能表 __IDO_FUNCTABLE__.funcTable4Model.ancs 智能提醒模型说明 IDOSetNoticeInfoBuletoothModel 参数 说明 备注 isPairing 是否配对 bool callDelay 来电延迟 目前设置必须大于等于3秒才有效 isOnChild 是否开启子开关 只对智能提醒有效,对来电提醒无效 isOnCall 来电提醒 bool isOnSms 短信提醒 bool isOnEmail 邮件提醒 bool isOnWeChat 微信提醒 bool isOnQq qq提醒 bool isOnWeibo 微博提醒 bool isOnFaceBook FaceBook提醒 bool isOnTwitter Twitter提醒 bool isOnWhatsapp Whatsapp提醒 bool isOnMessenger Messenger提醒 bool isOnInstagram Instagram提醒 bool isOnLinkedIn LinkedIn提醒 bool isOnCalendar Calendar提醒 bool isOnSkype Skype提醒 bool isOnAlarm Alarm提醒 bool isOnPokeman Pokeman提醒 bool isOnVkontakte Vkontakte提醒 bool isOnLine Line提醒 bool isOnViber Viber提醒 bool isOnKakaoTalk KakaoTalk提醒 bool isOnGmail Gmail提醒 bool isOnOutlook Outlook提醒 bool isOnSnapchat Snapchat提醒 bool isOnTelegram Telegram提醒 bool isOnChatwork Chatwork提醒 bool isOnSlack Slack提醒 bool isOnYahooMail Yahoo Mail提醒 bool isOnTumblr Tumblr提醒 bool isOnYoutube Youtube提醒 bool isOnYahooPinterest Yahoo Pinterest提醒 bool isOnKeep Keep提醒 bool isOnTikTok TikTok提醒 bool isOnRedbus Redbus 提醒 bool isOnDailyhunt isOnDailyhunt 提醒 bool isOnHotstar Hotstar 提醒 bool isOnInshorts Inshorts 提醒 bool isOnPaytm Paytm 提醒 bool isOnAmazon Amazon 提醒 bool isOnFlipkart Flipkart 提醒 bool isOnPrime Prime 提醒 bool isOnNetflix Netflix 提醒 bool isOnGpay Gpay 提醒 bool isOnPhonpe Phonpe 提醒 bool isOnSwiggy Swiggy 提醒 bool isOnZomato Zomato 提醒 bool isOnMakeMyTrip MakeMyTrip 提醒 bool isOnJioTv JioTv 提醒 bool isOnMicrosoft Microsoft 提醒 bool isOnWhatsAppBusiness WhatsApp Business 提醒 bool isOnNioseFit NioseFit 提醒 bool isOnDidNotCall Did no call 提醒 bool isOnMattersRemind 事项 提醒 bool isOnUber Uber 提醒 bool isOnOla Ola 提醒 bool isOnYtMusic Yt music 提醒 bool isOnGoogleMeet Google meet 提醒 bool isOnMormaiiSmartwatch Mormaii smartwatch 提醒 bool isOnTechnosConnect Technos connect 提醒 bool isOnEnioei Enioei 提醒 bool isOnAliexpress Aliexpress 提醒 bool isOnShopee Shopee 提醒 bool isOnTeams Teams 提醒 bool isOn99Taxi 99 taxi 提醒 bool isOnUberEats Uber eats 提醒 bool isOnLfood l food 提醒 bool isOnRappi rappi 提醒 bool isOnMercadoLivre Mercado Livre 提醒 bool isOnMagalu Magalu 提醒 bool isOnAmericanas Americanas 提醒 bool isOnYahoo Yahoo 提醒 bool 命令代码 设置配对和通知开关 如果设备没有配对会发起配对，等配对成功后再执行设置子开关状态，需要配对耗时比较长请监听回调。 Objc: IDOSetNoticeInfoBuletoothModel * model = [IDOSetNoticeInfoBuletoothModel currentModel]; [IDOFoundationCommand setSwitchNoticeCommand:model callback:^(BOOL isNeedDisconnect, int stateCode) { //配对过程是否需要断线,配对过程状态 } complete:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetNoticeInfoBuletoothModel.current(); IDOFoundationCommand.setSwitchNotice(model, callback: { (isNeedDisconnect, stateCode) in //配对过程是否需要断线,配对过程状态 }) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6 { //设备不支持 }else { //设置失败 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetLongSitFunction.html":{"url":"set/IDOSetLongSitFunction.html","title":"设置久坐提醒","keywords":"","body":"设置久坐提醒 功能表 __IDO_FUNCTABLE__.funcTable11Model.sedentariness 久坐模型说明 IDOSetLongSitInfoBuletoothModel 参数 说明 备注 startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int interval 间隔 0-10分钟 isOpen 开关 bool selectWeeks 重复集合 [星期一,星期二,星期三,星期四,星期五,星期六,星期日] 命令代码 Objc: IDOSetLongSitInfoBuletoothModel * model = [IDOSetLongSitInfoBuletoothModel currentModel]; [IDOFoundationCommand setLongSitCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetLongSitInfoBuletoothModel.current(); IDOFoundationCommand.setLongSit(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetWeatherFunction.html":{"url":"set/IDOSetWeatherFunction.html","title":"设置天气预报","keywords":"","body":"设置天气预报 天气预报功能表 __IDO_FUNCTABLE__.funcTable11Model.weather || __IDO_FUNCTABLE__.funcTable38Model.setV3Weather 天气开关模型说明 IDOSetWeatherSwitchInfoBluetoothModel 参数 说明 备注 isOpen 开关 bool 设置天气开关 Objc: IDOSetWeatherSwitchInfoBluetoothModel * model = [IDOSetWeatherSwitchInfoBluetoothModel currentModel]; [IDOFoundationCommand setWeatherCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift let model = IDOSetWeatherSwitchInfoBluetoothModel.current(); IDOFoundationCommand.setWeather(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; v2天气预报模型说明 v2天气功能表 : _IDOFUNCTABLE.funcTable11Model.weather IDOSetWeatherDataInfoBluetoothModel 参数 说明 备注 timeStr 天气预报更新的时间戳 str todayTemp 今天平均温度 int todayType 当天天气类型 0:其他,1:晴,2:多云,3:阴,4:雨,5:暴雨,6:雷阵雨,7:雪,8:雨夹雪,9:台风,10:沙尘暴,11:夜间晴,12:夜间多云,13:热,14:冷,15:清风,16:大风,17:雾霭,18:阵雨,19:多云转晴 todayMaxTemp 当天最高温度 int todayMinTemp 当天最小温度 int humidity 湿度 int todayUvIntensity 紫外线强度 int todayAqi 空气污染指数 int future 后三天天的天气集合 格式:@{@\"type\":@(0),@\"maxTemp\":@(0),@\"minTemp\":@(0)} 设置v2天气数据 Objc: IDOSetWeatherDataInfoBluetoothModel * model = [IDOSetWeatherDataInfoBluetoothModel currentModel]; [IDOFoundationCommand setWeatherDataCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetWeatherDataInfoBluetoothModel.current(); IDOFoundationCommand.setWeatherData(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; 设置v2城市名称模型说明 IDOSetWeatherDataInfoBluetoothModel 参数 说明 备注 cityName 城市名称 str 设置v2城市名称 Objc: IDOSetWeatherDataInfoBluetoothModel * model = [IDOSetWeatherDataInfoBluetoothModel currentModel]; [IDOFoundationCommand setWeatherCityCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetWeatherDataInfoBluetoothModel.current(); IDOFoundationCommand.setWeatherCity(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; 设置v3天气预报模型说明 V3天气功能表 : _IDOFUNCTABLE.funcTable38Model.setV3Weather IDOSetV3WeatherDataModel 参数 说明 备注 weatherVersion 版本号 int 赋值2 month 月份 int day 日期 int min 分钟 int sec 秒钟 int week 星期 周日：0、周一：1、周二：2、周三：3、周四：4、周五：5、周六：6 weatherType 天气情况 0:其他， 1:晴，2:多云， 3:阴，4:雨，5:暴雨， 6:雷阵雨，7:雪，8:雨夹雪，9:台风， 10:沙尘暴,11:夜 间晴， 12:夜间多云， 13:热， 14:冷，15:清风，16:大风，17:雾霭，18:阵雨, 19:多云转晴 20: 新月 ,21: 峨眉月 , 22: 上弦月, 23: 盈凸月 ,24: 满月 ,25: 亏凸月 , 26: 下弦月 ,27: 残月 48:雷 ,49:冰雹 , 50:扬沙 ,51:龙卷风 todayTmp 当前的温度 int todayMaxTemp 最大温度 int cityNameLen 城市名字长度 int cityName 城市名字 str airQuality 空气质量 int precipitationProbability 降水概率 int humidity 湿度 int todayUvIntensity 紫外线强度 int windSpeed 风速 int sunriseHour 日出 时钟 int sunriseMin 日出 分钟 int sunsetHour 日落 时钟 int sunsetMin 日落 分钟 int airGradeInfo 空气质量描述 str future24HoursItems 未来24\\48小时天气集合 IDOFuture24HourWeatherModel weatherType、temperature、probability future7DaysItems 未来7天气集合 IDOFuture7DayWeatherDataModel weatherType、maxTemp、minTemp futureSunriseItems 未来3日落日出天气集合 IDOFutureSunriseWeatherDataItems sunriseHour、sunriseMin、sunsetHour、sunsetMin 设置v3天气数据 Objc: IDOSetV3WeatherDataModel * model = [IDOSetV3WeatherDataModel currentModel]; [IDOFoundationCommand setV3WeatcherDataCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetV3WeatherDataModel.current(); IDOFoundationCommand.setV3WeatcherData(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"set/IDOSetHrModeFunction.html":{"url":"set/IDOSetHrModeFunction.html","title":"设置心率模式","keywords":"","body":"设置心率模式 v2功能表 __IDO_FUNCTABLE__.funcTable4Model.heartRate v2心率模式模型说明 IDOSetHrModeInfoBluetoothModel 参数 说明 备注 modeType 心率模式 0:关闭心率监测功能,1:手动模式,2:自动模式,3:持续监测 isHasTimeRange 是否有相隔时间 bool startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int measurementInterval 测量间隔 单位:分钟 命令代码 设置v2心率模式 Objc: IDOSetHrModeInfoBluetoothModel * model = [IDOSetHrModeInfoBluetoothModel currentModel]; [IDOFoundationCommand setHrModeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetHrModeInfoBluetoothModel.current(); IDOFoundationCommand.setHrMode(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; v3功能表 __IDO_FUNCTABLE__.funcTable22Model.v3HrData v3心率模式模型说明 IDOSetV3HeartRateModeBluetoothModel 参数 说明 备注 modeType 心率模式 心率模式 0:关闭心率监测功能(无效) 1:手动模式(关闭自动) 2:自动模式(5分钟) 3:持续监测(5秒钟)（默认：自动模式）4:默认类型(第一次绑定同步配置使用,C库使用) 5:设置对应测量间隔（设置对应的measurement_interval）选择4和5模式则2和3模式无效 6:智能心率模式 （206沃尔定制） updateTime 时间戳 str isHasTimeRange 是否有相隔时间 str startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int measurementInterval 测量间隔 单位:秒， modeType == 5 才有效 notifyFlag 通知类型 0无效；1：允许通知； 2：静默通知； 3：关闭通知 (需要支持功能表__IDO_FUNCTABLE__.funcTable34Model.supportHrHighOrLowBtAlarm, 才能配置智能心率过高过低提醒、通知类型、过高过低提醒开关) highHeartMode 智能心率过高提醒开关 bool lowHeartMode 智能心率过低提醒开关 bool highHeartValue 智能心率过高提醒阈值 int lowHeartValue 智能心率过低提醒阈值 int 命令代码 设置v3心率模式 Objc: IDOSetV3HeartRateModeBluetoothModel * model = [IDOSetV3HeartRateModeBluetoothModel currentModel]; [IDOFoundationCommand setV3HrModelCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetV3HeartRateModeBluetoothModel.current(); IDOFoundationCommand.setV3HrModel(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 17:28:51 "},"set/IDOSetHrIntervalFunction.html":{"url":"set/IDOSetHrIntervalFunction.html","title":"设置心率区间","keywords":"","body":"设置心率区间 功能表 __IDO_FUNCTABLE__.funcTable4Model.heartRate 心率区间模型说明 IDOSetHrIntervalInfoBluetoothModel 参数 说明 备注 burnFat 燃烧脂肪 int aerobic 有氧运动 int limitValue 极限运动 int userMaxHr 最大心率 int warmUp 热身运动 int anaerobic 无氧运动 int minHr 最小心率 int maxHrRemind 最大心率提醒开关 bool minHrRemind 最小心率提醒开关 bool startHour 开始 (时) int startMinute 开始 (分) int stopHour 结束 (时) int stopMinute 结束 (分) int 命令代码 Objc: IDOSetHrIntervalInfoBluetoothModel * model = [IDOSetHrIntervalInfoBluetoothModel currentModel]; [IDOFoundationCommand setHrIntervalCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetHrIntervalInfoBluetoothModel.current(); IDOFoundationCommand.setHrInterval(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetNoDisturbFunction.html":{"url":"set/IDOSetNoDisturbFunction.html","title":"设置勿扰模式","keywords":"","body":"设置勿扰模式 功能表 __IDO_FUNCTABLE__.funcTable13Model.doNotDisturb 勿扰模式模型说明 IDOSetNoDisturbModeInfoBluetoothModel 参数 说明 备注 isOpen 开关 bool startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int isHaveRangRepeat 是否有间隔重复提醒 bool repeat 重复集合 [星期一,星期二,星期三,星期四,星期五,星期六,星期日] noonTimeOnOff 午休开关 bool noonTimeStartHour 午休开始时 int noonTimeStartMinute 午休开始分 int noonTimeEndHour 午休结束时 int noonTimeEndMinute 午休结束分 int 命令代码 Objc: IDOSetNoDisturbModeInfoBluetoothModel * model = [IDOSetNoDisturbModeInfoBluetoothModel currentModel]; [IDOFoundationCommand setNoDisturbModeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetNoDisturbModeInfoBluetoothModel.current(); IDOFoundationCommand.setNoDisturbMode(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetUnitFunction.html":{"url":"set/IDOSetUnitFunction.html","title":"设置单位命令","keywords":"","body":"设置单位命令 功能表 默认支持 单位模型说明 IDOSetUnitInfoBluetoothModel 参数 说明 备注 distanceUnit 距离单位 0x00:无效,0x01:km,0x02:mi weightUnit 重量单位 0x00:无效,0x01:kg,0x02:lb,0x03:英石 tempUnit 温度单位 0x00:无效,0x01:°C,0x02:°F languageUnit 语言单位 无效:0,中文:1,英文:2,法语:3,德语:4,意大利语:5,西班牙语:6,日语:7, 波兰语:8,捷克语:9,罗马尼亚:10,立陶宛语:11,荷兰语:12,斯洛文尼亚:13, 匈牙利语:14,俄罗斯语:15,乌克兰语:16,斯洛伐克语:17,丹麦语:18, 克罗地亚:19,印尼语:20,韩语:21,印地语:22,葡萄牙语:23,土耳其:24, 泰国语:25,越南语:26,缅甸语:27,菲律宾语:28,繁体中文:29,希腊语:30, 阿拉伯语:31,瑞典语:32,芬兰语:33,波斯语:34,挪威语:35 功能表判断 strideWalk 走路步伐 根据男性换算,默认值:72cm strideRun 跑步步伐 根据男性换算,默认值:90cm strideGps gps校准步长 0x00:无效,0x01:开,0x02:关 timeUnit 时间单位 0x00:无效,0x01:24小时制,0x02:12小时制 weekStart 周的开始日 星期日:0x01,星期一:0x00,星期六:0x03 calorieUnit 卡路里单位 0x00 ：无效； 0x01 ：千卡；0x02 : 大卡； 0x03 : 千焦 swimPoolUnit 泳池单位 0x00 ：无效； 0x01 ：米；0x02 : 码 cyclingUnit 骑行单位 0x00 : 无效；0x01 : km 公里 0x02 : 英里 walkRunUnit 步行或者跑步单位 0x00 : 无效；0x01 : km 公里 0x02 : 英里 命令代码 Objc: IDOSetUnitInfoBluetoothModel * model = [IDOSetUnitInfoBluetoothModel currentModel]; [IDOFoundationCommand setUnitCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetUnitInfoBluetoothModel.current(); IDOFoundationCommand.setUnit(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"set/IDOSetOneKeySosFunction.html":{"url":"set/IDOSetOneKeySosFunction.html","title":"设置一键呼救","keywords":"","body":"设置一键呼救 功能表 __IDO_FUNCTABLE__.funcTable11Model.onetouchCalling 一键呼救模型说明 IDOSetOneKeySosInfoBuletoothModel 参数 说明 备注 isOpen 开关 bool 命令代码 Objc: IDOSetOneKeySosInfoBuletoothModel * model = [IDOSetOneKeySosInfoBuletoothModel currentModel]; [IDOFoundationCommand setOneKeySosCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetOneKeySosInfoBuletoothModel.current(); IDOFoundationCommand.setOneKeySos(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetShortcutFunction.html":{"url":"set/IDOSetShortcutFunction.html","title":"设置快捷方式","keywords":"","body":"设置快捷方式 功能表 __IDO_FUNCTABLE__.funcTable18Model.shortcut 快捷方式模型说明 IDOSetShortcutInfoBluetoothModel 参数 说明 备注 shortcutType 快捷方式类型 0:无效,1:拍照,2:运动模式,3:勿扰模式 命令代码 Objc: IDOSetShortcutInfoBluetoothModel * model = [IDOSetShortcutInfoBluetoothModel currentModel]; [IDOFoundationCommand setShortcutCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetShortcutInfoBluetoothModel.current(); IDOFoundationCommand.setShortcut(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetBpFunction.html":{"url":"set/IDOSetBpFunction.html","title":"设置血压校准","keywords":"","body":"设置血压校准 功能表 __IDO_FUNCTABLE__.funcTable18Model.bloodPressure || __IDO_FUNCTABLE__.funcTable34Model.supportV3Bp 血压校准模型说明 IDOSetBloodPressureInfoBluetoothModel 参数 说明 备注 diastolic 舒张压 int shrinkage 收缩压 int statusCode 返回校准状态 0x01:成功进入校准模式,正在校准 0x02:在运动模式,0x03:设备忙碌,0x04:无效的状态,0x06:校准失败,0x00:校准成功 flag 血压校准控制 0x01:血压校准开始,0x02:血压校准查询 命令代码 Objc: IDOSetBloodPressureInfoBluetoothModel * model = [IDOSetBloodPressureInfoBluetoothModel currentModel]; [IDOFoundationCommand setBpCalCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetBloodPressureInfoBluetoothModel.current(); IDOFoundationCommand.setBpCal(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"set/IDOSetSportShortcutFunction.html":{"url":"set/IDOSetSportShortcutFunction.html","title":"设置运动快捷方式","keywords":"","body":"设置运动快捷方式 每次选择最多8个运动模式设置 功能表 [IDOGetDeviceFuncBluetoothModel isHaveMovment] 运动快捷方式模型说明 IDOSetSportShortcutInfoBluetoothModel 参数 说明 备注 isWalk 走路 bool isRun 跑步 bool isByBike 骑自行车 bool isOnFoot 步行 bool isSwim 游泳 bool isMountainClimbing 羽毛球 bool isOther 其他 bool isFitness 健身 bool isSpinning 动感单车 bool isEllipsoid 橄榄球 bool isTreadmill 跑步机 bool isSitUp 仰卧起坐 bool isPushUp 俯卧撑 bool isDumbbell 哑铃 bool isWeightlifting 举重 bool isBodybuildingExercise 体操 bool isYoga 瑜伽 bool isRopeSkipping 跳绳 bool isTableTennis 乒乓球 bool isBasketball 篮球 bool isFootball 足球 bool isVolleyball 排球 bool isTennis 网球 bool isGolf 高尔夫 bool isBaseball 棒球 bool isSkiing 滑雪 bool isRollerSkating 滑旱冰 bool isDance 跳舞 bool 命令代码 Objc: IDOSetSportShortcutInfoBluetoothModel * model = [IDOSetSportShortcutInfoBluetoothModel currentModel]; [IDOFoundationCommand setSportModeSelectCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetSportShortcutInfoBluetoothModel.current(); IDOFoundationCommand.setSportModeSelect(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetSportSortFunction.html":{"url":"set/IDOSetSportSortFunction.html","title":"设置运动排序","keywords":"","body":"设置运动排序 运动排序功能表 __IDO_FUNCTABLE__.sportShowCount != 0 && [IDOGetDeviceFuncBluetoothModel isHaveMovment] && (__IDO_FUNCTABLE__.funcTable20Model.sportModeSort || __IDO_FUNCTABLE__.funcTable28Model.v3SportsType) 运动排序模型说明 IDOSetSportSortingInfoBluetoothModel 参数 说明 备注 sportSortingItems 运动模式排序集合 运动模式排序集合最多8个或14个或30个或150 operat 操作类型 0：无效； 1查询； 2设置（不需要赋值） allNum 个数 int currentIndex 当前已添加运动类型的索引 int 支持100种运动才需要赋值 IDOSetSportSortingItemModel 参数 说明 备注 index 排序索引 从1、2、3、4....,0:无效 type 运动模式 当功能表 v3SportsType、set100SportSort 支持，运动类型从48开始，1-29运动类型为v2协议 运动类型参照 IDOSportTypes文件说明 命令代码 Objc: IDOSetSportSortingInfoBluetoothModel * model = [IDOSetSportSortingInfoBluetoothModel currentModel]; [IDOFoundationCommand setSportModeSortCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetSportSortingInfoBluetoothModel.current(); IDOFoundationCommand.setSportModeSort(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"set/IDOSetScreenBrightFunction.html":{"url":"set/IDOSetScreenBrightFunction.html","title":"设置屏幕亮度","keywords":"","body":"设置屏幕亮度 屏幕亮度功能表 __IDO_FUNCTABLE__.funcTable19Model.screenBrightness || __IDO_FUNCTABLE__.funcTable23Model.nightAutoBrightness || __IDO_FUNCTABLE__.funcTable7Model.screenBrightInterval 屏幕亮度模型说明 IDOSetScreenBrightnessInfoBluetoothModel 参数 说明 备注 levelValue 屏幕亮度级别 1-100 isManual 是否用户调节 bool mode 屏幕亮度级别 0x00关闭自动调整,0x01 使用环境光传感器,0x02,夜间自动调整亮度,0x03 夜间降亮度使用设置的时间 autoAdjustNight 夜间自动亮度调整 0x00,无效,由固件定义,0x01关闭,0x02,夜间自动调整亮度,0x03 夜间降亮度使用设置的时间 startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int nightLevel 夜间亮度 1-100 showInterval 显示间隔时长 int 单位秒 命令代码 Objc: IDOSetScreenBrightnessInfoBluetoothModel * model = [IDOSetScreenBrightnessInfoBluetoothModel currentModel]; [IDOFoundationCommand setScreenBrightnessCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetScreenBrightnessInfoBluetoothModel.current(); IDOFoundationCommand.setScreenBrightness(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"set/IDOSetMusicFunction.html":{"url":"set/IDOSetMusicFunction.html","title":"设置音乐开关","keywords":"","body":"设置音乐开关 设置音乐控制需要先实现蓝牙配对 功能表 __IDO_FUNCTABLE__.funcTable4Model.ancs && __IDO_FUNCTABLE__.funcTable5Model.music 音乐开关模型说明 IDOSetPairingInfoBuletoothModel 参数 说明 备注 pairingTimeStr 配对时间戳 str isPairing 是否配对 bool IDOSetMusicOpenInfoBuletoothModel 参数 说明 备注 isOpen 开关 bool 命令代码 蓝牙配对 Objc: [IDOFoundationCommand setBluetoothPairingCommandWithCallback:^(BOOL isNeedDisconnect, int stateCode) { //配对过程是否需要断线,配对过程状态 } pairingComplete:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: IDOFoundationCommand.setBluetoothPairingCommandWithCallback({ (isNeedDisconnect, stateCode) in //配对过程是否需要断线,配对过程状态 }) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6 { //设备不支持 }else { //设置失败 } }; 音乐开关 Objc: IDOSetMusicOpenInfoBuletoothModel * model = [IDOSetMusicOpenInfoBuletoothModel currentModel]; [IDOFoundationCommand setOpenMusicCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetMusicOpenInfoBuletoothModel.current(); IDOFoundationCommand.setOpenMusic(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"set/IDOSetGpsInfoFunction.html":{"url":"set/IDOSetGpsInfoFunction.html","title":"设置GPS信息","keywords":"","body":"设置GPS信息 功能表 __IDO_FUNCTABLE__.funcTable19Model.gps GPS信息模型说明 IDOSetGpsConfigInfoBluetoothModel 参数 说明 备注 startMode 启动模式 0x01:冷启动,0x02:热启动 gsopOperationMode 操作模式 1:正常;2:低功耗;4:Balance,5:1PPS gsopCycleMs 定位周期 默认1000毫秒 gnsValue 定位星mode 1:GPS,2:GLONASS,3:1GPS+GLONASS year (UTC)年 int month (UTC)月 int day (UTC)日 int hour (UTC)时 int minute (UTC)分 int second (UTC)秒 int 命令代码 Objc: IDOSetGpsConfigInfoBluetoothModel * model = [IDOSetGpsConfigInfoBluetoothModel currentModel]; [IDOFoundationCommand setGpsInfoCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetGpsConfigInfoBluetoothModel.current(); IDOFoundationCommand.setGpsInfo(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetWatchDiaFunction.html":{"url":"set/IDOSetWatchDiaFunction.html","title":"设置表盘ID","keywords":"","body":"设置表盘ID 功能表 __IDO_FUNCTABLE__.funcTable18Model.watchDial 表盘ID模型说明 IDOSetWatchDiaInfoBluetoothModel 参数 说明 备注 dialId 表盘ID int 命令代码 Objc: IDOSetWatchDiaInfoBluetoothModel * model = [IDOSetWatchDiaInfoBluetoothModel currentModel]; [IDOFoundationCommand setWatchDiaCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetWatchDiaInfoBluetoothModel.current(); IDOFoundationCommand.setWatchDia(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetWalkRemindFunction.html":{"url":"set/IDOSetWalkRemindFunction.html","title":"设置走动提醒","keywords":"","body":"设置走动提醒 走动提醒功能表 __IDO_FUNCTABLE__.funcTable23Model.walkReminder 走动提醒模型说明 IDOSetWalkReminderBluetoothModel 参数 说明 备注 onOff 开关 bool goalStep 目标步数 int startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int repeat 重复集合 [星期一,星期二,星期三,星期四,星期五,星期六,星期日] goalTime 目标时间 单位(小时) notifyFlag 通知类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知 __IDO_FUNCTABLE__.funcTable38Model.walkReminderAddNotify 功能表才支持 命令代码 Objc: IDOSetWalkReminderBluetoothModel * model = [IDOSetWalkReminderBluetoothModel currentModel]; [IDOFoundationCommand setWalkReminderCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetWalkReminderBluetoothModel.current(); IDOFoundationCommand.setWalkReminder(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetSleepTimeFunction.html":{"url":"set/IDOSetSleepTimeFunction.html","title":"设置睡眠开关","keywords":"","body":"设置睡眠时间段 睡眠时间段功能表 __IDO_FUNCTABLE__.funcTable4Model.sleepMonitor 睡眠时间段模型说明 IDOSetSleepPeriodInfoBluetoothModel 参数 说明 备注 onOff 开关 bool startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int 命令代码 Objc: IDOSetSleepPeriodInfoBluetoothModel * model = [IDOSetSleepPeriodInfoBluetoothModel currentModel]; [IDOFoundationCommand setSleepPeriodCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetSleepPeriodInfoBluetoothModel.current(); IDOFoundationCommand.setSleepPeriod(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetPressureSwitchFunction.html":{"url":"set/IDOSetPressureSwitchFunction.html","title":"设置压力开关","keywords":"","body":"设置压力开关 压力开关功能表 __IDO_FUNCTABLE__.funcTable20Model.pressureData 压力开关模型说明 IDOSetPressureSwitchBluetoothModel 参数 说明 备注 onOff 开关 bool startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int remindOnOff 压力提醒 开关 bool repeat 重复集合 [星期一、星期二、星期三、星期四、星期五、星期六、星期日] interval 提醒间隔 单位分钟 默认60分钟 interval 提醒间隔 单位分钟 默认60分钟 highThreshold 压力过高阈值 int notifyFlag 通知类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知 funcTable35Model.pressureNotifyFlagMode 功能表支持才有效 stressThreshold 压力阈值 int 命令代码 Objc: IDOSetPressureSwitchBluetoothModel * model = [IDOSetPressureSwitchBluetoothModel currentModel]; [IDOFoundationCommand setPressureSwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetPressureSwitchBluetoothModel.current(); IDOFoundationCommand.setPressureSwitch(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetMenuListFunction.html":{"url":"set/IDOSetMenuListFunction.html","title":"设置菜单列表","keywords":"","body":"设置菜单列表 功能表 __IDO_FUNCTABLE__.funcTable28Model.menuList 菜单列表模型说明 IDOGetMenuListInfoBluetoothModel 参数 说明 备注 minShowNum 菜单最小显示个数 不需要赋值 maxShowNum 菜单最大显示个数 不需要赋值 maxNum 支持最大个数 不需要赋值 itemList 菜单排序当前显示集合 0:无效,1:步数,2:心率,3:睡眠,4:拍照,5:闹钟,6:音乐,7:秒表,8:计时器, 9:运动模式,10:天气,11:呼吸锻炼,12:查找手机,13:压力,14:数据三环,15:时间界面,16:最近一次活动 17:健康数据,18:血氧,19:菜单设置,20:alexa语音提示 maxItemList 菜单排序最大显示集合 0:无效,1:步数,2:心率,3:睡眠,4:拍照,5:闹钟,6:音乐,7:秒表,8:计时器, 9:运动模式,10:天气,11:呼吸锻炼,12:查找手机,13:压力,14:数据三环,15:时间界面,16:最近一次活动 17:健康数据,18:血氧,19:菜单设置,20:alexa语音提示 不需要赋值 currentShowNum 设备当前显示列表个数 int 不需要赋值 命令代码 Objc: IDOGetMenuListInfoBluetoothModel * model = [IDOGetMenuListInfoBluetoothModel currentModel]; [IDOFoundationCommand setMenuListCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOGetMenuListInfoBluetoothModel.current(); IDOFoundationCommand.setMenuList(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetMenstruationRemindFunction.html":{"url":"set/IDOSetMenstruationRemindFunction.html","title":"设置生理周期提醒","keywords":"","body":"设置生理周期提醒 功能表 __IDO_FUNCTABLE__.funcTable20Model.menstruation 生理周期提醒模型说明 IDOSetMenstruationRemindBluetoothModel 参数 说明 备注 startDay 开始日提醒 提前天数 ovulationDay 排卵日提醒 提前天数 hour 提醒时间(时) int minute 提醒时间(分) int pregnancyDayBeforeRemind 易孕期 开始的时候 提前多少天提醒 int pregnancyDayEndRemind 易孕期 结束的时候 提前多少天提醒 int menstrualDayEndRemind 经期结束 提前多少天提醒 int 命令代码 Objc: IDOSetMenstruationRemindBluetoothModel * model = [IDOSetMenstruationRemindBluetoothModel currentModel]; [IDOFoundationCommand setMenstrualRemindCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetMenstruationRemindBluetoothModel.current(); IDOFoundationCommand.setMenstrualRemind(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetMenstruationFunction.html":{"url":"set/IDOSetMenstruationFunction.html","title":"设置生理周期","keywords":"","body":"设置生理周期 功能表 __IDO_FUNCTABLE__.funcTable20Model.menstruation 生理周期模型说明 IDOSetMenstruationInfoBluetoothModel 参数 说明 备注 onOff 开关 bool menstrualLength 经期长度 int menstrualCycle 经期周期 int lastMenstrualYear 最近经期年份 int lastMenstrualMonth 最近经期月份 int lastMenstrualDay 最近经期日期 int ovulationIntervalDay 排卵日的间隔 int ovulationBeforeDay 经期前一天 int ovulationAfterDay 经期后一天 int notifyFlag 通知类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知 命令代码 Objc: IDOSetMenstruationInfoBluetoothModel * model = [IDOSetMenstruationInfoBluetoothModel currentModel]; [IDOFoundationCommand setMenstrualCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetMenstruationInfoBluetoothModel.current(); IDOFoundationCommand.setMenstrual(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetDrinkWaterFunction.html":{"url":"set/IDOSetDrinkWaterFunction.html","title":"设置喝水提醒","keywords":"","body":"设置喝水提醒 功能表 __IDO_FUNCTABLE__.funcTable22Model.drinkWaterReminder 喝水提醒模型说明 IDOSetDrinkReminderModeBluetoothModel 参数 说明 备注 onOff 开关 bool interval 提醒间隔 单位:分钟 startHour 开始时间(时) int startMinute 开始时间(分) int endHour 结束时间(时) int endMinute 结束时间(分) int repeat 重复集合 [星期一,星期二,星期三,星期四,星期五,星期六,星期日] notifyFlag 通知类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知 命令代码 Objc: IDOSetDrinkReminderModeBluetoothModel * model = [IDOSetDrinkReminderModeBluetoothModel currentModel]; [IDOFoundationCommand setDrinkReminderCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetDrinkReminderModeBluetoothModel.current(); IDOFoundationCommand.setDrinkReminder(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetBreatheFunction.html":{"url":"set/IDOSetBreatheFunction.html","title":"设置呼吸训练","keywords":"","body":"设置呼吸训练 功能表 __IDO_FUNCTABLE__.funcTable23Model.breatheTrain 呼吸训练模型说明 IDOSetBreatheTrainBluetoothModel 参数 说明 备注 frequency 每分钟呼吸次数 int 命令代码 Objc: IDOSetBreatheTrainBluetoothModel * model = [IDOSetBreatheTrainBluetoothModel currentModel]; [IDOFoundationCommand setBreatheTrainCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetBreatheTrainBluetoothModel.current(); IDOFoundationCommand.setBreatheTrain(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetActivitySwitchFunction.html":{"url":"set/IDOSetActivitySwitchFunction.html","title":"设置运动开关","keywords":"","body":"设置运动识别开关 功能表 __IDO_FUNCTABLE__.funcTable23Model.activitySwitch 运动识别开关模型说明 IDOSetActivitySwitchBluetoothModel 参数 说明 备注 sportTypeOnOff 自动识别运动类型开关 此参数遗弃 sportRunOnOff 自动识别跑步开关 bool sportBicycleOnOff 自动识别自行车开关 bool autoPauseOnOff 运动自动暂停开关 bool endRemindOnOff 结束提醒开关 bool sportEllipticalOnOff 自动识别椭圆机开关 bool sportRowingOnOff 自动识别划船机开关 bool sportSwimOnOff 自动识别游泳开关 bool 命令代码 Objc: IDOSetActivitySwitchBluetoothModel * model = [IDOSetActivitySwitchBluetoothModel currentModel]; [IDOFoundationCommand setActivitySwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetActivitySwitchBluetoothModel.current(); IDOFoundationCommand.setActivitySwitch(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetBreathRateFunction.html":{"url":"set/IDOSetBreathRateFunction.html","title":"设置呼吸率开关","keywords":"","body":"设置呼吸率开关 功能表 __IDO_FUNCTABLE__.funcTable34Model.supportBreathRate 呼吸率开关模型说明 IDOSetBreathRateSwitchModel 参数 说明 备注 onOff 开关状态 bool 命令代码 Objc: IDOSetBreathRateSwitchModel * model = [IDOSetBreathRateSwitchModel currentModel]; [IDOFoundationCommand setBreathRateSwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetBreathRateSwitchModel.current(); IDOFoundationCommand.setBreathRateSwitch(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetFitnessFunction.html":{"url":"set/IDOSetFitnessFunction.html","title":"设置健身指导开关","keywords":"","body":"设置健身指导开关 功能表 __IDO_FUNCTABLE__.funcTable38Model.setFitnessGuidance 健身指导开关模型说明 IDOSetFitnessGuidanceModel 参数 说明 备注 mode 开关 bool yes 为开 no 为关 walkMode 走动提醒开关 bool yes 为开 no 为关 startHour 开始 时 int startMinute 开始 分 int endHour 结束 时 int endMinute 结束 分 int notifyFlag 通知类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知 repeat 重复集合 [星期一、星期二、星期三、星期四、星期五、星期六、星期日] targetSteps 目标步数 int 命令代码 Objc: IDOSetFitnessGuidanceModel * model = [IDOSetFitnessGuidanceModel currentModel]; [IDOFoundationCommand setFitnessGuidanceCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetFitnessGuidanceModel.current(); IDOFoundationCommand.setFitnessGuidance(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetMainUiSortFunction.html":{"url":"set/IDOSetMainUiSortFunction.html","title":"设置小组件排序","keywords":"","body":"设置小组件排序 功能表 __IDO_FUNCTABLE__.funcTable37Model.setMainUiSort 小组件排序模型说明 IDOMainInterfaceItemModel 参数 说明 备注 locationX 横轴x 从1开始 locationY 纵轴y 从1开始 sizeType 大小类型 0无效；1：大图标(一个占用一个大的横格)； 2：小图标（2个占用一个横格） supportSizeType 固件支持可以编辑的图标类型 0 ： 无效； 1：大图标； 2：小图标； 3:大图标+小图标 widgetsType 组件类型 0:无效 1:活动三环 （小图标）2:步数 3:最近一次活动 4:音乐 5:天气 6:心率 7:压力 8:睡眠 9:Alexa 10:体温 11:血氧 12:计时器 13:闹钟 14:事项提醒（现日程提醒） 15:噪声 16:电量 17:电话（联系人）18:世界时间 IDOMainInterfaceSupportItemModel 参数 说明 备注 supportSizeType 固件支持可以编辑的图标类型 0 ： 无效； 1：大图标； 2：小图标； 3:大图标+小图标 widgetsType 组件类型 0:无效 1:活动三环 （小图标）2:步数 3:最近一次活动 4:音乐 5:天气 6:心率 7:压力 8:睡眠 9:Alexa 10:体温 11:血氧 12:计时器 13:闹钟 14:事项提醒（现日程提醒） 15:噪声 16:电量 17:电话（联系人）18:世界时间 IDOMainInterfaceSortModel 参数 说明 备注 mainUiVersion 版本 暂时不需要赋值 operate 操作 0：无效； 1查询； 2设置 (不需要赋值) allNum 当前固件组件类型个数 int allSupportNum 固件支持所有小组件的类型个数 int items 主界面集合 array (IDOMainInterfaceItemModel) supportItems 固件支持可以编辑的图标集合 array (IDOMainInterfaceSupportItemModel) 命令代码 Objc: IDOMainInterfaceSortModel * model = [IDOMainInterfaceSortModel currentModel]; [IDOFoundationCommand setMainUiSortCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOMainInterfaceSortModel.current(); IDOFoundationCommand.setMainUiSort(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetMenstrualHistoryFunction.html":{"url":"set/IDOSetMenstrualHistoryFunction.html","title":"设置经期历史数据","keywords":"","body":"设置经期历史数据 功能表 __IDO_FUNCTABLE__.funcTable38Model.historyMenstrual 经期历史数据模型说明 IDOMenstrualHistoryDataItemModel 参数 说明 备注 year 经期开始的年份 int month 经期开始的月份 int day 经期开始的日 int menstrualDay 经期长度 int (单位:天) cycleDay 周期长度 int (单位:天) IDOMenstrualHistoryDataModel 参数 说明 备注 avgMenstrualDay 平均经期长度 int avgCycleDay 平均周期长度 int itemsCount 个数 int 最多5个 items 经期的历史数据集合 array (IDOMenstrualHistoryDataItemModel) 命令代码 Objc: IDOMenstrualHistoryDataModel * model = [IDOMenstrualHistoryDataModel currentModel]; [IDOFoundationCommand setMenstrualHistoryDataCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOMenstrualHistoryDataModel.current(); IDOFoundationCommand.setMenstrualHistoryData(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetNoiseFunction.html":{"url":"set/IDOSetNoiseFunction.html","title":"设置环境音量开关","keywords":"","body":"设置环境音量开关 功能表 __IDO_FUNCTABLE__.funcTable37Model.syncNoise 环境音量开关模型说明 IDOSetV3NoiseSwitchModel 参数 说明 备注 mode 开关 bool yes 为开 no 为关 startHour 开始 时 int startMinute 开始 分 int endHour 结束 时 int endMinute 结束 分 int highNoiseOnOff 阀值开关 bool yes 为开 no 为关 highNoiseValue 阈值 int 命令代码 Objc: IDOSetV3NoiseSwitchModel * model = [IDOSetV3NoiseSwitchModel currentModel]; [IDOFoundationCommand setNoiseSwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetV3NoiseSwitchModel.current(); IDOFoundationCommand.setNoiseSwitch(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetNoticeStateFunction.html":{"url":"set/IDOSetNoticeStateFunction.html","title":"设置第三方应用的通知状态","keywords":"","body":"设置第三方应用的通知状态 第三方应用的通知功能表 __IDO_FUNCTABLE__.funcTable38Model.setNotifyAddAppName 第三方应用的通知状态模型说明 IDOSetAppNotifyStateItemModel 参数 说明 备注 evtType 事件类型 int（固件动态分配的,） notifyState 通知状态 int (允许通知：1，静默通知 ：2， 关闭通知：3) picFlag 图片icon更新状态 int （0:无效； 1：有下载对应的图片；2：没有对应的图片）设置忽略此属性，只支持获取 packName 应用包名 str 设置忽略此属性，只支持获取 appName 应用名称 str 设置忽略此属性，只支持获取 IDOSetV3NotifyStateModel 参数 说明 备注 msgVersion 版本号 暂时无需赋值 operat 操作 1：增加； 2：修改; 3:获取查询 allSendNum 发送的总包数 int nowSendIndex 当前发送的序列 int itemsNum 集合个数 int allOnOff 所有消息通知开关 bool items 通知状态集合 array (IDOSetAppNotifyStateItemModel) 命令代码 Objc: IDOSetV3NotifyStateModel * model = [IDOSetV3NotifyStateModel currentModel]; [IDOFoundationCommand setMessageNoticeStateCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetV3NotifyStateModel.current(); IDOFoundationCommand.setMessageNoticeState(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetScheduleRemindertFunction.html":{"url":"set/IDOSetScheduleRemindertFunction.html","title":"设置日程提醒","keywords":"","body":"设置日程提醒 日程提醒功能表 __IDO_FUNCTABLE__.funcTable37Model.scheduleReminder 日程提醒模型说明 IDOSetRemindItemModel 参数 说明 备注 remindId 版本 日程提醒id 从0开始 year 年份 int month 月份 int day 日 int hour 时 int minute 分 int second 秒 int repeat 重复集合 array(number) [星期一、星期二、星期三、星期四、星期五、星期六、星期日] remindOnOff 当天提醒开关 bool state 状态码 0:无效, 1：删除状态, 2：启用状态 title 标题 str note 提示 str IDOSetV3ScheduleReminderModel 参数 说明 备注 scVersion 版本 暂时不需要赋值 operate 操作 0:无效,1:增, 2:删, 3:查,4:改 num items的个数 int items 日程集合 array (IDOSetRemindItemModel) 最大设置5个数据 命令代码 Objc: IDOSetV3ScheduleReminderModel * model = [IDOSetV3ScheduleReminderModel currentModel]; [IDOFoundationCommand setScheduleReminderCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetV3ScheduleReminderModel.current(); IDOFoundationCommand.setScheduleReminder(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetScientificSleeprFunction.html":{"url":"set/IDOSetScientificSleeprFunction.html","title":"设置科学睡眠开关","keywords":"","body":"设置科学睡眠开关 科学睡眠功能表 __IDO_FUNCTABLE__.funcTable35Model.setScientificSleepSwitch 科学睡眠开关模型说明 IDOSetV3ScientificSleepModel 参数 说明 备注 mode 模式 bool yes 为科学睡眠 no 为普通睡眠 startHour 开始 时 int startMinute 开始 分 int endHour 结束 时 int endMinute 结束 分 int 命令代码 Objc: IDOSetV3ScientificSleepModel * model = [IDOSetV3ScientificSleepModel currentModel]; [IDOFoundationCommand setScientificSleepCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetV3ScientificSleepModel.current(); IDOFoundationCommand.setScientificSleep(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetSmartHrFunction.html":{"url":"set/IDOSetSmartHrFunction.html","title":"设置智能心率模式","keywords":"","body":"设置智能心率模式 智能心率模式功能表 __IDO_FUNCTABLE__.funcTable37Model.smartHeartRate 智能心率模式模型说明 IDOSetSmartHeartRateModel 参数 说明 备注 modeFlag 智能心率模式 bool yes 为开 no 为关 notifyFlag 通知类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知 highHeartMode 开启智能心率过高提醒开关 bool yes 为开 no 为关 lowHeartMode 开启智能心率过低提醒开关 bool yes 为开 no 为关 highHeartValue 智能心率过高提醒阈值 int lowHeartValue 智能心率过低提醒阈值 int 命令代码 Objc: IDOSetSmartHeartRateModel * model = [IDOSetSmartHeartRateModel currentModel]; [IDOFoundationCommand setSmartHeartRateCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetSmartHeartRateModel.current(); IDOFoundationCommand.setSmartHeartRate(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetSpo2Function.html":{"url":"set/IDOSetSpo2Function.html","title":"设置血氧开关","keywords":"","body":"设置血氧开关 血氧开关功能表 __IDO_FUNCTABLE__.funcTable20Model.spo2Data 血氧开关模型说明 IDOSetSpo2SwitchBluetoothModel 参数 说明 备注 onOff 开关 bool startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int lowOnOff 血氧过低开关 bool lowValue 血氧过低阈值 int notifyFlag 通知类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知 funcTable35Model.spo2NotifyFlag功能表才支持 命令代码 Objc: IDOSetSpo2SwitchBluetoothModel * model = [IDOSetSpo2SwitchBluetoothModel currentModel]; [IDOFoundationCommand setSpo2SwitchCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetSpo2SwitchBluetoothModel.current(); IDOFoundationCommand.setSpo2Switch(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetSportParameterSortFunction.html":{"url":"set/IDOSetSportParameterSortFunction.html","title":"设置运动子项数据排列","keywords":"","body":"设置运动子项数据排列 运动子项数据排列功能表 __IDO_FUNCTABLE__.funcTable37Model.set20SportParamSort 运动子项数据排列模型说明 IDOSetSportParameterSortModel 参数 说明 备注 paraVersion 版本 暂时不需要赋值 operate 操作 0:无效； 1查询； 2设置（不需要赋值） sportType 运动类型 int currentIndex 已经添加的运动索引 int allNum 个数 int items 子项集合 array (number) 0无效 1运动时长 2距离 3卡路里 4实时心率 + 心率区间 5实时配速 6实时步频 7有氧训练效果 8滚动配速 9平均配速 10步数 11趟数 12最近泳姿 13最近一趟SWOLF 14步数 15踏频 16有氧训练效果 17浆次 18浆频 19时间 命令代码 Objc: IDOSetSportParameterSortModel * model = [IDOSetSportParameterSortModel currentModel]; [IDOFoundationCommand setSportParameterSortCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetSportParameterSortModel.current(); IDOFoundationCommand.setSportParameterSort(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetSunTimerFunction.html":{"url":"set/IDOSetSunTimerFunction.html","title":"设置日出日落时间","keywords":"","body":"设置日出日落时间 日出日落时间功能表 __IDO_FUNCTABLE__.funcTable38Model.setWeatherSunTime 日出日落时间模型说明 IDOSetWeatherSunTimeModel 参数 说明 备注 sunriseHour 日出 时钟 int sunriseMinute 日出 分钟 int sunsetHour 日落 时钟 int sunsetMinute 日落 分钟 int 命令代码 Objc: IDOSetWeatherSunTimeModel * model = [IDOSetWeatherSunTimeModel currentModel]; [IDOFoundationCommand setWeatherSunTimeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetWeatherSunTimeModel.current(); IDOFoundationCommand.setWeatherSunTime(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetSyncAllContactFunction.html":{"url":"set/IDOSetSyncAllContactFunction.html","title":"设置所有联系人","keywords":"","body":"设置所有联系人 通话常用联系人功能表 __IDO_FUNCTABLE__.funcTable38Model.syncContact 所有联系人模型说明 IDOSetAllContactItemModel 参数 说明 备注 phone 号码 str name 名字 str IDOSetSyncAllContactModel 参数 说明 备注 year 年份 int month 月份 int day 日 int hour 时 int minute 分 int second 秒 int contactItemNum 联系人个数 int items 联系人集合 array (IDOSetAllContactItemModel) 命令代码 Objc: //通讯录数据转JSON文件 IDOSetSyncAllContactModel * model = [[IDOSetSyncAllContactModel alloc]init]; [IDOFoundationCommand setSyncAllContactCommand:model callback:^(int errorCode,NSString* path) { if (errorCode == 0) { //设置成功,path是通讯录JSON文件路径 //执行通讯录JSON文件传输 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; //通讯录JSON文件传输 initTransferManager().transferType = IDO_DATA_FILE_TRAN_CONTACT_TYPE; initTransferManager().compressionType = IDO_DATA_TRAN_COMPRESSION_NO_USE_TYPE; initTransferManager().fileName = @\".ml\"; initTransferManager().filePath = self.filePath; initTransferManager().isSetConnectParam = YES; initTransferManager().addDetection(^(int errorCode) { if errorCode == 0{ //更新前检测成功 }else { //更新前检测错误 } }).addProgress(^(int progress) { //更新文件进度（0-100） }).addTransfer(^(int errorCode) { if errorCode == 0 { //文件传输成功 }else { //文件传输失败 } }); [IDOTransferFileManager startTransfer]; Swift: //通讯录数据转JSON文件 let model = IDOSetSyncAllContactModel.init() IDOFoundationCommand.setSyncAllContact(model) { (errorCode) in if errorCode == 0 { //设置成功,path是通讯录JSON文件路径 //执行通讯录JSON文件传输 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; //通讯录JSON文件传输 initTransferManager().transferType = IDO_DATA_FILE_TRAN_TYPE.DIAL_TYPE; initTransferManager().compressionType = IDO_DATA_TRAN_COMPRESSION_TYPE.NO_USE_TYPE; initTransferManager().fileName = \".ml\"; initTransferManager().filePath = filePath; initTransferManager().addDetection!{(errorCode)in if errorCode == 0i //更新前检测成功 }else { //更新前检测错误 } }.addProgress!{(progress)in //更新文件进度（0-100） }.addTransfer!{(errorCode)in if errorCode == 0 { //文件传输成功 }else { //文件传输失败 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetSyncContactFunction.html":{"url":"set/IDOSetSyncContactFunction.html","title":"设置通话常用联系人","keywords":"","body":"设置通话常用联系人 通话常用联系人功能表 __IDO_FUNCTABLE__.funcTable38Model.syncContact 通话常用联系人模型说明 IDOSetContactItemModel 参数 说明 备注 phone 号码 str name 名字 str IDOSetSyncContactModel 参数 说明 备注 conVersion 版本号 暂时无需赋值 operat 操作 无需赋值 0：无效；1： 设置， 2：查询 itemsNum items的个数 int items 联系人集合 array (IDOSetContactItemModel) 命令代码 Objc: IDOSetSyncContactModel * model = [IDOSetSyncContactModel currentModel]; [IDOFoundationCommand setSyncContactCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetSyncContactModel.current(); IDOFoundationCommand.setSyncContact(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetTemperatureFunction.html":{"url":"set/IDOSetTemperatureFunction.html","title":"设置夜间体温开关","keywords":"","body":"设置夜间体温开关 夜间体温开关功能表 __IDO_FUNCTABLE__.funcTable35Model.setTemperatureSwitch 夜间体温开关模型说明 IDOSetV3TemperatureModel 参数 说明 备注 mode 开关 bool yes 为开 no 为关 startHour 开始 时 int startMinute 开始 分 int endHour 结束 时 int endMinute 结束 分 int unit 体温单位设置 1 ：c（摄氏度） 16 ：f（华摄氏度） 命令代码 Objc: IDOSetV3TemperatureModel * model = [IDOSetV3TemperatureModel currentModel]; [IDOFoundationCommand setTemperatureCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetV3TemperatureModel.current(); IDOFoundationCommand.setTemperature(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOSetWashHandFunction.html":{"url":"set/IDOSetWashHandFunction.html","title":"设置洗手提醒","keywords":"","body":"设置洗手提醒 洗手提醒功能表 __IDO_FUNCTABLE__.funcTable31Model.handWashReminder 洗手提醒模型说明 IDOSetWashHandReminderModel 参数 说明 备注 onOff 开关 bool startHour 开始时间(时) int startMinute 开始时间(分) int endHour 结束时间(时) int endMinute 结束时间(分) int repeat 重复集合 [星期一,星期二,星期三,星期四,星期五,星期六,星期日] interval 提醒间隔 单位:分钟 默认60分钟 命令代码 Objc: IDOSetWashHandReminderModel * model = [IDOSetWashHandReminderModel currentModel]; [IDOFoundationCommand setWashHandReminderCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetWashHandReminderModel.current(); IDOFoundationCommand.setWashHandReminder(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"set/IDOSetWordTimeFunction.html":{"url":"set/IDOSetWordTimeFunction.html","title":"设置世界时间","keywords":"","body":"设置世界时间 世界时间功能表 __IDO_FUNCTABLE__.funcTable38Model.setV3WorldTime 世界时间参照表 世界时间模型说明 IDOSetV3WorldTimeItemModel 参数 说明 备注 cityId 每个城市的id号 int minuteOffset 当前的时间和0时区的偏移分钟数据 int cityNameLen 城市的名称 int cityName 城市名称 str sunriseHour 日出的时 int sunriseMin 日出的分 int sunsetHour 日落的时 int sunsetMin 日落的分 int longitudeFlag 经度标志位 1: 东经； 2：西经 longitude 经度 保留2位小数扩大100倍传输， app需要将对应的分转换成度lon=104°4’ => (104 + 4/60)*100 取整 latitudeFlag 纬度标志位 1: 北纬； 2：南纬 latitude 纬度 保留2位小数扩大100倍传输， app需要将对应的分转换成度lon=104°4’ => (104 + 4/60)*100 取整 IDOSetV3WorldTimeModel 参数 说明 备注 worldVersion 版本号 暂时无需赋值 itemsNum items的个数 int items 世界时间集合 array (IDOSetV3WorldTimeItemModel) 命令代码 Objc: IDOSetV3WorldTimeModel * model = [IDOSetV3WorldTimeModel currentModel]; [IDOFoundationCommand setWorldTimeCommand:model callback:^(int errorCode) { if (errorCode == 0) { //设置成功 }else if (errorCode == 6) { //设备不支持 }else { //设置失败 } }]; Swift: let model = IDOSetV3WorldTimeModel.current(); IDOFoundationCommand.setWorldTime(model) { (errorCode) in if errorCode == 0 { //设置成功 }else if errorCode == 6{ //设备不支持此方法 }else { //设置错误 } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"set/IDOWordTimeJsonInfo.html":{"url":"set/IDOWordTimeJsonInfo.html","title":"世界时间列表","keywords":"","body":"世界时间常用地区信息 JSON文件说明 [{ \"city_id\": \"0\", \"ch_area\": \"阿比让\", \"ch_nation\": \"象牙海岸\", \"en_area\": \"Abidjan\", \"en_nation\": \"Ivory Coast\", \"latitude\": \"5.3599517\", \"longitude\": \"-4.0082563\", \"timeZone\": \"Africa/Bamako\" }, { \"city_id\": \"1\", \"ch_area\": \"阿布扎比\", \"ch_nation\": \"阿拉伯联合大公国\", \"en_area\": \"Abu Dhabi\", \"en_nation\": \"U.A.E.\", \"latitude\": \"24.453884\", \"longitude\": \"54.3773438\", \"timeZone\": \"Asia/Dubai\" }, { \"city_id\": \"5\", \"ch_area\": \"阿德莱德\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Adelaide\", \"en_nation\": \"Australia\", \"latitude\": \"-34.9284989\", \"longitude\": \"138.6007456\", \"timeZone\": \"Australia/Adelaide\" }, { \"city_id\": \"423\", \"ch_area\": \"阿蒂科肯\", \"ch_nation\": \"加拿大\", \"en_area\": \"Atikokan\", \"en_nation\": \"Canada\", \"latitude\": \"48.7575098\", \"longitude\": \"-91.6218292\", \"timeZone\": \"America/Atikokan\" }, { \"city_id\": \"6\", \"ch_area\": \"阿尔伯克基\", \"ch_nation\": \"美国\", \"en_area\": \"Albuquerque, NM\", \"en_nation\": \"U.S.A.\", \"latitude\": \"35.0843859\", \"longitude\": \"-106.650422\", \"timeZone\": \"US/Mountain\" }, { \"city_id\": \"7\", \"ch_area\": \"阿尔及尔\", \"ch_nation\": \"阿尔及利亚\", \"en_area\": \"Algiers\", \"en_nation\": \"Algeria\", \"latitude\": \"36.753768\", \"longitude\": \"3.0587561\", \"timeZone\": \"Africa/Algiers\" }, { \"city_id\": \"562\", \"ch_area\": \"阿瓜斯卡连特斯\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Aguascalientes\", \"en_nation\": \"Mexico\", \"latitude\": \"21.8852562\", \"longitude\": \"-102.2915677\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"561\", \"ch_area\": \"阿卡普尔科\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Acapulco\", \"en_nation\": \"Mexico\", \"latitude\": \"16.8531086\", \"longitude\": \"-99.8236533\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"337\", \"ch_area\": \"阿克顿\", \"ch_nation\": \"美国\", \"en_area\": \"Acton, Massachusetts\", \"en_nation\": \"U.S.A.\", \"latitude\": \"42.4850931\", \"longitude\": \"-71.43284\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"2\", \"ch_area\": \"阿克拉\", \"ch_nation\": \"加纳\", \"en_area\": \"Accra\", \"en_nation\": \"Ghana\", \"latitude\": \"5.6037168\", \"longitude\": \"-0.1869644\", \"timeZone\": \"Africa/Accra\" }, { \"city_id\": \"888\", \"ch_area\": \"阿克套\", \"ch_nation\": \"哈萨克斯坦\", \"en_area\": \"Aktau\", \"en_nation\": \"Kazakhstan\", \"latitude\": \"43.6588079\", \"longitude\": \"51.1974563\", \"timeZone\": \"Asia/Aqtobe\" }, { \"city_id\": \"478\", \"ch_area\": \"阿克托别\", \"ch_nation\": \"哈萨克斯坦\", \"en_area\": \"Aqtobe\", \"en_nation\": \"Kazakhstan\", \"latitude\": \"50.2839339\", \"longitude\": \"57.166978\", \"timeZone\": \"Asia/Aqtobe\" }, { \"city_id\": \"404\", \"ch_area\": \"阿拉瓜伊纳\", \"ch_nation\": \"巴西\", \"en_area\": \"Araguaina\", \"en_nation\": \"Brazil\", \"latitude\": \"-7.1915633\", \"longitude\": \"-48.2094801\", \"timeZone\": \"America/Araguaina\" }, { \"city_id\": \"501\", \"ch_area\": \"阿洛菲\", \"ch_nation\": \"纽埃岛\", \"en_area\": \"Alofi\", \"en_nation\": \"Niue\", \"latitude\": \"-19.0553711\", \"longitude\": \"-169.9178709\", \"timeZone\": \"Pacific/Niue\" }, { \"city_id\": \"370\", \"ch_area\": \"阿蒙森 - 斯科特站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Amundsen-Scott Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"42.0566295\", \"longitude\": \"-87.6750834\", \"timeZone\": \"Antarctica/South_Pole\" }, { \"city_id\": \"9\", \"ch_area\": \"阿姆斯特丹\", \"ch_nation\": \"荷兰\", \"en_area\": \"Amsterdam\", \"en_nation\": \"the Netherlands\", \"latitude\": \"52.3675734\", \"longitude\": \"4.9041389\", \"timeZone\": \"Europe/Amsterdam\" }, { \"city_id\": \"10\", \"ch_area\": \"阿纳德尔\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Anadyr\", \"en_nation\": \"Russia\", \"latitude\": \"64.7336613\", \"longitude\": \"177.4968265\", \"timeZone\": \"Asia/Anadyr\" }, { \"city_id\": \"365\", \"ch_area\": \"阿皮亚\", \"ch_nation\": \"萨摩亚\", \"en_area\": \"Apia\", \"en_nation\": \"Samoa\", \"latitude\": \"-13.8506958\", \"longitude\": \"-171.7513551\", \"timeZone\": \"Pacific/Apia\" }, { \"city_id\": \"14\", \"ch_area\": \"阿什喀巴德\", \"ch_nation\": \"土库曼斯坦\", \"en_area\": \"Ashgabat\", \"en_nation\": \"Turkmenistan\", \"latitude\": \"37.9600766\", \"longitude\": \"58.3260629\", \"timeZone\": \"Asia/Ashgabat\" }, { \"city_id\": \"15\", \"ch_area\": \"阿斯马拉\", \"ch_nation\": \"厄立特里亚\", \"en_area\": \"Asmera\", \"en_nation\": \"Eritrea\", \"latitude\": \"15.3228767\", \"longitude\": \"38.9250517\", \"timeZone\": \"Africa/Asmara\" }, { \"city_id\": \"16\", \"ch_area\": \"阿斯塔纳\", \"ch_nation\": \"哈萨克斯坦\", \"en_area\": \"Astana\", \"en_nation\": \"Kazakhstan\", \"latitude\": \"51.1605227\", \"longitude\": \"71.4703558\", \"timeZone\": \"Asia/Almaty\" }, { \"city_id\": \"479\", \"ch_area\": \"阿特劳\", \"ch_nation\": \"哈萨克斯坦\", \"en_area\": \"Atyrau\", \"en_nation\": \"Kazakhstan\", \"latitude\": \"47.0944959\", \"longitude\": \"51.9238373\", \"timeZone\": \"Asia/Aqtobe\" }, { \"city_id\": \"446\", \"ch_area\": \"阿尤恩\", \"ch_nation\": \"西撒哈拉\", \"en_area\": \"El-Aaiun\", \"en_nation\": \"Western Sahara\", \"latitude\": \"27.1500384\", \"longitude\": \"-13.1990758\", \"timeZone\": \"Africa/El_Aaiun\" }, { \"city_id\": \"427\", \"ch_area\": \"埃德蒙顿\", \"ch_nation\": \"加拿大\", \"en_area\": \"Edmonton\", \"en_nation\": \"Canada\", \"latitude\": \"53.5461245\", \"longitude\": \"-113.4938229\", \"timeZone\": \"America/Edmonton\" }, { \"city_id\": \"94\", \"ch_area\": \"埃尔帕索\", \"ch_nation\": \"美国\", \"en_area\": \"El Paso, TX\", \"en_nation\": \"U.S.A.\", \"latitude\": \"31.7618778\", \"longitude\": \"-106.4850217\", \"timeZone\": \"US/Mountain\" }, { \"city_id\": \"550\", \"ch_area\": \"埃法特岛\", \"ch_nation\": \"瓦努阿图\", \"en_area\": \"Efate\", \"en_nation\": \"Vanuatu\", \"latitude\": \"-17.6577479\", \"longitude\": \"168.4297187\", \"timeZone\": \"Pacific/Efate\" }, { \"city_id\": \"322\", \"ch_area\": \"埃里温\", \"ch_nation\": \"亚美尼亚\", \"en_area\": \"Yerevan\", \"en_nation\": \"Armenia\", \"latitude\": \"40.1872023\", \"longitude\": \"44.515209\", \"timeZone\": \"Asia/Yerevan\" }, { \"city_id\": \"495\", \"ch_area\": \"埃莫西约\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Hermosillo\", \"en_nation\": \"Mexico\", \"latitude\": \"29.0729673\", \"longitude\": \"-110.9559192\", \"timeZone\": \"America/Hermosillo\" }, { \"city_id\": \"3\", \"ch_area\": \"艾德克岛\", \"ch_nation\": \"美国\", \"en_area\": \"Adak\", \"en_nation\": \"U.S.A.\", \"latitude\": \"51.88\", \"longitude\": \"-176.6580556\", \"timeZone\": \"America/Adak\" }, { \"city_id\": \"412\", \"ch_area\": \"艾鲁内佩\", \"ch_nation\": \"巴西\", \"en_area\": \"Eirunepe\", \"en_nation\": \"Brazil\", \"latitude\": \"-6.6623703\", \"longitude\": \"-69.8674302\", \"timeZone\": \"America/Eirunepe\" }, { \"city_id\": \"93\", \"ch_area\": \"爱丁堡\", \"ch_nation\": \"苏格兰\", \"en_area\": \"Edinburgh\", \"en_nation\": \"Scotland U.K.\", \"latitude\": \"55.953252\", \"longitude\": \"-3.188267\", \"timeZone\": \"Europe/London\" }, { \"city_id\": \"331\", \"ch_area\": \"安道尔城\", \"ch_nation\": \"安道尔\", \"en_area\": \"Andorra la Vella\", \"en_nation\": \"Andorra\", \"latitude\": \"42.5063174\", \"longitude\": \"1.5218355\", \"timeZone\": \"Europe/Andorra\" }, { \"city_id\": \"13\", \"ch_area\": \"安卡拉\", \"ch_nation\": \"土耳其\", \"en_area\": \"Ankara\", \"en_nation\": \"Turkey\", \"latitude\": \"39.9333635\", \"longitude\": \"32.8597419\", \"timeZone\": \"Europe/Istanbul\" }, { \"city_id\": \"12\", \"ch_area\": \"安克雷奇\", \"ch_nation\": \"美国\", \"en_area\": \"Anchorage\", \"en_nation\": \"U.S.A.\", \"latitude\": \"61.2180556\", \"longitude\": \"-149.9002778\", \"timeZone\": \"America/Anchorage\" }, { \"city_id\": \"8\", \"ch_area\": \"安曼\", \"ch_nation\": \"约旦\", \"en_area\": \"Amman\", \"en_nation\": \"Jordan\", \"latitude\": \"31.9539494\", \"longitude\": \"35.910635\", \"timeZone\": \"Asia/Amman\" }, { \"city_id\": \"11\", \"ch_area\": \"安塔那那利佛\", \"ch_nation\": \"马达加斯加\", \"en_area\": \"Antananarivo\", \"en_nation\": \"Madagascar\", \"latitude\": \"-18.8791902\", \"longitude\": \"47.5079055\", \"timeZone\": \"Indian/Antananarivo\" }, { \"city_id\": \"357\", \"ch_area\": \"安特卫普\", \"ch_nation\": \"比利时\", \"en_area\": \"Antwerp\", \"en_nation\": \"Belgium\", \"latitude\": \"51.2194475\", \"longitude\": \"4.4024643\", \"timeZone\": \"Europe/Brussels\" }, { \"city_id\": \"574\", \"ch_area\": \"敖德萨\", \"ch_nation\": \"乌克兰\", \"en_area\": \"Odessa\", \"en_nation\": \"Ukraine\", \"latitude\": \"46.482526\", \"longitude\": \"30.7233095\", \"timeZone\": \"Europe/Kiev\" }, { \"city_id\": \"20\", \"ch_area\": \"奥克兰\", \"ch_nation\": \"新西兰\", \"en_area\": \"Auckland\", \"en_nation\": \"New Zealand\", \"latitude\": \"-36.8508827\", \"longitude\": \"174.7644881\", \"timeZone\": \"Pacific/Auckland\" }, { \"city_id\": \"205\", \"ch_area\": \"奥克兰\", \"ch_nation\": \"美国\", \"en_area\": \"Oakland\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.8043514\", \"longitude\": \"-122.2711639\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"396\", \"ch_area\": \"奥拉涅斯塔德\", \"ch_nation\": \"阿鲁巴\", \"en_area\": \"Oranjestad\", \"en_nation\": \"Aruba\", \"latitude\": \"12.5092044\", \"longitude\": \"-70.0086306\", \"timeZone\": \"America/Aruba\" }, { \"city_id\": \"207\", \"ch_area\": \"奥马哈\", \"ch_nation\": \"美国\", \"en_area\": \"Omaha, NE\", \"en_nation\": \"U.S.A.\", \"latitude\": \"41.2565369\", \"longitude\": \"-95.9345034\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"210\", \"ch_area\": \"奥斯陆\", \"ch_nation\": \"挪威\", \"en_area\": \"Oslo\", \"en_nation\": \"Norway\", \"latitude\": \"59.9138688\", \"longitude\": \"10.7522454\", \"timeZone\": \"Europe/Oslo\" }, { \"city_id\": \"21\", \"ch_area\": \"奥斯汀\", \"ch_nation\": \"美国\", \"en_area\": \"Austin, TX\", \"en_nation\": \"U.S.A.\", \"latitude\": \"30.267153\", \"longitude\": \"-97.7430608\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"345\", \"ch_area\": \"奥希纳加\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Ojinaga\", \"en_nation\": \"Mexico\", \"latitude\": \"29.5458844\", \"longitude\": \"-104.4082908\", \"timeZone\": \"America/Ojinaga\" }, { \"city_id\": \"156\", \"ch_area\": \"澳门特别行政区\", \"ch_nation\": \"中国\", \"en_area\": \"Macao\", \"en_nation\": \"China\", \"latitude\": \"22.198745\", \"longitude\": \"113.543873\", \"timeZone\": \"Asia/Macau\" }, { \"city_id\": \"24\", \"ch_area\": \"巴尔的摩\", \"ch_nation\": \"美国\", \"en_area\": \"Baltimore, MD\", \"en_nation\": \"U.S.A.\", \"latitude\": \"39.2903848\", \"longitude\": \"-76.6121893\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"22\", \"ch_area\": \"巴格达\", \"ch_nation\": \"伊拉克\", \"en_area\": \"Baghdad\", \"en_nation\": \"Iraq\", \"latitude\": \"33.315241\", \"longitude\": \"44.3660671\", \"timeZone\": \"Asia/Baghdad\" }, { \"city_id\": \"23\", \"ch_area\": \"巴库\", \"ch_nation\": \"阿塞拜疆\", \"en_area\": \"Baku\", \"en_nation\": \"Azerbaijan\", \"latitude\": \"40.4092617\", \"longitude\": \"49.8670924\", \"timeZone\": \"Asia/Baku\" }, { \"city_id\": \"215\", \"ch_area\": \"巴勒莫\", \"ch_nation\": \"意大利\", \"en_area\": \"Palermo\", \"en_nation\": \"Italy\", \"latitude\": \"38.11569\", \"longitude\": \"13.3614868\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"221\", \"ch_area\": \"巴黎\", \"ch_nation\": \"法国\", \"en_area\": \"Paris\", \"en_nation\": \"France\", \"latitude\": \"48.856614\", \"longitude\": \"2.3522219\", \"timeZone\": \"Europe/Paris\" }, { \"city_id\": \"29\", \"ch_area\": \"巴里\", \"ch_nation\": \"意大利\", \"en_area\": \"Bari\", \"en_nation\": \"Italy\", \"latitude\": \"41.1171432\", \"longitude\": \"16.8718715\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"25\", \"ch_area\": \"巴马科\", \"ch_nation\": \"马里\", \"en_area\": \"Bamako\", \"en_nation\": \"Mali\", \"latitude\": \"12.6392316\", \"longitude\": \"-8.0028892\", \"timeZone\": \"Africa/Bamako\" }, { \"city_id\": \"217\", \"ch_area\": \"巴拿马城\", \"ch_nation\": \"巴拿马\", \"en_area\": \"Panama City\", \"en_nation\": \"Panama\", \"latitude\": \"30.1588129\", \"longitude\": \"-85.6602058\", \"timeZone\": \"America/Panama\" }, { \"city_id\": \"28\", \"ch_area\": \"巴塞罗那\", \"ch_nation\": \"西班牙\", \"en_area\": \"Barcelona\", \"en_nation\": \"Spain\", \"latitude\": \"41.3850639\", \"longitude\": \"2.1734035\", \"timeZone\": \"Europe/Madrid\" }, { \"city_id\": \"30\", \"ch_area\": \"巴斯特尔\", \"ch_nation\": \"瓜德罗普岛\", \"en_area\": \"Basse-Terre\", \"en_nation\": \"Guadeloupe\", \"latitude\": \"15.9965761\", \"longitude\": \"-61.731699\", \"timeZone\": \"America/Guadeloupe\" }, { \"city_id\": \"475\", \"ch_area\": \"巴斯特尔\", \"ch_nation\": \"圣基茨和尼维斯\", \"en_area\": \"Basseterre\", \"en_nation\": \"France\", \"latitude\": \"17.3026058\", \"longitude\": \"-62.7176924\", \"timeZone\": \"America/St_Kitts\" }, { \"city_id\": \"46\", \"ch_area\": \"巴西利亚\", \"ch_nation\": \"巴西\", \"en_area\": \"Brasília\", \"en_nation\": \"Brazil\", \"latitude\": \"-15.7975174\", \"longitude\": \"-47.8918881\", \"timeZone\": \"America/Sao_Paulo\" }, { \"city_id\": \"497\", \"ch_area\": \"巴亚尔塔港\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Puerto Vallarta\", \"en_nation\": \"Mexico\", \"latitude\": \"20.653407\", \"longitude\": \"-105.2253316\", \"timeZone\": \"America/Bahia_Banderas\" }, { \"city_id\": \"37\", \"ch_area\": \"柏林\", \"ch_nation\": \"德国\", \"en_area\": \"Berlin\", \"en_nation\": \"Germany\", \"latitude\": \"52.5200066\", \"longitude\": \"13.404954\", \"timeZone\": \"Europe/Berlin\" }, { \"city_id\": \"27\", \"ch_area\": \"班吉\", \"ch_nation\": \"中非共和国\", \"en_area\": \"Bangui\", \"en_nation\": \"Central African Republic\", \"latitude\": \"4.3946735\", \"longitude\": \"18.5581899\", \"timeZone\": \"Africa/Bangui\" }, { \"city_id\": \"434\", \"ch_area\": \"班坦村\", \"ch_nation\": \"科科斯（基林）群岛\", \"en_area\": \"Bantam Village\", \"en_nation\": \"Cocos (Keeling) Islands\", \"latitude\": \"-12.116787\", \"longitude\": \"96.8965765\", \"timeZone\": \"Indian/Cocos\" }, { \"city_id\": \"466\", \"ch_area\": \"班珠尔\", \"ch_nation\": \"冈比亚\", \"en_area\": \"Banjul\", \"en_nation\": \"Gambia\", \"latitude\": \"13.454375\", \"longitude\": \"-16.5753186\", \"timeZone\": \"Africa/Banjul\" }, { \"city_id\": \"31\", \"ch_area\": \"北京\", \"ch_nation\": \"中国\", \"en_area\": \"Beijing\", \"en_nation\": \"China\", \"latitude\": \"39.9041999\", \"longitude\": \"116.4073963\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"33\", \"ch_area\": \"贝尔格莱德\", \"ch_nation\": \"塞尔维亚\", \"en_area\": \"Belgrade\", \"en_nation\": \"Serbia\", \"latitude\": \"44.8125449\", \"longitude\": \"20.4612299\", \"timeZone\": \"Europe/Belgrade\" }, { \"city_id\": \"32\", \"ch_area\": \"贝鲁特\", \"ch_nation\": \"黎巴嫩\", \"en_area\": \"Beirut\", \"en_nation\": \"Lebanon\", \"latitude\": \"33.8937913\", \"longitude\": \"35.5017767\", \"timeZone\": \"Asia/Beirut\" }, { \"city_id\": \"402\", \"ch_area\": \"贝伦\", \"ch_nation\": \"巴西\", \"en_area\": \"Belem\", \"en_nation\": \"Brazil\", \"latitude\": \"-1.4563073\", \"longitude\": \"-48.5012804\", \"timeZone\": \"America/Belem\" }, { \"city_id\": \"35\", \"ch_area\": \"贝尼西亚\", \"ch_nation\": \"美国\", \"en_area\": \"Benicia\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.049365\", \"longitude\": \"-122.1585777\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"40\", \"ch_area\": \"比绍\", \"ch_nation\": \"几内亚比绍\", \"en_area\": \"Bissau\", \"en_nation\": \"Guinea-Bissau\", \"latitude\": \"11.8632196\", \"longitude\": \"-15.5843227\", \"timeZone\": \"Africa/Bissau\" }, { \"city_id\": \"39\", \"ch_area\": \"比什凯克\", \"ch_nation\": \"吉尔吉斯斯坦\", \"en_area\": \"Bishkek\", \"en_nation\": \"Kyrgyzstan\", \"latitude\": \"42.8746212\", \"longitude\": \"74.5697617\", \"timeZone\": \"Asia/Bishkek\" }, { \"city_id\": \"537\", \"ch_area\": \"比尤拉\", \"ch_nation\": \"美国\", \"en_area\": \"Beulah\", \"en_nation\": \"U.S.A.\", \"latitude\": \"47.2633403\", \"longitude\": \"-101.7779462\", \"timeZone\": \"America/North_Dakota/Beulah\" }, { \"city_id\": \"531\", \"ch_area\": \"彼得斯堡\", \"ch_nation\": \"美国\", \"en_area\": \"Petersburg\", \"en_nation\": \"U.S.A.\", \"latitude\": \"59.9310584\", \"longitude\": \"30.3609096\", \"timeZone\": \"America/Indiana/Petersburg\" }, { \"city_id\": \"222\", \"ch_area\": \"彼尔姆\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Perm\", \"en_nation\": \"Russia\", \"latitude\": \"36.1128817\", \"longitude\": \"-95.9754497\", \"timeZone\": \"Asia/Yekaterinburg\" }, { \"city_id\": \"230\", \"ch_area\": \"波德戈里察\", \"ch_nation\": \"黑山\", \"en_area\": \"Podgorica\", \"en_nation\": \"Montenegro\", \"latitude\": \"42.4304196\", \"longitude\": \"19.2593642\", \"timeZone\": \"Europe/Podgorica\" }, { \"city_id\": \"399\", \"ch_area\": \"波多诺伏\", \"ch_nation\": \"贝宁\", \"en_area\": \"Porto-Novo\", \"en_nation\": \"Benin\", \"latitude\": \"6.4968574\", \"longitude\": \"2.6288523\", \"timeZone\": \"Africa/Porto-Novo\" }, { \"city_id\": \"409\", \"ch_area\": \"波多韦柳\", \"ch_nation\": \"巴西\", \"en_area\": \"Porto Velho\", \"en_nation\": \"Brazil\", \"latitude\": \"-8.7635576\", \"longitude\": \"-63.8971704\", \"timeZone\": \"America/Porto_Velho\" }, { \"city_id\": \"42\", \"ch_area\": \"波哥大\", \"ch_nation\": \"哥伦比亚\", \"en_area\": \"Bogotá\", \"en_nation\": \"Colombia\", \"latitude\": \"4.7109886\", \"longitude\": \"-74.072092\", \"timeZone\": \"America/Bogota\" }, { \"city_id\": \"450\", \"ch_area\": \"波纳佩\", \"ch_nation\": \"密克罗尼西亚\", \"en_area\": \"Pohnpei\", \"en_nation\": \"Micronesia\", \"latitude\": \"6.8541254\", \"longitude\": \"158.2623822\", \"timeZone\": \"Pacific/Pohnpei\" }, { \"city_id\": \"44\", \"ch_area\": \"波士顿\", \"ch_nation\": \"美国\", \"en_area\": \"Boston, MA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"42.3600825\", \"longitude\": \"-71.0588801\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"234\", \"ch_area\": \"波特兰\", \"ch_nation\": \"美国\", \"en_area\": \"Portland, OR\", \"en_nation\": \"U.S.A.\", \"latitude\": \"45.5051064\", \"longitude\": \"-122.6750261\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"38\", \"ch_area\": \"伯尔尼\", \"ch_nation\": \"瑞士\", \"en_area\": \"Bern\", \"en_nation\": \"Switzerland\", \"latitude\": \"46.9479739\", \"longitude\": \"7.4474468\", \"timeZone\": \"Europe/Zurich\" }, { \"city_id\": \"36\", \"ch_area\": \"伯克利\", \"ch_nation\": \"美国\", \"en_area\": \"Berkeley\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.8715226\", \"longitude\": \"-122.273042\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"336\", \"ch_area\": \"伯克利高地\", \"ch_nation\": \"美国\", \"en_area\": \"Berkeley Heights\", \"en_nation\": \"U.S.A.\", \"latitude\": \"40.6808726\", \"longitude\": \"-74.4310524\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"34\", \"ch_area\": \"伯利兹城\", \"ch_nation\": \"伯利兹\", \"en_area\": \"Belize City\", \"en_nation\": \"Belize\", \"latitude\": \"17.5045661\", \"longitude\": \"-88.1962133\", \"timeZone\": \"America/Belize\" }, { \"city_id\": \"53\", \"ch_area\": \"伯灵格姆\", \"ch_nation\": \"美国\", \"en_area\": \"Burlingame\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.5778696\", \"longitude\": \"-122.34809\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"410\", \"ch_area\": \"博阿维斯塔\", \"ch_nation\": \"巴西\", \"en_area\": \"Boa Vista\", \"en_nation\": \"Brazil\", \"latitude\": \"16.0950108\", \"longitude\": \"-22.8078335\", \"timeZone\": \"America/Boa_Vista\" }, { \"city_id\": \"43\", \"ch_area\": \"博洛尼亚\", \"ch_nation\": \"意大利\", \"en_area\": \"Bologna\", \"en_nation\": \"Italy\", \"latitude\": \"44.494887\", \"longitude\": \"11.3426162\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"401\", \"ch_area\": \"博内尔\", \"ch_nation\": \"博内尔\", \"en_area\": \"Kralendijk\", \"en_nation\": \"Bonaire\", \"latitude\": \"12.1443491\", \"longitude\": \"-68.2655456\", \"timeZone\": \"America/Kralendijk\" }, { \"city_id\": \"538\", \"ch_area\": \"博伊西\", \"ch_nation\": \"美国\", \"en_area\": \"Boise\", \"en_nation\": \"U.S.A.\", \"latitude\": \"43.6150186\", \"longitude\": \"-116.2023137\", \"timeZone\": \"America/Boise\" }, { \"city_id\": \"51\", \"ch_area\": \"布达佩斯\", \"ch_nation\": \"匈牙利\", \"en_area\": \"Budapest\", \"en_nation\": \"Hungary\", \"latitude\": \"47.497912\", \"longitude\": \"19.040235\", \"timeZone\": \"Europe/Budapest\" }, { \"city_id\": \"50\", \"ch_area\": \"布加勒斯特\", \"ch_nation\": \"罗马尼亚\", \"en_area\": \"Bucharest\", \"en_nation\": \"Romania\", \"latitude\": \"44.4267674\", \"longitude\": \"26.1025384\", \"timeZone\": \"Europe/Bucharest\" }, { \"city_id\": \"328\", \"ch_area\": \"布拉柴维尔\", \"ch_nation\": \"刚果\", \"en_area\": \"Brazzaville\", \"en_nation\": \"Congo\", \"latitude\": \"-4.2633597\", \"longitude\": \"15.2428853\", \"timeZone\": \"Africa/Ndjamena\" }, { \"city_id\": \"45\", \"ch_area\": \"布拉迪斯拉瓦\", \"ch_nation\": \"斯洛伐克\", \"en_area\": \"Bratislava\", \"en_nation\": \"Slovakia\", \"latitude\": \"48.1485965\", \"longitude\": \"17.1077478\", \"timeZone\": \"Europe/Bratislava\" }, { \"city_id\": \"235\", \"ch_area\": \"布拉格\", \"ch_nation\": \"捷克共和国\", \"en_area\": \"Prague\", \"en_nation\": \"Czech Republic\", \"latitude\": \"50.0755381\", \"longitude\": \"14.4378005\", \"timeZone\": \"Europe/Prague\" }, { \"city_id\": \"41\", \"ch_area\": \"布莱克斯堡\", \"ch_nation\": \"美国\", \"en_area\": \"Blacksburg\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.2295733\", \"longitude\": \"-80.4139393\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"489\", \"ch_area\": \"布兰太尔\", \"ch_nation\": \"马拉维\", \"en_area\": \"Blantyre\", \"en_nation\": \"Malawi\", \"latitude\": \"42.3360623\", \"longitude\": \"-73.2588767\", \"timeZone\": \"Africa/Blantyre\" }, { \"city_id\": \"417\", \"ch_area\": \"布朗-萨布隆\", \"ch_nation\": \"加拿大\", \"en_area\": \"Blanc-Sablon\", \"en_nation\": \"Canada\", \"latitude\": \"51.4264451\", \"longitude\": \"-57.1313148\", \"timeZone\": \"America/Blanc-Sablon\" }, { \"city_id\": \"47\", \"ch_area\": \"布里奇顿\", \"ch_nation\": \"巴巴多斯岛\", \"en_area\": \"Bridgetown\", \"en_nation\": \"Barbados\", \"latitude\": \"13.1059816\", \"longitude\": \"-59.6131741\", \"timeZone\": \"America/Barbados\" }, { \"city_id\": \"48\", \"ch_area\": \"布里斯班\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Brisbane\", \"en_nation\": \"Australia\", \"latitude\": \"-27.4704528\", \"longitude\": \"153.0260341\", \"timeZone\": \"Australia/Brisbane\" }, { \"city_id\": \"49\", \"ch_area\": \"布鲁塞尔\", \"ch_nation\": \"比利时\", \"en_area\": \"Brussels\", \"en_nation\": \"Belgium\", \"latitude\": \"50.8503396\", \"longitude\": \"4.3517103\", \"timeZone\": \"Europe/Brussels\" }, { \"city_id\": \"393\", \"ch_area\": \"布洛肯希尔\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Broken Hill\", \"en_nation\": \"Australia\", \"latitude\": \"-31.9595859\", \"longitude\": \"141.4608138\", \"timeZone\": \"Australia/Broken_Hill\" }, { \"city_id\": \"398\", \"ch_area\": \"布琼布拉\", \"ch_nation\": \"布隆迪\", \"en_area\": \"Bujumbura\", \"en_nation\": \"Burundi\", \"latitude\": \"-3.361378\", \"longitude\": \"29.3598782\", \"timeZone\": \"Africa/Bujumbura\" }, { \"city_id\": \"52\", \"ch_area\": \"布宜诺斯艾利斯\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Buenos Aires\", \"en_nation\": \"Argentina\", \"latitude\": \"-34.6036844\", \"longitude\": \"-58.3815591\", \"timeZone\": \"America/Buenos_Aires\" }, { \"city_id\": \"502\", \"ch_area\": \"查塔姆岛\", \"ch_nation\": \"新西兰\", \"en_area\": \"Chatham Island\", \"en_nation\": \"New Zealand\", \"latitude\": \"-44.0057523\", \"longitude\": \"-176.5400674\", \"timeZone\": \"Pacific/Chatham\" }, { \"city_id\": \"356\", \"ch_area\": \"查亚普拉\", \"ch_nation\": \"印度尼西亚\", \"en_area\": \"Jayapura\", \"en_nation\": \"Indonesia\", \"latitude\": \"-2.5916025\", \"longitude\": \"140.6689995\", \"timeZone\": \"Asia/Jayapura\" }, { \"city_id\": \"462\", \"ch_area\": \"沈阳\", \"ch_nation\": \"中国\", \"en_area\": \"Shenyang\", \"en_nation\": \"China\", \"latitude\": \"41.805699\", \"longitude\": \"123.431472\", \"timeZone\": \"Asia/Harbin\" }, { \"city_id\": \"66\", \"ch_area\": \"陈奈\", \"ch_nation\": \"印度\", \"en_area\": \"Chennai\", \"en_nation\": \"India\", \"latitude\": \"13.0826802\", \"longitude\": \"80.2707184\", \"timeZone\": \"Asia/Kolkata\" }, { \"city_id\": \"456\", \"ch_area\": \"成都\", \"ch_nation\": \"中国\", \"en_area\": \"Chengdu\", \"en_nation\": \"China\", \"latitude\": \"30.572815\", \"longitude\": \"104.066801\", \"timeZone\": \"Asia/Chongqing\" }, { \"city_id\": \"69\", \"ch_area\": \"赤塔\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Chita\", \"en_nation\": \"Russia\", \"latitude\": \"52.0515032\", \"longitude\": \"113.4711906\", \"timeZone\": \"Asia/Yakutsk\" }, { \"city_id\": \"449\", \"ch_area\": \"楚克\", \"ch_nation\": \"密克罗尼西亚\", \"en_area\": \"Chuuk\", \"en_nation\": \"Micronesia\", \"latitude\": \"7.1386759\", \"longitude\": \"151.5593065\", \"timeZone\": \"Pacific/Chuuk\" }, { \"city_id\": \"539\", \"ch_area\": \"船岩峰\", \"ch_nation\": \"美国\", \"en_area\": \"Shiprock\", \"en_nation\": \"U.S.A.\", \"latitude\": \"36.6866691\", \"longitude\": \"-108.8364343\", \"timeZone\": \"America/Shiprock\" }, { \"city_id\": \"84\", \"ch_area\": \"达尔文\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Darwin\", \"en_nation\": \"Australia\", \"latitude\": \"37.0929586\", \"longitude\": \"-95.5828336\", \"timeZone\": \"Australia/Darwin\" }, { \"city_id\": \"79\", \"ch_area\": \"达喀尔\", \"ch_nation\": \"塞内加尔\", \"en_area\": \"Dakar\", \"en_nation\": \"Senegal\", \"latitude\": \"14.716677\", \"longitude\": \"-17.4676861\", \"timeZone\": \"Africa/Dakar\" }, { \"city_id\": \"78\", \"ch_area\": \"达卡\", \"ch_nation\": \"孟加拉国\", \"en_area\": \"Dhaka\", \"en_nation\": \"Bangladesh\", \"latitude\": \"23.810332\", \"longitude\": \"90.4125181\", \"timeZone\": \"Asia/Dhaka\" }, { \"city_id\": \"80\", \"ch_area\": \"达拉斯\", \"ch_nation\": \"美国\", \"en_area\": \"Dallas, TX\", \"en_nation\": \"U.S.A.\", \"latitude\": \"32.7766642\", \"longitude\": \"-96.7969879\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"83\", \"ch_area\": \"达累斯萨拉姆\", \"ch_nation\": \"坦桑尼亚\", \"en_area\": \"Dar es Salaam\", \"en_nation\": \"Tanzania\", \"latitude\": \"-6.792354\", \"longitude\": \"39.2083284\", \"timeZone\": \"Africa/Dar_es_Salaam\" }, { \"city_id\": \"81\", \"ch_area\": \"达利城\", \"ch_nation\": \"美国\", \"en_area\": \"Daly City\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.6879241\", \"longitude\": \"-122.4702079\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"209\", \"ch_area\": \"大阪\", \"ch_nation\": \"日本\", \"en_area\": \"Osaka\", \"en_nation\": \"Japan\", \"latitude\": \"34.6937249\", \"longitude\": \"135.5022535\", \"timeZone\": \"Asia/Tokyo\" }, { \"city_id\": \"406\", \"ch_area\": \"大坎普\", \"ch_nation\": \"巴西\", \"en_area\": \"Campo Grande\", \"en_nation\": \"Brazil\", \"latitude\": \"-20.4648517\", \"longitude\": \"-54.6218477\", \"timeZone\": \"America/Campo_Grande\" }, { \"city_id\": \"457\", \"ch_area\": \"大连\", \"ch_nation\": \"中国\", \"en_area\": \"Dalian\", \"en_nation\": \"China\", \"latitude\": \"38.914003\", \"longitude\": \"121.614682\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"82\", \"ch_area\": \"大马士革\", \"ch_nation\": \"叙利亚\", \"en_area\": \"Damascus\", \"en_nation\": \"Syria\", \"latitude\": \"33.5138073\", \"longitude\": \"36.2765279\", \"timeZone\": \"Asia/Damascus\" }, { \"city_id\": \"374\", \"ch_area\": \"戴维斯站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Davis Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-68.5762466\", \"longitude\": \"77.9696243\", \"timeZone\": \"Antarctica/Davis\" }, { \"city_id\": \"85\", \"ch_area\": \"丹佛\", \"ch_nation\": \"美国\", \"en_area\": \"Denver, CO\", \"en_nation\": \"U.S.A.\", \"latitude\": \"39.7392358\", \"longitude\": \"-104.990251\", \"timeZone\": \"America/Denver\" }, { \"city_id\": \"463\", \"ch_area\": \"丹马沙文\", \"ch_nation\": \"格陵兰\", \"en_area\": \"Danmarkshavn\", \"en_nation\": \"Greenland\", \"latitude\": \"76.8142001\", \"longitude\": \"-19.0050866\", \"timeZone\": \"America/Danmarkshavn\" }, { \"city_id\": \"468\", \"ch_area\": \"道格拉斯\", \"ch_nation\": \"马恩岛\", \"en_area\": \"Douglas\", \"en_nation\": \"Isle of Man\", \"latitude\": \"36.1837061\", \"longitude\": \"-95.8808246\", \"timeZone\": \"Europe/Isle_of_Man\" }, { \"city_id\": \"433\", \"ch_area\": \"道森城\", \"ch_nation\": \"加拿大\", \"en_area\": \"Dawson City\", \"en_nation\": \"Canada\", \"latitude\": \"64.0600696\", \"longitude\": \"-139.4320347\", \"timeZone\": \"America/Dawson\" }, { \"city_id\": \"431\", \"ch_area\": \"道森克里克\", \"ch_nation\": \"加拿大\", \"en_area\": \"Dawson Creek\", \"en_nation\": \"Canada\", \"latitude\": \"55.7596274\", \"longitude\": \"-120.2376623\", \"timeZone\": \"America/Dawson_Creek\" }, { \"city_id\": \"292\", \"ch_area\": \"德黑兰\", \"ch_nation\": \"伊朗\", \"en_area\": \"Tehran\", \"en_nation\": \"Iran\", \"latitude\": \"35.6891975\", \"longitude\": \"51.3889736\", \"timeZone\": \"Asia/Tehran\" }, { \"city_id\": \"362\", \"ch_area\": \"地拉那\", \"ch_nation\": \"阿尔巴尼亚\", \"en_area\": \"Tirana\", \"en_nation\": \"Albania\", \"latitude\": \"41.3275459\", \"longitude\": \"19.8186982\", \"timeZone\": \"Europe/Tirane\" }, { \"city_id\": \"298\", \"ch_area\": \"的黎波里\", \"ch_nation\": \"利比亚\", \"en_area\": \"Tripoli\", \"en_nation\": \"Libya\", \"latitude\": \"32.8872094\", \"longitude\": \"13.1913383\", \"timeZone\": \"Africa/Tripoli\" }, { \"city_id\": \"90\", \"ch_area\": \"迪拜\", \"ch_nation\": \"阿拉伯联合大公国\", \"en_area\": \"Dubai\", \"en_nation\": \"U.A.E.\", \"latitude\": \"25.2048493\", \"longitude\": \"55.2707828\", \"timeZone\": \"Asia/Dubai\" }, { \"city_id\": \"469\", \"ch_area\": \"迪戈加西亚岛\", \"ch_nation\": \"查戈斯群岛\", \"en_area\": \"Diego Garcia\", \"en_nation\": \"British Indian Ocean Territory\", \"latitude\": \"-7.3195005\", \"longitude\": \"72.4228556\", \"timeZone\": \"Indian/Chagos\" }, { \"city_id\": \"325\", \"ch_area\": \"迪凯特\", \"ch_nation\": \"美国\", \"en_area\": \"Decatur\", \"en_nation\": \"U.S.A.\", \"latitude\": \"33.7748275\", \"longitude\": \"-84.2963123\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"377\", \"ch_area\": \"迪蒙迪维尔站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Dumont-d'Urville Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-66.663045\", \"longitude\": \"140.0019472\", \"timeZone\": \"Antarctica/DumontDUrville\" }, { \"city_id\": \"86\", \"ch_area\": \"底特律\", \"ch_nation\": \"美国\", \"en_area\": \"Detroit, MI\", \"en_nation\": \"U.S.A.\", \"latitude\": \"42.331427\", \"longitude\": \"-83.0457538\", \"timeZone\": \"America/Detroit\" }, { \"city_id\": \"528\", \"ch_area\": \"帝力\", \"ch_nation\": \"东帝汶\", \"en_area\": \"Dili\", \"en_nation\": \"East Timor\", \"latitude\": \"-8.5568557\", \"longitude\": \"125.5603143\", \"timeZone\": \"Asia/Dili\" }, { \"city_id\": \"351\", \"ch_area\": \"第比利斯\", \"ch_nation\": \"格鲁吉亚\", \"en_area\": \"Tbilisi\", \"en_nation\": \"Georgia\", \"latitude\": \"41.7151377\", \"longitude\": \"44.827096\", \"timeZone\": \"Asia/Tbilisi\" }, { \"city_id\": \"496\", \"ch_area\": \"蒂华纳\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Tijuana\", \"en_nation\": \"Mexico\", \"latitude\": \"32.5149469\", \"longitude\": \"-117.0382471\", \"timeZone\": \"America/Tijuana\" }, { \"city_id\": \"295\", \"ch_area\": \"东京\", \"ch_nation\": \"日本\", \"en_area\": \"Tokyo\", \"en_nation\": \"Japan\", \"latitude\": \"35.6761919\", \"longitude\": \"139.6503106\", \"timeZone\": \"Asia/Tokyo\" }, { \"city_id\": \"91\", \"ch_area\": \"都柏林\", \"ch_nation\": \"爱尔兰\", \"en_area\": \"Dublin\", \"en_nation\": \"Ireland\", \"latitude\": \"53.3498053\", \"longitude\": \"-6.2603097\", \"timeZone\": \"Europe/Dublin\" }, { \"city_id\": \"300\", \"ch_area\": \"都灵\", \"ch_nation\": \"意大利\", \"en_area\": \"Torino\", \"en_nation\": \"Italy\", \"latitude\": \"45.0703393\", \"longitude\": \"7.686864\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"89\", \"ch_area\": \"杜阿拉\", \"ch_nation\": \"喀麦隆\", \"en_area\": \"Douala\", \"en_nation\": \"Cameroon\", \"latitude\": \"4.0510564\", \"longitude\": \"9.7678687\", \"timeZone\": \"Africa/Douala\" }, { \"city_id\": \"92\", \"ch_area\": \"杜尚别\", \"ch_nation\": \"塔吉克斯坦\", \"en_area\": \"Dushanbe\", \"en_nation\": \"Tajikistan\", \"latitude\": \"38.5597722\", \"longitude\": \"68.7870384\", \"timeZone\": \"Asia/Dushanbe\" }, { \"city_id\": \"575\", \"ch_area\": \"顿涅茨克\", \"ch_nation\": \"乌克兰\", \"en_area\": \"Donetsk\", \"en_nation\": \"Ukraine\", \"latitude\": \"48.015883\", \"longitude\": \"37.80285\", \"timeZone\": \"Europe/Kiev\" }, { \"city_id\": \"88\", \"ch_area\": \"多哈\", \"ch_nation\": \"卡塔尔\", \"en_area\": \"Doha\", \"en_nation\": \"Qatar\", \"latitude\": \"25.2854473\", \"longitude\": \"51.5310398\", \"timeZone\": \"Asia/Qatar\" }, { \"city_id\": \"296\", \"ch_area\": \"多伦多\", \"ch_nation\": \"加拿大\", \"en_area\": \"Toronto\", \"en_nation\": \"Canada\", \"latitude\": \"43.653226\", \"longitude\": \"-79.3831843\", \"timeZone\": \"America/Toronto\" }, { \"city_id\": \"206\", \"ch_area\": \"俄克拉荷马城\", \"ch_nation\": \"美国\", \"en_area\": \"Oklahoma City, OK\", \"en_nation\": \"U.S.A.\", \"latitude\": \"35.4675602\", \"longitude\": \"-97.5164276\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"208\", \"ch_area\": \"鄂木斯克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Omsk\", \"en_nation\": \"Russia\", \"latitude\": \"54.9913545\", \"longitude\": \"73.3645204\", \"timeZone\": \"Asia/Omsk\" }, { \"city_id\": \"194\", \"ch_area\": \"恩贾梅纳\", \"ch_nation\": \"乍得\", \"en_area\": \"Ndjamena\", \"en_nation\": \"Chad\", \"latitude\": \"12.1348457\", \"longitude\": \"15.0557415\", \"timeZone\": \"Africa/Ndjamena\" }, { \"city_id\": \"341\", \"ch_area\": \"法兰克福\", \"ch_nation\": \"德国\", \"en_area\": \"Frankfurt\", \"en_nation\": \"Germany\", \"latitude\": \"50.1109221\", \"longitude\": \"8.6821267\", \"timeZone\": \"Europe/Berlin\" }, { \"city_id\": \"97\", \"ch_area\": \"法兰西堡\", \"ch_nation\": \"马提尼克\", \"en_area\": \"Fort-de-France\", \"en_nation\": \"Martinique\", \"latitude\": \"14.6160647\", \"longitude\": \"-61.0587804\", \"timeZone\": \"America/Martinique\" }, { \"city_id\": \"526\", \"ch_area\": \"法兰西港\", \"ch_nation\": \"法国南部和南极地区\", \"en_area\": \"Port-aux-Français\", \"en_nation\": \"French Southern & Antarctic Lands\", \"latitude\": \"-49.3496422\", \"longitude\": \"70.218004\", \"timeZone\": \"Indian/Kerguelen\" }, { \"city_id\": \"527\", \"ch_area\": \"法勒\", \"ch_nation\": \"托克劳\", \"en_area\": \"Fale\", \"en_nation\": \"Tokelau\", \"latitude\": \"42.287204\", \"longitude\": \"-71.425426\", \"timeZone\": \"Pacific/Fakaofo\" }, { \"city_id\": \"1805\", \"ch_area\": \"法马古斯塔\", \"ch_nation\": \"塞浦路斯\", \"en_area\": \"Famagusta\", \"en_nation\": \"Cyprus\", \"latitude\": \"35.1149116\", \"longitude\": \"33.919245\", \"timeZone\": \"Asia/Famagusta\" }, { \"city_id\": \"546\", \"ch_area\": \"梵蒂冈\", \"ch_nation\": \"梵蒂冈\", \"en_area\": \"Vatican\", \"en_nation\": \"Vatican\", \"latitude\": \"41.902916\", \"longitude\": \"12.453389\", \"timeZone\": \"Europe/Vatican\" }, { \"city_id\": \"227\", \"ch_area\": \"菲尼克斯\", \"ch_nation\": \"美国\", \"en_area\": \"Phoenix, AZ\", \"en_nation\": \"U.S.A.\", \"latitude\": \"33.4483771\", \"longitude\": \"-112.0740373\", \"timeZone\": \"America/Phoenix\" }, { \"city_id\": \"225\", \"ch_area\": \"费城\", \"ch_nation\": \"美国\", \"en_area\": \"Philadelphia, PA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"39.9525839\", \"longitude\": \"-75.1652215\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"333\", \"ch_area\": \"费尔南多德诺罗尼亚\", \"ch_nation\": \"巴西\", \"en_area\": \"Fernando de Noronha\", \"en_nation\": \"Brazil\", \"latitude\": \"-3.8566736\", \"longitude\": \"-32.4295165\", \"timeZone\": \"America/Noronha\" }, { \"city_id\": \"511\", \"ch_area\": \"丰沙尔\", \"ch_nation\": \"马德拉\", \"en_area\": \"Funchal\", \"en_nation\": \"Madeira\", \"latitude\": \"32.6669328\", \"longitude\": \"-16.9240554\", \"timeZone\": \"Atlantic/Madeira\" }, { \"city_id\": \"99\", \"ch_area\": \"弗里敦\", \"ch_nation\": \"塞拉利昂\", \"en_area\": \"Freetown\", \"en_nation\": \"Sierra Leone\", \"latitude\": \"41.7619708\", \"longitude\": \"-71.014118\", \"timeZone\": \"Africa/Freetown\" }, { \"city_id\": \"96\", \"ch_area\": \"弗里蒙特\", \"ch_nation\": \"美国\", \"en_area\": \"Fremont\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.5485396\", \"longitude\": \"-121.988583\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"312\", \"ch_area\": \"伏尔加格勒\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Volgograd\", \"en_nation\": \"Russia\", \"latitude\": \"48.708048\", \"longitude\": \"44.5133035\", \"timeZone\": \"Europe/Moscow\" }, { \"city_id\": \"95\", \"ch_area\": \"佛罗伦萨\", \"ch_nation\": \"意大利\", \"en_area\": \"Florence\", \"en_nation\": \"Italy\", \"latitude\": \"43.7695604\", \"longitude\": \"11.2558136\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"311\", \"ch_area\": \"符拉迪沃斯托克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Vladivostok\", \"en_nation\": \"Russia\", \"latitude\": \"43.1332484\", \"longitude\": \"131.9112975\", \"timeZone\": \"Asia/Vladivostok\" }, { \"city_id\": \"98\", \"ch_area\": \"福斯特城\", \"ch_nation\": \"美国\", \"en_area\": \"Foster City\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.5570725\", \"longitude\": \"-122.2702091\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"403\", \"ch_area\": \"福塔莱萨\", \"ch_nation\": \"巴西\", \"en_area\": \"Fortaleza\", \"en_nation\": \"Brazil\", \"latitude\": \"-3.7327203\", \"longitude\": \"-38.5270134\", \"timeZone\": \"America/Fortaleza\" }, { \"city_id\": \"111\", \"ch_area\": \"复活岛\", \"ch_nation\": \"智利\", \"en_area\": \"Easter Island\", \"en_nation\": \"Chile\", \"latitude\": \"-27.112723\", \"longitude\": \"-109.3496865\", \"timeZone\": \"Pacific/Easter\" }, { \"city_id\": \"74\", \"ch_area\": \"哥本哈根\", \"ch_nation\": \"丹麦\", \"en_area\": \"Copenhagen\", \"en_nation\": \"Denmark\", \"latitude\": \"55.6760968\", \"longitude\": \"12.5683372\", \"timeZone\": \"Europe/Copenhagen\" }, { \"city_id\": \"554\", \"ch_area\": \"哥德堡\", \"ch_nation\": \"瑞典\", \"en_area\": \"Gothenburg\", \"en_nation\": \"Sweden\", \"latitude\": \"57.70887\", \"longitude\": \"11.97456\", \"timeZone\": \"Europe/Stockholm\" }, { \"city_id\": \"72\", \"ch_area\": \"哥伦布\", \"ch_nation\": \"美国\", \"en_area\": \"Columbus, Ohio\", \"en_nation\": \"U.S.A.\", \"latitude\": \"39.9611755\", \"longitude\": \"-82.9987942\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"414\", \"ch_area\": \"格莱斯贝\", \"ch_nation\": \"加拿大\", \"en_area\": \"Glace Bay\", \"en_nation\": \"Canada\", \"latitude\": \"46.1969191\", \"longitude\": \"-59.9570044\", \"timeZone\": \"America/Glace_Bay\" }, { \"city_id\": \"560\", \"ch_area\": \"格林湾\", \"ch_nation\": \"美国\", \"en_area\": \"Green Bay\", \"en_nation\": \"U.S.A.\", \"latitude\": \"44.5133188\", \"longitude\": \"-88.0132958\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"105\", \"ch_area\": \"葛利特维根\", \"ch_nation\": \"南乔治亚岛\", \"en_area\": \"Grytviken\", \"en_nation\": \"South Georgia\", \"latitude\": \"-54.281149\", \"longitude\": \"-36.5087385\", \"timeZone\": \"Atlantic/South_Georgia\" }, { \"city_id\": \"498\", \"ch_area\": \"古晋\", \"ch_nation\": \"马来西亚\", \"en_area\": \"Kuching\", \"en_nation\": \"Malaysia\", \"latitude\": \"1.553504\", \"longitude\": \"110.3592927\", \"timeZone\": \"Asia/Kuching\" }, { \"city_id\": \"108\", \"ch_area\": \"古斯塔维亚\", \"ch_nation\": \"圣巴泰勒米岛\", \"en_area\": \"Gustavia\", \"en_nation\": \"Saint Barthelemy\", \"latitude\": \"17.8964345\", \"longitude\": \"-62.852201\", \"timeZone\": \"America/St_Barthelemy\" }, { \"city_id\": \"565\", \"ch_area\": \"瓜达拉哈拉\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Guadalajara\", \"en_nation\": \"Mexico\", \"latitude\": \"20.6596988\", \"longitude\": \"-103.3496092\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"566\", \"ch_area\": \"瓜纳华托\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Guanajuato\", \"en_nation\": \"Mexico\", \"latitude\": \"21.0190145\", \"longitude\": \"-101.2573586\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"445\", \"ch_area\": \"瓜亚基尔\", \"ch_nation\": \"厄瓜多尔\", \"en_area\": \"Guayaquil\", \"en_nation\": \"Ecuador\", \"latitude\": \"-2.1894128\", \"longitude\": \"-79.8890662\", \"timeZone\": \"America/Guayaquil\" }, { \"city_id\": \"106\", \"ch_area\": \"关岛\", \"ch_nation\": \"关岛\", \"en_area\": \"Guam\", \"en_nation\": \"Guam\", \"latitude\": \"13.444304\", \"longitude\": \"144.793731\", \"timeZone\": \"Pacific/Guam\" }, { \"city_id\": \"58\", \"ch_area\": \"广州\", \"ch_nation\": \"中国\", \"en_area\": \"Canton\", \"en_nation\": \"China\", \"latitude\": \"44.5956163\", \"longitude\": \"-75.1690942\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"100\", \"ch_area\": \"哈博罗内\", \"ch_nation\": \"博茨瓦纳\", \"en_area\": \"Gaborone\", \"en_nation\": \"Botswana\", \"latitude\": \"-24.6282079\", \"longitude\": \"25.9231471\", \"timeZone\": \"Africa/Gaborone\" }, { \"city_id\": \"437\", \"ch_area\": \"哈尔滨\", \"ch_nation\": \"中国\", \"en_area\": \"Harbin\", \"en_nation\": \"China\", \"latitude\": \"45.803775\", \"longitude\": \"126.534967\", \"timeZone\": \"Asia/Harbin\" }, { \"city_id\": \"113\", \"ch_area\": \"哈拉雷\", \"ch_nation\": \"津巴布韦\", \"en_area\": \"Harare\", \"en_nation\": \"Zimbabwe\", \"latitude\": \"-17.8216288\", \"longitude\": \"31.0492259\", \"timeZone\": \"Africa/Harare\" }, { \"city_id\": \"109\", \"ch_area\": \"哈利法克斯\", \"ch_nation\": \"加拿大\", \"en_area\": \"Halifax\", \"en_nation\": \"Canada\", \"latitude\": \"44.6487635\", \"longitude\": \"-63.5752387\", \"timeZone\": \"America/Halifax\" }, { \"city_id\": \"114\", \"ch_area\": \"哈瓦那\", \"ch_nation\": \"古巴\", \"en_area\": \"Havana\", \"en_nation\": \"Cuba\", \"latitude\": \"23.1135925\", \"longitude\": \"-82.3665956\", \"timeZone\": \"America/Havana\" }, { \"city_id\": \"110\", \"ch_area\": \"汉堡\", \"ch_nation\": \"德国\", \"en_area\": \"Hamburg\", \"en_nation\": \"Germany\", \"latitude\": \"53.5510846\", \"longitude\": \"9.9936819\", \"timeZone\": \"Europe/Berlin\" }, { \"city_id\": \"360\", \"ch_area\": \"汉密尔顿\", \"ch_nation\": \"百慕大\", \"en_area\": \"Hamilton\", \"en_nation\": \"Bermuda\", \"latitude\": \"37.1929578\", \"longitude\": \"-95.7175467\", \"timeZone\": \"Atlantic/Bermuda\" }, { \"city_id\": \"391\", \"ch_area\": \"豪勋爵岛\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Lord Howe Island\", \"en_nation\": \"Australia\", \"latitude\": \"-31.5553263\", \"longitude\": \"159.0821211\", \"timeZone\": \"Australia/Lord_Howe\" }, { \"city_id\": \"458\", \"ch_area\": \"合肥\", \"ch_nation\": \"中国\", \"en_area\": \"Hefei\", \"en_nation\": \"China\", \"latitude\": \"31.820591\", \"longitude\": \"117.227219\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"112\", \"ch_area\": \"河内\", \"ch_nation\": \"越南\", \"en_area\": \"Hanoi\", \"en_nation\": \"Vietnam\", \"latitude\": \"21.0277644\", \"longitude\": \"105.8341598\", \"timeZone\": \"Asia/Saigon\" }, { \"city_id\": \"116\", \"ch_area\": \"赫尔辛基\", \"ch_nation\": \"芬兰\", \"en_area\": \"Helsinki\", \"en_nation\": \"Finland\", \"latitude\": \"60.1698557\", \"longitude\": \"24.9383791\", \"timeZone\": \"Europe/Helsinki\" }, { \"city_id\": \"241\", \"ch_area\": \"红木城\", \"ch_nation\": \"美国\", \"en_area\": \"Redwood City\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.4847955\", \"longitude\": \"-122.228141\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"293\", \"ch_area\": \"胡志明市\", \"ch_nation\": \"越南\", \"en_area\": \"Ho Chi Minh City\", \"en_nation\": \"Vietnam\", \"latitude\": \"10.746903\", \"longitude\": \"106.676292\", \"timeZone\": \"Asia/Saigon\" }, { \"city_id\": \"563\", \"ch_area\": \"华雷斯城\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Ciudad Juárez\", \"en_nation\": \"Mexico\", \"latitude\": \"31.6903638\", \"longitude\": \"-106.4245478\", \"timeZone\": \"America/Chihuahua\" }, { \"city_id\": \"314\", \"ch_area\": \"华沙\", \"ch_nation\": \"波兰\", \"en_area\": \"Warsaw\", \"en_nation\": \"Poland\", \"latitude\": \"52.2296756\", \"longitude\": \"21.0122287\", \"timeZone\": \"Europe/Warsaw\" }, { \"city_id\": \"315\", \"ch_area\": \"华盛顿特区\", \"ch_nation\": \"美国\", \"en_area\": \"Washington, D.C.\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.9071923\", \"longitude\": \"-77.0368707\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"354\", \"ch_area\": \"怀唐伊\", \"ch_nation\": \"新西兰\", \"en_area\": \"Waitangi\", \"en_nation\": \"New Zealand\", \"latitude\": \"-35.2683273\", \"longitude\": \"174.0801182\", \"timeZone\": \"Pacific/Chatham\" }, { \"city_id\": \"432\", \"ch_area\": \"怀特霍斯\", \"ch_nation\": \"加拿大\", \"en_area\": \"Whitehorse\", \"en_nation\": \"Canada\", \"latitude\": \"60.7211871\", \"longitude\": \"-135.0568448\", \"timeZone\": \"America/Whitehorse\" }, { \"city_id\": \"316\", \"ch_area\": \"惠灵顿\", \"ch_nation\": \"新西兰\", \"en_area\": \"Wellington\", \"en_nation\": \"New Zealand\", \"latitude\": \"37.2653004\", \"longitude\": \"-97.3717118\", \"timeZone\": \"Pacific/Auckland\" }, { \"city_id\": \"117\", \"ch_area\": \"霍巴特\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Hobart\", \"en_nation\": \"Australia\", \"latitude\": \"37.6055325\", \"longitude\": \"-97.3222068\", \"timeZone\": \"Australia/Hobart\" }, { \"city_id\": \"519\", \"ch_area\": \"霍尼亚拉\", \"ch_nation\": \"所罗门群岛\", \"en_area\": \"Honiara\", \"en_nation\": \"Solomon Islands\", \"latitude\": \"-9.4456381\", \"longitude\": \"159.9728999\", \"timeZone\": \"Pacific/Guadalcanal\" }, { \"city_id\": \"237\", \"ch_area\": \"基多\", \"ch_nation\": \"厄瓜多尔\", \"en_area\": \"Quito\", \"en_nation\": \"Ecuador\", \"latitude\": \"-0.1806532\", \"longitude\": \"-78.4678382\", \"timeZone\": \"America/Guayaquil\" }, { \"city_id\": \"133\", \"ch_area\": \"基辅\", \"ch_nation\": \"乌克兰\", \"en_area\": \"Kiev\", \"en_nation\": \"Ukraine\", \"latitude\": \"50.4501\", \"longitude\": \"30.5234\", \"timeZone\": \"Europe/Kiev\" }, { \"city_id\": \"518\", \"ch_area\": \"基加利\", \"ch_nation\": \"卢旺达\", \"en_area\": \"Kigali\", \"en_nation\": \"Rwanda\", \"latitude\": \"-1.9440727\", \"longitude\": \"30.0618851\", \"timeZone\": \"Africa/Kigali\" }, { \"city_id\": \"68\", \"ch_area\": \"基希纳乌\", \"ch_nation\": \"摩尔多瓦\", \"en_area\": \"Chisinau\", \"en_nation\": \"Moldova\", \"latitude\": \"47.0104529\", \"longitude\": \"28.8638102\", \"timeZone\": \"Europe/Chisinau\" }, { \"city_id\": \"87\", \"ch_area\": \"吉布提\", \"ch_nation\": \"吉布提\", \"en_area\": \"Djibouti\", \"en_nation\": \"Djibouti\", \"latitude\": \"11.5720765\", \"longitude\": \"43.1456475\", \"timeZone\": \"Africa/Djibouti\" }, { \"city_id\": \"139\", \"ch_area\": \"吉隆坡\", \"ch_nation\": \"马来西亚\", \"en_area\": \"Kuala Lumpur\", \"en_nation\": \"Malaysia\", \"latitude\": \"3.139003\", \"longitude\": \"101.686855\", \"timeZone\": \"Asia/Kuala_Lumpur\" }, { \"city_id\": \"131\", \"ch_area\": \"加德满都\", \"ch_nation\": \"尼泊尔\", \"en_area\": \"Kathmandu\", \"en_nation\": \"Nepal\", \"latitude\": \"27.7172453\", \"longitude\": \"85.3239605\", \"timeZone\": \"Asia/Katmandu\" }, { \"city_id\": \"61\", \"ch_area\": \"加的夫\", \"ch_nation\": \"威尔士\", \"en_area\": \"Cardiff\", \"en_nation\": \"Wales U.K.\", \"latitude\": \"51.481581\", \"longitude\": \"-3.17909\", \"timeZone\": \"Europe/London\" }, { \"city_id\": \"137\", \"ch_area\": \"加尔各答\", \"ch_nation\": \"印度\", \"en_area\": \"Kolkata\", \"en_nation\": \"India\", \"latitude\": \"22.572646\", \"longitude\": \"88.363895\", \"timeZone\": \"Asia/Kolkata\" }, { \"city_id\": \"60\", \"ch_area\": \"加拉加斯\", \"ch_nation\": \"委内瑞拉\", \"en_area\": \"Caracas\", \"en_nation\": \"Venezuela\", \"latitude\": \"10.4805937\", \"longitude\": \"-66.9036063\", \"timeZone\": \"America/Caracas\" }, { \"city_id\": \"101\", \"ch_area\": \"加拉帕戈斯群岛\", \"ch_nation\": \"厄瓜多尔\", \"en_area\": \"Galápagos Islands\", \"en_nation\": \"Ecuador\", \"latitude\": \"-0.383106\", \"longitude\": \"-90.4233344\", \"timeZone\": \"Pacific/Galapagos\" }, { \"city_id\": \"129\", \"ch_area\": \"加里宁格勒\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Kaliningrad\", \"en_nation\": \"Russia\", \"latitude\": \"54.7104264\", \"longitude\": \"20.4522144\", \"timeZone\": \"Europe/Kaliningrad\" }, { \"city_id\": \"56\", \"ch_area\": \"加那利群岛\", \"ch_nation\": \"西班牙\", \"en_area\": \"Canary Islands\", \"en_nation\": \"Spain\", \"latitude\": \"28.2915637\", \"longitude\": \"-16.6291304\", \"timeZone\": \"Atlantic/Canary\" }, { \"city_id\": \"509\", \"ch_area\": \"加沙\", \"ch_nation\": \"巴勒斯坦领土\", \"en_area\": \"Gaza\", \"en_nation\": \"Palestinian Territories\", \"latitude\": \"31.3546763\", \"longitude\": \"34.3088255\", \"timeZone\": \"Asia/Gaza\" }, { \"city_id\": \"428\", \"ch_area\": \"剑桥湾\", \"ch_nation\": \"加拿大\", \"en_area\": \"Cambridge Bay\", \"en_nation\": \"Canada\", \"latitude\": \"69.1168641\", \"longitude\": \"-105.0596814\", \"timeZone\": \"America/Cambridge_Bay\" }, { \"city_id\": \"226\", \"ch_area\": \"金边\", \"ch_nation\": \"柬埔寨\", \"en_area\": \"Phnom Penh\", \"en_nation\": \"Cambodia\", \"latitude\": \"11.5563738\", \"longitude\": \"104.9282099\", \"timeZone\": \"Asia/Phnom_Penh\" }, { \"city_id\": \"135\", \"ch_area\": \"金沙萨\", \"ch_nation\": \"刚果民主共和国\", \"en_area\": \"Kinshasa\", \"en_nation\": \"Democratic Republic of the Congo\", \"latitude\": \"-4.4419311\", \"longitude\": \"15.2662931\", \"timeZone\": \"Africa/Kinshasa\" }, { \"city_id\": \"547\", \"ch_area\": \"金斯敦\", \"ch_nation\": \"圣文森特和格林纳丁斯\", \"en_area\": \"Kingstown\", \"en_nation\": \"Saint Vincent and the Grenadines\", \"latitude\": \"13.1600249\", \"longitude\": \"-61.2248157\", \"timeZone\": \"America/St_Vincent\" }, { \"city_id\": \"134\", \"ch_area\": \"金斯顿\", \"ch_nation\": \"牙买加\", \"en_area\": \"Kingston\", \"en_nation\": \"Jamaica\", \"latitude\": \"35.8809084\", \"longitude\": \"-84.5085447\", \"timeZone\": \"America/Jamaica\" }, { \"city_id\": \"499\", \"ch_area\": \"金斯顿\", \"ch_nation\": \"诺福克岛\", \"en_area\": \"Kingston\", \"en_nation\": \"Norfolk Island\", \"latitude\": \"35.8809084\", \"longitude\": \"-84.5085447\", \"timeZone\": \"Pacific/Norfolk\" }, { \"city_id\": \"255\", \"ch_area\": \"旧金山\", \"ch_nation\": \"美国\", \"en_area\": \"San Francisco, CA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.7749295\", \"longitude\": \"-122.4194155\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"128\", \"ch_area\": \"喀布尔\", \"ch_nation\": \"阿富汗\", \"en_area\": \"Kabul\", \"en_nation\": \"Afghanistan\", \"latitude\": \"34.5553494\", \"longitude\": \"69.207486\", \"timeZone\": \"Asia/Kabul\" }, { \"city_id\": \"440\", \"ch_area\": \"喀什\", \"ch_nation\": \"中国\", \"en_area\": \"Kashgar\", \"en_nation\": \"China\", \"latitude\": \"39.467685\", \"longitude\": \"75.99379\", \"timeZone\": \"Asia/Kashgar\" }, { \"city_id\": \"132\", \"ch_area\": \"喀土穆\", \"ch_nation\": \"苏丹\", \"en_area\": \"Khartoum\", \"en_nation\": \"Sudan\", \"latitude\": \"15.5006544\", \"longitude\": \"32.5598994\", \"timeZone\": \"Africa/Khartoum\" }, { \"city_id\": \"55\", \"ch_area\": \"卡尔加里\", \"ch_nation\": \"加拿大\", \"en_area\": \"Calgary\", \"en_nation\": \"Canada\", \"latitude\": \"51.0447331\", \"longitude\": \"-114.0718831\", \"timeZone\": \"America/Edmonton\" }, { \"city_id\": \"506\", \"ch_area\": \"卡拉奇\", \"ch_nation\": \"巴基斯坦\", \"en_area\": \"Karachi\", \"en_nation\": \"Pakistan\", \"latitude\": \"24.8607343\", \"longitude\": \"67.0011364\", \"timeZone\": \"Asia/Karachi\" }, { \"city_id\": \"576\", \"ch_area\": \"卡萨布兰卡\", \"ch_nation\": \"摩洛哥\", \"en_area\": \"Casablanca\", \"en_nation\": \"Morocco\", \"latitude\": \"35.1359166\", \"longitude\": \"-78.9690787\", \"timeZone\": \"Africa/Casablanca\" }, { \"city_id\": \"481\", \"ch_area\": \"卡斯特里\", \"ch_nation\": \"圣卢西亚\", \"en_area\": \"Castries\", \"en_nation\": \"Saint Lucia\", \"latitude\": \"14.0101094\", \"longitude\": \"-60.9874687\", \"timeZone\": \"America/St_Lucia\" }, { \"city_id\": \"384\", \"ch_area\": \"卡塔马卡\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Catamarca\", \"en_nation\": \"Argentina\", \"latitude\": \"-28.469581\", \"longitude\": \"-65.7795441\", \"timeZone\": \"America/Argentina/Catamarca\" }, { \"city_id\": \"62\", \"ch_area\": \"卡坦扎罗\", \"ch_nation\": \"意大利\", \"en_area\": \"Catanzaro\", \"en_nation\": \"Italy\", \"latitude\": \"38.9097919\", \"longitude\": \"16.5876516\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"63\", \"ch_area\": \"卡宴\", \"ch_nation\": \"法属圭亚那\", \"en_area\": \"Cayenne\", \"en_nation\": \"French Guiana\", \"latitude\": \"33.5171553\", \"longitude\": \"-86.7883313\", \"timeZone\": \"America/Cayenne\" }, { \"city_id\": \"54\", \"ch_area\": \"开罗\", \"ch_nation\": \"埃及\", \"en_area\": \"Cairo\", \"en_nation\": \"Egypt\", \"latitude\": \"30.0444196\", \"longitude\": \"31.2357116\", \"timeZone\": \"Africa/Cairo\" }, { \"city_id\": \"59\", \"ch_area\": \"开普敦\", \"ch_nation\": \"南非\", \"en_area\": \"Cape Town\", \"en_nation\": \"South Africa\", \"latitude\": \"-33.9248685\", \"longitude\": \"18.4240553\", \"timeZone\": \"Africa/Johannesburg\" }, { \"city_id\": \"375\", \"ch_area\": \"凯西站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Casey Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-66.2821342\", \"longitude\": \"110.5285466\", \"timeZone\": \"Antarctica/Casey\" }, { \"city_id\": \"516\", \"ch_area\": \"堪察加彼得罗巴甫洛夫斯克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Petropavlovsk-Kamchatsky\", \"en_nation\": \"Russia\", \"latitude\": \"53.0583997\", \"longitude\": \"158.6320734\", \"timeZone\": \"Asia/Kamchatka\" }, { \"city_id\": \"57\", \"ch_area\": \"堪培拉\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Canberra\", \"en_nation\": \"Australia\", \"latitude\": \"-35.2809368\", \"longitude\": \"149.1300092\", \"timeZone\": \"Australia/Canberra\" }, { \"city_id\": \"472\", \"ch_area\": \"坎顿岛\", \"ch_nation\": \"基里巴斯\", \"en_area\": \"Kanton Island\", \"en_nation\": \"Kiribati\", \"latitude\": \"-2.8039843\", \"longitude\": \"-171.6432353\", \"timeZone\": \"Pacific/Enderbury\" }, { \"city_id\": \"490\", \"ch_area\": \"坎昆\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Cancun\", \"en_nation\": \"Mexico\", \"latitude\": \"21.161908\", \"longitude\": \"-86.8515279\", \"timeZone\": \"America/Cancun\" }, { \"city_id\": \"130\", \"ch_area\": \"坎帕拉\", \"ch_nation\": \"乌干达\", \"en_area\": \"Kampala\", \"en_nation\": \"Uganda\", \"latitude\": \"0.3475964\", \"longitude\": \"32.5825197\", \"timeZone\": \"Africa/Kampala\" }, { \"city_id\": \"392\", \"ch_area\": \"柯里\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Currie\", \"en_nation\": \"Australia\", \"latitude\": \"30.4331529\", \"longitude\": \"-91.1137724\", \"timeZone\": \"Australia/Currie\" }, { \"city_id\": \"525\", \"ch_area\": \"科伯恩城\", \"ch_nation\": \"特克斯和凯科斯群岛\", \"en_area\": \"Cockburn Town\", \"en_nation\": \"Turks and Caicos Islands\", \"latitude\": \"21.4674584\", \"longitude\": \"-71.1389101\", \"timeZone\": \"America/Grand_Turk\" }, { \"city_id\": \"485\", \"ch_area\": \"科布多\", \"ch_nation\": \"蒙古\", \"en_area\": \"Hovd\", \"en_nation\": \"Mongolia\", \"latitude\": \"47.9795218\", \"longitude\": \"91.634756\", \"timeZone\": \"Asia/Hovd\" }, { \"city_id\": \"380\", \"ch_area\": \"科尔多瓦\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Cordoba\", \"en_nation\": \"Argentina\", \"latitude\": \"37.8881751\", \"longitude\": \"-4.7793835\", \"timeZone\": \"America/Argentina/Cordoba\" }, { \"city_id\": \"76\", \"ch_area\": \"科克\", \"ch_nation\": \"爱尔兰\", \"en_area\": \"Cork\", \"en_nation\": \"Ireland\", \"latitude\": \"38.9418991\", \"longitude\": \"-95.2564118\", \"timeZone\": \"Europe/Dublin\" }, { \"city_id\": \"71\", \"ch_area\": \"科伦坡\", \"ch_nation\": \"斯里兰卡\", \"en_area\": \"Colombo\", \"en_nation\": \"Sri Lanka\", \"latitude\": \"6.9270786\", \"longitude\": \"79.861243\", \"timeZone\": \"Asia/Colombo\" }, { \"city_id\": \"513\", \"ch_area\": \"科罗尔\", \"ch_nation\": \"帕劳\", \"en_area\": \"Koror\", \"en_nation\": \"Palau\", \"latitude\": \"7.3410628\", \"longitude\": \"134.4771596\", \"timeZone\": \"Pacific/Palau\" }, { \"city_id\": \"73\", \"ch_area\": \"科纳克里\", \"ch_nation\": \"几内亚\", \"en_area\": \"Conakry\", \"en_nation\": \"Guinea\", \"latitude\": \"9.6411855\", \"longitude\": \"-13.5784012\", \"timeZone\": \"Africa/Conakry\" }, { \"city_id\": \"451\", \"ch_area\": \"科斯雷\", \"ch_nation\": \"密克罗尼西亚\", \"en_area\": \"Kosrae\", \"en_nation\": \"Micronesia\", \"latitude\": \"5.2991829\", \"longitude\": \"162.9696779\", \"timeZone\": \"Pacific/Kosrae\" }, { \"city_id\": \"140\", \"ch_area\": \"科威特\", \"ch_nation\": \"科威特\", \"en_area\": \"Kuwait\", \"en_nation\": \"Kuwait\", \"latitude\": \"29.31166\", \"longitude\": \"47.481766\", \"timeZone\": \"Asia/Kuwait\" }, { \"city_id\": \"361\", \"ch_area\": \"克拉科夫\", \"ch_nation\": \"波兰\", \"en_area\": \"Kraków\", \"en_nation\": \"Poland\", \"latitude\": \"50.0646501\", \"longitude\": \"19.9449799\", \"timeZone\": \"Europe/Warsaw\" }, { \"city_id\": \"138\", \"ch_area\": \"克拉斯诺亚尔斯克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Krasnoyarsk\", \"en_nation\": \"Russia\", \"latitude\": \"56.0152834\", \"longitude\": \"92.8932476\", \"timeZone\": \"Asia/Krasnoyarsk\" }, { \"city_id\": \"557\", \"ch_area\": \"克雷斯顿\", \"ch_nation\": \"加拿大\", \"en_area\": \"Creston\", \"en_nation\": \"Canada\", \"latitude\": \"41.0586002\", \"longitude\": \"-94.3613474\", \"timeZone\": \"America/Creston\" }, { \"city_id\": \"570\", \"ch_area\": \"克雷塔罗\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Querétaro\", \"en_nation\": \"Mexico\", \"latitude\": \"20.5887932\", \"longitude\": \"-100.3898881\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"549\", \"ch_area\": \"克里斯琴斯特德\", \"ch_nation\": \"美属维尔京群岛\", \"en_area\": \"Christiansted\", \"en_nation\": \"U.S. Virgin Islands\", \"latitude\": \"17.7466397\", \"longitude\": \"-64.7031977\", \"timeZone\": \"America/Virgin\" }, { \"city_id\": \"70\", \"ch_area\": \"克利夫兰\", \"ch_nation\": \"美国\", \"en_area\": \"Cleveland\", \"en_nation\": \"U.S.A.\", \"latitude\": \"41.49932\", \"longitude\": \"-81.6943605\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"77\", \"ch_area\": \"克罗托内\", \"ch_nation\": \"意大利\", \"en_area\": \"Crotone\", \"en_nation\": \"Italy\", \"latitude\": \"39.0807932\", \"longitude\": \"17.1271102\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"477\", \"ch_area\": \"克孜勒奥尔达\", \"ch_nation\": \"哈萨克斯坦\", \"en_area\": \"Kyzylorda\", \"en_nation\": \"Kazakhstan\", \"latitude\": \"44.8488314\", \"longitude\": \"65.4822686\", \"timeZone\": \"Asia/Qyzylorda\" }, { \"city_id\": \"564\", \"ch_area\": \"库埃纳瓦卡\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Cuernavaca\", \"en_nation\": \"Mexico\", \"latitude\": \"18.9242095\", \"longitude\": \"-99.2215659\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"75\", \"ch_area\": \"库比提诺\", \"ch_nation\": \"美国\", \"en_area\": \"Cupertino, California\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.3229978\", \"longitude\": \"-122.0321823\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"407\", \"ch_area\": \"库亚巴\", \"ch_nation\": \"巴西\", \"en_area\": \"Cuiaba\", \"en_nation\": \"Brazil\", \"latitude\": \"-15.5954142\", \"longitude\": \"-56.0925824\", \"timeZone\": \"America/Cuiaba\" }, { \"city_id\": \"484\", \"ch_area\": \"夸贾林环礁\", \"ch_nation\": \"马绍尔群岛\", \"en_area\": \"Kwajalein Atoll\", \"en_nation\": \"Marshall Islands\", \"latitude\": \"8.716667\", \"longitude\": \"167.733333\", \"timeZone\": \"Pacific/Kwajalein\" }, { \"city_id\": \"416\", \"ch_area\": \"快乐谷 - 鹅湾\", \"ch_nation\": \"加拿大\", \"en_area\": \"Happy Valley-Goose Bay\", \"en_nation\": \"Canada\", \"latitude\": \"53.3016826\", \"longitude\": \"-60.3260842\", \"timeZone\": \"America/Goose_Bay\" }, { \"city_id\": \"558\", \"ch_area\": \"魁北克市\", \"ch_nation\": \"加拿大\", \"en_area\": \"Quebec City\", \"en_nation\": \"Canada\", \"latitude\": \"46.8138783\", \"longitude\": \"-71.2079809\", \"timeZone\": \"America/Montreal\" }, { \"city_id\": \"467\", \"ch_area\": \"坤甸\", \"ch_nation\": \"印度尼西亚\", \"en_area\": \"Pontianak\", \"en_nation\": \"Indonesia\", \"latitude\": \"-0.0263303\", \"longitude\": \"109.3425039\", \"timeZone\": \"Asia/Pontianak\" }, { \"city_id\": \"141\", \"ch_area\": \"拉巴斯\", \"ch_nation\": \"玻利维亚\", \"en_area\": \"La Paz\", \"en_nation\": \"Bolivia\", \"latitude\": \"-16.489689\", \"longitude\": \"-68.1192936\", \"timeZone\": \"America/La_Paz\" }, { \"city_id\": \"238\", \"ch_area\": \"拉巴特\", \"ch_nation\": \"摩洛哥\", \"en_area\": \"Rabat\", \"en_nation\": \"Morocco\", \"latitude\": \"33.9715904\", \"longitude\": \"-6.8498129\", \"timeZone\": \"Africa/Casablanca\" }, { \"city_id\": \"142\", \"ch_area\": \"拉各斯\", \"ch_nation\": \"尼日利亚\", \"en_area\": \"Lagos\", \"en_nation\": \"Nigeria\", \"latitude\": \"6.5243793\", \"longitude\": \"3.3792057\", \"timeZone\": \"Africa/Lagos\" }, { \"city_id\": \"385\", \"ch_area\": \"拉里奥哈\", \"ch_nation\": \"阿根廷\", \"en_area\": \"La Rioja\", \"en_nation\": \"Argentina\", \"latitude\": \"42.2870733\", \"longitude\": \"-2.539603\", \"timeZone\": \"America/Argentina/La_Rioja\" }, { \"city_id\": \"436\", \"ch_area\": \"拉罗汤加岛\", \"ch_nation\": \"库克群岛\", \"en_area\": \"Rarotonga\", \"en_nation\": \"Cook Islands\", \"latitude\": \"-21.2292371\", \"longitude\": \"-159.7763491\", \"timeZone\": \"Pacific/Rarotonga\" }, { \"city_id\": \"459\", \"ch_area\": \"拉萨\", \"ch_nation\": \"中国\", \"en_area\": \"Lhasa\", \"en_nation\": \"China\", \"latitude\": \"29.654838\", \"longitude\": \"91.140552\", \"timeZone\": \"Asia/Chongqing\" }, { \"city_id\": \"143\", \"ch_area\": \"拉斯维加斯\", \"ch_nation\": \"美国\", \"en_area\": \"Las Vegas, NV\", \"en_nation\": \"U.S.A.\", \"latitude\": \"36.1699412\", \"longitude\": \"-115.1398296\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"567\", \"ch_area\": \"莱昂\", \"ch_nation\": \"墨西哥\", \"en_area\": \"León\", \"en_nation\": \"Mexico\", \"latitude\": \"42.5987263\", \"longitude\": \"-5.5670959\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"424\", \"ch_area\": \"兰金因雷特\", \"ch_nation\": \"加拿大\", \"en_area\": \"Rankin Inlet\", \"en_nation\": \"Canada\", \"latitude\": \"62.808375\", \"longitude\": \"-92.0852853\", \"timeZone\": \"America/Rankin_Inlet\" }, { \"city_id\": \"521\", \"ch_area\": \"朗伊尔城\", \"ch_nation\": \"挪威\", \"en_area\": \"Longyearbyen\", \"en_nation\": \"Norway\", \"latitude\": \"78.2231722\", \"longitude\": \"15.6267229\", \"timeZone\": \"Arctic/Longyearbyen\" }, { \"city_id\": \"243\", \"ch_area\": \"雷克雅未克\", \"ch_nation\": \"冰岛\", \"en_area\": \"Reykjavik\", \"en_nation\": \"Iceland\", \"latitude\": \"64.146582\", \"longitude\": \"-21.9426354\", \"timeZone\": \"Atlantic/Reykjavik\" }, { \"city_id\": \"422\", \"ch_area\": \"雷索卢特\", \"ch_nation\": \"加拿大\", \"en_area\": \"Resolute\", \"en_nation\": \"Canada\", \"latitude\": \"39.5845123\", \"longitude\": \"-104.8848008\", \"timeZone\": \"America/Resolute\" }, { \"city_id\": \"240\", \"ch_area\": \"累西腓\", \"ch_nation\": \"巴西\", \"en_area\": \"Recife\", \"en_nation\": \"Brazil\", \"latitude\": \"-8.0577401\", \"longitude\": \"-34.8829629\", \"timeZone\": \"America/Recife\" }, { \"city_id\": \"349\", \"ch_area\": \"里昂\", \"ch_nation\": \"法国\", \"en_area\": \"Lyon\", \"en_nation\": \"France\", \"latitude\": \"45.764043\", \"longitude\": \"4.835659\", \"timeZone\": \"Europe/Paris\" }, { \"city_id\": \"332\", \"ch_area\": \"里奥布朗库\", \"ch_nation\": \"巴西\", \"en_area\": \"Rio Branco\", \"en_nation\": \"Brazil\", \"latitude\": \"-9.9740282\", \"longitude\": \"-67.8098124\", \"timeZone\": \"America/La_Paz\" }, { \"city_id\": \"389\", \"ch_area\": \"里奥加耶戈斯\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Rio Gallegos\", \"en_nation\": \"Argentina\", \"latitude\": \"-51.6230485\", \"longitude\": \"-69.2168291\", \"timeZone\": \"America/Argentina/Rio_Gallegos\" }, { \"city_id\": \"504\", \"ch_area\": \"里基提亚\", \"ch_nation\": \"法属波利尼西亚\", \"en_area\": \"Rikitea\", \"en_nation\": \"French Polynesia\", \"latitude\": \"-23.1223034\", \"longitude\": \"-134.9691543\", \"timeZone\": \"Pacific/Gambier\" }, { \"city_id\": \"244\", \"ch_area\": \"里加\", \"ch_nation\": \"拉脱维亚\", \"en_area\": \"Riga\", \"en_nation\": \"Latvia\", \"latitude\": \"56.9496487\", \"longitude\": \"24.1051865\", \"timeZone\": \"Europe/Riga\" }, { \"city_id\": \"242\", \"ch_area\": \"里贾纳\", \"ch_nation\": \"加拿大\", \"en_area\": \"Regina\", \"en_nation\": \"Canada\", \"latitude\": \"50.4452112\", \"longitude\": \"-104.6188943\", \"timeZone\": \"America/Regina\" }, { \"city_id\": \"145\", \"ch_area\": \"里斯本\", \"ch_nation\": \"葡萄牙\", \"en_area\": \"Lisbon\", \"en_nation\": \"Portugal\", \"latitude\": \"38.7222524\", \"longitude\": \"-9.1393366\", \"timeZone\": \"Europe/Lisbon\" }, { \"city_id\": \"245\", \"ch_area\": \"里约热内卢\", \"ch_nation\": \"巴西\", \"en_area\": \"Rio de Janeiro\", \"en_nation\": \"Brazil\", \"latitude\": \"-22.9068467\", \"longitude\": \"-43.1728965\", \"timeZone\": \"America/Sao_Paulo\" }, { \"city_id\": \"452\", \"ch_area\": \"利伯维尔\", \"ch_nation\": \"加蓬\", \"en_area\": \"Libreville\", \"en_nation\": \"Gabon\", \"latitude\": \"0.4161976\", \"longitude\": \"9.4672676\", \"timeZone\": \"Africa/Libreville\" }, { \"city_id\": \"144\", \"ch_area\": \"利马\", \"ch_nation\": \"秘鲁\", \"en_area\": \"Lima\", \"en_nation\": \"Peru\", \"latitude\": \"-12.0463731\", \"longitude\": \"-77.042754\", \"timeZone\": \"America/Lima\" }, { \"city_id\": \"246\", \"ch_area\": \"利雅得\", \"ch_nation\": \"沙特阿拉伯\", \"en_area\": \"Riyadh\", \"en_nation\": \"Saudi Arabia\", \"latitude\": \"24.7135517\", \"longitude\": \"46.6752957\", \"timeZone\": \"Asia/Riyadh\" }, { \"city_id\": \"394\", \"ch_area\": \"林德曼岛\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Lindeman Island\", \"en_nation\": \"Australia\", \"latitude\": \"-20.4447841\", \"longitude\": \"149.0410504\", \"timeZone\": \"Australia/Lindeman\" }, { \"city_id\": \"435\", \"ch_area\": \"卢本巴希\", \"ch_nation\": \"刚果民主共和国\", \"en_area\": \"Lubumbashi\", \"en_nation\": \"Democratic Republic of the Congo\", \"latitude\": \"-11.6876026\", \"longitude\": \"27.5026174\", \"timeZone\": \"Africa/Lubumbashi\" }, { \"city_id\": \"147\", \"ch_area\": \"卢布尔雅那\", \"ch_nation\": \"斯洛文尼亚\", \"en_area\": \"Ljubljana\", \"en_nation\": \"Slovenia\", \"latitude\": \"46.0569465\", \"longitude\": \"14.5057515\", \"timeZone\": \"Europe/Ljubljana\" }, { \"city_id\": \"154\", \"ch_area\": \"卢萨卡\", \"ch_nation\": \"赞比亚\", \"en_area\": \"Lusaka\", \"en_nation\": \"Zambia\", \"latitude\": \"-15.3875259\", \"longitude\": \"28.3228165\", \"timeZone\": \"Africa/Lusaka\" }, { \"city_id\": \"155\", \"ch_area\": \"卢森堡\", \"ch_nation\": \"卢森堡\", \"en_area\": \"Luxembourg\", \"en_nation\": \"Luxembourg\", \"latitude\": \"49.815273\", \"longitude\": \"6.129583\", \"timeZone\": \"Europe/Luxembourg\" }, { \"city_id\": \"232\", \"ch_area\": \"路易港\", \"ch_nation\": \"毛里求斯\", \"en_area\": \"Port Louis\", \"en_nation\": \"Mauritius\", \"latitude\": \"-20.1608912\", \"longitude\": \"57.5012222\", \"timeZone\": \"Indian/Mauritius\" }, { \"city_id\": \"152\", \"ch_area\": \"路易斯维尔\", \"ch_nation\": \"美国\", \"en_area\": \"Louisville, KY\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.2526647\", \"longitude\": \"-85.7584557\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"148\", \"ch_area\": \"伦敦\", \"ch_nation\": \"英国\", \"en_area\": \"London\", \"en_nation\": \"England U.K.\", \"latitude\": \"51.5073509\", \"longitude\": \"-0.1277583\", \"timeZone\": \"Europe/London\" }, { \"city_id\": \"153\", \"ch_area\": \"罗安达\", \"ch_nation\": \"安哥拉\", \"en_area\": \"Luanda\", \"en_nation\": \"Angola\", \"latitude\": \"-8.8146556\", \"longitude\": \"13.2301756\", \"timeZone\": \"Africa/Luanda\" }, { \"city_id\": \"548\", \"ch_area\": \"罗德城\", \"ch_nation\": \"英属维尔京群岛\", \"en_area\": \"Road Town\", \"en_nation\": \"British Virgin Islands\", \"latitude\": \"18.4286115\", \"longitude\": \"-64.6184657\", \"timeZone\": \"America/Tortola\" }, { \"city_id\": \"247\", \"ch_area\": \"罗马\", \"ch_nation\": \"意大利\", \"en_area\": \"Rome\", \"en_nation\": \"Italy\", \"latitude\": \"41.9027835\", \"longitude\": \"12.4963655\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"371\", \"ch_area\": \"罗瑟拉研究站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Rothera Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-75.5674124\", \"longitude\": \"-25.5165286\", \"timeZone\": \"Antarctica/Rothera\" }, { \"city_id\": \"444\", \"ch_area\": \"罗佐\", \"ch_nation\": \"多米尼克\", \"en_area\": \"Roseau\", \"en_nation\": \"Dominica\", \"latitude\": \"48.8460926\", \"longitude\": \"-95.762766\", \"timeZone\": \"America/Dominica\" }, { \"city_id\": \"327\", \"ch_area\": \"洛美\", \"ch_nation\": \"多哥\", \"en_area\": \"Lomé\", \"en_nation\": \"Togo\", \"latitude\": \"6.1256261\", \"longitude\": \"1.2254183\", \"timeZone\": \"Africa/Accra\" }, { \"city_id\": \"150\", \"ch_area\": \"洛杉矶\", \"ch_nation\": \"美国\", \"en_area\": \"Los Angeles, CA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"34.0522342\", \"longitude\": \"-118.2436849\", \"timeZone\": \"America/Los_Angeles\" }, { \"city_id\": \"149\", \"ch_area\": \"洛斯阿尔托斯\", \"ch_nation\": \"美国\", \"en_area\": \"Los Altos\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.3852183\", \"longitude\": \"-122.1141298\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"151\", \"ch_area\": \"洛斯加托斯\", \"ch_nation\": \"美国\", \"en_area\": \"Los Gatos\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.2358078\", \"longitude\": \"-121.9623751\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"158\", \"ch_area\": \"马德里\", \"ch_nation\": \"西班牙\", \"en_area\": \"Madrid\", \"en_nation\": \"Spain\", \"latitude\": \"40.4167754\", \"longitude\": \"-3.7037902\", \"timeZone\": \"Europe/Madrid\" }, { \"city_id\": \"555\", \"ch_area\": \"马尔默\", \"ch_nation\": \"瑞典\", \"en_area\": \"Malmö\", \"en_nation\": \"Sweden\", \"latitude\": \"55.604981\", \"longitude\": \"13.003822\", \"timeZone\": \"Europe/Stockholm\" }, { \"city_id\": \"178\", \"ch_area\": \"马加丹\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Magadan\", \"en_nation\": \"Russia\", \"latitude\": \"59.5594397\", \"longitude\": \"150.8127537\", \"timeZone\": \"Asia/Magadan\" }, { \"city_id\": \"355\", \"ch_area\": \"马卡萨\", \"ch_nation\": \"印度尼西亚\", \"en_area\": \"Makassar\", \"en_nation\": \"Indonesia\", \"latitude\": \"-5.1476651\", \"longitude\": \"119.4327314\", \"timeZone\": \"Asia/Makassar\" }, { \"city_id\": \"159\", \"ch_area\": \"马拉博\", \"ch_nation\": \"赤道几内亚\", \"en_area\": \"Malabo\", \"en_nation\": \"Equatorial Guinea\", \"latitude\": \"3.7549606\", \"longitude\": \"8.7821344\", \"timeZone\": \"Africa/Malabo\" }, { \"city_id\": \"577\", \"ch_area\": \"马拉喀什\", \"ch_nation\": \"摩洛哥\", \"en_area\": \"Marrakesh\", \"en_nation\": \"Morocco\", \"latitude\": \"31.6294723\", \"longitude\": \"-7.9810845\", \"timeZone\": \"Africa/Casablanca\" }, { \"city_id\": \"160\", \"ch_area\": \"马累\", \"ch_nation\": \"马尔代夫\", \"en_area\": \"Male\", \"en_nation\": \"Maldives\", \"latitude\": \"4.1754959\", \"longitude\": \"73.5093474\", \"timeZone\": \"Indian/Maldives\" }, { \"city_id\": \"163\", \"ch_area\": \"马里戈特\", \"ch_nation\": \"圣马丁\", \"en_area\": \"Marigot\", \"en_nation\": \"Saint Martin\", \"latitude\": \"18.0675189\", \"longitude\": \"-63.0824656\", \"timeZone\": \"America/Marigot\" }, { \"city_id\": \"530\", \"ch_area\": \"马伦戈\", \"ch_nation\": \"美国\", \"en_area\": \"Marengo\", \"en_nation\": \"U.S.A.\", \"latitude\": \"41.7927817\", \"longitude\": \"-92.0696253\", \"timeZone\": \"America/Indiana/Marengo\" }, { \"city_id\": \"553\", \"ch_area\": \"马穆楚\", \"ch_nation\": \"马约特岛\", \"en_area\": \"Mamoudzou\", \"en_nation\": \"Mayotte\", \"latitude\": \"-12.7809488\", \"longitude\": \"45.227872\", \"timeZone\": \"Indian/Mayotte\" }, { \"city_id\": \"161\", \"ch_area\": \"马那瓜\", \"ch_nation\": \"尼加拉瓜\", \"en_area\": \"Managua\", \"en_nation\": \"Nicaragua\", \"latitude\": \"12.1149926\", \"longitude\": \"-86.2361744\", \"timeZone\": \"America/Managua\" }, { \"city_id\": \"411\", \"ch_area\": \"马瑙斯\", \"ch_nation\": \"巴西\", \"en_area\": \"Manaus\", \"en_nation\": \"Brazil\", \"latitude\": \"-3.1190275\", \"longitude\": \"-60.0217314\", \"timeZone\": \"America/Manaus\" }, { \"city_id\": \"164\", \"ch_area\": \"马尼拉\", \"ch_nation\": \"菲律宾\", \"en_area\": \"Manila\", \"en_nation\": \"the Philippines\", \"latitude\": \"14.5995124\", \"longitude\": \"120.9842195\", \"timeZone\": \"Asia/Manila\" }, { \"city_id\": \"165\", \"ch_area\": \"马普托\", \"ch_nation\": \"莫桑比克\", \"en_area\": \"Maputo\", \"en_nation\": \"Mozambique\", \"latitude\": \"-25.969248\", \"longitude\": \"32.5731746\", \"timeZone\": \"Africa/Maputo\" }, { \"city_id\": \"493\", \"ch_area\": \"马萨特兰\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Mazatlán\", \"en_nation\": \"Mexico\", \"latitude\": \"23.2494148\", \"longitude\": \"-106.4111425\", \"timeZone\": \"America/Mazatlan\" }, { \"city_id\": \"330\", \"ch_area\": \"马塞卢\", \"ch_nation\": \"莱索托\", \"en_area\": \"Maseru\", \"en_nation\": \"Lesotho\", \"latitude\": \"-29.3150767\", \"longitude\": \"27.4869229\", \"timeZone\": \"Africa/Maseru\" }, { \"city_id\": \"405\", \"ch_area\": \"马塞约\", \"ch_nation\": \"巴西\", \"en_area\": \"Maceio\", \"en_nation\": \"Brazil\", \"latitude\": \"-9.6660417\", \"longitude\": \"-35.7352167\", \"timeZone\": \"America/Maceio\" }, { \"city_id\": \"350\", \"ch_area\": \"马赛\", \"ch_nation\": \"法国\", \"en_area\": \"Marseille\", \"en_nation\": \"France\", \"latitude\": \"43.296482\", \"longitude\": \"5.36978\", \"timeZone\": \"Europe/Paris\" }, { \"city_id\": \"189\", \"ch_area\": \"马斯喀特\", \"ch_nation\": \"阿曼\", \"en_area\": \"Muscat\", \"en_nation\": \"Oman\", \"latitude\": \"23.5880307\", \"longitude\": \"58.3828717\", \"timeZone\": \"Asia/Muscat\" }, { \"city_id\": \"344\", \"ch_area\": \"马塔莫罗斯\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Matamoros\", \"en_nation\": \"Mexico\", \"latitude\": \"25.8690294\", \"longitude\": \"-97.5027376\", \"timeZone\": \"America/Matamoros\" }, { \"city_id\": \"551\", \"ch_area\": \"马塔乌图\", \"ch_nation\": \"瓦利斯和富图纳群岛\", \"en_area\": \"Mata-Utu\", \"en_nation\": \"Wallis and Futuna\", \"latitude\": \"-13.2825091\", \"longitude\": \"-176.1764475\", \"timeZone\": \"Pacific/Wallis\" }, { \"city_id\": \"483\", \"ch_area\": \"马朱罗\", \"ch_nation\": \"马绍尔群岛\", \"en_area\": \"Majuro\", \"en_nation\": \"Marshall Islands\", \"latitude\": \"7.066667\", \"longitude\": \"171.266667\", \"timeZone\": \"Pacific/Majuro\" }, { \"city_id\": \"397\", \"ch_area\": \"玛丽港\", \"ch_nation\": \"奥兰群岛\", \"en_area\": \"Mariehamn\", \"en_nation\": \"Åland Islands\", \"latitude\": \"60.0970945\", \"longitude\": \"19.9348339\", \"timeZone\": \"Europe/Mariehamn\" }, { \"city_id\": \"172\", \"ch_area\": \"迈阿密\", \"ch_nation\": \"美国\", \"en_area\": \"Miami, FL\", \"en_nation\": \"U.S.A.\", \"latitude\": \"25.7616798\", \"longitude\": \"-80.1917902\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"157\", \"ch_area\": \"麦迪逊\", \"ch_nation\": \"美国\", \"en_area\": \"Madison\", \"en_nation\": \"U.S.A.\", \"latitude\": \"43.0730517\", \"longitude\": \"-89.4012302\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"166\", \"ch_area\": \"麦加\", \"ch_nation\": \"沙特阿拉伯\", \"en_area\": \"Mecca\", \"en_nation\": \"Saudi Arabia\", \"latitude\": \"21.3890824\", \"longitude\": \"39.8579118\", \"timeZone\": \"Asia/Riyadh\" }, { \"city_id\": \"369\", \"ch_area\": \"麦克默多站\", \"ch_nation\": \"南极洲\", \"en_area\": \"McMurdo Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"35.8546135\", \"longitude\": \"-78.7126469\", \"timeZone\": \"Antarctica/McMurdo\" }, { \"city_id\": \"379\", \"ch_area\": \"麦夸理岛站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Macquarie Island Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-54.4997485\", \"longitude\": \"158.9364023\", \"timeZone\": \"Antarctica/Macquarie\" }, { \"city_id\": \"162\", \"ch_area\": \"麦纳麦\", \"ch_nation\": \"巴林\", \"en_area\": \"Manama\", \"en_nation\": \"Bahrain\", \"latitude\": \"26.2235305\", \"longitude\": \"50.5875935\", \"timeZone\": \"Asia/Bahrain\" }, { \"city_id\": \"26\", \"ch_area\": \"曼谷\", \"ch_nation\": \"泰国\", \"en_area\": \"Bangkok\", \"en_nation\": \"Thailand\", \"latitude\": \"13.7563309\", \"longitude\": \"100.5017651\", \"timeZone\": \"Asia/Bangkok\" }, { \"city_id\": \"491\", \"ch_area\": \"梅里达\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Mérida\", \"en_nation\": \"Mexico\", \"latitude\": \"42.3444552\", \"longitude\": \"-71.0310225\", \"timeZone\": \"America/Merida\" }, { \"city_id\": \"535\", \"ch_area\": \"梅诺米尼\", \"ch_nation\": \"美国\", \"en_area\": \"Menominee\", \"en_nation\": \"U.S.A.\", \"latitude\": \"45.1077627\", \"longitude\": \"-87.6142737\", \"timeZone\": \"America/Menominee\" }, { \"city_id\": \"544\", \"ch_area\": \"梅特拉卡特拉\", \"ch_nation\": \"美国\", \"en_area\": \"Metlakatla\", \"en_nation\": \"U.S.A.\", \"latitude\": \"55.1291667\", \"longitude\": \"-131.5722222\", \"timeZone\": \"America/Metlakatla\" }, { \"city_id\": \"387\", \"ch_area\": \"门多萨\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Mendoza\", \"en_nation\": \"Argentina\", \"latitude\": \"-32.8894587\", \"longitude\": \"-68.8458386\", \"timeZone\": \"America/Argentina/Mendoza\" }, { \"city_id\": \"169\", \"ch_area\": \"门洛帕克\", \"ch_nation\": \"美国\", \"en_area\": \"Menlo Park\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.4529598\", \"longitude\": \"-122.1817252\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"182\", \"ch_area\": \"蒙彼利埃\", \"ch_nation\": \"美国\", \"en_area\": \"Montpelier\", \"en_nation\": \"U.S.A.\", \"latitude\": \"44.2600593\", \"longitude\": \"-72.5753869\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"181\", \"ch_area\": \"蒙得维的亚\", \"ch_nation\": \"乌拉圭\", \"en_area\": \"Montevideo\", \"en_nation\": \"Uruguay\", \"latitude\": \"-34.9011127\", \"longitude\": \"-56.1645314\", \"timeZone\": \"America/Montevideo\" }, { \"city_id\": \"517\", \"ch_area\": \"蒙蒂塞洛\", \"ch_nation\": \"美国\", \"en_area\": \"Monticello\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.0086043\", \"longitude\": \"-78.4531994\", \"timeZone\": \"America/Kentucky/Monticello\" }, { \"city_id\": \"415\", \"ch_area\": \"蒙克顿\", \"ch_nation\": \"加拿大\", \"en_area\": \"Moncton\", \"en_nation\": \"Canada\", \"latitude\": \"46.0878165\", \"longitude\": \"-64.7782313\", \"timeZone\": \"America/Moncton\" }, { \"city_id\": \"180\", \"ch_area\": \"蒙罗维亚\", \"ch_nation\": \"利比里亚\", \"en_area\": \"Monrovia\", \"en_nation\": \"Liberia\", \"latitude\": \"34.1442616\", \"longitude\": \"-118.0019482\", \"timeZone\": \"Africa/Monrovia\" }, { \"city_id\": \"492\", \"ch_area\": \"蒙特雷\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Monterrey\", \"en_nation\": \"Mexico\", \"latitude\": \"25.6866142\", \"longitude\": \"-100.3161126\", \"timeZone\": \"America/Monterrey\" }, { \"city_id\": \"185\", \"ch_area\": \"蒙特里\", \"ch_nation\": \"美国\", \"en_area\": \"Monterey\", \"en_nation\": \"U.S.A.\", \"latitude\": \"36.6002378\", \"longitude\": \"-121.8946761\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"183\", \"ch_area\": \"蒙特利尔\", \"ch_nation\": \"加拿大\", \"en_area\": \"Montreal\", \"en_nation\": \"Canada\", \"latitude\": \"45.5016889\", \"longitude\": \"-73.567256\", \"timeZone\": \"America/Montreal\" }, { \"city_id\": \"168\", \"ch_area\": \"孟斐斯\", \"ch_nation\": \"美国\", \"en_area\": \"Memphis, TN\", \"en_nation\": \"U.S.A.\", \"latitude\": \"35.1495343\", \"longitude\": \"-90.0489801\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"187\", \"ch_area\": \"孟买\", \"ch_nation\": \"印度\", \"en_area\": \"Mumbai\", \"en_nation\": \"India\", \"latitude\": \"19.0759837\", \"longitude\": \"72.8776559\", \"timeZone\": \"Asia/Kolkata\" }, { \"city_id\": \"174\", \"ch_area\": \"米尔班克\", \"ch_nation\": \"美国\", \"en_area\": \"Milbank\", \"en_nation\": \"U.S.A.\", \"latitude\": \"39.137916\", \"longitude\": \"-94.52244\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"173\", \"ch_area\": \"米兰\", \"ch_nation\": \"意大利\", \"en_area\": \"Milano\", \"en_nation\": \"Italy\", \"latitude\": \"29.5968704\", \"longitude\": \"-90.7228164\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"175\", \"ch_area\": \"密尔沃基\", \"ch_nation\": \"美国\", \"en_area\": \"Milwaukee, WI\", \"en_nation\": \"U.S.A.\", \"latitude\": \"43.0389025\", \"longitude\": \"-87.9064736\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"176\", \"ch_area\": \"明尼阿波利斯\", \"ch_nation\": \"美国\", \"en_area\": \"Minneapolis\", \"en_nation\": \"U.S.A.\", \"latitude\": \"44.977753\", \"longitude\": \"-93.2650108\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"177\", \"ch_area\": \"明斯克\", \"ch_nation\": \"白俄罗斯\", \"en_area\": \"Minsk\", \"en_nation\": \"Belarus\", \"latitude\": \"53.9006011\", \"longitude\": \"27.558972\", \"timeZone\": \"Europe/Minsk\" }, { \"city_id\": \"179\", \"ch_area\": \"摩加迪沙\", \"ch_nation\": \"索马里\", \"en_area\": \"Mogadishu\", \"en_nation\": \"Somalia\", \"latitude\": \"2.0469343\", \"longitude\": \"45.3181623\", \"timeZone\": \"Africa/Mogadishu\" }, { \"city_id\": \"482\", \"ch_area\": \"摩纳哥\", \"ch_nation\": \"摩纳哥\", \"en_area\": \"Monaco\", \"en_nation\": \"Monaco\", \"latitude\": \"43.7384176\", \"longitude\": \"7.4246158\", \"timeZone\": \"Europe/Monaco\" }, { \"city_id\": \"505\", \"ch_area\": \"莫尔兹比港\", \"ch_nation\": \"巴布亚新几内亚\", \"en_area\": \"Port Moresby\", \"en_nation\": \"Papua New Guinea\", \"latitude\": \"-9.4438004\", \"longitude\": \"147.1802671\", \"timeZone\": \"Pacific/Port_Moresby\" }, { \"city_id\": \"474\", \"ch_area\": \"莫罗尼\", \"ch_nation\": \"科摩罗\", \"en_area\": \"Moroni\", \"en_nation\": \"Comoros\", \"latitude\": \"39.5249615\", \"longitude\": \"-111.5904725\", \"timeZone\": \"Indian/Comoro\" }, { \"city_id\": \"373\", \"ch_area\": \"莫森站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Mawson Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-67.6032742\", \"longitude\": \"62.8741649\", \"timeZone\": \"Antarctica/Mawson\" }, { \"city_id\": \"184\", \"ch_area\": \"莫斯科\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Moscow\", \"en_nation\": \"Russia\", \"latitude\": \"55.755826\", \"longitude\": \"37.6172999\", \"timeZone\": \"Europe/Moscow\" }, { \"city_id\": \"167\", \"ch_area\": \"墨尔本\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Melbourne\", \"en_nation\": \"Australia\", \"latitude\": \"-37.8136276\", \"longitude\": \"144.9630576\", \"timeZone\": \"Australia/Melbourne\" }, { \"city_id\": \"171\", \"ch_area\": \"墨西哥城\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Mexico City\", \"en_nation\": \"Mexico\", \"latitude\": \"19.4326077\", \"longitude\": \"-99.133208\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"568\", \"ch_area\": \"墨西卡利\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Mexicali\", \"en_nation\": \"Mexico\", \"latitude\": \"32.6245389\", \"longitude\": \"-115.4522623\", \"timeZone\": \"America/Tijuana\" }, { \"city_id\": \"170\", \"ch_area\": \"墨西拿\", \"ch_nation\": \"意大利\", \"en_area\": \"Messina\", \"en_nation\": \"Italy\", \"latitude\": \"38.1937335\", \"longitude\": \"15.5542057\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"329\", \"ch_area\": \"姆巴巴内\", \"ch_nation\": \"斯威士兰\", \"en_area\": \"Mbabane\", \"en_nation\": \"Eswatini\", \"latitude\": \"-26.3054482\", \"longitude\": \"31.1366715\", \"timeZone\": \"Africa/Mbabane\" }, { \"city_id\": \"188\", \"ch_area\": \"慕尼黑\", \"ch_nation\": \"德国\", \"en_area\": \"Munich\", \"en_nation\": \"Germany\", \"latitude\": \"48.1351253\", \"longitude\": \"11.5819805\", \"timeZone\": \"Europe/Berlin\" }, { \"city_id\": \"413\", \"ch_area\": \"拿骚\", \"ch_nation\": \"巴哈马\", \"en_area\": \"Nassau\", \"en_nation\": \"Bahamas\", \"latitude\": \"25.0443312\", \"longitude\": \"-77.3503609\", \"timeZone\": \"America/Nassau\" }, { \"city_id\": \"191\", \"ch_area\": \"那不勒斯\", \"ch_nation\": \"意大利\", \"en_area\": \"Napoli\", \"en_nation\": \"Italy\", \"latitude\": \"34.0325366\", \"longitude\": \"-84.1851525\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"190\", \"ch_area\": \"纳帕\", \"ch_nation\": \"美国\", \"en_area\": \"Napa\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.2975381\", \"longitude\": \"-122.286865\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"559\", \"ch_area\": \"纳什维尔\", \"ch_nation\": \"美国\", \"en_area\": \"Nashville, TN\", \"en_nation\": \"U.S.A.\", \"latitude\": \"36.1626638\", \"longitude\": \"-86.7816016\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"193\", \"ch_area\": \"纳特尔斯\", \"ch_nation\": \"瑞士\", \"en_area\": \"Naters\", \"en_nation\": \"Switzerland\", \"latitude\": \"46.3239282\", \"longitude\": \"7.9916569\", \"timeZone\": \"Europe/Zurich\" }, { \"city_id\": \"460\", \"ch_area\": \"南京\", \"ch_nation\": \"中国\", \"en_area\": \"Nanjing\", \"en_nation\": \"China\", \"latitude\": \"32.060255\", \"longitude\": \"118.796877\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"515\", \"ch_area\": \"南萨哈林斯克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Yuzhno-Sakhalinsk\", \"en_nation\": \"Russia\", \"latitude\": \"46.9640949\", \"longitude\": \"142.7284716\", \"timeZone\": \"Asia/Sakhalin\" }, { \"city_id\": \"500\", \"ch_area\": \"瑙鲁\", \"ch_nation\": \"密克罗尼西亚\", \"en_area\": \"Nauru\", \"en_nation\": \"Micronesia\", \"latitude\": \"-0.522778\", \"longitude\": \"166.931503\", \"timeZone\": \"Pacific/Nauru\" }, { \"city_id\": \"192\", \"ch_area\": \"内罗毕\", \"ch_nation\": \"肯尼亚\", \"en_area\": \"Nairobi\", \"en_nation\": \"Kenya\", \"latitude\": \"-1.2920659\", \"longitude\": \"36.8219462\", \"timeZone\": \"Africa/Nairobi\" }, { \"city_id\": \"364\", \"ch_area\": \"尼科西亚\", \"ch_nation\": \"塞浦路斯\", \"en_area\": \"Nicosia\", \"en_nation\": \"Cyprus\", \"latitude\": \"35.1855659\", \"longitude\": \"33.3822764\", \"timeZone\": \"Asia/Nicosia\" }, { \"city_id\": \"418\", \"ch_area\": \"尼皮贡\", \"ch_nation\": \"加拿大\", \"en_area\": \"Nipigon\", \"en_nation\": \"Canada\", \"latitude\": \"49.0125155\", \"longitude\": \"-88.2632805\", \"timeZone\": \"America/Nipigon\" }, { \"city_id\": \"198\", \"ch_area\": \"尼亚美\", \"ch_nation\": \"尼日尔\", \"en_area\": \"Niamey\", \"en_nation\": \"Niger\", \"latitude\": \"13.5115963\", \"longitude\": \"2.1253854\", \"timeZone\": \"Africa/Niamey\" }, { \"city_id\": \"197\", \"ch_area\": \"纽约\", \"ch_nation\": \"美国\", \"en_area\": \"New York\", \"en_nation\": \"U.S.A.\", \"latitude\": \"40.7127753\", \"longitude\": \"-74.0059728\", \"timeZone\": \"America/New_York\" }, { \"city_id\": \"204\", \"ch_area\": \"努克\", \"ch_nation\": \"格陵兰\", \"en_area\": \"Nuuk\", \"en_nation\": \"Greenland\", \"latitude\": \"64.1814099\", \"longitude\": \"-51.6941381\", \"timeZone\": \"America/Godthab\" }, { \"city_id\": \"203\", \"ch_area\": \"努库阿洛法\", \"ch_nation\": \"汤加\", \"en_area\": \"Nukuʻalofa\", \"en_nation\": \"Tonga\", \"latitude\": \"-21.1393418\", \"longitude\": \"-175.204947\", \"timeZone\": \"Pacific/Tongatapu\" }, { \"city_id\": \"200\", \"ch_area\": \"努美阿\", \"ch_nation\": \"新喀里多尼亚\", \"en_area\": \"Noumea\", \"en_nation\": \"New Caledonia\", \"latitude\": \"-22.2734912\", \"longitude\": \"166.4480887\", \"timeZone\": \"Pacific/Noumea\" }, { \"city_id\": \"199\", \"ch_area\": \"努瓦克肖特\", \"ch_nation\": \"毛里塔尼亚\", \"en_area\": \"Nouakchott\", \"en_nation\": \"Mauritania\", \"latitude\": \"18.0735299\", \"longitude\": \"-15.9582372\", \"timeZone\": \"Africa/Nouakchott\" }, { \"city_id\": \"514\", \"ch_area\": \"诺弗库兹尼特斯克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Novokuznetsk\", \"en_nation\": \"Russia\", \"latitude\": \"53.7595935\", \"longitude\": \"87.1215705\", \"timeZone\": \"Asia/Novokuznetsk\" }, { \"city_id\": \"534\", \"ch_area\": \"诺克斯\", \"ch_nation\": \"美国\", \"en_area\": \"Knox\", \"en_nation\": \"U.S.A.\", \"latitude\": \"40.9433331\", \"longitude\": \"-90.3704499\", \"timeZone\": \"America/Indiana/Knox\" }, { \"city_id\": \"136\", \"ch_area\": \"诺克斯维尔\", \"ch_nation\": \"美国\", \"en_area\": \"Knoxville\", \"en_nation\": \"U.S.A.\", \"latitude\": \"35.9606384\", \"longitude\": \"-83.9207392\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"543\", \"ch_area\": \"诺姆\", \"ch_nation\": \"美国\", \"en_area\": \"Nome\", \"en_nation\": \"U.S.A.\", \"latitude\": \"64.5011111\", \"longitude\": \"-165.4063889\", \"timeZone\": \"America/Nome\" }, { \"city_id\": \"201\", \"ch_area\": \"诺瓦托\", \"ch_nation\": \"美国\", \"en_area\": \"Novato\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.1074198\", \"longitude\": \"-122.5697032\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"480\", \"ch_area\": \"欧罗尔\", \"ch_nation\": \"哈萨克斯坦\", \"en_area\": \"Oral\", \"en_nation\": \"Kazakhstan\", \"latitude\": \"37.7098505\", \"longitude\": \"-97.442637\", \"timeZone\": \"Asia/Oral\" }, { \"city_id\": \"372\", \"ch_area\": \"帕尔默站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Palmer Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-64.7742513\", \"longitude\": \"-64.0538299\", \"timeZone\": \"Antarctica/Palmer\" }, { \"city_id\": \"214\", \"ch_area\": \"帕果帕果\", \"ch_nation\": \"美属萨摩亚群岛\", \"en_area\": \"Pago Pago\", \"en_nation\": \"American Samoa\", \"latitude\": \"-14.2756319\", \"longitude\": \"-170.7020359\", \"timeZone\": \"Pacific/Pago_Pago\" }, { \"city_id\": \"220\", \"ch_area\": \"帕拉马里博\", \"ch_nation\": \"苏里南\", \"en_area\": \"Paramaribo\", \"en_nation\": \"Surinam\", \"latitude\": \"5.8520355\", \"longitude\": \"-55.2038278\", \"timeZone\": \"America/Paramaribo\" }, { \"city_id\": \"216\", \"ch_area\": \"帕洛阿尔托\", \"ch_nation\": \"美国\", \"en_area\": \"Palo Alto\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.4418834\", \"longitude\": \"-122.1430195\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"213\", \"ch_area\": \"帕西非卡\", \"ch_nation\": \"美国\", \"en_area\": \"Pacifica\", \"en_nation\": \"U.S.A.\", \"latitude\": \"36.9770252\", \"longitude\": \"-120.073758\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"421\", \"ch_area\": \"潘尼尔东\", \"ch_nation\": \"加拿大\", \"en_area\": \"Pangnirtung\", \"en_nation\": \"Canada\", \"latitude\": \"66.1465578\", \"longitude\": \"-65.7012182\", \"timeZone\": \"America/Pangnirtung\" }, { \"city_id\": \"224\", \"ch_area\": \"佩塔卢马\", \"ch_nation\": \"美国\", \"en_area\": \"Petaluma\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.232417\", \"longitude\": \"-122.6366524\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"578\", \"ch_area\": \"蓬塔阿雷纳斯\", \"ch_nation\": \"智利\", \"en_area\": \"Punta Arenas\", \"en_nation\": \"Chile\", \"latitude\": \"-53.1638329\", \"longitude\": \"-70.9170683\", \"timeZone\": \"America/Punta_Arenas\" }, { \"city_id\": \"231\", \"ch_area\": \"蓬塔德尔加达\", \"ch_nation\": \"葡萄牙\", \"en_area\": \"Ponta Delgada\", \"en_nation\": \"Portugal\", \"latitude\": \"37.7394207\", \"longitude\": \"-25.6686725\", \"timeZone\": \"Atlantic/Azores\" }, { \"city_id\": \"228\", \"ch_area\": \"匹兹堡\", \"ch_nation\": \"美国\", \"en_area\": \"Pittsburgh\", \"en_nation\": \"U.S.A.\", \"latitude\": \"40.4406248\", \"longitude\": \"-79.9958864\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"236\", \"ch_area\": \"平壤\", \"ch_nation\": \"朝鲜\", \"en_area\": \"Pyongyang\", \"en_nation\": \"North Korea\", \"latitude\": \"39.0392193\", \"longitude\": \"125.7625241\", \"timeZone\": \"Asia/Pyongyang\" }, { \"city_id\": \"223\", \"ch_area\": \"珀斯\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Perth\", \"en_nation\": \"Australia\", \"latitude\": \"-31.9523123\", \"longitude\": \"115.861309\", \"timeZone\": \"Australia/Perth\" }, { \"city_id\": \"569\", \"ch_area\": \"普埃布拉\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Puebla\", \"en_nation\": \"Mexico\", \"latitude\": \"19.0414398\", \"longitude\": \"-98.2062727\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"441\", \"ch_area\": \"普拉亚\", \"ch_nation\": \"佛得角\", \"en_area\": \"Praia\", \"en_nation\": \"Cape Verde\", \"latitude\": \"14.93305\", \"longitude\": \"-23.5133267\", \"timeZone\": \"Atlantic/Cape_Verde\" }, { \"city_id\": \"229\", \"ch_area\": \"普莱森顿\", \"ch_nation\": \"美国\", \"en_area\": \"Pleasanton\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.6604484\", \"longitude\": \"-121.8757968\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"334\", \"ch_area\": \"普里什蒂纳\", \"ch_nation\": \"科索沃\", \"en_area\": \"Pristina\", \"en_nation\": \"Kosovo\", \"latitude\": \"42.6629138\", \"longitude\": \"21.1655028\", \"timeZone\": \"Europe/Belgrade\" }, { \"city_id\": \"488\", \"ch_area\": \"普利茅斯\", \"ch_nation\": \"蒙特塞拉特\", \"en_area\": \"Plymouth\", \"en_nation\": \"Montserrat\", \"latitude\": \"41.9584457\", \"longitude\": \"-70.6672621\", \"timeZone\": \"America/Montserrat\" }, { \"city_id\": \"494\", \"ch_area\": \"奇瓦瓦\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Chihuahua\", \"en_nation\": \"Mexico\", \"latitude\": \"28.6329957\", \"longitude\": \"-106.0691004\", \"timeZone\": \"America/Chihuahua\" }, { \"city_id\": \"486\", \"ch_area\": \"乔巴山\", \"ch_nation\": \"蒙古\", \"en_area\": \"Choibalsan\", \"en_nation\": \"Mongolia\", \"latitude\": \"48.0951271\", \"longitude\": \"114.5356247\", \"timeZone\": \"Asia/Choibalsan\" }, { \"city_id\": \"476\", \"ch_area\": \"乔治城\", \"ch_nation\": \"开曼群岛\", \"en_area\": \"George Town\", \"en_nation\": \"Cayman Islands\", \"latitude\": \"38.9097057\", \"longitude\": \"-77.0653565\", \"timeZone\": \"America/Cayman\" }, { \"city_id\": \"104\", \"ch_area\": \"乔治敦\", \"ch_nation\": \"圭亚那\", \"en_area\": \"Georgetown\", \"en_nation\": \"Guyana\", \"latitude\": \"41.4818543\", \"longitude\": \"-81.8263727\", \"timeZone\": \"America/Guyana\" }, { \"city_id\": \"461\", \"ch_area\": \"青岛\", \"ch_nation\": \"中国\", \"en_area\": \"Qingdao\", \"en_nation\": \"China\", \"latitude\": \"36.067108\", \"longitude\": \"120.382609\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"359\", \"ch_area\": \"清迈\", \"ch_nation\": \"泰国\", \"en_area\": \"Chiang Mai\", \"en_nation\": \"Thailand\", \"latitude\": \"18.7883439\", \"longitude\": \"98.9853008\", \"timeZone\": \"Asia/Bangkok\" }, { \"city_id\": \"103\", \"ch_area\": \"热那亚\", \"ch_nation\": \"意大利\", \"en_area\": \"Genoa\", \"en_nation\": \"Italy\", \"latitude\": \"44.4056499\", \"longitude\": \"8.946256\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"102\", \"ch_area\": \"日内瓦\", \"ch_nation\": \"瑞士\", \"en_area\": \"Geneva\", \"en_nation\": \"Switzerland\", \"latitude\": \"46.2043907\", \"longitude\": \"6.1431577\", \"timeZone\": \"Europe/Zurich\" }, { \"city_id\": \"545\", \"ch_area\": \"撒马尔罕\", \"ch_nation\": \"乌兹别克斯坦\", \"en_area\": \"Samarkand\", \"en_nation\": \"Uzbekistan\", \"latitude\": \"39.627012\", \"longitude\": \"66.9749731\", \"timeZone\": \"Asia/Samarkand\" }, { \"city_id\": \"381\", \"ch_area\": \"萨尔塔\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Salta\", \"en_nation\": \"Argentina\", \"latitude\": \"-24.7821269\", \"longitude\": \"-65.4231976\", \"timeZone\": \"America/Argentina/Jujuy\" }, { \"city_id\": \"366\", \"ch_area\": \"萨尔瓦多\", \"ch_nation\": \"巴西\", \"en_area\": \"Salvador\", \"en_nation\": \"Brazil\", \"latitude\": \"13.794185\", \"longitude\": \"-88.89653\", \"timeZone\": \"America/Bahia\" }, { \"city_id\": \"348\", \"ch_area\": \"萨尔兹堡\", \"ch_nation\": \"奥地利\", \"en_area\": \"Salzburg\", \"en_nation\": \"Austria\", \"latitude\": \"47.80949\", \"longitude\": \"13.05501\", \"timeZone\": \"Europe/Vienna\" }, { \"city_id\": \"323\", \"ch_area\": \"萨格勒布\", \"ch_nation\": \"克罗地亚\", \"en_area\": \"Zagreb\", \"en_nation\": \"Croatia\", \"latitude\": \"45.8150108\", \"longitude\": \"15.9819189\", \"timeZone\": \"Europe/Zagreb\" }, { \"city_id\": \"347\", \"ch_area\": \"萨拉热窝\", \"ch_nation\": \"波斯尼亚和黑塞哥维那\", \"en_area\": \"Sarajevo\", \"en_nation\": \"Bosnia and Herzegovina\", \"latitude\": \"43.8562586\", \"longitude\": \"18.4130763\", \"timeZone\": \"Europe/Sarajevo\" }, { \"city_id\": \"1941\", \"ch_area\": \"萨拉托夫\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Saratov\", \"en_nation\": \"Russia\", \"latitude\": \"51.5461754\", \"longitude\": \"46.0154123\", \"timeZone\": \"Europe/Saratov\" }, { \"city_id\": \"250\", \"ch_area\": \"萨马拉\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Samara\", \"en_nation\": \"Russia\", \"latitude\": \"53.203772\", \"longitude\": \"50.1606382\", \"timeZone\": \"Europe/Samara\" }, { \"city_id\": \"268\", \"ch_area\": \"萨那\", \"ch_nation\": \"也门\", \"en_area\": \"Sanaa\", \"en_nation\": \"Yemen\", \"latitude\": \"15.3694451\", \"longitude\": \"44.1910066\", \"timeZone\": \"Asia/Aden\" }, { \"city_id\": \"352\", \"ch_area\": \"萨斯卡通\", \"ch_nation\": \"加拿大\", \"en_area\": \"Saskatoon\", \"en_nation\": \"Canada\", \"latitude\": \"52.157902\", \"longitude\": \"-106.6701577\", \"timeZone\": \"America/Regina\" }, { \"city_id\": \"487\", \"ch_area\": \"塞班\", \"ch_nation\": \"北马里亚纳群岛\", \"en_area\": \"Saipan\", \"en_nation\": \"Northern Mariana Islands\", \"latitude\": \"15.1850483\", \"longitude\": \"145.7467259\", \"timeZone\": \"Pacific/Saipan\" }, { \"city_id\": \"338\", \"ch_area\": \"塞萨洛尼基\", \"ch_nation\": \"希腊\", \"en_area\": \"Thessaloniki\", \"en_nation\": \"Greece\", \"latitude\": \"40.6400629\", \"longitude\": \"22.9444191\", \"timeZone\": \"Europe/Athens\" }, { \"city_id\": \"419\", \"ch_area\": \"桑德贝\", \"ch_nation\": \"加拿大\", \"en_area\": \"Thunder Bay\", \"en_nation\": \"Canada\", \"latitude\": \"48.3808951\", \"longitude\": \"-89.2476823\", \"timeZone\": \"America/Thunder_Bay\" }, { \"city_id\": \"284\", \"ch_area\": \"桑尼维尔\", \"ch_nation\": \"美国\", \"en_area\": \"Sunnyvale\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.36883\", \"longitude\": \"-122.0363496\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"368\", \"ch_area\": \"山谷\", \"ch_nation\": \"安圭拉\", \"en_area\": \"The Valley\", \"en_nation\": \"Anguilla\", \"latitude\": \"34.0875122\", \"longitude\": \"-117.3107634\", \"timeZone\": \"America/Anguilla\" }, { \"city_id\": \"186\", \"ch_area\": \"山景城\", \"ch_nation\": \"美国\", \"en_area\": \"Mountain View\", \"en_nation\": \"U.S.A.\", \"latitude\": \"35.3266274\", \"longitude\": \"-106.5871328\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"274\", \"ch_area\": \"上海\", \"ch_nation\": \"中国\", \"en_area\": \"Shanghai\", \"en_nation\": \"China\", \"latitude\": \"31.230416\", \"longitude\": \"121.473701\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"536\", \"ch_area\": \"申特城\", \"ch_nation\": \"美国\", \"en_area\": \"Center\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.094575\", \"longitude\": \"-95.7099047\", \"timeZone\": \"America/North_Dakota/Center\" }, { \"city_id\": \"276\", \"ch_area\": \"深圳\", \"ch_nation\": \"中国\", \"en_area\": \"Shenzhen\", \"en_nation\": \"China\", \"latitude\": \"22.543096\", \"longitude\": \"114.057865\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"252\", \"ch_area\": \"圣安东尼奥\", \"ch_nation\": \"美国\", \"en_area\": \"San Antonio, TX\", \"en_nation\": \"U.S.A.\", \"latitude\": \"29.4241219\", \"longitude\": \"-98.4936282\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"263\", \"ch_area\": \"圣巴勃罗\", \"ch_nation\": \"美国\", \"en_area\": \"San Pablo\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.9621457\", \"longitude\": \"-122.3455263\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"271\", \"ch_area\": \"圣保罗\", \"ch_nation\": \"巴西\", \"en_area\": \"São Paulo\", \"en_nation\": \"Brazil\", \"latitude\": \"-21.2922457\", \"longitude\": \"-50.3428431\", \"timeZone\": \"America/Sao_Paulo\" }, { \"city_id\": \"283\", \"ch_area\": \"圣彼得堡\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"St. Petersburg\", \"en_nation\": \"Russia\", \"latitude\": \"27.7676008\", \"longitude\": \"-82.6402915\", \"timeZone\": \"Europe/Moscow\" }, { \"city_id\": \"454\", \"ch_area\": \"圣彼得港\", \"ch_nation\": \"格恩西岛\", \"en_area\": \"Saint Peter Port\", \"en_nation\": \"Guernsey\", \"latitude\": \"49.4541677\", \"longitude\": \"-2.5497069\", \"timeZone\": \"Europe/Guernsey\" }, { \"city_id\": \"253\", \"ch_area\": \"圣布鲁诺\", \"ch_nation\": \"美国\", \"en_area\": \"San Bruno\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.6304904\", \"longitude\": \"-122.4110835\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"248\", \"ch_area\": \"圣但尼\", \"ch_nation\": \"留尼汪\", \"en_area\": \"Saint-Denis\", \"en_nation\": \"Reunion Island\", \"latitude\": \"48.936181\", \"longitude\": \"2.357443\", \"timeZone\": \"Indian/Reunion\" }, { \"city_id\": \"473\", \"ch_area\": \"圣诞岛\", \"ch_nation\": \"基里巴斯\", \"en_area\": \"Kiritimati\", \"en_nation\": \"Kiribati\", \"latitude\": \"1.8721347\", \"longitude\": \"-157.4278119\", \"timeZone\": \"Pacific/Kiritimati\" }, { \"city_id\": \"251\", \"ch_area\": \"圣地亚哥\", \"ch_nation\": \"美国\", \"en_area\": \"San Diego, CA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"32.715738\", \"longitude\": \"-117.1610838\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"269\", \"ch_area\": \"圣地亚哥\", \"ch_nation\": \"智利\", \"en_area\": \"Santiago\", \"en_nation\": \"Chile\", \"latitude\": \"-33.4488897\", \"longitude\": \"-70.6692655\", \"timeZone\": \"America/Santiago\" }, { \"city_id\": \"523\", \"ch_area\": \"圣多美\", \"ch_nation\": \"圣多美和普林西比\", \"en_area\": \"São Tomé\", \"en_nation\": \"São Tomé and Príncipe\", \"latitude\": \"0.3301924\", \"longitude\": \"6.733343\", \"timeZone\": \"Africa/Sao_Tome\" }, { \"city_id\": \"270\", \"ch_area\": \"圣多明各\", \"ch_nation\": \"多米尼加共和国\", \"en_area\": \"Santo Domingo\", \"en_nation\": \"Dominican Republic\", \"latitude\": \"18.4860575\", \"longitude\": \"-69.9312117\", \"timeZone\": \"America/Santo_Domingo\" }, { \"city_id\": \"256\", \"ch_area\": \"圣何塞\", \"ch_nation\": \"美国\", \"en_area\": \"San Jose, CA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.3382082\", \"longitude\": \"-121.8863286\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"257\", \"ch_area\": \"圣何塞\", \"ch_nation\": \"哥斯达黎加\", \"en_area\": \"San José\", \"en_nation\": \"Costa Rica\", \"latitude\": \"37.3382082\", \"longitude\": \"-121.8863286\", \"timeZone\": \"America/Costa_Rica\" }, { \"city_id\": \"470\", \"ch_area\": \"圣赫利尔\", \"ch_nation\": \"泽西行政区\", \"en_area\": \"St. Helier\", \"en_nation\": \"Bailiwick of Jersey\", \"latitude\": \"49.1805019\", \"longitude\": \"-2.103233\", \"timeZone\": \"Europe/Jersey\" }, { \"city_id\": \"258\", \"ch_area\": \"圣胡安\", \"ch_nation\": \"波多黎各\", \"en_area\": \"San Juan\", \"en_nation\": \"Puerto Rico\", \"latitude\": \"18.4655394\", \"longitude\": \"-66.1057355\", \"timeZone\": \"America/Puerto_Rico\" }, { \"city_id\": \"386\", \"ch_area\": \"圣胡安\", \"ch_nation\": \"阿根廷\", \"en_area\": \"San Juan\", \"en_nation\": \"Argentina\", \"latitude\": \"18.4655394\", \"longitude\": \"-66.1057355\", \"timeZone\": \"America/Argentina/San_Juan\" }, { \"city_id\": \"254\", \"ch_area\": \"圣卡洛斯\", \"ch_nation\": \"美国\", \"en_area\": \"San Carlos\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.5071591\", \"longitude\": \"-122.2605222\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"266\", \"ch_area\": \"圣克拉拉\", \"ch_nation\": \"美国\", \"en_area\": \"Santa Clara\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.3541079\", \"longitude\": \"-121.9552356\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"267\", \"ch_area\": \"圣克鲁斯\", \"ch_nation\": \"美国\", \"en_area\": \"Santa Cruz\", \"en_nation\": \"U.S.A.\", \"latitude\": \"36.9741171\", \"longitude\": \"-122.0307963\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"264\", \"ch_area\": \"圣拉菲尔\", \"ch_nation\": \"美国\", \"en_area\": \"San Rafael\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.9735346\", \"longitude\": \"-122.5310874\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"265\", \"ch_area\": \"圣拉蒙\", \"ch_nation\": \"美国\", \"en_area\": \"San Ramon\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.7643595\", \"longitude\": \"-121.9539616\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"259\", \"ch_area\": \"圣莱安德罗\", \"ch_nation\": \"美国\", \"en_area\": \"San Leandro\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.7257663\", \"longitude\": \"-122.1568554\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"282\", \"ch_area\": \"圣路易斯\", \"ch_nation\": \"美国\", \"en_area\": \"St. Louis\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.6270025\", \"longitude\": \"-90.1994042\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"388\", \"ch_area\": \"圣路易斯\", \"ch_nation\": \"阿根廷\", \"en_area\": \"San Luis\", \"en_nation\": \"Argentina\", \"latitude\": \"29.2725405\", \"longitude\": \"-94.8182391\", \"timeZone\": \"America/Argentina/San_Luis\" }, { \"city_id\": \"571\", \"ch_area\": \"圣路易斯波托西\", \"ch_nation\": \"墨西哥\", \"en_area\": \"San Luis Potosí\", \"en_nation\": \"Mexico\", \"latitude\": \"22.1564699\", \"longitude\": \"-100.9855409\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"261\", \"ch_area\": \"圣马力诺\", \"ch_nation\": \"意大利\", \"en_area\": \"San Marino\", \"en_nation\": \"San Marino\", \"latitude\": \"43.94236\", \"longitude\": \"12.457777\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"262\", \"ch_area\": \"圣马特奥\", \"ch_nation\": \"美国\", \"en_area\": \"San Mateo\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.5629917\", \"longitude\": \"-122.3255254\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"507\", \"ch_area\": \"圣皮埃尔\", \"ch_nation\": \"圣皮埃尔和密克隆\", \"en_area\": \"Saint-Pierre\", \"en_nation\": \"Saint Pierre and Miquelon\", \"latitude\": \"46.7758459\", \"longitude\": \"-56.1806363\", \"timeZone\": \"America/Miquelon\" }, { \"city_id\": \"453\", \"ch_area\": \"圣乔治\", \"ch_nation\": \"格林纳达\", \"en_area\": \"St. Georges\", \"en_nation\": \"Grenada\", \"latitude\": \"36.1197257\", \"longitude\": \"-86.8531678\", \"timeZone\": \"America/Grenada\" }, { \"city_id\": \"260\", \"ch_area\": \"圣萨尔瓦多\", \"ch_nation\": \"萨尔瓦多\", \"en_area\": \"San Salvador\", \"en_nation\": \"El Salvador\", \"latitude\": \"13.6929403\", \"longitude\": \"-89.2181911\", \"timeZone\": \"America/El_Salvador\" }, { \"city_id\": \"382\", \"ch_area\": \"圣萨尔瓦多德胡胡伊\", \"ch_nation\": \"阿根廷\", \"en_area\": \"San Salvador de Jujuy\", \"en_nation\": \"Argentina\", \"latitude\": \"-24.1857864\", \"longitude\": \"-65.2994767\", \"timeZone\": \"America/Argentina/Jujuy\" }, { \"city_id\": \"408\", \"ch_area\": \"圣塔伦\", \"ch_nation\": \"巴西\", \"en_area\": \"Santarém\", \"en_nation\": \"Brazil\", \"latitude\": \"39.2366618\", \"longitude\": \"-8.6860119\", \"timeZone\": \"America/Santarem\" }, { \"city_id\": \"346\", \"ch_area\": \"圣伊萨贝尔\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Santa Isabel\", \"en_nation\": \"Mexico\", \"latitude\": \"32.6326872\", \"longitude\": \"-115.5774649\", \"timeZone\": \"America/Santa_Isabel\" }, { \"city_id\": \"342\", \"ch_area\": \"圣约翰堡\", \"ch_nation\": \"加拿大\", \"en_area\": \"Fort St. John\", \"en_nation\": \"Canada\", \"latitude\": \"56.252423\", \"longitude\": \"-120.846409\", \"timeZone\": \"America/Dawson_Creek\" }, { \"city_id\": \"281\", \"ch_area\": \"圣约翰斯\", \"ch_nation\": \"加拿大\", \"en_area\": \"St. John's\", \"en_nation\": \"Canada\", \"latitude\": \"47.5615096\", \"longitude\": \"-52.7125768\", \"timeZone\": \"America/St_Johns\" }, { \"city_id\": \"367\", \"ch_area\": \"圣约翰斯\", \"ch_nation\": \"安提瓜和巴布达\", \"en_area\": \"St. John's\", \"en_nation\": \"Antigua and Barbuda\", \"latitude\": \"47.5615096\", \"longitude\": \"-52.7125768\", \"timeZone\": \"America/Antigua\" }, { \"city_id\": \"302\", \"ch_area\": \"世界标准时间\", \"ch_nation\": \"\", \"en_area\": \"UTC\", \"en_nation\": \"\", \"latitude\": \"\", \"longitude\": \"\", \"timeZone\": \"UTC\" }, { \"city_id\": \"273\", \"ch_area\": \"首尔\", \"ch_nation\": \"韩国\", \"en_area\": \"Seoul\", \"en_nation\": \"South Korea\", \"latitude\": \"37.566535\", \"longitude\": \"126.9779692\", \"timeZone\": \"Asia/Seoul\" }, { \"city_id\": \"285\", \"ch_area\": \"斯德哥尔摩\", \"ch_nation\": \"瑞典\", \"en_area\": \"Stockholm\", \"en_nation\": \"Sweden\", \"latitude\": \"59.3293235\", \"longitude\": \"18.0685808\", \"timeZone\": \"Europe/Stockholm\" }, { \"city_id\": \"279\", \"ch_area\": \"斯科里普\", \"ch_nation\": \"北马其顿\", \"en_area\": \"Skopje\", \"en_nation\": \"Macedonia\", \"latitude\": \"41.9981294\", \"longitude\": \"21.4254355\", \"timeZone\": \"Europe/Skopje\" }, { \"city_id\": \"400\", \"ch_area\": \"斯里巴加湾\", \"ch_nation\": \"文莱\", \"en_area\": \"Bandar Seri Begawan\", \"en_nation\": \"Brunei\", \"latitude\": \"4.9030522\", \"longitude\": \"114.939821\", \"timeZone\": \"Asia/Brunei\" }, { \"city_id\": \"448\", \"ch_area\": \"斯坦利\", \"ch_nation\": \"福克兰群岛\", \"en_area\": \"Stanley\", \"en_nation\": \"Falkland Islands\", \"latitude\": \"36.1304285\", \"longitude\": \"-95.9654332\", \"timeZone\": \"Atlantic/Stanley\" }, { \"city_id\": \"426\", \"ch_area\": \"斯威夫特卡伦特\", \"ch_nation\": \"加拿大\", \"en_area\": \"Swift Current\", \"en_nation\": \"Canada\", \"latitude\": \"50.285069\", \"longitude\": \"-107.7971722\", \"timeZone\": \"America/Swift_Current\" }, { \"city_id\": \"278\", \"ch_area\": \"苏福尔斯\", \"ch_nation\": \"美国\", \"en_area\": \"Sioux Falls\", \"en_nation\": \"U.S.A.\", \"latitude\": \"43.5460223\", \"longitude\": \"-96.731265\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"324\", \"ch_area\": \"苏黎世\", \"ch_nation\": \"瑞士\", \"en_area\": \"Zurich\", \"en_nation\": \"Switzerland\", \"latitude\": \"38.924251\", \"longitude\": \"-94.665666\", \"timeZone\": \"Europe/Zurich\" }, { \"city_id\": \"286\", \"ch_area\": \"苏瓦\", \"ch_nation\": \"斐济\", \"en_area\": \"Suva\", \"en_nation\": \"Fiji\", \"latitude\": \"-18.1405049\", \"longitude\": \"178.4232507\", \"timeZone\": \"Pacific/Fiji\" }, { \"city_id\": \"280\", \"ch_area\": \"索菲亚\", \"ch_nation\": \"保加利亚\", \"en_area\": \"Sofia\", \"en_nation\": \"Bulgaria\", \"latitude\": \"42.6977082\", \"longitude\": \"23.3218675\", \"timeZone\": \"Europe/Sofia\" }, { \"city_id\": \"471\", \"ch_area\": \"塔拉瓦\", \"ch_nation\": \"基里巴斯\", \"en_area\": \"Tarawa\", \"en_nation\": \"Kiribati\", \"latitude\": \"1.4518171\", \"longitude\": \"172.9716617\", \"timeZone\": \"Pacific/Tarawa\" }, { \"city_id\": \"289\", \"ch_area\": \"塔林\", \"ch_nation\": \"爱沙尼亚\", \"en_area\": \"Tallinn\", \"en_nation\": \"Estonia\", \"latitude\": \"59.4369608\", \"longitude\": \"24.7535747\", \"timeZone\": \"Europe/Tallinn\" }, { \"city_id\": \"290\", \"ch_area\": \"塔什干\", \"ch_nation\": \"乌兹别克斯坦\", \"en_area\": \"Tashkent\", \"en_nation\": \"Uzbekistan\", \"latitude\": \"41.2994958\", \"longitude\": \"69.2400734\", \"timeZone\": \"Asia/Tashkent\" }, { \"city_id\": \"219\", \"ch_area\": \"塔希提岛\", \"ch_nation\": \"法属波利尼西亚\", \"en_area\": \"Tahiti\", \"en_nation\": \"French Polynesia\", \"latitude\": \"-17.6509195\", \"longitude\": \"-149.4260421\", \"timeZone\": \"Pacific/Tahiti\" }, { \"city_id\": \"503\", \"ch_area\": \"塔伊奥哈\", \"ch_nation\": \"法属波利尼西亚\", \"en_area\": \"Taiohae\", \"en_nation\": \"French Polynesia\", \"latitude\": \"-8.9118982\", \"longitude\": \"-140.098379\", \"timeZone\": \"Pacific/Marquesas\" }, { \"city_id\": \"288\", \"ch_area\": \"台湾台北\", \"ch_nation\": \"中国\", \"en_area\": \"Taipei\", \"en_nation\": \"China\", \"latitude\": \"25.0329636\", \"longitude\": \"121.5654268\", \"timeZone\": \"Asia/Taipei\" }, { \"city_id\": \"233\", \"ch_area\": \"太子港\", \"ch_nation\": \"海地\", \"en_area\": \"Port-au-Prince\", \"en_nation\": \"Haiti\", \"latitude\": \"18.594395\", \"longitude\": \"-72.3074326\", \"timeZone\": \"America/Port-au-Prince\" }, { \"city_id\": \"119\", \"ch_area\": \"檀香山\", \"ch_nation\": \"美国\", \"en_area\": \"Honolulu\", \"en_nation\": \"U.S.A.\", \"latitude\": \"21.3069444\", \"longitude\": \"-157.8583333\", \"timeZone\": \"Pacific/Honolulu\" }, { \"city_id\": \"533\", \"ch_area\": \"特尔城\", \"ch_nation\": \"美国\", \"en_area\": \"Tell City\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.9514447\", \"longitude\": \"-86.7677663\", \"timeZone\": \"America/Indiana/Tell_City\" }, { \"city_id\": \"291\", \"ch_area\": \"特古西加尔巴\", \"ch_nation\": \"洪都拉斯\", \"en_area\": \"Tegucigalpa\", \"en_nation\": \"Honduras\", \"latitude\": \"14.065049\", \"longitude\": \"-87.1715002\", \"timeZone\": \"America/Tegucigalpa\" }, { \"city_id\": \"340\", \"ch_area\": \"特拉维夫\", \"ch_nation\": \"以色列\", \"en_area\": \"Tel Aviv\", \"en_nation\": \"Israel\", \"latitude\": \"32.0852999\", \"longitude\": \"34.7817676\", \"timeZone\": \"Asia/Jerusalem\" }, { \"city_id\": \"297\", \"ch_area\": \"特雷埃\", \"ch_nation\": \"法国\", \"en_area\": \"Tréhet\", \"en_nation\": \"France\", \"latitude\": \"47.733106\", \"longitude\": \"0.622018\", \"timeZone\": \"Europe/Paris\" }, { \"city_id\": \"294\", \"ch_area\": \"天津\", \"ch_nation\": \"中国\", \"en_area\": \"Tianjin\", \"en_nation\": \"China\", \"latitude\": \"42.439344\", \"longitude\": \"-76.49695\", \"timeZone\": \"Asia/Shanghai\" }, { \"city_id\": \"335\", \"ch_area\": \"廷布\", \"ch_nation\": \"不丹\", \"en_area\": \"Thimphu\", \"en_nation\": \"Bhutan\", \"latitude\": \"27.4712216\", \"longitude\": \"89.6339041\", \"timeZone\": \"Asia/Dhaka\" }, { \"city_id\": \"299\", \"ch_area\": \"突尼斯\", \"ch_nation\": \"突尼斯\", \"en_area\": \"Tunis\", \"en_nation\": \"Tunisia\", \"latitude\": \"36.8064948\", \"longitude\": \"10.1815316\", \"timeZone\": \"Africa/Tunis\" }, { \"city_id\": \"383\", \"ch_area\": \"图库曼\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Tucaman\", \"en_nation\": \"Argentina\", \"latitude\": \"-26.8382241\", \"longitude\": \"-65.1678039\", \"timeZone\": \"America/Argentina/Tucuman\" }, { \"city_id\": \"465\", \"ch_area\": \"图勒\", \"ch_nation\": \"格陵兰\", \"en_area\": \"Qaanaaq, Thule\", \"en_nation\": \"Greenland\", \"latitude\": \"77.4670434\", \"longitude\": \"-69.2284827\", \"timeZone\": \"America/Thule\" }, { \"city_id\": \"353\", \"ch_area\": \"托尔斯港\", \"ch_nation\": \"法罗群岛\", \"en_area\": \"Tórshavn\", \"en_nation\": \"Faroe Islands\", \"latitude\": \"62.0107248\", \"longitude\": \"-6.7740852\", \"timeZone\": \"Atlantic/Faroe\" }, { \"city_id\": \"573\", \"ch_area\": \"托雷翁\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Torreón\", \"en_nation\": \"Mexico\", \"latitude\": \"25.5428443\", \"longitude\": \"-103.4067861\", \"timeZone\": \"America/Monterrey\" }, { \"city_id\": \"572\", \"ch_area\": \"托卢卡\", \"ch_nation\": \"墨西哥\", \"en_area\": \"Toluca\", \"en_nation\": \"Mexico\", \"latitude\": \"19.2826098\", \"longitude\": \"-99.6556653\", \"timeZone\": \"America/Mexico_City\" }, { \"city_id\": \"303\", \"ch_area\": \"瓦杜兹\", \"ch_nation\": \"列支敦士登\", \"en_area\": \"Vaduz\", \"en_nation\": \"Liechtenstein\", \"latitude\": \"47.1410303\", \"longitude\": \"9.5209277\", \"timeZone\": \"Europe/Vaduz\" }, { \"city_id\": \"212\", \"ch_area\": \"瓦加杜古\", \"ch_nation\": \"布基纳法索\", \"en_area\": \"Ouagadougou\", \"en_nation\": \"Burkina Faso\", \"latitude\": \"12.3714277\", \"longitude\": \"-1.5196603\", \"timeZone\": \"Africa/Ouagadougou\" }, { \"city_id\": \"305\", \"ch_area\": \"瓦莱塔\", \"ch_nation\": \"马耳他\", \"en_area\": \"Valletta\", \"en_nation\": \"Malta\", \"latitude\": \"35.8989085\", \"longitude\": \"14.5145528\", \"timeZone\": \"Europe/Malta\" }, { \"city_id\": \"304\", \"ch_area\": \"瓦列霍\", \"ch_nation\": \"美国\", \"en_area\": \"Vallejo\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.1040864\", \"longitude\": \"-122.2566367\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"326\", \"ch_area\": \"万象\", \"ch_nation\": \"老挝\", \"en_area\": \"Vientiane\", \"en_nation\": \"Laos\", \"latitude\": \"17.9757058\", \"longitude\": \"102.6331035\", \"timeZone\": \"Asia/Bangkok\" }, { \"city_id\": \"107\", \"ch_area\": \"危地马拉城\", \"ch_nation\": \"危地马拉\", \"en_area\": \"Guatemala City\", \"en_nation\": \"Guatemala\", \"latitude\": \"14.6349149\", \"longitude\": \"-90.5068824\", \"timeZone\": \"America/Guatemala\" }, { \"city_id\": \"442\", \"ch_area\": \"威廉斯塔德\", \"ch_nation\": \"库拉索\", \"en_area\": \"Willemstad\", \"en_nation\": \"Curacao\", \"latitude\": \"12.1224221\", \"longitude\": \"-68.8824233\", \"timeZone\": \"America/Curacao\" }, { \"city_id\": \"529\", \"ch_area\": \"威纳马克\", \"ch_nation\": \"美国\", \"en_area\": \"Winamac\", \"en_nation\": \"U.S.A.\", \"latitude\": \"41.0514299\", \"longitude\": \"-86.6030648\", \"timeZone\": \"America/Indiana/Winamac\" }, { \"city_id\": \"532\", \"ch_area\": \"韦韦\", \"ch_nation\": \"美国\", \"en_area\": \"Vevay\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.7478401\", \"longitude\": \"-85.0671725\", \"timeZone\": \"America/Indiana/Vevay\" }, { \"city_id\": \"308\", \"ch_area\": \"维多利亚\", \"ch_nation\": \"塞舌尔\", \"en_area\": \"Victoria\", \"en_nation\": \"Seychelles\", \"latitude\": \"-36.9847807\", \"longitude\": \"143.3906074\", \"timeZone\": \"Indian/Mahe\" }, { \"city_id\": \"310\", \"ch_area\": \"维尔纽斯\", \"ch_nation\": \"立陶宛\", \"en_area\": \"Vilnius\", \"en_nation\": \"Lithuania\", \"latitude\": \"54.6871555\", \"longitude\": \"25.2796514\", \"timeZone\": \"Europe/Vilnius\" }, { \"city_id\": \"307\", \"ch_area\": \"维罗纳\", \"ch_nation\": \"意大利\", \"en_area\": \"Verona\", \"en_nation\": \"Italy\", \"latitude\": \"45.4383842\", \"longitude\": \"10.9916215\", \"timeZone\": \"Europe/Rome\" }, { \"city_id\": \"309\", \"ch_area\": \"维也纳\", \"ch_nation\": \"奥地利\", \"en_area\": \"Vienna\", \"en_nation\": \"Austria\", \"latitude\": \"48.2081743\", \"longitude\": \"16.3738189\", \"timeZone\": \"Europe/Vienna\" }, { \"city_id\": \"363\", \"ch_area\": \"温得和克\", \"ch_nation\": \"纳米比亚\", \"en_area\": \"Windhoek\", \"en_nation\": \"Namibia\", \"latitude\": \"-22.5608807\", \"longitude\": \"17.0657549\", \"timeZone\": \"Africa/Windhoek\" }, { \"city_id\": \"306\", \"ch_area\": \"温哥华\", \"ch_nation\": \"加拿大\", \"en_area\": \"Vancouver\", \"en_nation\": \"Canada\", \"latitude\": \"49.2827291\", \"longitude\": \"-123.1207375\", \"timeZone\": \"America/Vancouver\" }, { \"city_id\": \"317\", \"ch_area\": \"温尼伯\", \"ch_nation\": \"加拿大\", \"en_area\": \"Winnipeg\", \"en_nation\": \"Canada\", \"latitude\": \"49.895136\", \"longitude\": \"-97.1383744\", \"timeZone\": \"America/Winnipeg\" }, { \"city_id\": \"512\", \"ch_area\": \"温森斯\", \"ch_nation\": \"美国\", \"en_area\": \"Vincennes\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.677269\", \"longitude\": \"-87.5286325\", \"timeZone\": \"America/Indiana/Vincennes\" }, { \"city_id\": \"313\", \"ch_area\": \"沃尔纳特克里克\", \"ch_nation\": \"美国\", \"en_area\": \"Walnut Creek\", \"en_nation\": \"U.S.A.\", \"latitude\": \"37.9100783\", \"longitude\": \"-122.0651819\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"376\", \"ch_area\": \"沃斯托站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Vostok Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"-78.4644829\", \"longitude\": \"106.83392\", \"timeZone\": \"Antarctica/Vostok\" }, { \"city_id\": \"211\", \"ch_area\": \"渥太华\", \"ch_nation\": \"加拿大\", \"en_area\": \"Ottawa\", \"en_nation\": \"Canada\", \"latitude\": \"45.4215296\", \"longitude\": \"-75.6971931\", \"timeZone\": \"America/Toronto\" }, { \"city_id\": \"301\", \"ch_area\": \"乌兰巴托\", \"ch_nation\": \"蒙古\", \"en_area\": \"Ulaanbaatar\", \"en_nation\": \"Mongolia\", \"latitude\": \"47.8863988\", \"longitude\": \"106.9057439\", \"timeZone\": \"Asia/Ulaanbaatar\" }, { \"city_id\": \"439\", \"ch_area\": \"乌鲁木齐\", \"ch_nation\": \"中国\", \"en_area\": \"Urumqi\", \"en_nation\": \"China\", \"latitude\": \"43.825592\", \"longitude\": \"87.616848\", \"timeZone\": \"Asia/Urumqi\" }, { \"city_id\": \"390\", \"ch_area\": \"乌斯怀亚\", \"ch_nation\": \"阿根廷\", \"en_area\": \"Ushuaia\", \"en_nation\": \"Argentina\", \"latitude\": \"-54.8019121\", \"longitude\": \"-68.3029511\", \"timeZone\": \"America/Argentina/Ushuaia\" }, { \"city_id\": \"272\", \"ch_area\": \"西雅图\", \"ch_nation\": \"美国\", \"en_area\": \"Seattle, WA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"47.6062095\", \"longitude\": \"-122.3320708\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"510\", \"ch_area\": \"希伯伦\", \"ch_nation\": \"巴勒斯坦领土\", \"en_area\": \"Hebron\", \"en_nation\": \"Palestinian Territories\", \"latitude\": \"31.532569\", \"longitude\": \"35.099826\", \"timeZone\": \"Asia/Hebron\" }, { \"city_id\": \"115\", \"ch_area\": \"希尔兹堡\", \"ch_nation\": \"美国\", \"en_area\": \"Healdsburg\", \"en_nation\": \"U.S.A.\", \"latitude\": \"38.6104658\", \"longitude\": \"-122.8691609\", \"timeZone\": \"US/Pacific\" }, { \"city_id\": \"287\", \"ch_area\": \"悉尼\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Sydney\", \"en_nation\": \"Australia\", \"latitude\": \"-33.8688197\", \"longitude\": \"151.2092955\", \"timeZone\": \"Australia/Sydney\" }, { \"city_id\": \"541\", \"ch_area\": \"锡特卡\", \"ch_nation\": \"美国\", \"en_area\": \"Sitka\", \"en_nation\": \"U.S.A.\", \"latitude\": \"57.0530556\", \"longitude\": \"-135.33\", \"timeZone\": \"America/Sitka\" }, { \"city_id\": \"524\", \"ch_area\": \"下太子区\", \"ch_nation\": \"荷属圣马丁\", \"en_area\": \"Lower Prince's Quarter\", \"en_nation\": \"Sint Maarten\", \"latitude\": \"18.0513455\", \"longitude\": \"-63.0471371\", \"timeZone\": \"America/Lower_Princes\" }, { \"city_id\": \"64\", \"ch_area\": \"夏洛特\", \"ch_nation\": \"美国\", \"en_area\": \"Charlotte, NC\", \"en_nation\": \"U.S.A.\", \"latitude\": \"35.2270869\", \"longitude\": \"-80.8431267\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"65\", \"ch_area\": \"夏洛特阿马利亚\", \"ch_nation\": \"美属维尔京群岛\", \"en_area\": \"Charlotte Amalie\", \"en_nation\": \"U.S. Virgin Islands\", \"latitude\": \"18.3419004\", \"longitude\": \"-64.9307007\", \"timeZone\": \"America/St_Thomas\" }, { \"city_id\": \"118\", \"ch_area\": \"香港特别行政区\", \"ch_nation\": \"中国\", \"en_area\": \"Hong Kong\", \"en_nation\": \"China\", \"latitude\": \"22.3193039\", \"longitude\": \"114.1693611\", \"timeZone\": \"Asia/Hong_Kong\" }, { \"city_id\": \"146\", \"ch_area\": \"小石城\", \"ch_nation\": \"美国\", \"en_area\": \"Little Rock\", \"en_nation\": \"U.S.A.\", \"latitude\": \"34.7464809\", \"longitude\": \"-92.2895948\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"196\", \"ch_area\": \"新奥尔良\", \"ch_nation\": \"美国\", \"en_area\": \"New Orleans\", \"en_nation\": \"U.S.A.\", \"latitude\": \"29.9510658\", \"longitude\": \"-90.0715323\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"443\", \"ch_area\": \"新村\", \"ch_nation\": \"圣诞岛\", \"en_area\": \"Flying Fish Cove\", \"en_nation\": \"Christmas Island\", \"latitude\": \"-10.4318725\", \"longitude\": \"105.6735131\", \"timeZone\": \"Indian/Christmas\" }, { \"city_id\": \"195\", \"ch_area\": \"新德里\", \"ch_nation\": \"印度\", \"en_area\": \"New Delhi\", \"en_nation\": \"India\", \"latitude\": \"28.6139391\", \"longitude\": \"77.2090212\", \"timeZone\": \"Asia/Kolkata\" }, { \"city_id\": \"277\", \"ch_area\": \"新加坡\", \"ch_nation\": \"新加坡\", \"en_area\": \"Singapore\", \"en_nation\": \"Singapore\", \"latitude\": \"1.352083\", \"longitude\": \"103.819836\", \"timeZone\": \"Asia/Singapore\" }, { \"city_id\": \"556\", \"ch_area\": \"新塞勒姆\", \"ch_nation\": \"美国\", \"en_area\": \"New Salem\", \"en_nation\": \"U.S.A.\", \"latitude\": \"39.7075473\", \"longitude\": \"-90.8476304\", \"timeZone\": \"America/North_Dakota/New_Salem\" }, { \"city_id\": \"202\", \"ch_area\": \"新西伯利亚\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Novosibirsk\", \"en_nation\": \"Russia\", \"latitude\": \"54.9832693\", \"longitude\": \"82.8963831\", \"timeZone\": \"Asia/Novosibirsk\" }, { \"city_id\": \"447\", \"ch_area\": \"休达\", \"ch_nation\": \"西班牙\", \"en_area\": \"Ceuta\", \"en_nation\": \"Spain\", \"latitude\": \"35.8893874\", \"longitude\": \"-5.3213455\", \"timeZone\": \"Africa/Ceuta\" }, { \"city_id\": \"120\", \"ch_area\": \"休斯顿\", \"ch_nation\": \"美国\", \"en_area\": \"Houston, TX\", \"en_nation\": \"U.S.A.\", \"latitude\": \"29.7604267\", \"longitude\": \"-95.3698028\", \"timeZone\": \"US/Central\" }, { \"city_id\": \"18\", \"ch_area\": \"雅典\", \"ch_nation\": \"希腊\", \"en_area\": \"Athens\", \"en_nation\": \"Greece\", \"latitude\": \"37.9838096\", \"longitude\": \"23.7275388\", \"timeZone\": \"Europe/Athens\" }, { \"city_id\": \"125\", \"ch_area\": \"雅加达\", \"ch_nation\": \"印度尼西亚\", \"en_area\": \"Jakarta\", \"en_nation\": \"Indonesia\", \"latitude\": \"-6.2087634\", \"longitude\": \"106.845599\", \"timeZone\": \"Asia/Jakarta\" }, { \"city_id\": \"318\", \"ch_area\": \"雅库茨克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Yakutsk\", \"en_nation\": \"Russia\", \"latitude\": \"62.0396912\", \"longitude\": \"129.7422192\", \"timeZone\": \"Asia/Yakutsk\" }, { \"city_id\": \"542\", \"ch_area\": \"雅库塔特\", \"ch_nation\": \"美国\", \"en_area\": \"Yakutat\", \"en_nation\": \"U.S.A.\", \"latitude\": \"59.5469878\", \"longitude\": \"-139.7272808\", \"timeZone\": \"America/Yakutat\" }, { \"city_id\": \"320\", \"ch_area\": \"雅温得\", \"ch_nation\": \"喀麦隆\", \"en_area\": \"Yaoundé\", \"en_nation\": \"Cameroon\", \"latitude\": \"3.8480325\", \"longitude\": \"11.5020752\", \"timeZone\": \"Africa/Douala\" }, { \"city_id\": \"508\", \"ch_area\": \"亚当斯敦\", \"ch_nation\": \"皮特凯恩群岛\", \"en_area\": \"Adamstown\", \"en_nation\": \"Pitcairn Islands\", \"latitude\": \"-25.0662897\", \"longitude\": \"-130.1004636\", \"timeZone\": \"Pacific/Pitcairn\" }, { \"city_id\": \"4\", \"ch_area\": \"亚的斯亚贝巴\", \"ch_nation\": \"埃塞俄比亚\", \"en_area\": \"Addis Ababa\", \"en_nation\": \"Ethiopia\", \"latitude\": \"8.9806034\", \"longitude\": \"38.7577605\", \"timeZone\": \"Africa/Addis_Ababa\" }, { \"city_id\": \"552\", \"ch_area\": \"亚丁\", \"ch_nation\": \"也门\", \"en_area\": \"Aden\", \"en_nation\": \"Yemen\", \"latitude\": \"12.7854969\", \"longitude\": \"45.0186548\", \"timeZone\": \"Asia/Aden\" }, { \"city_id\": \"358\", \"ch_area\": \"亚历山大\", \"ch_nation\": \"埃及\", \"en_area\": \"Alexandria\", \"en_nation\": \"Egypt\", \"latitude\": \"38.8048355\", \"longitude\": \"-77.0469214\", \"timeZone\": \"Africa/Cairo\" }, { \"city_id\": \"319\", \"ch_area\": \"亚穆苏克罗\", \"ch_nation\": \"科特迪瓦\", \"en_area\": \"Yamoussoukro\", \"en_nation\": \"Ivory Coast\", \"latitude\": \"6.8276228\", \"longitude\": \"-5.2893433\", \"timeZone\": \"Africa/Abidjan\" }, { \"city_id\": \"17\", \"ch_area\": \"亚松森\", \"ch_nation\": \"巴拉圭\", \"en_area\": \"Asunción\", \"en_nation\": \"Paraguay\", \"latitude\": \"-25.2637399\", \"longitude\": \"-57.575926\", \"timeZone\": \"America/Asuncion\" }, { \"city_id\": \"19\", \"ch_area\": \"亚特兰大\", \"ch_nation\": \"美国\", \"en_area\": \"Atlanta, GA\", \"en_nation\": \"U.S.A.\", \"latitude\": \"33.7489954\", \"longitude\": \"-84.3879824\", \"timeZone\": \"US/Eastern\" }, { \"city_id\": \"249\", \"ch_area\": \"盐湖城\", \"ch_nation\": \"美国\", \"en_area\": \"Salt Lake City\", \"en_nation\": \"U.S.A.\", \"latitude\": \"40.7607793\", \"longitude\": \"-111.8910474\", \"timeZone\": \"US/Mountain\" }, { \"city_id\": \"239\", \"ch_area\": \"仰光\", \"ch_nation\": \"缅甸\", \"en_area\": \"Rangoon\", \"en_nation\": \"Burma\", \"latitude\": \"16.840939\", \"longitude\": \"96.173526\", \"timeZone\": \"Asia/Rangoon\" }, { \"city_id\": \"343\", \"ch_area\": \"仰光\", \"ch_nation\": \"缅甸\", \"en_area\": \"Yangon\", \"en_nation\": \"Burma\", \"latitude\": \"16.840939\", \"longitude\": \"96.173526\", \"timeZone\": \"Asia/Rangoon\" }, { \"city_id\": \"126\", \"ch_area\": \"耶路撒冷\", \"ch_nation\": \"以色列\", \"en_area\": \"Jerusalem\", \"en_nation\": \"Israel\", \"latitude\": \"31.768319\", \"longitude\": \"35.21371\", \"timeZone\": \"Asia/Jerusalem\" }, { \"city_id\": \"429\", \"ch_area\": \"耶洛奈夫\", \"ch_nation\": \"加拿大\", \"en_area\": \"Yellowknife\", \"en_nation\": \"Canada\", \"latitude\": \"62.4539717\", \"longitude\": \"-114.3717887\", \"timeZone\": \"America/Yellowknife\" }, { \"city_id\": \"321\", \"ch_area\": \"叶卡捷琳堡\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Yekaterinburg\", \"en_nation\": \"Russia\", \"latitude\": \"56.8430993\", \"longitude\": \"60.6454086\", \"timeZone\": \"Asia/Yekaterinburg\" }, { \"city_id\": \"122\", \"ch_area\": \"伊尔库茨克\", \"ch_nation\": \"俄罗斯\", \"en_area\": \"Irkutsk\", \"en_nation\": \"Russia\", \"latitude\": \"52.2854834\", \"longitude\": \"104.2890222\", \"timeZone\": \"Asia/Irkutsk\" }, { \"city_id\": \"420\", \"ch_area\": \"伊凯鲁特\", \"ch_nation\": \"加拿大\", \"en_area\": \"Iqaluit\", \"en_nation\": \"Canada\", \"latitude\": \"63.746693\", \"longitude\": \"-68.5169669\", \"timeZone\": \"America/Iqaluit\" }, { \"city_id\": \"339\", \"ch_area\": \"伊拉克利翁\", \"ch_nation\": \"希腊\", \"en_area\": \"Heraklion\", \"en_nation\": \"Greece\", \"latitude\": \"35.3387352\", \"longitude\": \"25.1442126\", \"timeZone\": \"Europe/Athens\" }, { \"city_id\": \"430\", \"ch_area\": \"伊努维克\", \"ch_nation\": \"加拿大\", \"en_area\": \"Inuvik\", \"en_nation\": \"Canada\", \"latitude\": \"68.3607437\", \"longitude\": \"-133.7230178\", \"timeZone\": \"America/Inuvik\" }, { \"city_id\": \"123\", \"ch_area\": \"伊斯兰堡\", \"ch_nation\": \"巴基斯坦\", \"en_area\": \"Islamabad\", \"en_nation\": \"Pakistan\", \"latitude\": \"33.6844202\", \"longitude\": \"73.0478848\", \"timeZone\": \"Asia/Karachi\" }, { \"city_id\": \"124\", \"ch_area\": \"伊斯坦布尔\", \"ch_nation\": \"土耳其\", \"en_area\": \"Istanbul\", \"en_nation\": \"Turkey\", \"latitude\": \"41.0082376\", \"longitude\": \"28.9783589\", \"timeZone\": \"Europe/Istanbul\" }, { \"city_id\": \"464\", \"ch_area\": \"依托克托洛米特\", \"ch_nation\": \"格陵兰\", \"en_area\": \"Ittoqqortoormiit\", \"en_nation\": \"Greenland\", \"latitude\": \"70.4855691\", \"longitude\": \"-21.9628757\", \"timeZone\": \"America/Scoresbysund\" }, { \"city_id\": \"121\", \"ch_area\": \"印第安纳波利斯\", \"ch_nation\": \"美国\", \"en_area\": \"Indianapolis, IN\", \"en_nation\": \"U.S.A.\", \"latitude\": \"39.768403\", \"longitude\": \"-86.158068\", \"timeZone\": \"America/Indianapolis\" }, { \"city_id\": \"395\", \"ch_area\": \"尤克拉\", \"ch_nation\": \"澳大利亚\", \"en_area\": \"Eucla\", \"en_nation\": \"Australia\", \"latitude\": \"-31.6761605\", \"longitude\": \"128.8891311\", \"timeZone\": \"Australia/Eucla\" }, { \"city_id\": \"425\", \"ch_area\": \"雨河\", \"ch_nation\": \"加拿大\", \"en_area\": \"Rainy River\", \"en_nation\": \"Canada\", \"latitude\": \"48.7216623\", \"longitude\": \"-94.5695247\", \"timeZone\": \"America/Rainy_River\" }, { \"city_id\": \"127\", \"ch_area\": \"约翰内斯堡\", \"ch_nation\": \"南非\", \"en_area\": \"Johannesburg\", \"en_nation\": \"South Africa\", \"latitude\": \"-26.2041028\", \"longitude\": \"28.0473051\", \"timeZone\": \"Africa/Johannesburg\" }, { \"city_id\": \"520\", \"ch_area\": \"詹姆斯敦\", \"ch_nation\": \"圣赫勒拿、阿森松和特里斯坦-达库尼亚\", \"en_area\": \"Jamestown\", \"en_nation\": \"Saint Helena, Ascension and Tristan da Cunha\", \"latitude\": \"37.2116383\", \"longitude\": \"-76.7752102\", \"timeZone\": \"Atlantic/St_Helena\" }, { \"city_id\": \"378\", \"ch_area\": \"昭和站\", \"ch_nation\": \"南极洲\", \"en_area\": \"Syowa Station\", \"en_nation\": \"Antarctica\", \"latitude\": \"39.8607264\", \"longitude\": \"-75.3000876\", \"timeZone\": \"Antarctica/Syowa\" }, { \"city_id\": \"67\", \"ch_area\": \"芝加哥\", \"ch_nation\": \"美国\", \"en_area\": \"Chicago, IL\", \"en_nation\": \"U.S.A.\", \"latitude\": \"41.8781136\", \"longitude\": \"-87.6297982\", \"timeZone\": \"America/Chicago\" }, { \"city_id\": \"455\", \"ch_area\": \"直布罗陀\", \"ch_nation\": \"直布罗陀\", \"en_area\": \"Gibraltar\", \"en_nation\": \"Gibraltar\", \"latitude\": \"36.140751\", \"longitude\": \"-5.353585\", \"timeZone\": \"Europe/Gibraltar\" }, { \"city_id\": \"438\", \"ch_area\": \"重庆\", \"ch_nation\": \"中国\", \"en_area\": \"Chongqing\", \"en_nation\": \"China\", \"latitude\": \"29.4315861\", \"longitude\": \"106.912251\", \"timeZone\": \"Asia/Chongqing\" }, { \"city_id\": \"522\", \"ch_area\": \"朱巴\", \"ch_nation\": \"南苏丹\", \"en_area\": \"Juba\", \"en_nation\": \"South Sudan\", \"latitude\": \"4.859363\", \"longitude\": \"31.57125\", \"timeZone\": \"Africa/Juba\" }, { \"city_id\": \"540\", \"ch_area\": \"朱诺\", \"ch_nation\": \"美国\", \"en_area\": \"Juneau\", \"en_nation\": \"U.S.A.\", \"latitude\": \"58.3019444\", \"longitude\": \"-134.4197221\", \"timeZone\": \"America/Juneau\" }] Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"IDOGetFunction.html":{"url":"IDOGetFunction.html","title":"获取命令功能","keywords":"","body":"获取命令 7.1功能概述 获取命令是移动端通过命令发送数据到手环端，以手环端返回响应状态和结构体数据对应处理解析数据并转换对应的模型，当成功时存储设置数据，反则不作存储，根据状态码作提示，获取成功是的errorCode等于0 7.2主要命令功能 获取Mac命令 获取设备信息 获取功能列表 获取实时数据 获取通知状态 获取活动数量 获取GPS状态 获取版本信息 获取OTA授权 获取运动类型 获取默认语言 获取错误日志 获取字库版本 获取电池信息 获取菜单列表 获取V3闹钟 获取V3心率模式 获取MTU 获取过热日志 获取运动识别开关 获取卡路里/距离/中高运动时长的目标 获取bt 配对连接状态 获取通话常用联系人 获取抬腕手势 获取健康监测开关 获取v3字库列表 获取运动模式排序 获取主界面控件排序 获取勿扰模式 获取第三方应用的通知状态 获取日程提醒 获取屏幕亮度 获取运动子项数据排列 获取走动提醒 7.3 Demo获取功能入口 Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"get/IDOGetMacFunction.html":{"url":"get/IDOGetMacFunction.html","title":"获取Mac命令","keywords":"","body":"获取Mac地址 Mac地址模型说明 IDOGetMacAddrInfoBluetoothModel 参数 说明 备注 macAddr Mac地址 str btMacAddr BT Mac 地址 str 命令代码 Objc: [IDOFoundationCommand getMacAddrCommand:^(int errorCode, IDOGetMacAddrInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getMacAddrCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetDeviceInfoFunction.html":{"url":"get/IDOGetDeviceInfoFunction.html","title":"获取设备信息","keywords":"","body":"获取设备信息 设备信息模型说明 IDOGetDeviceInfoBluetoothModel 参数 说明 备注 mode 设备模式 int battStatus 电量状态 0x0:正常,0x01:正在充电,0x02:充满,0x03:电量低 battLevel 电量级别 0～100 rebootFlag 是否重启 int bindTimeStr 绑定时间戳 str bindState 绑定状态 int bindType 绑定类型 0x00默认(注意以前ID号定制),超时时间无效, 0x01(单击[按键在下面]), 0x02(为长按[按键在下面]), 0x03(屏幕点击 横向确认和取消,确认在左边), 0x04(屏幕点击 横向确认和取消,确认在右边)， 0x05(屏幕点击 竖向确认和取消,确认在上边)， 0x06(屏幕点击 竖向确认和取消,确认在下边), 0x07点击(右边一个按键) bindTimeout 绑定超时 最长为15秒,0表示不超时 platform 手环的平台 0:nordic,10:realtek 8762x,20:cypress psoc6,30:Apollo3 40:汇顶,50:nordic+泰凌微,60:泰凌微+5340+no nand flash,70:汇顶+富瑞坤;80:5340 isSyncConfig 是否同步过配置 bool authCodeError 绑定加密授权码错误 bool deviceShapeType 设备形状类型 0：无效；1：圆形；2：方形的； 3：椭圆 deviceType 设备类型 0：无效；1：手表；2：手环 dialMainVersion 自定义表盘主版本 从1开始 0:不支持 showBindChoiceUi 固件绑定时候显示勾ui界面 0:不需要 1:需要 masterDevice 主账号设备 主账号设备 : 1 子账号设备 : 2 deviceBtName 设备bt名字 str 命令代码 Objc: [IDOFoundationCommand getDeviceInfoCommand:^(int errorCode, IDOGetDeviceInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getDeviceInfoCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetFuncListFunction.html":{"url":"get/IDOGetFuncListFunction.html","title":"获取功能列表","keywords":"","body":"获取功能列表 功能表模型说明 当前功能列表有38个功能子表 全局功能表对象 Objc: //功能表宏 __IDO_FUNCTABLE__ Swift: //功能表对象 IDOBluetoothEngine.shareInstance()?.managerEngine.funcTableModel IDOGetFuncTable1BluetoothModel 参数 说明 备注 ch 中文 bool eng 英文 bool french 法文 bool german 德文 bool italian 意大利文 bool spanish 西班牙文 bool japanese 日文 bool czech 捷克文 bool IDOGetFuncTable2BluetoothModel 参数 说明 备注 romanian 罗马尼亚文 bool lithuanian 立陶宛文 bool dutch 荷兰文 bool slovenian 斯洛文尼亚文 bool hungarian 匈牙利文 bool polish 波兰文 bool russian 俄罗斯文 bool ukrainian 乌克兰文 bool IDOGetFuncTable3BluetoothModel 参数 说明 备注 slovak 斯洛伐克文 bool danish 丹麦文 bool croatian 克罗地亚文 bool indonesian 印尼文 bool korean 韩文 bool hindi 印地文 bool portuguese 葡萄牙文 bool turkish 土耳其文 bool IDOGetFuncTable4BluetoothModel 参数 说明 备注 stepCalculation 步数 bool sleepMonitor 睡眠检测 bool singleSport 单次运动 bool realtimeData 实时数据 bool deviceUpdate 设备更新 bool heartRate 心率功能 bool ancs 通知中心 bool timeLine 时间线 bool IDOGetFuncTable5BluetoothModel 参数 说明 备注 takePhoto 拍照 bool music 音乐 bool hidPhoto 控制拍照 bool fiveHrInterval 5个心率区间 bool bindAuth 绑定授权 bool fastSync 快速同步 bool exFuncTable 通知中心 bool bindCodeAuth 绑定码授权 bool IDOGetFuncTable6BluetoothModel 参数 说明 备注 wakeUp 起床 bool sleep 睡觉 bool sport 锻炼 bool medicine 吃药 bool dating 约会 bool party 聚会 bool metting 会议 bool custom 自定义 bool dinner 吃饭 bool brushTeeth 刷牙 bool rest 休息 bool course 课程 bool shower 洗澡 bool learning 学习 bool playTime 玩耍时间 bool IDOGetFuncTable7BluetoothModel 参数 说明 备注 calling 来电提醒 bool callingContact 来电联系人 bool callingNum 来电号码 bool supportFahrenheit 设置单位支持华氏度 bool v3FunctionTable V3功能表 bool screenBrightInterval 支持app设置屏幕亮度显示间隔 bool IDOGetFuncTable8BluetoothModel 参数 说明 备注 message 短信 bool email 邮件 bool qq qq bool weixin 微信 bool sinaWeibo 新浪 bool facebook facebook bool twitter twitter bool IDOGetFuncTable9BluetoothModel 参数 说明 备注 whatsapp whatsapp bool messengre messengre bool instagram instagram bool linkedIn linkedIn bool calendar calendar bool skype skype bool alarmClock alarmClock bool otherReminder 其他提醒 bool IDOGetFuncTable10BluetoothModel 参数 说明 备注 vkontakte vkontakte bool line line bool viber viber bool kakaoTalk kakaoTalk bool gmail gmail bool outlook outlook bool snapchat snapchat bool telegram telegram bool IDOGetFuncTable11BluetoothModel 参数 说明 备注 sedentariness 久坐提醒 bool antilost 防丢提醒 bool onetouchCalling 一键呼叫 bool findPhone 寻找手机 bool findDevice 寻找手环 bool configDefault 默认模式 bool upHandGesture 手势 bool weather 天气预报 bool IDOGetFuncTable12BluetoothModel 参数 说明 备注 tipInfoContact 提示信息联系人 bool tipInfoNum 提示信息号码 bool tipInfoContent 提醒信息内容 bool setV3HeartInterval 设置v3心率的间隔 bool agpsOnLine 支持agps online升级 bool agpsOffLine 支持agps off升级 bool agpsOffLine 支持agps off升级 bool weatherCity 天气城市 bool IDOGetFuncTable13BluetoothModel 参数 说明 备注 staticHr 静态心率 bool doNotDisturb 防打扰 bool displayMode 显示模式 bool heartRateMonitor 心率监测 bool bilateralAntiLost 双向防丢 bool allAppNotice 所有通知提醒 bool noShowHrInterval 不显示心率区间 bool flipScreen 翻转屏幕 bool IDOGetFuncTable14BluetoothModel 参数 说明 备注 walk 走路 bool run 跑步 bool byBike 骑行 bool onFoot 徒步 bool swim 游泳 bool mountainClimbing 爬山 bool badminton 羽毛球 bool other 其他 bool IDOGetFuncTable15BluetoothModel 参数 说明 备注 fitness 健身 bool spinning 椭圆球 bool treadmill 跑步机 bool sitUp 仰卧起坐 bool pushUp 俯卧撑 bool dumbbell 哑铃 bool weightlifting 举重 bool IDOGetFuncTable16BluetoothModel 参数 说明 备注 bodybuildingExercise 健身操 bool yoga 瑜伽 bool ropeSkipping 跳绳 bool tableTennis 乒乓球 bool basketball 篮球 bool football 足球 bool volleyball 排球 bool tennis 网球 bool skateboard 滑板 bool mountaineering 登山 bool squat 深蹲 bool IDOGetFuncTable17BluetoothModel 参数 说明 备注 golf 高尔夫 bool baseball 棒球 bool skiing 滑雪 bool rollerSkating 轮滑 bool dance 跳舞 bool IDOGetFuncTable18BluetoothModel 参数 说明 备注 logIn 登陆 bool hidPhoto 手环自带相机拍照 bool watchDial 表盘 bool shortcut 快捷方式 bool unitSet 单位分开设置 bool bloodPressure 血压 bool wechatSport 微信运动 bool fineTimeControl 精细的时间段控制 bool IDOGetFuncTable19BluetoothModel 参数 说明 备注 gps gps bool sleepPeriod 睡眠时间段 bool screenBrightness 屏幕亮度调节 bool id107Dial id107l 表盘 bool dhNewAppNotice 未知属性，咨询固件 bool noitice128Byte 128字节通知 bool activityTimeSync 获取时间同步 bool v3Log v3 收集 bool IDOGetFuncTable20BluetoothModel 参数 说明 备注 menstruation 女性生理周期 bool calorieGoal 卡路里目标 bool distanceGoal 距离目标 bool spo2Data 血氧数据 bool pressureData 压力数据 bool getNoDisturb 获取勿扰模式 bool sportModeSort 运动模式排序 bool noticeByte 通知消息字节250 bool IDOGetFuncTable21BluetoothModel 参数 说明 备注 chatwork chatwork bool slack slack bool tumblr tumblr bool youtube youtube bool yahooPinterest yahoo pinterest bool yahooMail yahoo mail bool keep keep bool IDOGetFuncTable22BluetoothModel 参数 说明 备注 autoPair 连接后自动配对 bool noDisconnectPair 不断线配对 bool v3HrData v3 心率数据 bool v3SwimData v3 游泳数据 bool v3ActivityData v3 活动数据 bool v3GpsData v3 gps 数据 bool drinkWaterReminder 喝水提醒 bool IDOGetFuncTable23BluetoothModel 参数 说明 备注 level5HrInterval 5级心率区间 bool walkReminder 走动提醒 bool breatheTrain 呼吸训练 bool screenBrightness5Level 5级亮度调节 bool activitySwitch 运动模式开关 自动识别 bool disturbHaveRangRepeat 勿扰 支持可选时间范围和星期 bool nightAutoBrightness 夜间自动亮度 bool longMtu 传输长包 bool IDOGetFuncTable24BluetoothModel 参数 说明 备注 outdoorRun 户外跑步 bool indoorRun 室内跑步 bool outdoorCycle 户外骑行 bool indoorCycle 室内骑行 bool outdoorWalk 户外走路 bool indoorWalk 室内走路 bool poolSwim 泳池游泳 bool openWaterSwim 开放水域游泳 bool IDOGetFuncTable25BluetoothModel 参数 说明 备注 elliptical 椭圆机 bool rower 划船机 bool hiit 高强度间歇训练法 bool cricket 板球运动 bool pilates 普拉提 bool outdoorPlay 户外玩耍(定制 kr01) bool otherActivity 其他运动(定制 kr01) bool zumba 尊巴舞 (206Lite定制) bool IDOGetFuncTable26BluetoothModel 参数 说明 备注 factoryReset 支持恢复出厂设置,用于自动解绑 bool liftingWrisBacklight 抬腕亮背光 命令和抬手亮屏一样,就是app显示的名字不一样,不能和other.upHandGesture共存 bool multiActivityNoUseApp 多运动不能使用app bool multiDial 多表盘 bool mediumToHighActiveDuration 中高强度活动 bool defaultSportType 获取手环运动模式 bool downloadLanguage 可下载语言 bool flashLog 日志功能 bool IDOGetFuncTable27BluetoothModel 参数 说明 备注 thai 泰国文 bool vietnamese 越南文 bool burmese 缅甸文 bool filipino 菲律宾文 bool traditionalChinese 繁体中文 bool greek 希腊文 bool arabic 阿拉伯语 bool sweden 瑞典语 bool finland 芬兰语 bool persia 波斯语 bool norwegian 挪威语 bool IDOGetFuncTable28BluetoothModel 参数 说明 备注 chargingTime 充电时间 bool menuList 菜单设置 bool photoWallpaper 背景照片 bool voiceTransmission 语音功能 bool utcTimeZone utc时间 bool choiceUse 新的4选2功能 bool heartRateInterval 支持心率区间设置 bool v3SportsType v3的运动类型设置和获取 bool IDOGetFuncTable29BluetoothModel 参数 说明 备注 v3SyncAlarm v3的闹钟的同步 bool ubloxModel 支持ublox模块 bool v3SyncActivity v3多运动同步数据 bool getHeatLog 获取过热日志 bool v3Spo2OffsetChange V3血氧数据 偏移按照分钟偏移功能表位 bool screenBrightness3Level 3级亮度调节 默认是5级别，手表app显示，手表不显示 bool encryptedAuth 绑定授权码，授权绑定 bool v3Sleep v3睡眠眼动数据同步 bool IDOGetFuncTable30BluetoothModel 参数 说明 备注 restoreFactory 恢复出厂设置 bool getScreenBrightness 屏幕亮度获取 bool getUpHandGesture 抬腕亮屏数据获取 bool getNotDisturb 勿擾模式获取 bool (弃用) fastMsgData 快速短信获取 bool getDeviceUpdateState 获取手环的升级状态 bool v3Sports v3多运动同步 bool v3ActivityExchangeData v3多运动同步数据交换 bool IDOGetFuncTable31BluetoothModel 参数 说明 备注 v3GetLangLib v3 语言字库列表 bool setPhoneVoice 设置手机音量 bool getWatchId 获取表盘ID bool handWashReminder 洗手提醒 bool clearBleCache 清除手环缓存 bool v3VoiceReplyTxt v3的语音文本回复 bool getDevName 获取设备名称 bool brightScreenTime 亮屏时长 bool IDOGetFuncTable32BluetoothModel 参数 说明 备注 tiktok tiktok bool redbus redbus bool dailyhunt dailyhunt bool hotstar hotstar bool inshorts inshorts bool paytm paytm bool amazon amazon bool flipkart flipkart bool IDOGetFuncTable33BluetoothModel 参数 说明 备注 prime prime bool netflix netflix bool gpay gpay bool phonpe phonpe bool swiggy swiggy bool zomato zomato bool makeMyTrip makeMyTrip bool jioTv jioTv bool microsoft microsoft bool whatsappBusiness whatsappBusiness bool nioseFit nioseFit bool missedCall missedCall bool mattersRemind mattersRemind bool ytmusic ytmusic bool uber uber bool ola ola bool googleMeet googleMeet bool mormaiiSmartwatch mormaiiSmartwatch bool technosConnect technosConnect bool enioei enioei bool aliexpress aliexpress bool shopee shopee bool teams teams bool support99Taxi support99Taxi bool uberEats uberEats bool lFood lFood bool rappi rappi bool mercadoLivre mercadoLivre bool magalu magalu bool americanas americanas bool yahoo yahoo bool v2SupportGetAllContact gto1pro 固件支持app获取联系人本地文件修改时间或者上传全部通讯录联系人 bool IDOGetFuncTable34BluetoothModel 参数 说明 备注 takingMedicine 吃药提醒 bool localDial app支持本地表盘改 云端表盘图片下载 bool pressureHighReminder 压力过高提醒 bool notSupportHrHighAlarm V3的心率过高不支持 bool supportHrHighOrLowBtAlarm V3的心率 -- 208BT过高过低提醒功能表 bool supportSendOriginalSizeD1 208BT定制 支持发送解压前的文件大小命令 文件传输-->表盘使用 bool notSupportPhotoWallpaper BIT1 k6项目不需要对应的壁纸表盘，veryFit默认的都是支持的，新加一个不支持的功能表，不需要的配置这个 bool supportCalorieUnit 设置单位的增加卡路里设置 bool supportSwimPoolUnit 设置单位的增加泳池的单位设置 bool v3GetSportSortField app端用V3的获取运动排序协议中的最大最少默认字段， gt01以前app都没有用到最大最少默认字段，适配k6项目需要配置对应的数据字段，添加功能表兼容 bool getAlexaDefaultLanguage 获取alexa的默认语言 bool setWallpaperColor v3壁纸表盘颜色设置 bool supportWearFlag 获取每个小时的佩戴标志位，在当天的运动数据同步中获取 bool watchDialSort 设置表盘顺序 bool suppportPing 支持ping回调 bool supportV3Bp 205L血压 v3健康数据同步支持 bool v2BpSetOrMeasurement 血压校准与设置 bool wallpaperOnlyTimeColor 206lite 壁纸表盘只支持移动时间、日期和修改颜色 bool supportBreathRate 固件支持呼吸率开关设置 ，以及呼吸率数据同步返回 bool supportGrade 多运动同步数据支持摄氧量等级数据 bool supportSportPlan 支持跑步计划协议以及跑步课程功能表 bool IDOGetFuncTable35BluetoothModel 参数 说明 备注 scientificSleep 支持科学睡眠 bool getBatteryLog 支持获取电池日志 bool getNewWatchList 支持获取表盘列表的接口 bool multipleTimers 支持多个定时器 bool getMenuList 获取设备菜单列表 bool autoSyncV3HealthData v3健康数据同步，半个小时自动同步 bool getDeviceLogState app获取重启日志错误码和标志位 bool dataTranContinue 支持断点续传 bool notifyIconAdaptive 消息提醒图标自适应 bool setScientificSleepSwitch 科学睡眠开关 bool pressureNotifyFlagMode 压力开关增加通知类型和全天压力模式设置 bool spo2NotifyFlag 血氧开关增加通知类型 bool menstrualNotifyFlag 血氧开关增加通知类型 bool drinkWaterNotifyFlag 喝水开关增加通知类型 bool getHealthSwitchState 获取所有的健康监测开关 bool setTemperatureSwitch 设置夜间体温开关 bool findPhoneStop 泰坦定制 支持结束寻找手机功能表 bool permissionsState 泰坦定制 支持app被禁用、开启权限通知固件 bool IDOGetFuncTable36BluetoothModel 参数 说明 备注 alexaSetWeather Alexa 设置天气 bool alexaJumpSportUi alexa 跳转运动界面 bool alexaJumpUi alexa 跳转界面 bool alexaEasyOperate alexa 简单操作 bool alexaGetAlarm alexa 获取闹钟 bool alexaSetOnOff alexa app设置开关命令 bool getWalkReminder 走动提醒目标获取 bool setMusicName 音乐名称设置 bool longCityName 长包城市名称 bool maxBloodOxygen 算法的最大摄氧量 bool systemTakePictures 支持系统拍照 bool walkTimeReminder 207a定制 走动实时提醒(c库功能表废弃了) bool getHeartRateReminder 支持获取心率过高过低提醒时的心率数据 bool stepsOneMinute 一分钟间隔步数 bool showDetectionTime 206boat新增 心率检测模式支持展示检测时段 bool timeZoneFloat 支持世界时钟设备在有此功能表的情况下时间设置中 time_zone为浮点型小数点后有两位， app此时的时区设定值为实际时区值的扩大一百倍 ，无此功能表则按实际时区值下发 bool setAlarmSpecifyType kr01定制 支持v3闹钟设置获取指定类型和名称 bool IDOGetFuncTable37BluetoothModel 参数 说明 备注 supportCyclingUnit 增加骑行的单位设置 bool supportWalkRunUnit 增加步行跑步的单位设置 bool midHighTimeGoal 设置目标增加中高运动时长 bool walkReminderTimeGoal 设置走动提醒中的目标时间 bool exchangeDataRealTimePace v3的运动数据数据交换增加实时的配速字段 bool supportPairEachConnect 设置支持系统配对每次连接的时候app不清除配对设备 bool supportAppSendVoiceToBle 支持app下发压缩的sbc语言文件给ble bool setSpo2LowValue 设置血氧过低阈值 bool spo2AllDayOnOff 支持app设置全天的血氧开关数据 bool smartHeartRate 支持app设置智能心率 bool alexaReminderAddSecond alexa语音提醒增加对应的s钟传输字段 bool syncNoise 同步噪音 bool syncTemperature 同步温度 bool set100SportSort 100种运动数据排序 bool sportMediumIcon 100种运动需要的中图功能表 bool set20SportParamSort 20种基础运动数据子参数排序 bool setMainUiSort 主界面ui控件排列 bool scheduleReminder 日程提醒 bool autoActivitySwitch 运动模式自动识别开关设置 bool getCalorieDistanceGoal 运动三环目标获取 bool setStressCalibration 206新增压力校准设置 bool watchCapacitySizeDisplay 支持显示表盘容量 bool watchCapacitySizeDisplay 支持显示表盘容量 bool watchPhotoPositionMove 支持壁纸表盘时间位置移动、控件图标颜色修改、控件功能选择 bool chooseOtherOtaMode 固件升级方式区分 bool surpportNewRetainData 支持新固件app删除设备不删除数据 bool supportWalkGoalSteps 固件支持每小时目标步数设置和获取 bool newRetainData 固件支持解绑不清除设备上的数据 bool IDOGetFuncTable38BluetoothModel 参数 说明 备注 walkReminderAddNotify 走动提醒增加通知类型 bool setFitnessGuidance 支持健身指导开关下发 bool syncContact 支持联系人同步 bool setWeatherSunTime 支持天气推送增加日落日出时间 bool setV3Weather 支持V3天气 bool setV3WeatherSunrise 支持3天日落日出天气设置 bool setV3WeatherAddAirGrade gt01pro 支持V3天气 下发空气质量等级 bool setV3WorldTime 支持世界时间设置 bool setNotifyAddAppName 消息提醒增加8国语言app名字新的协议 bool transferMusicFile 支持固件音乐传输 bool getActivitySwitch 支持运动模式识别开关获取 bool historyMenstrual 支持经期的历史数据下发 bool bleAndBtVersion 获得固件三级版本和BT的三级版本 bool musicAddSingerName 音乐添加歌手名 bool menstrualAddPregnancy v2经期提醒设置 增加易孕期和结束时间设置 bool alexaControll100sports alexa100种运动新增功能表 bool walkTimeReminder 207a定制 走动实时提醒 bool (弃用) setUnreadAppReminder 未读信息红点提示开关 bool alexaControll100brightness 100级亮度判断 bool getBleMacAddr 获取bt蓝牙地址（gt01 pro） bool setNotificationStatus 通知应用状态设置 bool syncV3ActivityAddParam 同步V3的多运动增加新的参数 bool stressCalibrationThreshold 压力开关阀值设置 bool notSurportCalling3SDelay realme wear 默认为显示，有此功能表就不支持支持来电提醒页面的“延迟三秒”开关设置项显示 bool 命令代码 Objc: [IDOFoundationCommand getFuncTableCommand:^(int errorCode, IDOGetDeviceFuncBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getFuncTableCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetLiveDataFunction.html":{"url":"get/IDOGetLiveDataFunction.html","title":"获取实时数据","keywords":"","body":"获取实时数据 功能表 __IDO_FUNCTABLE__.funcTable4Model.realtimeData 实时数据模型说明 IDOGetLiveDataBluetoothModel 参数 说明 备注 step 步数 int calories 卡路里 int distances 距离 int activeTime 活动时长 int heartRate 心率 int 命令代码 Objc: [IDOFoundationCommand getLiveDataCommand:^(int errorCode, IDOGetLiveDataBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getLiveDataCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetNoticeFunction.html":{"url":"get/IDOGetNoticeFunction.html","title":"获取通知状态","keywords":"","body":"获取通知状态 功能表 __IDO_FUNCTABLE__.funcTable4Model.ancs 通知状态模型说明 IDOSetNoticeInfoBuletoothModel 参数 说明 备注 isPairing 是否配对 bool callDelay 来电延迟 目前设置必须大于等于3秒才有效 isOnChild 是否开启子开关 只对智能提醒有效,对来电提醒无效 isOnCall 来电提醒 bool isOnSms 短信提醒 bool isOnEmail 邮件提醒 bool isOnWeChat 微信提醒 bool isOnQq qq提醒 bool isOnWeibo 微博提醒 bool isOnFaceBook FaceBook提醒 bool isOnTwitter Twitter提醒 bool isOnWhatsapp Whatsapp提醒 bool isOnMessenger Messenger提醒 bool isOnInstagram Instagram提醒 bool isOnLinkedIn LinkedIn提醒 bool isOnCalendar Calendar提醒 bool isOnSkype Skype提醒 bool isOnAlarm Alarm提醒 bool isOnPokeman Pokeman提醒 bool isOnVkontakte Vkontakte提醒 bool isOnLine Line提醒 bool isOnViber Viber提醒 bool isOnKakaoTalk KakaoTalk提醒 bool isOnGmail Gmail提醒 bool isOnOutlook Outlook提醒 bool isOnSnapchat Snapchat提醒 bool isOnTelegram Telegram提醒 bool isOnChatwork Chatwork提醒 bool isOnSlack Slack提醒 bool isOnYahooMail Yahoo Mail提醒 bool isOnTumblr Tumblr提醒 bool isOnYoutube Youtube提醒 bool isOnYahooPinterest Yahoo Pinterest提醒 bool isOnKeep Keep提醒 bool isOnTikTok TikTok提醒 bool isOnRedbus Redbus 提醒 bool isOnDailyhunt isOnDailyhunt 提醒 bool isOnHotstar Hotstar 提醒 bool isOnInshorts Inshorts 提醒 bool isOnPaytm Paytm 提醒 bool isOnAmazon Amazon 提醒 bool isOnFlipkart Flipkart 提醒 bool isOnPrime Prime 提醒 bool isOnNetflix Netflix 提醒 bool isOnGpay Gpay 提醒 bool isOnPhonpe Phonpe 提醒 bool isOnSwiggy Swiggy 提醒 bool isOnZomato Zomato 提醒 bool isOnMakeMyTrip MakeMyTrip 提醒 bool isOnJioTv JioTv 提醒 bool isOnMicrosoft Microsoft 提醒 bool isOnWhatsAppBusiness WhatsApp Business 提醒 bool isOnNioseFit NioseFit 提醒 bool isOnDidNotCall Did no call 提醒 bool isOnMattersRemind 事项 提醒 bool isOnUber Uber 提醒 bool isOnOla Ola 提醒 bool isOnYtMusic Yt music 提醒 bool isOnGoogleMeet Google meet 提醒 bool isOnMormaiiSmartwatch Mormaii smartwatch 提醒 bool isOnTechnosConnect Technos connect 提醒 bool isOnEnioei Enioei 提醒 bool isOnAliexpress Aliexpress 提醒 bool isOnShopee Shopee 提醒 bool isOnTeams Teams 提醒 bool isOn99Taxi 99 taxi 提醒 bool isOnUberEats Uber eats 提醒 bool isOnLfood l food 提醒 bool isOnRappi rappi 提醒 bool isOnMercadoLivre Mercado Livre 提醒 bool isOnMagalu Magalu 提醒 bool isOnAmericanas Americanas 提醒 bool isOnYahoo Yahoo 提醒 bool 命令代码 Objc: [IDOFoundationCommand getNoticeStatusCommand:^(int errorCode, IDOSetNoticeInfoBuletoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getNoticeStatusCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetActivityCountFunction.html":{"url":"get/IDOGetActivityCountFunction.html","title":"获取活动数量","keywords":"","body":"获取活动数量 功能表 __IDO_FUNCTABLE__.funcTable4Model.timeLine || [IDOGetDeviceFuncBluetoothModel isHaveMovment] 活动数量模型说明 IDOGetActivityCountBluetoothModel 参数 说明 备注 activityCount 活动个数 int activityPacketCount 活动包个数 int gpsCount GPS个数 int gpsPacketCount GPS包个数 int 命令代码 Objc: [IDOFoundationCommand getActivityCountCommand:^(int errorCode, IDOGetActivityCountBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getActivityCountCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"get/IDOGetGpsStateFunction.html":{"url":"get/IDOGetGpsStateFunction.html","title":"获取GPS状态","keywords":"","body":"获取GPS状态 功能表 __IDO_FUNCTABLE__.funcTable19Model.gps GPS状态模型说明 IDOGetGpsStatusBluetoothModel 参数 说明 备注 gpsRunStatus GPS 运行状态 0:没有运行,1:正在搜星,2:为正在跟踪 isAgpsVaild AGPS 是否有效 有效期剩余小时,非0为有效 命令代码 Objc: [IDOFoundationCommand getGpsStatusCommand:^(int errorCode, IDOGetGpsStatusBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getGpsStatusCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetVersionFunction.html":{"url":"get/IDOGetVersionFunction.html","title":"获取版本信息","keywords":"","body":"获取版本信息 版本信息模型说明 IDOGetVersionInfoBluetoothModel 参数 说明 备注 sdkVersion SDK版本 数值为x10,11表示1.1的版本 hrAlgorithmVersion 心率算法版本 数值为x10,11表示1.1的版本 sleepAlgorithmVersion 睡眠算法版本 数值为x10,11表示1.1的版本 stepAlgorithmVersion 计步算法版本 数值为x10,11表示1.1的版本 gestureRecognitionVersion 手势识别算法 数值为x10,11表示1.1的版本 pcbVersion PCB版本 数值为x10,11表示1.1的版本 spo2Version 血氧算法版本 int stressVersion 压力算法版本 int kcalVersion 卡路里算法版本 int disVersion 距离算法版本 int axle3SwimVersion 三轴传感器游泳算法版本 int axle6SwimVersion 六轴传感器游泳算法版本 int actModeTypeVersion 运动自识别算法版本 int allDayHrVersion 全天心率算法版本 int gpsVersion gps算法版本 int gpsVersion gps算法版本 int peripheralsVersion 外设版本 206项目外设版本 int firmwareVersion1 固件版本version1 int firmwareVersion2 固件版本version2 int firmwareVersion3 固件版本version3 int btFlag BT版本生效标志位 0：无效，1：说明固件有对应的BT固件 btVersion1 BT的版本version1 int btVersion2 BT的版本version2 int btVersion3 BT的版本version3 int btMatchVersion1 BT的所需要匹配的版本version1 int btMatchVersion2 BT的所需要匹配的版本version2 int btMatchVersion3 BT的所需要匹配的版本version3 int 命令代码 获取软硬件版本信息功能表 __IDO_FUNCTABLE__.versionInfo 获取软硬件版本信息 Objc: [IDOFoundationCommand getVersionInfoCommand:^(int errorCode, IDOGetVersionInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getVersionInfoCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; 获取固件三级版本信息功能表 __IDO_FUNCTABLE__.funcTable38Model.bleAndBtVersion 获取固件三级版本信息 Objc: [IDOFoundationCommand get3LevelFirmwareVersionCommand:^(int errorCode, IDOGetVersionInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.get3LevelFirmwareVersionCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"get/IDOGetOtaAuthFuncion.html":{"url":"get/IDOGetOtaAuthFuncion.html","title":"获取OTA授权","keywords":"","body":"获取OTA授权 功能表 IDO_BLUE_ENGINE.peripheralEngine.platform == 10 授权状态说明 参数 说明 备注 stateCode 授权状态 0x00:校验成功,0x01:ID号校验失败,0x02:版本号校验失败,0x03:电量不足,0x04:其他错误 命令代码 Objc: [IDOFoundationCommand getOtaAuthInfoCommand:^(int errorCode, int stateCode) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getOtaAuthInfoCommand { (errorCode, stateCode) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"get/IDOGetDefaultSportsFunction.html":{"url":"get/IDOGetDefaultSportsFunction.html","title":"获取运动类型","keywords":"","body":"获取默认运动类型 功能表 __IDO_FUNCTABLE__.funcTable26Model.defaultSportType || __IDO_FUNCTABLE__.funcTable34Model.v3GetSportSortField 运动类型模型说明 IDOGetDefaultSportTypeBluetoothModel 参数 说明 备注 sportTypeCount 默认运动类型的个数 int minShowNum 最小支持的数量 int maxShowNum 最大支持的数量 int isSupportSort 是否支持默认排序 bool sportTypes 运动类型值集合 运动类型参照 IDOSportTypes文件说明 命令代码 Objc: [IDOFoundationCommand getDefaultSportTypeCommand:^(int errorCode, IDOGetDefaultSportTypeBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getDefaultSportTypeCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"get/IDOGetLanguageFunction.html":{"url":"get/IDOGetLanguageFunction.html","title":"获取默认语言","keywords":"","body":"获取默认语言 功能表 __IDO_FUNCTABLE__.funcTable26Model.downloadLanguage 默认语言模型说明 IDOGetDownLanguageBluetoothModel 参数 说明 备注 useLang 当前使用的语言 int defaultLang 默认语言 int fixedLangCount 固定存储语言个数 int maxStorageLang 最大存储语言个数 int languageValues 语言集合 无效:0,中文:1,英文:2,法语:3,德语:4,意大利语:5,西班牙语:6,日语:7, 波兰语:8,捷克语:9,罗马尼亚:10,立陶宛语:11,荷兰语:12,斯洛文尼亚:13, 匈牙利语:14,俄罗斯语:15,乌克兰语:16,斯洛伐克语:17,丹麦语:18, 克罗地亚:19,印尼语:20,韩语:21,印地语:22,葡萄牙语:23,土耳其:24, 泰国语:25,越南语:26,缅甸语:27,菲律宾语:28,繁体中文:29,希腊语:30 阿拉伯语:31,瑞典语:32,芬兰语:33,波斯语:34,挪威语:35 命令代码 Objc: [IDOFoundationCommand getDefaultLanguageCommand:^(int errorCode, IDOGetDownLanguageBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getDefaultLanguageCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetErrorLogFunction.html":{"url":"get/IDOGetErrorLogFunction.html","title":"获取错误日志","keywords":"","body":"获取错误日志 功能表 __IDO_FUNCTABLE__.funcTable26Model.flashLog 错误日志模型说明 IDOGetErrorLogBluetoothModel 参数 说明 备注 type 操作类型 0x00:查询,0x01:清除记录 resetFlag 复位标记 0x0:正常,0x01:硬错误(Hard Faul),0x02:看门狗服务,0x03:断言复位,0x04:掉电服务,0x05:其他异常,此参数不需要赋值 hwError 硬件错误码 0x00:正常,0x01:加速度错误,0x02:心率错误,0x03:TP错误,0x04:flash错误,此参数不需要赋值 命令代码 Objc: IDOGetErrorLogBluetoothModel * model = [[IDOGetErrorLogBluetoothModel alloc]init]; model.type = 0x00; [IDOFoundationCommand getErrorLogRecordCommand:model callback:^(int errorCode, IDOGetErrorLogBluetoothModel * _Nullable model) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: let model = IDOGetErrorLogBluetoothModel.init(); model.type = 0x00; IDOFoundationCommand.getErrorLogRecord(model) { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetFlashBinFunction.html":{"url":"get/IDOGetFlashBinFunction.html","title":"获取字库版本","keywords":"","body":"获取字库版本 功能表 __IDO_FUNCTABLE__.funcTable26Model.flashLog 字库版本模型说明 IDOGetFlashBinInfoBluetoothModel 参数 说明 备注 status 状态 0x00正常,0x01:字库无效,校验错误,0x02:版本不匹配 flashVersion 字库版本 int matchVersion 匹配版本号,固件需要的字库版本号 int checkCode 字库校验码 int 命令代码 Objc: [IDOFoundationCommand getFlashBinInfoCommand:^(int errorCode, IDOGetFlashBinInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getFlashBinInfoCommand{ (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetBatteryFunction.html":{"url":"get/IDOGetBatteryFunction.html","title":"获取电池信息","keywords":"","body":"获取电池信息 功能表 __IDO_FUNCTABLE__.funcTable28Model.chargingTime 电池信息模型说明 IDOGetDeviceBattInfoBluetoothModel 参数 说明 备注 voltage 电压,毫伏 int status 状态 0:未充电,1:正在充电,2:充满 level 电量等级 0-100 lastChargingYear 上次充电时间(年) int lastChargingMonth 上次充电时间(月) int lastChargingDay 上次充电时间(日) int lastChargingHour 上次充电时间(时) int lastChargingMinute 上次充电时间(分) int lastChargingSecond 上次充电时间(秒) int 命令代码 Objc: [IDOFoundationCommand getBatteryInfoCommand:^(int errorCode, IDOGetDeviceBattInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getBatteryInfoCommand{ (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetMenuListFunction.html":{"url":"get/IDOGetMenuListFunction.html","title":"获取菜单列表","keywords":"","body":"获取菜单列表 功能表 __IDO_FUNCTABLE__.funcTable35Model.getMenuList 菜单列表模型说明 IDOGetMenuListInfoBluetoothModel 参数 说明 备注 minShowNum 菜单最小显示个数 int maxShowNum 菜单最大显示个数 int maxNum 支持最大个数 int itemList 菜单排序当前显示集合 0:无效,1:步数,2:心率,3:睡眠,4:拍照,5:闹钟,6:音乐,7:秒表,8:计时器, 9:运动模式,10:天气,11:呼吸锻炼,12:查找手机,13:压力,14:数据三环,15:时间界面,16:最近一次活动 17:健康数据,18:血氧,19:菜单设置,20:alexa语音提示 maxItemList 菜单排序最大显示集合 0:无效,1:步数,2:心率,3:睡眠,4:拍照,5:闹钟,6:音乐,7:秒表,8:计时器, 9:运动模式,10:天气,11:呼吸锻炼,12:查找手机,13:压力,14:数据三环,15:时间界面,16:最近一次活动 17:健康数据,18:血氧,19:菜单设置,20:alexa语音提示 currentShowNum 设备当前显示列表个数 int 命令代码 Objc: [IDOFoundationCommand getMenuListInfoCommand:^(int errorCode, IDOGetMenuListInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getMenuListInfoCommand{ (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetV3AlarmFunction.html":{"url":"get/IDOGetV3AlarmFunction.html","title":"获取V3闹钟","keywords":"","body":"获取V3闹钟 功能表 __IDO_FUNCTABLE__.funcTable29Model.v3SyncAlarm V3闹钟表模型说明 IDOSetAlarmInfoBluetoothModel 参数 说明 备注 isOpen 闹钟开启状态 bool isSync 是否同步到手环 不需要赋值，闹钟设置成功后会自动赋值 isDelete 是否删除 默认YES type 类型 0：起床， 1：睡觉， 2：锻炼， 3：吃药， 4：约会， 5：聚会， 6:会议，7：其他 8：吃饭， 9：刷牙，10 :休息 11 : 课程 12: 洗澡 13:学习 14: 玩耍 42：自定义名称 hour 分 int minute 秒 int repeat 重复集合 [星期一,星期二,星期三,星期四,星期五,星期六,星期日] tsnoozeDuration 贪睡时长 int alarmId 闹钟ID int setTimeStamp 闹钟修改的时间戳 不需要赋值，闹钟设置成功后会自动赋值 已经废弃 repeatTime 重复闹铃次数 重复闹几次 v3闹钟才有效 shockOnOff 震动开关 v3闹钟才有效 delayMinute 延时分钟 v3闹钟才有效 alarmName 闹钟名字 长度限制 23个字节，v3闹钟才有效 * IDOSetExtensionAlarmInfoBluetoothModel 参数 说明 备注 alarmVersion 闹钟版本号 int alarmCount 闹钟个数 int items 闹钟集合 在同步配置时初始化手环闹钟 命令代码 Objc: [IDOFoundationCommand getV3AlarmsInfoCommand:^(int errorCode, IDOSetExtensionAlarmInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getV3AlarmsInfoCommand{ (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetV3HrFunction.html":{"url":"get/IDOGetV3HrFunction.html","title":"获取V3心率模式","keywords":"","body":"获取V3心率模式 功能表 __IDO_FUNCTABLE__.funcTable22Model.v3HrData V3心率模式模型说明 IDOSetV3HeartRateModeBluetoothModel 参数 说明 备注 modeType 心率模式 心率模式 0:关闭心率监测功能(无效) 1:手动模式(关闭自动) 2:自动模式(5分钟) 3:持续监测(5秒钟)（默认：自动模式）4:默认类型(第一次绑定同步配置使用,C库使用) 5:设置对应测量间隔（设置对应的measurement_interval）选择4和5模式则2和3模式无效 6:智能心率模式 （206沃尔定制） updateTime 时间戳 str isHasTimeRange 是否有相隔时间 str startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int measurementInterval 测量间隔 单位:秒 modeType == 5 才有效 notifyFlag 通知类型 0无效；1：允许通知； 2：静默通知； 3：关闭通知 (需要支持功能表__IDO_FUNCTABLE__.funcTable34Model.supportHrHighOrLowBtAlarm, 才能配置智能心率过高过低提醒、通知类型、过高过低提醒开关) highHeartMode 智能心率过高提醒开关 bool lowHeartMode 智能心率过低提醒开关 bool highHeartValue 智能心率过高提醒阈值 int lowHeartValue 智能心率过低提醒阈值 int getSecondMode 支持秒级心率 bool 只获取有效 hrModeTypes 获取手表支持的心率类型集合 5s,60s,180s,300s,600s,1800s,智能心率(255s),900s 只获取有效 命令代码 Objc: [IDOFoundationCommand getV3HrModeInfoCommand:^(int errorCode, IDOSetV3HeartRateModeBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getV3HrModeInfoCommand{ (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 17:59:50 "},"get/IDOGetMtuFunction.html":{"url":"get/IDOGetMtuFunction.html","title":"获取MTU","keywords":"","body":"获取MTU 功能表 __IDO_FUNCTABLE__.funcTable23Model.longMtu MTU模型说明 IDOGetMtuBlueInfoModel 参数 说明 备注 sendMtu 蓝牙数据发送最大长度 默认:20 receiveMtu 蓝牙数据接收最大长度 默认:20 命令代码 Objc: [IDOFoundationCommand getMtuInfoCommand:^(int errorCode, IDOGetMtuBlueInfoModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getMtuInfoCommand{ (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetOverHeatLogFunction.html":{"url":"get/IDOGetOverHeatLogFunction.html","title":"获取过热日志","keywords":"","body":"获取过热日志 功能表 __IDO_FUNCTABLE__.funcTable29Model.getHeatLog 过热日志模型说明 IDOGetOverHeatLogModel 参数 说明 备注 verionNum 该报文的版本号 int devRunTime 设备运行总时间 单位:秒 ppgRunTime ppg传感器工作时间 单位:秒 chargingTimes 充电次数 单位:次 errFlag 发生异常的原因集合 0:电压下降过快,1:ppg传感器通讯失败,2:ppg传感器返回数据异常 year 年 int month 月 int day 日 int hour 时 int minute 分 int second 秒 int 命令代码 Objc: [IDOFoundationCommand getOverHeatLogInfoCommand:^(int errorCode, IDOGetOverHeatLogModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getOverHeatLogInfoCommand{ (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetActivitySwitchFunction.html":{"url":"get/IDOGetActivitySwitchFunction.html","title":"获取运动识别开关","keywords":"","body":"获取运动识别开关 功能表 __IDO_FUNCTABLE__.funcTable38Model.getActivitySwitch 运动模式识别开关模型说明 IDOSetActivitySwitchBluetoothModel 参数 说明 备注 sportTypeOnOff 自动识别运动类型开关 此参数遗弃 sportRunOnOff 自动识别跑步开关 bool sportBicycleOnOff 自动识别自行车开关 bool autoPauseOnOff 运动自动暂停开关 bool endRemindOnOff 结束提醒开关 bool sportEllipticalOnOff 自动识别椭圆机开关 bool sportRowingOnOff 自动识别划船机开关 bool sportSwimOnOff 自动识别游泳开关 bool 命令代码 Objc: [IDOFoundationCommand getActivitySwitchCommand:^(int errorCode, IDOSetActivitySwitchBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getActivitySwitch { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetCalorieDistanceGoalFunction.html":{"url":"get/IDOGetCalorieDistanceGoalFunction.html","title":"获取卡路里/距离/中高运动时长的目标","keywords":"","body":"获取卡路里/距离/中高运动时长的目标 功能表 __IDO_FUNCTABLE__.funcTable37Model.midHighTimeGoal 卡路里/距离/中高运动时长的目标模型说明 IDOSetUserInfoBuletoothModel 参数 说明 备注 goalCalorieData 目标卡路里 单位:大卡 goalDistanceData 目标距离 单位:米 goalMidHighTimeData 中高运动时长的目标 单位:秒 goalWalkTime 走动目标时间 单位:时 calorieMax 活动卡路里最大值 单位：千卡 calorieMin 活动卡路里最小值 单位：千卡 命令代码 Objc: [IDOFoundationCommand getCalorieDistanceGoalCommand:^(int errorCode, IDOSetUserInfoBuletoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getCalorieDistanceGoalCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetBtPairStateFunction.html":{"url":"get/IDOGetBtPairStateFunction.html","title":"获取bt 配对连接状态","keywords":"","body":"获取bt 配对连接状态 功能表 __IDO_FUNCTABLE__.funcTable38Model.bleAndBtVersion bt 配对连接状态模型说明 IDOGetBtPairStateModel 参数 说明 备注 btConnectState bt连接状态 bool btPairState bt配对状态 bool a2dpConnectState a2dp连接状态 bool hfpConnectState hfp连接状态 bool 命令代码 Objc: [IDOFoundationCommand getBtPairStateCommand:^(int errorCode, IDOGetBtPairStateModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getBtPairStateCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetContactDataFunction.html":{"url":"get/IDOGetContactDataFunction.html","title":"获取通话常用联系人","keywords":"","body":"获取通话常用联系人 功能表 __IDO_FUNCTABLE__.funcTable38Model.syncContact 通话常用联系人模型说明 IDOSetContactItemModel 参数 说明 备注 phone 号码 str name 名字 str IDOSetSyncContactModel 参数 说明 备注 conVersion 版本号 暂时无需赋值 operat 操作 无需赋值 0：无效；1： 设置， 2：查询 itemsNum items的个数 int items 联系人集合 array (IDOSetContactItemModel) 命令代码 Objc: [IDOFoundationCommand getContactDataCommand:^(int errorCode, IDOSetSyncContactModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getContactDataCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetHandUpGestureFunction.html":{"url":"get/IDOGetHandUpGestureFunction.html","title":"获取抬腕手势","keywords":"","body":"获取抬腕手势 功能表 __IDO_FUNCTABLE__.funcTable30Model.getUpHandGesture 抬腕手势模型说明 IDOSetHandUpInfoBuletoothModel 参数 说明 备注 isOpen 开关 bool isHasTimeRange 是否有相隔时间 bool showSecond 显示时长 3～10 秒 startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int 命令代码 Objc: [IDOFoundationCommand getHandUpGestureCommand:^(int errorCode, IDOSetHandUpInfoBuletoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getHandUpGestureCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetHealthSwitchFunction.html":{"url":"get/IDOGetHealthSwitchFunction.html","title":"获取健康监测开关","keywords":"","body":"获取健康监测开关 功能表 __IDO_FUNCTABLE__.funcTable35Model.getHealthSwitchState 健康监测开关模型说明 IDOGetHealthSwitchStateModel 参数 说明 备注 heartMode 连续测量心率开关 bool pressureMode 压力自动检测开关 bool spo2Mode 血氧自动检测开关 bool scienceMode 科学睡眠开关 bool temperatureMode 夜间体温开关 bool noiseMode 噪声开关 bool menstrualMode 生理周期开关 bool walkMode 走动提醒开关 bool handWashingMode 喝水提醒开关 bool heartModeNotifyFlag 心率通知状态类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知 pressureNotifyFlag 压力通知状态类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知 spo2NotifyFlag 血氧通知状态类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知 menstrualNotifyFlag 生理周期通知状态类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知 guidanceNotifyFlag 健身指导通知状态类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知 reminderNotifyFlag 提醒事项通知状态类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知 命令代码 Objc: [IDOFoundationCommand getHealthSwitchStateCommand:^(int errorCode, IDOGetHealthSwitchStateModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getHealthSwitchStateCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetLangLibListFunction.html":{"url":"get/IDOGetLangLibListFunction.html","title":"获取v3字库列表","keywords":"","body":"获取v3字库列表 功能表 __IDO_FUNCTABLE__.funcTable31Model.v3GetLangLib v3字库列表模型说明 IDOGetV3LangLibListModel 参数 说明 备注 langVersion 语言版本 int useLang 当前使用的语言 int defaultLang 默认的语言 int fixedLang 固定存储语言个数 int maxStorageLang 固件目前支持的个数 int itemsStorageCount 目前已经有语言的个数 int langSupportItems 已经支持语言集合 @[@{@\"type\":@(type),@\"version\":@(version)}...] langStorageItems 已经存储语言集合 @[@{@\"type\":@(type),@\"version\":@(version)}...] 命令代码 Objc: [IDOFoundationCommand getV3LangLibListCommand:^(int errorCode, IDOGetV3LangLibListModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getV3LangLibListCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGet100SportSortFunction.html":{"url":"get/IDOGet100SportSortFunction.html","title":"获取运动模式排序","keywords":"","body":"获取运动模式排序 功能表 __IDO_FUNCTABLE__.funcTable28Model.v3SportsType 运动排序模型说明 IDOSetSportSortingInfoBluetoothModel 参数 说明 备注 sportSortingItems 运动模式排序集合 运动模式排序集合最多8个或14个或30个或150 operat 操作类型 0：无效； 1查询； 2设置（不需要赋值） allNum 个数 int currentIndex 当前已添加运动类型的索引 int 支持100种运动才需要赋值 IDOSetSportSortingItemModel 参数 说明 备注 index 排序索引 从1、2、3、4....,0:无效 type 运动模式 当功能表 v3SportsType、set100SportSort 支持，运动类型从48开始，1-29运动类型为v2协议 运动类型参照 IDOSportTypes文件说明 命令代码 Objc: [IDOFoundationCommand get100SportModeSortCommand:^(int errorCode, IDOSetSportSortingInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.get100SportModeSortCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"get/IDOGetMainUiSortFunction.html":{"url":"get/IDOGetMainUiSortFunction.html","title":"获取主界面控件排序","keywords":"","body":"获取主界面控件排序 功能表 __IDO_FUNCTABLE__.funcTable37Model.setMainUiSort 主界面控件排序模型说明 IDOMainInterfaceSortModel 参数 说明 备注 locationX 横轴x 从1开始 locationY 纵轴y 从1开始 sizeType 大小类型 0无效；1：大图标(一个占用一个大的横格)； 2：小图标（2个占用一个横格） supportSizeType 固件支持可以编辑的图标类型 0 ： 无效； 1：大图标； 2：小图标； 3:大图标+小图标 widgetsType 组件类型 0:无效 1:活动三环 （小图标）2:步数 3:最近一次活动 4:音乐 5:天气 6:心率 7:压力 8:睡眠 9:Alexa 10:体温 11:血氧 12:计时器 13:闹钟 14:事项提醒（现日程提醒） 15:噪声 16:电量 17:电话（联系人）18:世界时间 IDOMainInterfaceSupportItemModel 参数 说明 备注 supportSizeType 固件支持可以编辑的图标类型 0 ： 无效； 1：大图标； 2：小图标； 3:大图标+小图标 widgetsType 组件类型 0:无效 1:活动三环 （小图标）2:步数 3:最近一次活动 4:音乐 5:天气 6:心率 7:压力 8:睡眠 9:Alexa 10:体温 11:血氧 12:计时器 13:闹钟 14:事项提醒（现日程提醒） 15:噪声 16:电量 17:电话（联系人）18:世界时间 IDOMainInterfaceSortModel 参数 说明 备注 mainUiVersion 版本 暂时不需要赋值 operate 操作 0：无效； 1查询； 2设置 (不需要赋值) allNum 当前固件组件类型个数 int allSupportNum 固件支持所有小组件的类型个数 int items 主界面集合 array (IDOMainInterfaceItemModel) supportItems 固件支持可以编辑的图标集合 array (IDOMainInterfaceSupportItemModel) 命令代码 Objc: [IDOFoundationCommand getMainUiSortCommand:^(int errorCode, IDOMainInterfaceSortModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getMainUiSortCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetNotDisturbFunction.html":{"url":"get/IDOGetNotDisturbFunction.html","title":"获取勿扰模式","keywords":"","body":"获取勿扰模式 功能表 __IDO_FUNCTABLE__.funcTable20Model.getNoDisturb 勿扰模式模型说明 IDOSetNoDisturbModeInfoBluetoothModel 参数 说明 备注 isOpen 开关 bool startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int isHaveRangRepeat 是否有间隔重复提醒 bool repeat 重复集合 [星期一,星期二,星期三,星期四,星期五,星期六,星期日] noonTimeOnOff 午休开关 bool noonTimeStartHour 午休开始时 int noonTimeStartMinute 午休开始分 int noonTimeEndHour 午休结束时 int noonTimeEndMinute 午休结束分 int 命令代码 Objc: [IDOFoundationCommand getNotDisturbCommand:^(int errorCode, IDOSetNoDisturbModeInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getNotDisturbCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetNoticeStateFunction.html":{"url":"get/IDOGetNoticeStateFunction.html","title":"获取第三方应用的通知状态","keywords":"","body":"获取第三方应用的通知状态 功能表 __IDO_FUNCTABLE__.funcTable38Model.setNotifyAddAppName 第三方应用的通知状态模型说明 IDOSetAppNotifyStateItemModel 参数 说明 备注 evtType 事件类型 int（固件动态分配的,） notifyState 通知状态 int (允许通知：1，静默通知 ：2， 关闭通知：3) picFlag 图片icon更新状态 int （0:无效； 1：有下载对应的图片；2：没有对应的图片）设置忽略此属性，只支持获取 packName 应用包名 str 设置忽略此属性，只支持获取 appName 应用名称 str 设置忽略此属性，只支持获取 IDOSetV3NotifyStateModel 参数 说明 备注 msgVersion 版本号 暂时无需赋值 operat 操作 1：增加； 2：修改; 3:获取查询 allSendNum 发送的总包数 int nowSendIndex 当前发送的序列 int itemsNum 集合个数 int allOnOff 所有消息通知开关 bool items 通知状态集合 array (IDOSetAppNotifyStateItemModel) 命令代码 Objc: [IDOFoundationCommand getMessageNoticeStateCommand:^(int errorCode, IDOSetV3NotifyStateModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getMessageNoticeStateCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetScheduleReminderFunction.html":{"url":"get/IDOGetScheduleReminderFunction.html","title":"获取日程提醒","keywords":"","body":"获取日程提醒 功能表 __IDO_FUNCTABLE__.funcTable37Model.scheduleReminder 日程提醒模型说明 IDOSetRemindItemModel 参数 说明 备注 remindId 版本 日程提醒id 从0开始 year 年份 int month 月份 int day 日 int hour 时 int minute 分 int second 秒 int repeat 重复集合 array(number) [星期一、星期二、星期三、星期四、星期五、星期六、星期日] remindOnOff 当天提醒开关 bool state 状态码 0:无效, 1：删除状态, 2：启用状态 title 标题 str note 提示 str IDOSetV3ScheduleReminderModel 参数 说明 备注 scVersion 版本 暂时不需要赋值 operate 操作 0:无效,1:增, 2:删, 3:查,4:改 num items的个数 int items 日程集合 array (IDOSetRemindItemModel) 最大设置5个数据 命令代码 Objc: [IDOFoundationCommand getScheduleReminderCommand:^(int errorCode, IDOSetV3ScheduleReminderModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getScheduleReminderCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetScreenBrightnessFunction.html":{"url":"get/IDOGetScreenBrightnessFunction.html","title":"获取屏幕亮度","keywords":"","body":"获取屏幕亮度 功能表 __IDO_FUNCTABLE__.funcTable30Model.getScreenBrightness 屏幕亮度模型说明 IDOSetScreenBrightnessInfoBluetoothModel 参数 说明 备注 levelValue 屏幕亮度级别 1-100 isManual 是否用户调节 bool mode 屏幕亮度级别 0x00关闭自动调整,0x01 使用环境光传感器,0x02,夜间自动调整亮度,0x03 夜间降亮度使用设置的时间 autoAdjustNight 夜间自动亮度调整 0x00,无效,由固件定义,0x01关闭,0x02,夜间自动调整亮度,0x03 夜间降亮度使用设置的时间 startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int nightLevel 夜间亮度 1-100 showInterval 显示间隔时长 int 单位秒 命令代码 Objc: [IDOFoundationCommand getScreenBrightnessCommand:^(int errorCode, IDOSetScreenBrightnessInfoBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getScreenBrightnessCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetSportParameterSortFunction.html":{"url":"get/IDOGetSportParameterSortFunction.html","title":"获取运动子项数据排列","keywords":"","body":"获取运动子项数据排列 功能表 __IDO_FUNCTABLE__.funcTable37Model.set20SportParamSort 运动子项数据排列模型说明 IDOSetSportParameterSortModel 参数 说明 备注 paraVersion 版本 暂时不需要赋值 operate 操作 0:无效； 1查询； 2设置（不需要赋值） sportType 运动类型 int currentIndex 已经添加的运动索引 int allNum 个数 int items 子项集合 array (number) 0无效 1运动时长 2距离 3卡路里 4实时心率 + 心率区间 5实时配速 6实时步频 7有氧训练效果 8滚动配速 9平均配速 10步数 11趟数 12最近泳姿 13最近一趟SWOLF 14步数 15踏频 16有氧训练效果 17浆次 18浆频 19时间 命令代码 Objc: //参数 ：运动类型 [IDOFoundationCommand getSportParameterSortCommand:sportType callback:^(int errorCode, IDOSetSportParameterSortModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: //参数 ：运动类型 IDOFoundationCommand.getSportParameterSortCommand(sportType) { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"get/IDOGetWalkReminderFunction.html":{"url":"get/IDOGetWalkReminderFunction.html","title":"获取走动提醒","keywords":"","body":"获取走动提醒 功能表 __IDO_FUNCTABLE__.funcTable37Model.walkReminderTimeGoal 走动提醒模型说明 IDOSetWalkReminderBluetoothModel 参数 说明 备注 onOff 开关 bool goalStep 目标步数 int startHour 开始 (时) int startMinute 开始 (分) int endHour 结束 (时) int endMinute 结束 (分) int repeat 重复集合 array(number) [星期一,星期二,星期三,星期四,星期五,星期六,星期日] goalTime 目标时间 单位(小时) notifyFlag 通知类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知 __IDO_FUNCTABLE__.funcTable38Model.walkReminderAddNotify 功能表才支持 命令代码 Objc: [IDOFoundationCommand getWalkReminderCommand:^(int errorCode, IDOSetWalkReminderBluetoothModel * _Nullable data) { if (errorCode == 0) { //获取成功 }else if (errorCode == 6) { //设备不支持 }else { //获取失败 } }]; Swift: IDOFoundationCommand.getWalkReminderCommand { (errorCode, model) in if errorCode == 0 { //获取成功 }else if errorCode == 6 { //设备不支持 }else { //获取失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 14:24:26 "},"IDOControlFunction.html":{"url":"IDOControlFunction.html","title":"控制命令功能","keywords":"","body":"控制命令 8.1功能概述 控制命令是移动端通过命令发送数据到手环端，以手环端返回响应状态，根据状态码作提示，命令发送成功是的errorCode等于0 8.2主要命令功能 常用控制命令 监听控制命令 8.3 Demo控制功能入口 Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"control/IDOCommonlyFunction.html":{"url":"control/IDOCommonlyFunction.html","title":"常用控制命令","keywords":"","body":"常用控制命令 启动BT设备广播 Objc: [IDOFoundationCommand openBtDeviceBroadcast]; Swift: IDOFoundationCommand.openBtDeviceBroadcast() 删除手环日志 参数描述 参数 说明 备注 type 操作类型 0x01:删除过热日志 Objc: [IDOFoundationCommand clearLogCommandWithType:type callback:^(int errorCode,int state) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.clearLogCommand(withType: type) { (errorCode,state) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 开启音乐控制 Objc: [IDOFoundationCommand musicStartCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.musicStart { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } 关闭音乐控制 Objc: [IDOFoundationCommand musicStopCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.musicStop{ (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } 相机开始控制 Objc: [IDOFoundationCommand cameraStartCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.cameraStart{ (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } 相机结束控制 Objc: [IDOFoundationCommand cameraStopCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.cameraStop{ (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } 开始寻找设备 Objc: [IDOFoundationCommand findDeviceStartCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.findDeviceStart { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } 停止寻找设备 Objc: [IDOFoundationCommand findDeviceStopCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.findDeviceStop { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } 停止寻找手机 Objc: [IDOFoundationCommand findPhoneStopCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.findPhoneStop { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } 设备重启控制 Objc: [IDOFoundationCommand setAppRebootCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.setAppReboot{ (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } 恢复出厂设置 Objc: [IDOFoundationCommand setRestoreFactoryCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.setRestoreFactory{ (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } 进入ota升级模式 Objc: [IDOFoundationCommand setOtaCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.setOta{ (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } } Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"control/IDOListenFunction.html":{"url":"control/IDOListenFunction.html","title":"监听控制命令","keywords":"","body":"监听控制命令 监听拍照开始 Objc: [IDOFoundationCommand listenPhotoStartCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.listenPhotoStart { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 监听拍照结束 Objc: [IDOFoundationCommand listenPhotoEndCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.listenPhotoEnd { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 监听开始寻找手机 Objc: [IDOFoundationCommand listenFindPhoneStartCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.listenFindPhoneStart { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 监听停止寻找手机 Objc: [IDOFoundationCommand listenFindPhoneStopCommand:^(int errorCode) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.listenFindPhoneStop { (errorCode) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; 监听手环状态改变 IDOControlDataUpdateModel 参数 说明 备注 unbindState 解绑状态 0:无效,1:手环已经解绑 hrModeState 心率模式状态 0:无效,1:心率模式改变 spo2State 血氧状态 0:无效,1:血氧产生数据改变 pressureState 压力状态 0:无效,1:压力产生数据改变 alexaState Alexa识别状态 0:无效,1: Alexa识别过程中退出 resetState 恢复出厂设置状态 0:无效,1:固件恢复出厂设置 intoCamera app需要进入相机界面 0:无效,1:app进入相机 callForHelp sos事件通知 0:无效,1:发起sos请求 alexaAlarmState alexa闹钟状态 0:无效,1:alexa闹钟已修改 alarmState 闹钟状态 0:无效,1:闹钟修改 overHeat 固件过热异常告警 0:无效,1:过热警告 brightScreenState 亮屏参数有修改 0:无效,1:亮屏修改 handUpState 抬腕参数有修改 0:无效,1:抬腕修改 noDisturbState 勿擾模式修改 0:无效,1:勿擾模式修改 volumeDownState 手机音量下调 0:无效,1:手机音量下调修改 errorIndex 固件错误码返回 01: ACC 加速度、02: PPG 心率 、03: TP 触摸 、04: FLASH 、05: 过热（PPG）、06: 气压 、07: GPS、08: 地磁 dataType 数据修改类型 14 : 固件请求重新设置天气，app收到收，下发天气数据 15: 固件步数每次增加2000步，设备请求app同步数据，app调用同步接口 16: 固件探测到睡眠结束，请求app同步睡眠数据，app调用同步接口同步 17: 固件三环数据修改，通知app更新三环数据 18: 固件充满电完成发送提醒，app收到后通知栏显示设备充电完成 19: 结束运动后，手动测量心率后，手动测量血氧后，手动测量压力后， 设备自动请求同步，先检查链接状态，未连接本次同步不执行，满足下个自动同步条件后再次判断发起同步请求 20: 固件修改心率通知状态类型、压力通知状态类型、血氧通知状态类型、生理周期通知状态类型、 健康指导通知状态类型、提醒事项通知状态类型通知app更新心率、压力、血氧、生理周期、健康指导、提醒事项通知状态类型 21: 固件压力值计算完成，通知app获取压力值 22: 固件通知app，固件压力校准失败(固件退出测量界面/检测失败/检测超时/未佩戴) 23: 固件产生心率过高或者过低提醒时，通知app获取心率数据 24: 固件通知app bt蓝牙已连接 25: 固件通知app bt蓝牙断开连接 26: 固件蓝牙通话开始 27: 固件蓝牙通话结束 28: 新版本固件每等4分30秒发送一个通知命令，用于修复离线的问题 29: 通知app运动开始（作用于拦截表盘传输同26） 30: 通知app运动结束（作用于拦截表盘传输同27） notifyType 通知类型 1 闹钟已经修改 2 固件过热异常告警 4 亮屏参数有修改（02 b0） 8 抬腕参数有修改（02 b1） 16 勿擾模式获取（02 30） 32 手机音量的下发（03 0xE3）（删除），app音量修改，直接下发 Objc: [IDOFoundationCommand listenStateChangeCommand:^(int errorCode,IDOControlDataUpdateModel *_Nullable model) { if (errorCode == 0) { //控制成功 }else if (errorCode == 6) { //设备不支持 }else { //控制失败 } }]; Swift: IDOFoundationCommand.listenStateChange { (errorCode,model) in if errorCode == 0 { //控制成功 }else if errorCode == 6 { //设备不支持 }else { //控制失败. } }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"IDOSyncDataFunction.html":{"url":"IDOSyncDataFunction.html","title":"数据同步功能","keywords":"","body":"数据同步功能 9.1功能概述 同步设备数据是一个非常重要的功能。同步过程建议不要执行其他命令，即使执行命令也是无效的。同步配置在连接设备的第一次成功绑定之后执行，设备恢复出厂设置也需要执行同步配置。 在同步过程中会返回进度，并且在每个项同步后返回完成状态。根据同步状态判断同步是否完成，同步过程中会记录同步日志并存储。 9.2同步初始化 Objc: initSyncManager().wantToSyncType = IDO_WANT_TO_SYNC_CONFIG_ITEM_TYPE | IDO_WANT_TO_SYNC_HEALTH_ITEM_TYPE | IDO_WANT_TO_SYNC_ACTIVITY_ITEM_TYPE | IDO_WANT_TO_SYNC_GPS_ITEM_TYPE; Swift: initSyncManager().wantToSyncType = IDO_WANT_TO_SYNC_ITEM_TYPE.CONFIG_ITEM_TYPE | IDO_WANT_TO_SYNC_ITEM_TYPE.HEALTH_ITEM_TYPE |IDO_WANT_TO_SYNC_ITEM_TYPE.ACTIVITY_ITEM_TYPE | IDO_WANT_TO_SYNC_ITEM_TYPE.GPS_ITEM_TYPE; 9.3参数说明 参数 说明 备注 isSyncHealthRun 当前连接设备是否正在同步 readonly,bool isSyncConfigRun 当前连接设备是否在同步配置信息 readonly,bool isNeedSyncConfig 当前连接设备是否需要同步配置 readonly,bool wantToSyncType 设置需要同步的选项 同步配置、同步健康、同步活动、同步GPS isSave 同步的数据是否存入SDK数据库中 默认YES itemSyncTimeout 每一项同步超时时长 默认60秒 9.4基础方法 Objc: //开始同步 [IDOSyncManager startSync]; //结束同步 [IDOSyncManager stopSync]; Swift: //开始同步 IDOSyncManager.startSync(); //结束同步 IDOSyncManager.stopSync(); 9.5执行回调方法 Objc: initSyncManager().addSyncComplete(^(IDO_SYNC_COMPLETE_STATUS stateCode) { //同步完成状态 if(stateCode == IDO_SYNC_GLOBAL_COMPLETE) { //同步完成后查询对应的缓存数据 } }).addSyncProgess(^(IDO_CURRENT_SYNC_TYPE type, float progress) { //同步项，同步进度（0-1） }).addSyncFailed(^(int errorCode) { //同步失败 }).addSyncConfigInitData(^NSArray * (IDO_SYNC_CONFIG_DATA_TYPE type){ //第一次绑定或者设备重启会同步配置支持的类型则会回调 //根据返回的同步类型，结合业务需求对应返回初始化的数据模型集合 switch (type) { case IDO_SYNC_SET_TIME_TYPE: { // 设置时间 // IDOSetTimeInfoBluetoothModel } break; case IDO_SYNC_SET_ALARM_TYPE: { // 设置闹钟 // IDOSetAlarmInfoBluetoothModel } break; case IDO_SYNC_SET_LONG_SIT_TYPE: { // 设置久坐 // IDOSetLongSitInfoBuletoothModel } break; case IDO_SYNC_SET_LOST_FIND_TYPE: { // 设置防丢 // IDOSetPreventLostInfoBuletoothModel } break; case IDO_SYNC_SET_FIND_PHONE_TYPE: { // 设置寻找手机 // IDOSetFindPhoneInfoBuletoothModel } break; case IDO_SYNC_SET_SPORT_GOAL_TYPE: { // 设置运动目标步数 // IDOSetUserInfoBuletoothModel } break; case IDO_SYNC_SET_USER_INFO_TYPE: { // 设置用户信息 // IDOSetUserInfoBuletoothModel } break; case IDO_SYNC_SET_UNIT_TYPE: { // 设置单位 // IDOSetUnitInfoBluetoothModel } break; case IDO_SYNC_SET_AUTH_TYPE: { // 设置权限 // IDOSetBindingInfoBluetoothModel } break; case IDO_SYNC_SET_HEART_RATE_MODE_TYPE: { // 设置v2心率模式 // IDOSetHrModeInfoBluetoothModel } break; case IDO_SYNC_SET_V3_SET_HR_MODE_TYPE: { // 设置v3心率模式 // IDOSetV3HeartRateModeBluetoothModel } break; case IDO_SYNC_SET_UP_HAND_GESTURE_TYPE: { // 设置抬手 // IDOSetHandUpInfoBuletoothModel } break; case IDO_SYNC_SET_DO_NOT_DISTURB_TYPE: { // 设置勿扰模式 // IDOSetNoDisturbModeInfoBluetoothModel } break; case IDO_SYNC_SET_DISPLAY_MODE_TYPE: { // 设置显示模式 // IDOSetDisplayModeInfoBluetoothModel } break; case IDO_SYNC_SET_ONE_KEY_SOS_TYPE: { // 设置一键呼叫 // IDOSetOneKeySosInfoBuletoothModel } break; case IDO_SYNC_SET_MUISC_ON_OFF_TYPE: { // 设置音乐开关 // IDOSetMusicOpenInfoBuletoothModel } break; case IDO_SYNC_SET_WEATHER_SWITCH_TYPE: { // 设置天气开关 // IDOSetWeatherSwitchInfoBluetoothModel } break; case IDO_SYNC_SET_HEART_RATE_INTERVAL_TYPE: { // 设置心率区间 // IDOSetHrIntervalInfoBluetoothModel } break; case IDO_SYNC_SET_SPORT_MODE_SELECT_TYPE: { // 设置运动模式选择 // IDOSetSportShortcutInfoBluetoothModel } break; case IDO_SYNC_SET_SPORT_MODE_SORT_TYPE: { // 设置运动模式排序 // IDOSetSportSortingInfoBluetoothModel } break; case IDO_SYNC_SET_WATCH_DIAL_TYPE: { // 设置表盘ID // IDOSetWatchDiaInfoBluetoothModel } break; case IDO_SYNC_SET_SHORTCUT_TYPE: { // 设置快捷方式 // IDOSetShortcutInfoBluetoothModel } break; case IDO_SYNC_SET_SLEEP_PERIOD_TYPE: { // 设置睡眠时间段 // IDOSetSleepPeriodInfoBluetoothModel } break; case IDO_SYNC_SET_SCREEN_BRIGHTNESS_TYPE: { // 设置屏幕亮度 // IDOSetScreenBrightnessInfoBluetoothModel } break; case IDO_SYNC_SET_MENSTRUATION_REMIND_TYPE: { // 设置女性生理周期提醒 // IDOSetMenstruationRemindBluetoothModel } break; case IDO_SYNC_SET_SET_MENSTRUATION_TYPE: { // 设置女性生理周期 // IDOSetMenstruationInfoBluetoothModel } break; case IDO_SYNC_SET_CALORIE_DISTANCE_GOAL_TYPE: { // 设置卡路里和距离目标 // IDOSetUserInfoBuletoothModel } break; case IDO_SYNC_SET_CONFIG_GPS_TYPE: { // 设置gps信息 // IDOSetGpsConfigInfoBluetoothModel } break; case IDO_SYNC_SET_WALK_REMINDER_TYPE: { // 设置走动提醒 // IDOSetWalkReminderBluetoothModel } break; case IDO_SYNC_SET_BREATHE_TRAIN_TYPE: { // 设置呼吸训练 // IDOSetBreatheTrainBluetoothModel } break; case IDO_SYNC_SET_ACTIVITY_SWITCH_TYPE: { // 设置活动开关 // IDOSetActivitySwitchBluetoothModel } break; case IDO_SYNC_SET_PRESSURE_SWITCH_TYPE: { // 设置压力开关 // IDOSetPressureSwitchBluetoothModel } break; case IDO_SYNC_SET_MENU_LIST_TYPE: { // 设置菜单列表 // IDOGetMenuListInfoBluetoothModel } break; case IDO_SYNC_SET_SCIENTIFIC_SLEEP_SWITCH_TYPE: { // 设置科学睡眠开关 // IDOSetV3ScientificSleepModel } break; case IDO_SYNC_SET_TEMPERATURE_SWITCH_TYPE: { // 设置体温开关 // IDOSetV3TemperatureModel } break; case IDO_SYNC_SET_FITNESS_GUIDANCE_TYPE: { // 设置健身指导 // IDOSetFitnessGuidanceModel } break; case IDO_SYNC_SET_SPO2_SWITCH_TYPE: { // 设置血氧开关 // IDOSetSpo2SwitchBluetoothModel } break; case IDO_SYNC_SET_NOISE_SWITCH_TYPE: { // 设置噪音开关 // IDOSetV3NoiseSwitchModel } break; case IDO_SYNC_SET_RESPI_RATE_TYPE: { // 设置呼吸率开关 // IDOSetBreathRateSwitchModel } break; case IDO_SYNC_SET_HEART_RATE_MODE_SMART: { // 设置智能心率模式 // IDOSetSmartHeartRateModel } break; default: break; } return [NSArray array]; }).mandatorySyncConfig(YES or NO); // 绑定需要执行同步配置，后续重连无需执行同步配置，本地作缓存 Swift: initSyncManager().addSyncComplete!{(stateCode)in //同步完成状态 if stateCode == .GLOBAL_COMPLETE { //同步完成后查询对应的缓存数据 } }.addSyncProgess!{(type,progress)in //同步项，同步进度（0-1） }.addSyncFailed!{(errorCode)in //同步失败 }.addSyncConfigInitData!{(type)in //根据返回的同步类型，结合业务需求对应返回初始化的数据模型集合 //参照上面objc代码执行 return []; }.mandatorySyncConfig!(true or false);// 绑定需要执行同步配置，后续重连无需执行同步配置 9.6 Demo同步功能入口 Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"IDOExchangeFunction.html":{"url":"IDOExchangeFunction.html","title":"数据交换功能(旧)","keywords":"","body":"数据交换功能 10.1功能概述 当在App发起运动时，手环会从App产生的运动数据计算心率和卡路里返回App实现数据交换； 当手环发起运动时，手环产生的运动数据定时发送到App，实时展示运动数据。交换数据是以时间作为唯一参照，交换过程需要通过运动开始时间判断当前活动数据，如果时间对应不了，则无法交换数据。 10.2初始化运动数据 参数说明 IDODataExchangeModel 参数 说明 备注 day 日 int hour 时 int minute 分 int second 秒 int sportType 运动类型 运动类型参照 IDOSportTypes文件说明 targetType 目标类型 int targetValue 目标数值 int forceStart 是否强制开始 int retCode 代码 0:成功; 1:设备已经进入运动模式失败; 2: 设备电量低失败; 3:手环正在充电 status 状态 0:全部有效， 1:距离无效， 2: gps 信号弱 errorCode 错误码 0:成功; 1:设备已经进入运动模式失败 step 步数 int (单位:步) calories 卡路里 int (单位:J) distance 距离 int (单位:米) durations 持续时间 int (单位:分钟) isSave 是否存储 BOOL avgHrValue 平均心率 int maxHrValue 最大心率 int burnFatMins 脂肪燃烧时长 int (分钟) aerobicMins 心肺锻炼时长 int (分钟) limitMins 极限锻炼时长 int (分钟) curHrValue 当前心率 int intervalSecond 心率间隔 int hrValueSerial 序列号 int hrValues 心率数据 array str json Objc: //初始化交换数据 IDODataExchangeModel * dataModel = [IDODataExchangeModel new]; //运动开始时间 IDOSetTimeInfoBluetoothModel * timeModel = [IDOSetTimeInfoBluetoothModel currentModel]; dataModel.day = timeModel.day; dataModel.hour = timeModel.hour; dataModel.minute = timeModel.minute; dataModel.second = timeModel.second; //运动类型 dataModel.sportType = sportType; //目标类型 dataModel.targetType = targetType; //目标值 datModel.targetValue = targetValue; Swift: //初始化交换数据 let dataModel = IDODataExchangeModel.init(); //运动开始时间 let timeModel = IDOSetTimeInfoBluetoothModel.current(); dataModel.day = timeModel!.day; dataModel.hour = timeModel!.hour; dataModel.minute = timeModel!.minute; dataModel.second = timeModel!.second; //运动类型 dataModel.sportType = sportType; //目标类型 dataModel.targetType = targetType; //目标值 datModel.targetValue = targetValue; 10.3App发起数据交换方法 App发起运动开始 Objc: //dataModel全局运动数据模型 [IDOFoundationCommand appStartSportCommand:dataModel startCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //运动发起成功 }else if (model.retCode == 2) { //电量过低 }else { //运动发起失败 } }]; Swift: //dataModel全局运动数据模型 IDOFoundationCommand.appStartSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //运动发起成功 }else if model.retCode == 2 { //电量过低 }else { //运动发起失败 } }; App发起运动暂停 Objc: //dataModel全局运动数据模型 [IDOFoundationCommand appPauseSportCommand:dataModel pauseCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //运动暂停成功 }else if (model.retCode == 2) { //电量过低 }else { //运动暂停失败 } }]; Swift: //dataModel全局运动数据模型 IDOFoundationCommand.appPauseSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //运动暂停成功 }else if model.retCode == 2 { //电量过低 }else { //运动暂停失败 } }; App发起运动恢复 Objc: //dataModel全局运动数据模型 [IDOFoundationCommand appRestoreSportCommand:dataModel appRestoreCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //运动恢复成功 }else if (model.retCode == 2) { //电量过低 }else { //运动恢复失败 } }]; Swift: //dataModel全局运动数据模型 IDOFoundationCommand.appRestoreSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //运动恢复成功 }else if model.retCode == 2 { //电量过低 }else { //运动恢复失败 } }; App发起运动数据交换过程 Objc: //dataModel全局运动数据模型 [IDOFoundationCommand appIngSportCommand:dataModel appIngCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //运动数据交换成功 }else if (model.retCode == 2) { //电量过低 }else { //运动数据交换失败 } }]; Swift: //dataModel全局运动数据模型 IDOFoundationCommand.appIngSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //运动数据交换成功 }else if model.retCode == 2 { //电量过低 }else { //运动数据交换失败 } }; App发起运动结束 Objc: //dataModel全局运动数据模型 [IDOFoundationCommand appEndSportCommand:dataModel appEndcallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //运动结束成功 }else if (model.retCode == 2) { //电量过低 }else { //运动结束失败 } }]; Swift: //dataModel全局运动数据模型 IDOFoundationCommand.appEndSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //运动结束成功 }else if model.retCode == 2 { //电量过低 }else { //运动结束失败 } }; App发起运动，手环暂停 Objc: //dataModel全局运动数据模型 [IDOFoundationCommand appBlePauseReplyCommand:dataModel appBlePauseCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //运动手环暂停成功 }else if (model.retCode == 2) { //电量过低 }else { //运动手环暂停失败 } }]; Swift: //dataModel全局运动数据模型 IDOFoundationCommand.appBlePauseReply(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //运动手环暂停成功 }else if model.retCode == 2 { //电量过低 }else { //运动手环暂停失败 } }; App发起运动，手环恢复 Objc: //dataModel全局运动数据模型 [IDOFoundationCommand appBleRestoreReplyCommand:dataModel appBleRestoreCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //运动手环恢复成功 }else if (model.retCode == 2) { //电量过低 }else { //运动手环恢复失败 } }]; Swift: //dataModel全局运动数据模型 IDOFoundationCommand.appBleRestoreReply(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //运动手环恢复成功 }else if model.retCode == 2 { //电量过低 }else { //运动手环恢复失败 } }; App发起运动，手环结束 Objc: //dataModel全局运动数据模型 [IDOFoundationCommand appBleEndReplyCommand:dataModel appBleEndCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //运动手环结束成功 }else if (model.retCode == 2) { //电量过低 }else { //运动手环结束失败 } }]; Swift: //dataModel全局运动数据模型 IDOFoundationCommand.appBleEndReply(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //运动手环结束成功 }else if model.retCode == 2 { //电量过低 }else { //运动手环结束失败 } }; 10.4Ble发起数据交换方法 手环发起运动开始 Objc: //dataModel全局运动数据模型 [IDOFoundationCommand bleStartSportCommand:dataModel bleStartCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //手环发起运动开始成功 }else if (model.retCode == 2) { //电量过低 }else { //手环发起运动开始失败 } }]; Swift: //dataModel全局运动数据模型 IDOFoundationCommand.bleStartSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //手环发起运动开始成功 }else if model.retCode == 2 { //电量过低 }else { //手环发起运动开始失败 } }; 手环发起运动暂停 Objc: //dataModel全局运动数据模型 [IDOFoundationCommand blePauseSportCommand:dataModel blePauseCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //手环发起运动暂停成功 }else if (model.retCode == 2) { //电量过低 }else { //手环发起运动暂停失败 } }]; Swift: //dataModel全局运动数据模型 IDOFoundationCommand.blePauseSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //手环发起运动暂停成功 }else if model.retCode == 2 { //电量过低 }else { //手环发起运动暂停失败 } }; 手环发起运动恢复 Objc: //dataModel全局运动数据模型 [IDOFoundationCommand bleRestoreSportCommand:dataModel bleRestoreCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //手环发起运动恢复成功 }else if (model.retCode == 2) { //电量过低 }else { //手环发起运动恢复失败 } }]; Swift: //dataModel全局运动数据模型 IDOFoundationCommand.bleRestoreSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //手环发起运动恢复成功 }else if model.retCode == 2 { //电量过低 }else { //手环发起运动恢复失败 } }; 手环发起运动停止 Objc: //dataModel全局运动数据模型 [IDOFoundationCommand bleEndSportCommand:dataModel bleEndCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //手环发起运动停止成功 }else if (model.retCode == 2) { //电量过低 }else { //手环发起运动停止失败 } }]; Swift: //dataModel全局运动数据模型 IDOFoundationCommand.bleEndSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //手环发起运动停止成功 }else if model.retCode == 2 { //电量过低 }else { //手环发起运动停止失败 } }; 手环发起运动交换数据 Objc: //dataModel全局运动数据模型 [IDOFoundationCommand bleIngSportCommand:dataModel bleIngCallback:^(IDODataExchangeModel * _Nullable model, int errorCode) { if (errorCode == 0 && model.retCode == 0) { //手环发起运动交换数据成功 }else if (model.retCode == 2) { //电量过低 }else { //手环发起运动交换数据失败 } }]; Swift: //dataModel全局运动数据模型 IDOFoundationCommand.bleIngSportCommand(dataModel) { (model, errorCode) in if errorCode == 0 && model.retCode == 0{ //手环发起运动交换数据成功 }else if model.retCode == 2 { //电量过低 }else { //手环发起运动交换数据失败 } }; 10.5 Demo数据交换功能入口 Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"IDONewExchangeFunction.html":{"url":"IDONewExchangeFunction.html","title":"数据交换功能(新)","keywords":"","body":"数据交换功能（新） 10.1功能概述 当在App发起运动时，手环会从App产生的运动数据计算心率和卡路里返回App实现数据交换； 当手环发起运动时，手环产生的运动数据定时发送到App，实时展示运动数据。交换数据是以时间作为唯一参照，交换过程需要通过运动开始时间判断当前活动数据，如果时间对应不了，则无法交换数据。 10.2初始化运动数据 参数 说明 备注 v2Model 当前交互v2数据模型 IDOV2DataExchangeModel v3Model 当前交互v3数据模型 IDOV3DataExchangeModel isV3ActivityExchange 是否为v3活动数据交换 bool （否则为v2活动数据交换） exchangeStatus 数据交换过程状态 Enum (IDO_EXCHANGE_DATA_STATUS) isNewDataExchange 是否使用新的数据交互 内部使用，区分旧的数据交换方法 delegate 代理对象 id IDOV2DataExchangeModel 参数 说明 备注 day 日 int hour 时 int minute 分 int second 秒 int sportType 运动类型 当功能表 v3SportsType、set100SportSort 支持，运动类型从48开始，1-29运动类型为v2协议 运动类型参照 IDOSportTypes文件说明 targetType 目标类型 int 0x00:无目标， 0x01:重复次数，单位：次， 0x02:距离,单位：米, 0x03：卡路里, 单位：大卡, 0x04:时长,单位：分钟, 0x05: 步数, 单位：步 targetValue 目标数值 int forceStart 是否强制开始 int retCode 进入运动状态 0:成功; 1:设备已经进入运动模式失败; 2: 设备电量低失败; 3:手环正在充电 4:正在使用Alexa 5:通话中 calories 卡路里 int (单位:J) distance 距离 int (单位:米) durations 持续时间 int (单位:分钟) step 步数 int (单位:步) avgHrValue 平均心率 int maxHrValue 最大心率 int burnFatMins 脂肪燃烧时长 int (分钟) aerobicMins 心肺锻炼时长 int (分钟) limitMins 极限锻炼时长 int (分钟) isSave 是否存储 BOOL status 状态 0:全部有效， 1:距离无效， 2: gps 信号弱 curHrValue 当前心率 int hrValueSerial 序列号 int intervalSecond 心率间隔 int hrValues 心率数据 array str json IDOV3DataExchangeModel 参数 说明 备注 day 日 int hour 时 int minute 分 int second 秒 int sportType 运动类型 当功能表 v3SportsType、set100SportSort 支持，运动类型从48开始，1-29运动类型为v2协议 运动类型参照 IDOSportTypes文件说明 planType 计划类型 int 0x01：跑步计划3km ，0x02：跑步计划5km ， 0x03：跑步计划10km ，0x04：半程马拉松训练（二期） ，0x05：马拉松训练（二期） actionType 动作类型 int 1快走；2慢跑；3中速跑；4快跑 ； 5结束课程运动 （还要等待用户是否有自由运动）；6课程结束后自由运动 （此字段当operate为0x05起作用） errorCode 错误码 int 0x00:成功 其他失败 targetType 目标类型 int 0x00:无目标， 0x01:重复次数，单位：次， 0x02:距离,单位：米, 0x03：卡路里, 单位：大卡, 0x04:时长,单位：分钟, 0x05: 步数, 单位：步 targetValue 目标数值 int forceStart 是否强制开始 int 0:不强制,1:强制 retCode 代码 0:成功; 1:设备已经进入运动模式失败; 2: 设备电量低失败; 3:手环正在充电 4:正在使用Alexa 5:通话中 dataVersion 数据版本 int curHrValue 当前心率 int calories 卡路里 int (单位:J) distance 距离 int (单位:米) durations 持续时间 int (单位:分钟) step 步数 int (单位:步) swimPosture 泳姿 int 0x00 : 混合泳; 0x01 : 自由泳; 0x02 : 蛙泳; 0x03 : 仰泳; 0x04 : 蝶泳; status 进入运动状态 开始:1,暂停:2, 结束:3,0:无效状态 isSave 是否存储 BOOL realTimeSpeed app计算显示实时速度 单位km/h 100倍 15秒一个记录 int realTimePace app计算显示实时配速 int (单位s) intervalSecond 心率间隔 int heartRateCount 心率个数 int hrValues 心率数据 array str json warmUpSecond 热身锻炼时长 int (秒钟) anaeroicSecond 无氧锻炼时长 int (秒钟) fatBurnSecond 燃脂锻炼时长 int (秒钟) aerobicSecond 有氧锻炼时长 int (秒钟) limitSecond 极限锻炼时长 int (秒钟) avgHrValue 平均心率 int maxHrValue 最大心率 int warmUpValue 热身运动值 int burnFatValue 脂肪燃烧运动值 int aerobicValue 有氧运动值 int limitValue 极限运动值 int anaerobicValue 无氧运动值 int avgSpeed 平均速度 km/h maxSpeed 最大速度 km/h avgStepFrequency 平均步频 int maxStepFrequency 最大步频 int avgStepStride 平均步幅 int maxStepStride 最大步幅 int kmSpeed 平均公里配速 int fastKmSpeed 最快公里配速 int kmSpeedCount 公里配速个数 int kmSpeeds 公里配速集合 array mileCount 英里配速 个数 array mileCount 英里配速 个数 int mileSpeeds 英里配速集合 array stepsFrequencyCount 步频个数 int stepsFrequencys 步频集合 array trainingEffect 有氧训练效果 单位：无 范围 1.0 ~ 5.0 （*10倍） anaerobicTrainingEffect 无氧训练效果 单位：无 范围 1.0 ~ 5.0 （*10倍） vo2Max 最大摄氧量 单位：毫升/公斤/分钟； 范围 0-80 actionDataCount 本次动作训练个数 int inClassCalories 课程内运动热量 单位千卡 completionRate 动作完成率 0—100 hrCompletionRate 心率控制率 0—100 recoverTime 恢复时长 单位小时(app收到该数据之后，每过一小时需要自减一) grade 摄氧量等级 0x01:低等 0x02:业余 0x03:一般 0x04：平均 0x05：良好 0x06：优秀 0x07：专业 actionData 动作完成内容 array type : 动作类型 1快走；2慢跑; 3中速跑；4快跑 heart_con_value : 每个动作心率控制 time : 动作完成时间 单位秒 goal_time ：动作目标时间 trainingOffset 训练的课程日期偏移 int 从0开始 countHour 运动倒计时 int countMinute 运动倒计时分 int countSecond 运动倒计时秒 int trainingYear 训练课程年份 int trainingMonth 训练课程月份 int trainingDay 训练课程日期 int time 动作目标时间 int 单位秒 lowHeart 心率范围低值 int heightHeart 心率范围高值 int app 发起运动开始 IDOAppStartExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType targetType 目标类型 0x00:无目标， 0x01:重复次数，单位：次， 0x02:距离,单位：米, 0x03: 卡路里, 单位：大卡, 0x04:时长,单位：分钟, 0x05: 步数, 单位：步 targetValue 目标数值 int forceStart 是否强制开始 0:不强制,1:强制 + (BOOL)appStartSportCommandWithModel:(IDOAppStartExchangeModel *)model error:(NSError **)error; app 发起运动结束 IDOAppEndExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType durations 持续时间 单位:秒钟 calories 距离 单位:米 step 步数 单位:步 isSave 是否存储 bool + (BOOL)appEndSportCommandWithModel:(IDOAppEndExchangeModel *)model error:(NSError **)error; app 发起运动暂停 IDONewDataExchangeModel 参数 说明 备注 day 日 int hour 时 int minute 分 int second 秒 int sportType 运动类型 int 参照上面表格 + (BOOL)appPauseSportCommandWithModel:(IDONewDataExchangeModel *)model error:(NSError **)error; app 发起运动恢复 IDONewDataExchangeModel 参数 说明 备注 day 日 int hour 时 int minute 分 int second 秒 int sportType 运动类型 int 参照上面表格 + (BOOL)appRestoreSportCommandWithModel:(IDONewDataExchangeModel *)model error:(NSError **)error; app 发起v2运动交换过程 IDOV2AppIngDataExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType status 状态 0:全部有效, 1:距离无效， 2: gps 信号弱 distance 距离 单位:米 calories 卡路里 单位:J durations 持续时间 单位:秒钟 + (BOOL)v2_appIngSportCommandWithModel:(IDOV2AppIngDataExchangeModel *)model error:(NSError **)error; app 发起v3运动交换过程 IDOV3AppIngDataExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType dataVersion 数据版本 运动计划版本号为0x20,不需要传sportType distance 距离 单位:米 calories 卡路里 单位:J durations 持续时间 单位:秒钟 signalFlag gps信号强弱 0: 表示信号弱， 1: 表示信号强 realTimeSpeed app计算显示实时速度 单位km/h 100倍 15秒一个记录 + (BOOL)v3_appIngSportCommandWithModel:(IDOV3AppIngDataExchangeModel *)model error:(NSError **)error; ble 发起运动结束回复 IDOBleEndReplyExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType distance 距离 单位:米 calories 卡路里 单位:J durations 持续时间 单位:秒钟 errorCode 运动数据交换错误码 0:成功; 其他失败 + (BOOL)bleEndSportReplyCommandWithModel:(IDOBleEndReplyExchangeModel *)model error:(NSError **)error; ble 发起运动暂停回复 IDOBlePauseReplyExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType errorCode 运动数据交换错误码 0:成功; 其他失败 + (BOOL)blePauseSportReplyCommandWithModel:(IDOBlePauseReplyExchangeModel *)model error:(NSError **)error; ble 发起运动恢复回复 IDOBlePauseReplyExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType errorCode 运动数据交换错误码 0:成功; 其他失败 + (BOOL)bleRestoreSportReplyCommandWithModel:(IDOBleRestoreReplyExchangeModel *)model error:(NSError **)error; app 运动计划操作 IDOAppOperatePlanExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType operate 操作码 0x01:开始运动 ，0x02：暂停运动 , 0x03:恢复运动 ，0x04：结束运动 0x05: 切换动作 trainingOffset 训练的课程日期偏移 从0开始 actionType 动作类型 1快走；2慢跑；3中速跑；4快跑 ； 5结束课程运动 （还要等待用户是否有自由运动）；6课程结束后自由运动 （此字段当operate为0x05起作用） planType 计划类型 0x01：跑步计划3km ，0x02：跑步计划5km ， 0x03：跑步计划10km ，0x04：半程马拉松训练（二期） ，0x05：马拉松训练（二期） errorCode 错误码 0x00:成功 其他失败（下发操作不需要赋值） + (BOOL)appPlanSportCommandWithModel:(IDOAppOperatePlanExchangeModel *)model error:(NSError **)error; ble 运动计划操作回复 IDOBleOperatePlanReplyExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType operate 操作码 0x01:开始运动 ，0x02：暂停运动 , 0x03:恢复运动 ，0x04：结束运动 0x05: 切换动作 actionType 动作类型 1快走；2慢跑；3中速跑；4快跑 ； 5结束课程运动 （还要等待用户是否有自由运动）；6课程结束后自由运动 （此字段当operate为0x05起作用） planType 计划类型 0x01：跑步计划3km ，0x02：跑步计划5km ， 0x03：跑步计划10km ，0x04：半程马拉松训练（二期） ，0x05：马拉松训练（二期） errorCode 错误码 0x00:成功 其他失败（下发操作不需要赋值） + (BOOL)blePlanSportReplyCommandWithModel:(IDOBleOperatePlanReplyExchangeModel *)model error:(NSError **)error; 获取v3心率数据 + (BOOL)v3_getActivityHrDataWithError:(NSError **)error; v3运动结束后获取活动数据 + (BOOL)v3_getActivityEndDataWithError:(NSError **)error; 10.3代理协议回调 app运动开始ble回复 IDOAppStartReplyExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType retCode 进入运动状态 0:成功; 1:设备已经进入运动模式失败;2: 设备电量低失败; 3:手环正在充电4:正在使用Alexa 5:通话中 - (void)appStartSportReplyWithModel:(IDOAppStartReplyExchangeModel *)model errorCode:(int)errorCode; app运动暂停ble回复 IDOAppPauseReplyExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType errorCode 错误码 0:成功 其他失败 - (void)appPauseSportReplyWithModel:(IDOAppPauseReplyExchangeModel *)model errorCode:(int)errorCode; app运动恢复ble回复 IDOAppRestoreReplyExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType errorCode 错误码 0:成功 其他失败 - (void)appRestoreSportReplyWithModel:(IDOAppRestoreReplyExchangeModel *)model errorCode:(int)errorCode; app运动结束ble回复 IDOAppEndReplyExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType errorCode 错误码 0:成功 其他失败 distance 距离 单位:米 calories 卡路里 单位:J step 步数 单位:步 avgHrValue 平均心率 int maxHrValue 最大心率 int burnFatMins 燃烧脂肪时长 int aerobicMins 有氧时长 int limitMins 极限时长 int - (void)v2_appEndSportReplyWithModel:(IDOAppEndReplyExchangeModel *)model errorCode:(int)errorCode; v2 app运动交互中ble回复 IDOV2AppIngReplyExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType status 状态码 0:全部有效, 1:距离无效， 2: gps 信号弱 curHrValue 当前心率 int distance 距离 单位:米 calories 卡路里 单位:J step 步数 单位:步 hrValueSerial 序列号 int intervalSecond 心率间隔 int hrValues 心率数据 array - (void)v2_appIngSportReplyWithModel:(IDOV2AppIngReplyExchangeModel *)model errorCode:(int)errorCode; v3 app运动交互中ble回复 IDOV3AppIngReplyExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType dataVersion 数据版本 运动计划版本号为0x20 curHrValue 当前心率 int distance 距离 单位:米 calories 卡路里 单位:J step 步数 单位:步 durations 持续时间 单位:秒钟 swimPosture 泳姿 0x00 : 混合泳; 0x01 : 自由泳; 0x02 : 蛙泳; 0x03 : 仰泳; 0x04 : 蝶泳; status 手环返回的状态 开始:1,暂停:2, 结束:3,0:无效状态 status 手环返回的状态 开始:1,暂停:2, 结束:3,0:无效状态 kmSpeed 平均公里配速 int realTimeSpeed app计算显示实时速度 单位km/h 100倍 15秒一个记录 realTimePace app计算显示实时配速 单位 s anaerobicTrainingEffect 无氧训练效果 单位：无 范围 1.0 ~ 5.0 （*10倍） trainingEffect 有氧训练效果 单位：无 范围 1.0 ~ 5.0 （*10倍） countHour 运动倒计时 int countMinute 运动倒计时分 int countSecond 运动倒计时秒 int - (void)v3_appIngSportReplyWithModel:(IDOV3AppIngReplyExchangeModel *)model errorCode:(int)errorCode; v3 app运动结束后获取心率数据 IDOHrDataExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType intervalSecond 心率间隔 int heartRateCount 心率个数 int hrValues 心率数据 心率集合 - (void)v3_appSportHrReplyWithModel:(IDOHrDataExchangeModel *)model errorCode:(int)errorCode; v3 app运动结束后返回数据 IDOV3SportEndDataExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType year 年份 int month 月份 int dataVersion 数据版本 运动计划版本号为0x20(32) planType 计划类型 int 0x01：跑步计划3km ，0x02：跑步计划5km ， 0x03：跑步计划10km ，0x04：半程马拉松训练（二期） ，0x05：马拉松训练（二期） intervalSecond 心率间隔 int calories 卡路里 int (单位:J) distance 距离 int (单位:米) durations 持续时间 int (单位:分钟) step 步数 int (单位:步) warmUpSecond 热身锻炼时长 int (秒钟) anaeroicSecond 无氧锻炼时长 int (秒钟) fatBurnSecond 燃脂锻炼时长 int (秒钟) aerobicSecond 有氧锻炼时长 int (秒钟) limitSecond 极限锻炼时长 int (秒钟) avgHrValue 平均心率 int maxHrValue 最大心率 int warmUpValue 热身运动值 int burnFatValue 脂肪燃烧运动值 int aerobicValue 有氧运动值 int limitValue 极限运动值 int anaerobicValue 无氧运动值 int avgSpeed 平均速度 km/h maxSpeed 最大速度 km/h avgStepFrequency 平均步频 int maxStepFrequency 最大步频 int avgStepStride 平均步幅 int maxStepStride 最大步幅 int kmSpeed 平均公里配速 int fastKmSpeed 最快公里配速 int kmSpeedCount 公里配速个数 int kmSpeeds 公里配速集合 array mileCount 英里配速 个数 array mileCount 英里配速 个数 int mileSpeeds 英里配速集合 array stepsFrequencyCount 步频个数 int stepsFrequencys 步频集合 array trainingEffect 有氧训练效果 单位：无 范围 1.0 ~ 5.0 （*10倍） vo2Max 最大摄氧量 单位：毫升/公斤/分钟； 范围 0-80 actionDataCount 本次动作训练个数 int inClassCalories 课程内运动热量 单位千卡 completionRate 动作完成率 0—100 hrCompletionRate 心率控制率 0—100 recoverTime 恢复时长 单位小时(app收到该数据之后，每过一小时需要自减一) grade 摄氧量等级 0x01:低等 0x02:业余 0x03:一般 0x04：平均 0x05：良好 0x06：优秀 0x07：专业 actionData 动作完成内容 array type : 动作类型 1快走；2慢跑; 3中速跑；4快跑 heart_con_value : 每个动作心率控制 time : 动作完成时间 单位秒 goal_time ：动作目标时间 trainingOffset 训练的课程日期偏移 int 从0开始 - (void)v3_appEndSportReplyWithModel:(IDOV3SportEndDataExchangeModel *)model errorCode:(int)errorCode; ble停止app运动 IDOBleEndExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType distance 距离 单位:米 calories 卡路里 单位:J step 步数 单位:步 isSave 是否存储 bool avgHrValue 平均心率 int maxHrValue 最大心率 int burnFatMins 脂肪燃烧时长 (分钟) int aerobicMins 有氧锻炼时长(分钟) int limitMins 极限锻炼时长(分钟) int - (void)bleEndAppSportWithModel:(IDOBleEndExchangeModel *)model errorCode:(int)errorCode; ble暂停app运动 IDONewDataExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType - (void)blePauseAppSportWithModel:(IDONewDataExchangeModel *)model errorCode:(int)errorCode; ble恢复app运动 IDONewDataExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType - (void)bleRestoreAppSportWithModel:(IDONewDataExchangeModel *)model errorCode:(int)errorCode; app操作运动计划返回 IDOAppOperatePlanExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType operate 操作类型 0x01:开始运动 ,0x02：暂停运动 , 0x03:恢复运动 ，0x04：结束运动 0x05: 切换动作 trainingOffset 训练的课程日期偏移 int 从0开始 actionType 动作类型 1快走；2慢跑；3中速跑；4快跑 planType 计划类型 0x01：跑步计划3km ，0x02：跑步计划5km ， 0x03：跑步计划10km ，0x04：半程马拉松训练（二期） ，0x05：马拉松训练（二期） errorCode 错误码 int 0x00:成功 其他失败 - (void)appOperatePlanReplyWithModel:(IDOAppOperatePlanExchangeModel *)model errorCode:(int)errorCode; ble操作运动计划返回 IDOBleOperatePlanExchangeModel 参数 说明 备注 IDONewDataExchangeModel 父类属性 day、hour、minute、second、sportType operate 操作类型 0x01:开始运动 ,0x02：暂停运动 , 0x03:恢复运动 ，0x04：结束运动 0x05: 切换动作 actionType 动作类型 1快走；2慢跑；3中速跑；4快跑 planType 计划类型 0x01：跑步计划3km ，0x02：跑步计划5km ， 0x03：跑步计划10km ，0x04：半程马拉松训练（二期） ，0x05：马拉松训练（二期） errorCode 错误码 int 0x00:成功 其他失败 trainingYear 训练课程年份 int trainingMonth 训练课程月份 int trainingDay 训练课程日期 int time 动作目标时间 int 单位秒 lowHeart 心率范围低值 int heightHeart 心率范围高值 int - (void)bleOperatePlanWithModel:(IDOBleOperatePlanExchangeModel *)model errorCode:(int)errorCode; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"IDOApgsUpdateFunction.html":{"url":"IDOApgsUpdateFunction.html","title":"AGPS文件更新","keywords":"","body":"AGPS文件更新 11.1功能概述 AGPS是辅助全球卫星定位系统，指的是一种GPS的运行方式。它可以利用手机基地站的资讯，配合传统GPS卫星，让定位的速度更快。需要注意的是AGPS文件更新:手环连接App15秒后，查询GPS状态未运行更新AGPS文件，否则会导致更新失败。 11.2对应功能表 //gps funcTable19Model.gps 11.3获取GPS状态 =>获取GPS状态 11.4AGPS更新方法 Objc: initTransferManager().transferType = IDO_DATA_FILE_TRAN_AGPS_TYPE; initTransferManager().compressionType = IDO_DATA_TRAN_COMPRESSION_NO_USE_TYPE; initTransferManager().isSetConnectParam = YES; //online文件 fileName: online.ubx //offline文件 fileName: agps.ubx initTransferManager().fileName = fileName; initTransferManager().filePath = filePath; initTransferManager().addDetection(^(int errorCode) { if(errorCode == 0) { //更新前检测成功 }else { //更新前检测错误 } }).addProgress(^(int progress) { //更新文件进度（0-100） }).addTransfer(^(int errorCode) { if(errorCode == 0) { //文件传输成功 }else { //文件传输失败 } }).addWrite(^(int errorCode) { if(errorCode == 0) { //文件写入成功 }else { //文件写入失败 } }); [IDOTransferFileManager startTransfer]; Swift: initTransferManager().transferType = IDO_DATA_FILE_TRAN_TYPE.AGPS_TYPE; initTransferManager().compressionType = IDO_DATA_TRAN_COMPRESSION_TYPE.NO_USE_TYPE; initTransferManager().isSetConnectParam = true; //online文件 fileName: online.ubx //offline文件 fileName: agps.ubx initTransferManager().fileName = fileName; initTransferManager().filePath = filePath; initTransferManager().addDetection!{(errorCode)in if errorCode == 0{ //更新前检测成功 }else { //更新前检测错误 } }.addProgress!{(progress)in //更新文件进度（0-100） }.addTransfer!{(errorCode)in if errorCode == 0 { //文件传输成功 }else { //文件传输失败 } }.addWrite!{(errorCode)in if errorCode == 0 { //文件写入成功 }else { //文件写入失败 } }; IDOTransferFileManager.startTransfer(); 11.5 DemoAGPS更新功能入口 Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"IDOPhotoUpdateFunction.html":{"url":"IDOPhotoUpdateFunction.html","title":"壁纸文件更新","keywords":"","body":"壁纸文件更新 13.1功能概述 此功能可以动态更新手环的壁纸，根据获取的手环屏幕信息，传输对应大小尺寸的图片。 13.2壁纸表盘操作 IDOV3WallpaperDialInfoModel 参数 说明 备注 operate 操作类型 0x00:查询, 0x01:设置, 0x02: 删除壁纸表盘 location 位置 0:无效 1:表盘（上左）参考九宫格 2:表盘（上中）3:表盘（上右) 4:表盘（中左） 5:表盘（中中）6:表盘（中右）7:表盘（下左）8:表盘（下中）9:表盘（下右) hideType 隐藏类型 0:全部显示 1:隐藏子控件(图标和数字) widgetType 组件类型 0:无效 1:星期/日期 2:步数 3:距离 4:卡路里 5:心率 6:电量 timeColor 时间颜色 白色: #FFFFFF 黑色:#000000 红色:#FC1E58 棕色:#FF9501 天蓝色:#0091FF 青绿色:#44D7B6 widgetIconColor 组件图标颜色 白色: #FFFFFF 黑色:#000000 红色:#FC1E58 棕色:#FF9501 天蓝色:#0091FF 青绿色:#44D7B6 widgetNumColor 组件数字颜色 白色: #FFFFFF 黑色:#000000 红色:#FC1E58 棕色:#FF9501 天蓝色:#0091FF 青绿色:#44D7B6 获取当前设备壁纸表盘信息 Objc: initWatchDialManager().getWallpaperDialInfo(^(IDOV3WallpaperDialInfoModel * _Nullable model, int errorCode) { if (errorCode == 0) { //获取壁纸表盘信息成功 }else if (errorCode == 6) { //不支持获取壁纸表盘信息 }else { //获取壁纸表盘信息失败 } }); Swift: initWatchDialManager().getWallpaperDialInfo!{(model,errorCode)in { if errorCode == 0 { //获取壁纸表盘信息成功 }else if errorCode == 6 { //不支持获取壁纸表盘信息 }else { //获取壁纸表盘信息失败 } } 设置当前设备壁纸表盘信息 Objc: IDOV3WallpaperDialInfoModel * model = [IDOV3WallpaperDialInfoModel currentModel]; initWatchDialManager().setWallpaperDialInfo(^(int errorCode) { if (errorCode == 0) { //设置壁纸表盘信息成功 }else if (errorCode == 6) { //不支持设置壁纸表盘信息 }else { //设置壁纸表盘信息失败 } }, model) Swift: let model = IDOV3WallpaperDialInfoModel.current() initWatchDialManager().setWallpaperDialInfo!{(errorCode)in if errorCode == 0 { //设置壁纸表盘信息成功 }else if errorCode == 6 { //不支持设置壁纸表盘信息 }else { //设置壁纸表盘信息失败 } }(model) 13.3壁纸传输更新方法 Objc: initMakePhotoManager().fileName = fileName; initMakePhotoManager().filePath = filePath; initMakePhotoManager().addPhotoProgress(^(int progress) { //更新文件进度（0-100） }).addPhotoTransfer(^(int errorCode) { if(errorCode == 0) { //文件传输成功 }else { //文件传输失败 } }); [IDOMakePhotoManager startPhotoTransfer]; Swift: initMakePhotoManager().fileName = fileName; initMakePhotoManager().filePath = filePath; initMakePhotoManager().addPhotoProgress!{(progress)in //更新文件进度（0-100） }.addPhotoTransfer!{(errorCode)in if errorCode == 0 { //文件传输成功 }else { //文件传输失败 } }; IDOMakePhotoManager.startPhotoTransfer(); 13.4 Demo壁纸更新功能入口 Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"IDOSportTypes.html":{"url":"IDOSportTypes.html","title":"运动类型说明","keywords":"","body":"运动类型枚举 typedef NS_ENUM(NSInteger,IDO_SPORT_TYPE) { /** * 无运动类型 * null */ IDO_SPORT_TYPE_NULL=0, /** * 走路 * walk */ IDO_SPORT_TYPE_WALK=1, /** *跑步 * run */ IDO_SPORT_TYPE_RUN=2, /** *骑行 * cycing */ IDO_SPORT_TYPE_CYCLING=3, /** *徒步 * onfoot */ IDO_SPORT_TYPE_ONFOOT=4, /** *游泳 * swim */ IDO_SPORT_TYPE_SWIM=5, /** *爬山 * climb */ IDO_SPORT_TYPE_CLIMB=6, /** *羽毛球 * badmingon */ IDO_SPORT_TYPE_BADMINTON=7, /** *其他 * other */ IDO_SPORT_TYPE_OTHER=8, /** *健身 * fitness */ IDO_SPORT_TYPE_FITNESS=9, /** *动感单车 * dynamic */ IDO_SPORT_TYPE_DYNAMIC=10, /** *椭圆球 * ellipsoid */ IDO_SPORT_TYPE_ELLIPOSID=11, /**跑步机 *Treadmill */ IDO_SPORT_TYPE_TREADMILL=12, /** *仰卧起坐 *Sit-up */ IDO_SPORT_TYPE_SIT_UP=13, /** *俯卧撑 *Push-up */ IDO_SPORT_TYPE_PUSHUP=14, /** *哑铃 *Dumbbell */ IDO_SPORT_TYPE_DUMBBELLS=15, /** *举重 *Weightlifting */ IDO_SPORT_TYPE_LIFTING=16, /** *健身操 *Aerobics */ IDO_SPORT_TYPE_AEROBICS=17, /** *瑜伽 *Yoga */ IDO_SPORT_TYPE_YOGA=18, /** *跳绳 *Rope Skipping */ IDO_SPORT_TYPE_ROPE=19, /** *乒乓球 *Table tennis */ IDO_SPORT_TYPE_PINGPONG=20, /** *篮球 *Basketball */ IDO_SPORT_TYPE_BASKETBALL=21, /** *足球 *Soccer */ IDO_SPORT_TYPE_SOCKER=22, /** *排球 *Volleyball */ IDO_SPORT_TYPE_VOLLEYBALL=23, /** *网球 *Tennis */ IDO_SPORT_TYPE_TENNISBALL=24, /** *高尔夫球 *Golf */ IDO_SPORT_TYPE_GOLF=25, /** *棒球 *Baseball */ IDO_SPORT_TYPE_BASEBALL=26, /** *滑雪 *Skiing */ IDO_SPORT_TYPE_SKI=27, /** *轮滑 *Roller Skating */ IDO_SPORT_TYPE_ROLLER=28, /** *跳舞 *Dancing */ IDO_SPORT_TYPE_DANCING=29, /** *室内划船 */ IDO_SPORT_TYPE_ROLLER_MACHINE=31, /** *普拉提 *Pilates */ IDO_SPORT_TYPE_PILATES=32, /** *交叉训练 *Cross Training */ IDO_SPORT_TYPE_CROSS_TRAIN=33, /** *有氧训练 */ IDO_SPORT_TYPE_CARDIO=34, /** *尊巴舞 *Zumba */ IDO_SPORT_TYPE_ZUMBA=35, /** *广场舞 *Square dance */ IDO_SPORT_TYPE_SQUARE_DANCE=36, /** *平板支撑 *Plank */ IDO_SPORT_TYPE_PLANK=37, /** * 健身房 *Gym */ IDO_SPORT_TYPE_GYM=38, /** * 有氧健身操 *Aerobics */ IDO_SPORT_TYPE_AEROBICS_OXYGEN=39, /** * 户外跑步 *Outdoor run */ IDO_SPORT_TYPE_OUTDOOR_RUN=48, /** * 室内跑步 *Indoor run */ IDO_SPORT_TYPE_INDOOR_RUN=49, /** * 户外骑行 *Outdoor cycle */ IDO_SPORT_TYPE_OUTDOOR_CYCLE=50, /** * 室内骑行 *Indoor cycle */ IDO_SPORT_TYPE_INDOOR_CYCLE=51, /** * 户外走路 *Outdoor Hiking */ IDO_SPORT_TYPE_OUTDOOR_WALK=52, /** * 室内走路 *Indoor Walking */ IDO_SPORT_TYPE_INDOOR_WALK=53, /** * 泳池游泳(室内游泳) * Pool swim */ IDO_SPORT_TYPE_POOL_SWIM=54, /** * 开放水域游泳（室外游泳） * Open water swim */ IDO_SPORT_TYPE_WATER_SWIM=55, /** * 椭圆机 *Elliptical */ IDO_SPORT_TYPE_ELLIPTICAL=56, /** * 划船机 *Rower */ IDO_SPORT_TYPE_ROWER=57, /** * 高强度间歇训练法 *High-intensity interval training (HIIT) */ IDO_SPORT_TYPE_HIIT=58, /** * 板球运动cricket */ IDO_SPORT_TYPE_CRICKET=75, /** * 自由训练 *Others */ IDO_SPORT_TYPE_FREE_TRAINING=100, /** * 功能性力量训练 *Functional strength training */ IDO_SPORT_TYPE_FUNCTIONAL_STRENGTH_TRAINING=101, /** * 核心训练 *Core training */ IDO_SPORT_TYPE_CORE_TRAINING=102, /** * 踏步机 *Stepper */ IDO_SPORT_TYPE_STEPPER=103, /** * 整理放松 *Cooldown */ IDO_SPORT_TYPE_ORGANIZE_AND_RELAX=104, /** * 传统力量训练 *Traditional strength training */ IDO_SPORT_TYPE_TRADITIONAL_STRENGTH_TRAINING=110, /** * 引体向上 *Pull-up */ IDO_SPORT_TYPE_PULL_UP=112, /** * 开合跳 *Jumping jacks */ IDO_SPORT_TYPE_OPENING_AND_CLOSING_JUMP=114, /** * 深蹲 *Squat */ IDO_SPORT_TYPE_SQUAT=115, /** * 高抬腿 *High knee lift */ IDO_SPORT_TYPE_HIGH_LEG_LIFT=116, /** * 拳击 *Boxing */ IDO_SPORT_TYPE_BOXING=117, /** * 杠铃 *Barbell */ IDO_SPORT_TYPE_BARBELL=118, /** * 武术 *Martial arts */ IDO_SPORT_TYPE_MARTIAL_ART=119, /** * 太极 *Tai Chi */ IDO_SPORT_TYPE_TAI_CHI=120, /** * 跆拳道 *Taekwondo */ IDO_SPORT_TYPE_TAEKWONDO=121, /** * 空手道 *Karate */ IDO_SPORT_TYPE_KARATE=122, /** * 自由搏击 *Free sparring */ IDO_SPORT_TYPE_FREE_FIGHT=123, /** * 击剑 *Fencing */ IDO_SPORT_TYPE_FENCING=124, /** * 射箭 *Archery */ IDO_SPORT_TYPE_ARCHERY=125, /** * 体操 *Gymnastics */ IDO_SPORT_TYPE_ARTISTIC_GYMNASTICS=126, /** * 单杠 *Horizontal bar */ IDO_SPORT_TYPE_HORIZONTAL_BAR=127, /** * 双杠 *Parallel bars */ IDO_SPORT_TYPE_PARALLEL_BARS=128, /** * 漫步机 *Cardio cruiser */ IDO_SPORT_TYPE_WALKING_MACHINE=129, /** * 登山机 *Climbing machine */ IDO_SPORT_TYPE_MOUNTAINEERING_MACHINE=130, /** * 保龄球 *Bowling */ IDO_SPORT_TYPE_BOWLING=131, /** * 台球 *Billiards */ IDO_SPORT_TYPE_BILLIARDS=132, /** * 曲棍球 *Hockey */ IDO_SPORT_TYPE_HOCKEY=133, /** * 橄榄球 *American football */ IDO_SPORT_TYPE_RUGBY=134, /** * 壁球 *Squash */ IDO_SPORT_TYPE_SQUASH=135, /** * 垒球 *Softball */ IDO_SPORT_TYPE_SOFTBALL=136, /** * 手球 *Handball */ IDO_SPORT_TYPE_HANDBALL=137, /** * 毽球 *Shuttlecock kicking */ IDO_SPORT_TYPE_SHUTTLECOCK=138, /** * 沙滩足球 *Beach football */ IDO_SPORT_TYPE_BEACH_SOCCER=139, /** * 藤球 *Sepak takraw */ IDO_SPORT_TYPE_SEPAKTAKRAW=140, /** * 躲避球 *Dodge ball */ IDO_SPORT_TYPE_DODGEBALL=141, /** * 街舞 *Street dance */ IDO_SPORT_TYPE_HIP_HOP=152, /** * 芭蕾 *Ballet */ IDO_SPORT_TYPE_BALLET=153, /** * 社交舞 *Social dance */ IDO_SPORT_TYPE_SOCIAL_DANCE=154, /** * 飞盘 *Frisbee */ IDO_SPORT_TYPE_FRISBEE=155, /** * 飞镖 *Darts */ IDO_SPORT_TYPE_DARTS=156, /** * 骑马 *Horse riding */ IDO_SPORT_TYPE_RIDING=157, /** * 爬楼 *Stair climbing */ IDO_SPORT_TYPE_CLIMB_BUILDING=158, /** * 放风筝 *Kite flying */ IDO_SPORT_TYPE_KITE_FLYING=159, /** * 钓鱼 *Fishing */ IDO_SPORT_TYPE_GO_FISHING=160, /** * 雪橇 *Sledding */ IDO_SPORT_TYPE_SLED=161, /** * 雪车 *Bobsleigh */ IDO_SPORT_TYPE_SNOWMOBILE=162, /** * 单板滑雪 *Snowboarding */ IDO_SPORT_TYPE_SNOWBOARDING=163, /** * 雪上运动 *Snow sports */ IDO_SPORT_TYPE_SNOW_IDO_SPORTS=164, /** * 高山滑雪 *Alpine skiing */ IDO_SPORT_TYPE_ALPINE_SKIING=165, /** * 越野滑雪 *Cross-country skiing */ IDO_SPORT_TYPE_CROSS_COUNTRY_SKIING=166, /** * 冰壶 *Curling */ IDO_SPORT_TYPE_CURLING=167, /** * 冰球 *Ice hockey */ IDO_SPORT_TYPE_ICE_HOCKEY=168, /** * 冬季两项 *Biathlon */ IDO_SPORT_TYPE_WINTER_BIATHLON=169, /** * 冲浪 *Surfing */ IDO_SPORT_TYPE_SURFING=170, /** * 帆船 *Sailboating */ IDO_SPORT_TYPE_SAILBOAT=171, /** * 帆板 *Windsurfing */ IDO_SPORT_TYPE_SAILBOARD=172, /** * 皮艇 *Kayaking */ IDO_SPORT_TYPE_KAYAK=173, /** * 摩托艇 *Motorboating */ IDO_SPORT_TYPE_MOTORBOAT=174, /** * 划艇 *Paddling */ IDO_SPORT_TYPE_ROWBOAT=175, /** * 赛艇 *Rowing */ IDO_SPORT_TYPE_ROWING=176, /** * 龙舟 *Dragon boat racing */ IDO_SPORT_TYPE_DRAGON_BOAT=177, /** * 水球 *Water polo */ IDO_SPORT_TYPE_WATER_POLO=178, /** * 漂流 *Rafting */ IDO_SPORT_TYPE_DRIFT=179, /** * 滑板 *Skateboarding */ IDO_SPORT_TYPE_SKATE=180, /** * 攀岩 *Rock climbing */ IDO_SPORT_TYPE_ROCK_CLIMBING=181, /** * 蹦极 *Bungee jumping */ IDO_SPORT_TYPE_BUNGEE_JUMPING=182, /** * 跑酷 *Parkour */ IDO_SPORT_TYPE_PARKOUR=183, /** * BMX 越野自行车 */ IDO_SPORT_TYPE_BMX=184, /** * 户外玩耍 *Outdoor play */ IDO_SPORT_TYPE_OUTDOOR_FUN=193, /** * 其他运动 *Other sports */ IDO_SPORT_TYPE_OTHER_ACTIVITY=194, }; Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"IDOQueryDataFunction.html":{"url":"IDOQueryDataFunction.html","title":"数据查询功能","keywords":"","body":"数据查询功能 14.1功能概述 在每个模型类中有查询同步数据封装方法。只有封装的方法查询才有详细的数据，而自定义查询方法查询的数据没有详细的数据，详情数据需要自行转换赋值。建议数据库操作不要删除数据库数据，而只插入或更新数据。当前数据只有在同步完成后才能查询到，未同步的数据仍然在手环中。 14.2主要查询接口 v2步数数据查询 v3步数数据查询 v2睡眠数据查询 v3睡眠数据查询 血氧数据查询 压力数据查询 v2活动数据查询 v3活动数据查询 身体电量数据查询 v2血压数据查询 v3血压数据查询 v2 GPS数据查询 v3 GPS数据查询 皮温数据查询 呼吸率数据查询 v2心率数据查询 v3心率数据查询 噪音数据查询 游泳数据查询 14.3 Demo查询数据入口 Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQuerySportFunction_v2.html":{"url":"query/IDOQuerySportFunction_v2.html","title":"v2步数数据查询","keywords":"","body":"v2步数数据查询 参数说明 IDOSyncSportDataItemInfoBluetoothModel 参数 说明 备注 mode 运动模式 00:安静,01:轻微,10:中等活跃,11:激烈 sportCount 运动步数 int activeTime 活跃时间 int (秒) calories 卡路里 int (大卡) distance 运动距离 int (米) dateStr 运动时间日期 精确到日期 int serialNumber 序列号 int IDOSyncSportDataInfoBluetoothModel 参数 说明 备注 itemsCount 运动数据包数量 int year 年份 int month 月份 int day 日期 int dateStr 时间戳 精确到日期 str sportItems 运动数据集合 array (IDOSyncSportDataItemInfoBluetoothModel) totalStep 运动总步数 int (单位 ：步数) totalCalories 运动总消耗卡路里 int (单位 ：大卡) totalDistances 运动总距离 int (单位 ：米) totalActiveTime 运动总时长 int (秒) minuteOffset 开始偏移量 int perMinute 产生数据间隔 int goalSportData 目标运动数量 int totalCount 一天步数items个数 int keyWord 关键字 0:无效;1:超;2:浪;3:稳;4:慢;5:懒;6:香;7:安;8:困;9:燃;10:暖;11:动;12:佛;13:秀;14:拼;15:惯;16:凉;只适用于Donha app(已废弃) 按年查询步数 Objc: //参数：年、Mac地址、是否查询详情 [IDOSyncSportDataModel queryOneYearSportsWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //参数：年、Mac地址、是否查询详情 IDOSyncSportDataModel.queryOneYearSports(withYear: year, macAddr: macAddr, isQueryItems: false); 按月查询步数 Objc: //参数：年、月、Mac地址、月份内的日期集合、是否查询详情 [IDOSyncSportDataModel queryOneMonthSportsWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //参数：年、月、Mac地址、月份内的日期集合、是否查询详情 IDOSyncSportDataModel.queryOneMonthSports(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); 按周查询步数 Objc: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 [IDOSyncSportDataModel queryOneWeekSportsWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 IDOSyncSportDataModel.queryOneWeekSports(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); 按日查询步数 Objc: //参数: 年、月、日、Mac地址 [IDOSyncSportDataModel queryOneDaySportDetailWithMac:macAddr year:year month:month day:day]; Swift: //参数: 年、月、日、Mac地址 IDOSyncSportDataModel.queryOneDaySportDetail(withMac:macAddr, year:year, month:month, day:day); 查询所有步数 Objc: //参数: Mac地址 [IDOSyncSportDataModel queryAllSportsWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncSportDataModel.queryAllSports(withMac:macAddr); 查询所有基础步数 Objc: //参数: Mac地址 [IDOSyncSportDataModel queryAllContractedSportsWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncSportDataModel.queryAllContractedSports(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQuerySportFunction_v3.html":{"url":"query/IDOQuerySportFunction_v3.html","title":"v3步数数据查询","keywords":"","body":"v3步数数据查询 参数说明 IDOSyncV3SportDataItemInfoBluetoothModel 参数 说明 备注 mode 运动模式 00:安静,01:轻微,10:中等活跃,11:激烈 sportCount 运动步数 int activeTime 活跃时间 int (秒) calories 卡路里 int (大卡) distance 运动距离 int (米) dateStr 运动时间日期 精确到日期 int serialNumber 序列号 int * IDOSyncV3SportDataInfoBluetoothModel 参数 说明 备注 wearFlagArray 24小时的每个小时的佩戴分钟数 array (number) itemsCount 运动数据包数量 int year 年份 int month 月份 int day 日期 int dateStr 时间戳 精确到日期 str sportItems 运动数据集合 array (IDOSyncV3SportDataItemInfoBluetoothModel) totalStep 运动总步数 int (单位 ：步数) totalCalories 运动总消耗卡路里 int (单位 ：大卡) activitycalories 静息卡路里 int (单位 ：大卡) restingCalories 活动卡路里 int (单位 ：大卡) totalDistances 运动总距离 int (单位 ：米) totalActiveTime 运动总时长 int (秒) minuteOffset 开始偏移量 int perMinute 产生数据间隔 int goalSportData 目标运动数量 int totalCount 一天步数items个数 int 按年查询步数 Objc: //参数：年、Mac地址、是否查询详情 [IDOSyncSportDataModel queryOneYearV3SportsWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //参数：年、Mac地址、是否查询详情 IDOSyncSportDataModel.queryOneYearV3Sports(withYear: year, macAddr: macAddr, isQueryItems: false); 按月查询步数 Objc: //参数：年、月、Mac地址、月份内的日期集合、是否查询详情 [IDOSyncSportDataModel queryOneMonthV3SportsWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //参数：年、月、Mac地址、月份内的日期集合、是否查询详情 IDOSyncSportDataModel.queryOneMonthV3Sports(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); 按周查询步数 Objc: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 [IDOSyncSportDataModel queryOneWeekV3SportsWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 IDOSyncSportDataModel.queryOneWeekV3Sports(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); 按日查询步数 Objc: //参数: 年、月、日、Mac地址 [IDOSyncSportDataModel queryOneDayV3SportDetailWithMac:macAddr year:year month:month day:day]; Swift: //参数: 年、月、日、Mac地址 IDOSyncSportDataModel.queryOneDayV3SportDetail(withMac:macAddr, year:year, month:month, day:day); 查询所有步数 Objc: //参数: Mac地址 [IDOSyncSportDataModel queryAllV3SportsWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncSportDataModel.queryAllV3Sports(withMac:macAddr); 查询所有基础步数 Objc: //参数: Mac地址 [IDOSyncSportDataModel queryAllV3ContractedSportsWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncSportDataModel.queryAllV3ContractedSports(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQuerySleepFunction_v2.html":{"url":"query/IDOQuerySleepFunction_v2.html","title":"v2睡眠数据查询","keywords":"","body":"v2睡眠数据查询 参数说明 IDOSyncSleepDataItemInfoBluetoothModel 参数 说明 备注 sleepStatus 睡眠状态 睡眠状态(0x01: 醒着， 0x02:浅睡， 0x03:深睡) durations 持续时间 int dateStr 时间戳 精确到日期 int startTimeStr 时间戳 精确到分钟 int serialNumber 序列号 int IDOSyncSleepDataInfoBluetoothModel 参数 说明 备注 itemsCount 睡眠数据包数量 int endHour 睡眠结束时钟 int endMinute 睡眠结束分钟 int totalMinute 总睡眠时长 int (单位 ：分钟) lightSleepCount 浅睡眠次数 int deepSleepCount 深睡眠次数 int wakeCount 醒来次数 int wakeMinute 醒来时长 int (单位 : 分钟) lightSleepMinute 浅睡眠时长 int (单位 : 分钟) deepSleepMinute 深睡眠时长 int (单位 : 分钟) goalSleepData 目标睡眠时长 int (单位 : 分钟) sleepItems 睡眠数据集合 array (IDOSyncSleepDataItemInfoBluetoothModel) year 年份 int month 月份 int day 日期 int dateStr 时间戳 精确到日期 str startTimeStr 时间戳 精确到分钟 str sleepScore 睡眠评分 int (1-100) 按年查询睡眠 Objc: //参数：年、Mac地址、是否查询详情 [IDOSyncSleepDataModel queryOneYearSleepsWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //参数：年、Mac地址、是否查询详情 IDOSyncSleepDataModel.queryOneYearSleeps(withYear: year, macAddr: macAddr, isQueryItems: false); 按月查询睡眠 Objc: //参数：年、月、Mac地址、月份内的日期集合、是否查询详情 [IDOSyncSleepDataModel queryOneMonthSleepsWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //参数：年、月、Mac地址、月份内的日期集合、是否查询详情 IDOSyncSleepDataModel.queryOneMonthSleeps(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); 按周查询睡眠 Objc: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 [IDOSyncSleepDataModel queryOneWeekSleepsWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 IDOSyncSleepDataModel.queryOneWeekSleeps(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); 按日查询睡眠 Objc: //参数: 年、月、日、Mac地址 [IDOSyncSleepDataModel queryOneDaySleepsDetailWithMac:macAddr year:year month:month day:day]; Swift: //参数: 年、月、日、Mac地址 IDOSyncSleepDataModel.queryOneDaySleepsDetail(withMac:macAddr, year:year, month:month, day:day); 查询所有睡眠 Objc: //参数: Mac地址 [IDOSyncSleepDataModel queryAllSleepsWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncSleepDataModel.queryAllSleeps(withMac:macAddr); 查询所有基础睡眠 Objc: //参数: Mac地址 [IDOSyncSleepDataModel queryAllContractedSleepsWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncSleepDataModel.queryAllContractedSleeps(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQuerySleepFunction_v3.html":{"url":"query/IDOQuerySleepFunction_v3.html","title":"v3睡眠数据查询","keywords":"","body":"v3睡眠数据查询 参数说明 IDOSyncV3SleepDataItemInfoBluetoothModel 参数 说明 备注 stage 睡眠状态 阶段 0x01: 醒着, 0x02 : 浅睡, 0x03 : 深睡 ；0x04 : 眼动 durations 持续时间 int (秒) serialNumber 序列号 int IDOSyncV3SleepDataInfoBluetoothModel 参数 说明 备注 dataType 睡眠类型 0x01 正常睡眠,0x02 午睡小憩,0x04 不支持眼动（科学睡眠） itemsCount 睡眠数据包数量 int dateStr 起床日期 str getUpTimeStr 起床的时间戳 str 精确到分钟 fallAsleepYear 入睡时间 年 int fallAsleepMonth 入睡时间 月 int fallAsleepDay 入睡时间 日 int fallAsleepHour 入睡时间 时 int fallAsleepMinutes 入睡时间 分 int getUpYear 起床时间 年 int getUpMonth 起床时间 月 int getUpDay 起床时间 日 int getUpHour 起床时间 时 int getUpMinutes 起床时间 分 int totalMinute 总睡眠时长 int (分钟) wakeMinute 醒来时长 int lightSleepMinute 醒来时长 int deepSleepMinute 深睡眠时长 int remSleepMinute 眼动眠时长 int lightSleepCount 浅睡眠次数 int wakeCount 醒来次数 int deepSleepCount 深睡眠次数 int remSleepCount 眼动睡眠次数 int sleepItems 睡眠集合 array (IDOSyncV3SleepDataItemInfoBluetoothModel) awrrStatus 呼吸状况 int breathRate 呼吸质量 0-100 无单位 sleepScore 睡眠评分 1-100 goalSleepData 目标睡眠时长 int (分钟) 按年查询睡眠 Objc: //参数：年、Mac地址、是否查询详情 [IDOSyncSleepDataModel v3QueryOneYearSleepsWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //参数：年、Mac地址、是否查询详情 IDOSyncSleepDataModel.v3QueryOneYearSleeps(withYear: year, macAddr: macAddr, isQueryItems: false); 按月查询睡眠 Objc: //参数：年、月、Mac地址、月份内的日期集合、是否查询详情 [IDOSyncSleepDataModel v3QueryOneMonthSleepsWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //参数：年、月、Mac地址、月份内的日期集合、是否查询详情 IDOSyncSleepDataModel.v3QueryOneMonthSleeps(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); 按周查询睡眠 Objc: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 [IDOSyncSleepDataModel v3QueryOneWeekSleepsWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 IDOSyncSleepDataModel.v3QueryOneWeekSleeps(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); 按日查询睡眠 Objc: //参数: 年、月、日、Mac地址 [IDOSyncSleepDataModel v3QueryOneDaySleepsDetailWithMac:macAddr year:year month:month day:day]; Swift: //参数: 年、月、日、Mac地址 IDOSyncSleepDataModel.v3QueryOneDaySleepsDetail(withMac:macAddr, year:year, month:month, day:day); 查询所有睡眠 Objc: //参数: Mac地址 [IDOSyncSleepDataModel v3QueryAllSleepsWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncSleepDataModel.v3QueryAllSleeps(withMac:macAddr); 查询所有基础睡眠 Objc: //参数: Mac地址 [IDOSyncSleepDataModel v3QueryAllContractedSleepsWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncSleepDataModel.v3QueryAllContractedSleeps(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQueryBopFunction.html":{"url":"query/IDOQueryBopFunction.html","title":"血氧数据查询","keywords":"","body":"血氧数据查询 参数说明 IDOSyncBloodOxygenItemInfoBluetoothModel 参数 说明 备注 dateStr 日期 str offset 子时间偏移量 int (秒钟) spo2Val 血氧值 int serialNumber 序列号 int IDOSyncBloodOxygenDataInfoBluetoothModel 参数 说明 备注 year 年份 int month 月份 int day 日期 int dateStr 日期 精确到日期 str minuteOffset 总时间偏移量 str (秒钟) itemsCount 血氧数据包量 int bloodOxygens 血氧集合 array (IDOSyncBloodOxygenItemInfoBluetoothModel) avgBloodOxygen 平均血氧 int maxBloodOxygen 最大血氧 int minBloodOxygen 最小血氧 int 按年查询血氧 Objc: //参数: 年、Mac地址、是否查询详情 [IDOSyncSpo2DataModel queryOneYearBloodOxygenWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //参数: 年、Mac地址、是否查询详情 IDOSyncSpo2DataModel.queryOneYearBloodOxygen(withYear: year, macAddr: macAddr, isQueryItems: false); 按月查询血氧 Objc: //参数: 年、月、Mac地址、月内日期集合、是否查询详情 [IDOSyncSpo2DataModel queryOneMonthBloodOxygenWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //参数: 年、月、Mac地址、月内日期集合、是否查询详情 IDOSyncSpo2DataModel.queryOneMonthBloodOxygen(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); 按周查询血氧 Objc: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 [IDOSyncSpo2DataModel queryOneWeekBloodOxygenWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 IDOSyncSpo2DataModel.queryOneWeekBloodOxygen(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); 按日查询血氧 Objc: //参数: 年、月、日、Mac地址 [IDOSyncSpo2DataModel queryOneDayBloodOxygenDetailWithMac:macAddr year:year month:month day:day]; Swift: //参数: 年、月、日、Mac地址 IDOSyncSpo2DataModel.queryOneDayBloodOxygenDetail(withMac:macAddr, year:year, month:month, day:day); 查询所有血氧 Objc: //参数: Mac地址 [IDOSyncSpo2DataModel queryAllBloodOxygensWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncSpo2DataModel.queryAllBloodOxygens(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQueryPressureFunction.html":{"url":"query/IDOQueryPressureFunction.html","title":"压力数据查询","keywords":"","body":"压力数据查询 参数说明 IDOSyncPressureItemInfoBluetoothModel 参数 说明 备注 dateStr 日期 精确到日期 str offset 子时间偏移量 int (分钟) pressureVal 压力值 int serialNumber 序列号 int IDOSyncPressureDataInfoBluetoothModel 参数 说明 备注 year 年份 int month 月份 int day 日期 int dateStr 日期 精确到日期 str minuteOffset 总时间偏移量 int (分钟) itemsCount 压力数据包量 int pressures 压力集合 array (IDOSyncPressureItemInfoBluetoothModel) 按年查询压力 Objc: //参数：年、Mac地址、是否查询详情 [IDOSyncPressureDataModel queryOneYearPressureWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //参数：年、Mac地址、是否查询详情 IDOSyncPressureDataModel.queryOneYearPressure(withYear: year, macAddr: macAddr, isQueryItems: false); 按月查询压力 Objc: //参数：年、月、Mac地址、月份内的日期集合、是否查询详情 [IDOSyncPressureDataModel queryOneMonthPressureWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //参数：年、月、Mac地址、月份内的日期集合、是否查询详情 IDOSyncPressureDataModel.queryOneMonthPressure(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); 按周查询压力 Objc: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 [IDOSyncPressureDataModel queryOneWeekPressureWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 IDOSyncPressureDataModel.queryOneWeekPressure(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); 按日查询压力 Objc: //参数: 年、月、日、Mac地址 [IDOSyncPressureDataModel queryOneDayPressureDetailWithMac:macAddr year:year month:month day:day]; Swift: //参数: 年、月、日、Mac地址 IDOSyncPressureDataModel.queryOneDayPressureDetail(withMac:macAddr, year:year, month:month, day:day); 查询所有压力 Objc: //参数: Mac地址 [IDOSyncPressureDataModel queryAllPressuresWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncPressureDataModel.queryAllPressures(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQueryActivityFunction_v2.html":{"url":"query/IDOQueryActivityFunction_v2.html","title":"v2活动数据查询","keywords":"","body":"v2活动数据查询 模型说明 IDOSyncActivityDataInfoBluetoothModel 参数 说明 备注 year 年份 int month 月份 int day 日期 int hour 时 int minute 分 int second 秒 int dateStr 日期 精确到日期 str timeStr 开始时间 精确到秒 str dataLength 数据长度 int hrInterval 心率数据产生间隔 int (单位 : s) hrItemCount 心率项数据个数 int packetCount 包的总数 int type 运动类型 运动类型参照 IDOSportTypes文件说明 step 步数(骑行 时，步数为 0) int durations 持续时长 int (单位:s) calories 卡路里 int (单 位:大卡) distance 距离 int (单位: 米) avgHrValue 平均心率 int maxHrValue 最大心率 int burnFatMins 脂肪燃烧时长 int aerobicMins 心肺锻炼时长 [有氧运动时长] int (分钟) limitMins 极限锻炼时长 int (分钟) anaerobicMins 无氧锻炼时长 int (分钟) warmUpMins 热身锻炼时长 int (分钟) hrValuesStr 有序列号的心率集合 json字符串 str isSave 是否需要保存数据 (用于数据交换) bool startFrom 运动发起端 (1 : 手环发起 0 : app发起) int 按时间戳查询活动 Objc: //参数时间戳、Mac地址 [IDOSyncActivityDataModel queryOneActivityDataWithTimeStr:timeStr macAddr:macAddr]; Swift: //参数时间戳、Mac地址 IDOSyncActivityDataModel.queryOneActivityData(withTimeStr:timeStr, macAddr: macAddr); 按日查询活动 Objc: //参数年、月、日、Mac地址 [IDOSyncActivityDataModel queryOneDayActivityDataWithMacAddr:macAddr year:year month:month day:day]; Swift: //参数年、月、日、Mac地址 IDOSyncActivityDataModel.queryOneDayActivityData(withMacAddr:macAddr, year:year,month:month,day:day); 按月查询活动 Objc: //参数年、月、Mac地址 [IDOSyncActivityDataModel queryOneMonthActivityDataWithMacAddr:macAddr year:year month:month]; Swift: //参数年、月、Mac地址 IDOSyncActivityDataModel.queryOneMonthActivityData(withMacAddr:macAddr, year:year,month:month); 按年查询活动 Objc: //参数年、Mac地址 [IDOSyncActivityDataModel queryOneYearActivityDataWithMacAddr:macAddr year:year]; Swift: //参数年、Mac地址 IDOSyncActivityDataModel.queryOneYearActivityData(withMacAddr:macAddr, year:year); 分页查询活动 Objc: //参数页数、每页个数、Mac地址 [IDOSyncActivityDataModel queryOnePageActivityDataWithPageIndex:pageIndex numOfPage:numOfPage macAddr:macAddr ]; Swift: //参数页数、每页个数、Mac地址 IDOSyncActivityDataModel.queryOnePageActivityData(withPageIndex:pageIndex, numOfPage:numOfPage,macAddr:macAddr); 所有轨迹运动 Objc: //参数Mac地址 [IDOSyncActivityDataModel queryAllTrajectorySportActivitysWithMac:macAddr]; Swift: //参数Mac地址 IDOSyncActivityDataModel.queryAllTrajectorySportActivitys(withMac:macAddr); 所有轻运动 Objc: //参数Mac地址 [IDOSyncActivityDataModel queryAllLightSportActivitysWithMac:macAddr]; Swift: //参数Mac地址 IDOSyncActivityDataModel.queryAllLightSportSportActivitys(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQueryActivityFunction_v3.html":{"url":"query/IDOQueryActivityFunction_v3.html","title":"v3活动数据查询","keywords":"","body":"v3活动数据查询 模型说明 IDOSyncV3ActivityDataInfoBluetoothModel 参数 说明 备注 year 年份 int month 月份 int day 日期 int hour 时 int minute 分 int second 秒 int dateStr 日期 精确到日期 str timeStr 开始时间 精确到秒 str dataLength 数据长度 int hrInterval 心率数据产生间隔 int (单位 : s) hrItemCount 心率项数据个数 int packetCount 包的总数 int type 运动类型 运动类型参照 IDOSportTypes文件说明 planType 计划类型 1：跑步计划3km ，2：跑步计划5km ，3：跑步计划10km ， 4：半程马拉松训练（二期） ，5：马拉松训练（二期） 64 : 6分钟轻松跑 , 65：10分钟轻松跑 ，66：15分钟轻松跑 ，67：走跑结合初级 ，68：走跑结合进阶 ，69：走跑结合强化 128: 跑后拉伸 step 步数(骑行时，步数为 0) int durations 持续时长 int (单位:s) calories 卡路里 int (单 位:大卡) distance 距离 int (单位: 米) inClassCalories 课内卡路里 单 位:大卡 completionRate 动作完成率 0-100 hrCompletionRate 心率控制率 0-100 avgHrValue 平均心率 int maxHrValue 最大心率 int burnFatMins 脂肪燃烧时长 int aerobicMins 心肺锻炼时长 [有氧运动时长] int (分钟) limitMins 极限锻炼时长 int (分钟) anaerobicMins 无氧锻炼时长 int (分钟) warmUpMins 热身锻炼时长 int (分钟) hrValuesStr 有序列号的心率集合 json字符串 str dataValuesStr 每分钟保存数据集合 json字符串 str 最大保存6小时 @{@\"steps\":@(steps),@\"calories\":@(calories),@\"distance\":@(distance)} isSave 是否需要保存数据 (用于数据交换) bool startFrom 运动发起端 (1 : 手环发起 0 : app发起) int avgSpeed 平均速度 int maxSpeed 最大速度 int avgKmSpeed 平均配速 int fastKmSpeed 最快配速 int avgStepFrequency 平均步频 int maxStepFrequency 最大步频 int avgStepStride 平均步幅 int maxStepStride 最大步幅 int warmUpHrTime 热身锻炼时长 (秒钟) int burnFatHrTime 脂肪锻炼时长 (秒钟) int aerobicHrTime 心肺锻炼时长 (秒钟) int anaerobicHrTime 无氧锻炼时长 (秒钟) int limitHrTime 极限锻炼时长 (秒钟) int kmSpeedItems 每公里的配速集合 最大公里数100公里 s钟数据传输 一公里用了多少s frequencyItems 步频集合 array mileSpeedItems 每英里的配速集合 array connectApp 手环是否连接app 1是连接，0是未连接 avgPaceSpeed 平均配速 传过来的是s钟 比如361 361/60=6分 余数是1s 6''1' , 公里和英里是按照 英里= 公里*1609/1000f fastPaceSpeed 最快配速 int trainingEffect 训练效果 范围 1.0 ~ 5.0 （*10倍） vo2Max 最大摄氧量 单位：毫升/公斤/分钟； 范围 0-80 不放大100倍 grade 摄氧量等级 1:低等 2:业余 3:一般 4：平均 5：良好 6：优秀 7：专业 recoveryTimeYear 恢复时间点年 int recoveryTimeMon 恢复时间点月 int recoveryTimeDay 恢复时间点日 int recoveryTimeHour 恢复时间点时 int recoveryTimeMin 恢复时间点分 int recoveryTimeSecond 恢复时间点秒 int endMonth 运动结束时间 月 int endDay 运动结束时间 日 int endHour 运动结束时间 时 int endMinute 运动结束时间 分 int minHrValue 最小心率值 int paceSpeedItems 实时配速数组 传过来的是 s 钟 每5s算一次 paddleNumberItems 桨次数组 一分钟保存一次 paddleFrequencyItems 桨频数组 一分钟保存一次 存平均值 treadFrequencyItems 踏频数组 一分钟保存一次 存平均值 actionItems 动作详情集合 type: 动作类型（十进制） 1快走；2慢跑；3中速跑；4快跑 ； 71左腿前测拉伸；72右腿前测拉伸；73左腿后侧拉伸；74右腿后侧拉伸；75左腿弓步拉伸；76右腿弓步拉伸； 77左腿内侧拉伸；78右腿内侧拉伸；79左侧小腿拉伸；80右侧小腿拉伸 actualTime : 实际运动时间 goalTime : 目标时间 单位 s heartValue : 心率控制值 trainingOffset 训练的课程日期偏移 从0开始 按时间戳查询活动 Objc: //参数时间戳、Mac地址 [IDOSyncActivityDataModel queryOneV3ActivityDataWithTimeStr:timeStr macAddr:macAddr]; Swift: //参数时间戳、Mac地址 IDOSyncActivityDataModel.queryOneV3ActivityData(withTimeStr:timeStr, macAddr: macAddr); 按日查询活动 Objc: //参数年、月、日、Mac地址 [IDOSyncActivityDataModel queryOneDayV3ActivityDataWithMacAddr:macAddr year:year month:month day:day]; Swift: //参数年、月、日、Mac地址 IDOSyncActivityDataModel.queryOneDayV3ActivityData(withMacAddr:macAddr, year:year,month:month,day:day); 按月查询活动 Objc: //参数年、月、Mac地址 [IDOSyncActivityDataModel queryOneMonthV3ActivityDataWithMacAddr:macAddr year:year month:month]; Swift: //参数年、月、Mac地址 IDOSyncActivityDataModel.queryOneMonthV3ActivityData(withMacAddr:macAddr, year:year,month:month); 按年查询活动 Objc: //参数年、Mac地址 [IDOSyncActivityDataModel queryOneYearV3ActivityDataWithMacAddr:macAddr year:year]; Swift: //参数年、Mac地址 IDOSyncActivityDataModel.queryOneYearV3ActivityData(withMacAddr:macAddr, year:year); 分页查询活动 Objc: //参数页数、每页个数、Mac地址 [IDOSyncActivityDataModel queryOnePageV3ActivityDataWithPageIndex:pageIndex numOfPage:numOfPage macAddr:macAddr ]; Swift: //参数页数、每页个数、Mac地址 IDOSyncActivityDataModel.queryOnePageV3ActivityData(withPageIndex:pageIndex, numOfPage:numOfPage,macAddr:macAddr); 所有轨迹运动 Objc: //参数Mac地址 [IDOSyncActivityDataModel queryAllTrajectorySportV3ActivitysWithMac:macAddr]; Swift: //参数Mac地址 IDOSyncActivityDataModel.queryAllTrajectorySportV3Activitys(withMac:macAddr); 所有轻运动 Objc: //参数Mac地址 [IDOSyncActivityDataModel queryAllLightSportV3ActivitysWithMac:macAddr]; Swift: //参数Mac地址 IDOSyncActivityDataModel.queryAllLightSportSportV3Activitys(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQueryBodyPowerFunction.html":{"url":"query/IDOQueryBodyPowerFunction.html","title":"身体电量数据查询","keywords":"","body":"身体电量数据查询 参数说明 IDOSyncBodyPowerDataModel 参数 说明 备注 year 年 int month 月 int day 日 int dateStr 时间戳 精确到日期 str startTime 起始时间 单位秒，基于0点的偏移 itemCount 身体电量个数 int bodyPowers 身体电量集合 @[{@\"offset\":@(0),@\"value\":@(0),@\"type\":@(0),@\"diff_value\":@(0)}...]value：实际产生值 有小数 固件返回值应将实际值乘以100offset ：基于前一个数据点时间偏移量 (秒钟)type : 标签类型 0x01：睡眠 0x02：放松 0x03：锻炼 0x04活动 0x05：压力diff_value : 相对于上一个值的差值 按年查询身体电量 Objc: //参数：年、Mac地址 [IDOSyncBodyPowerDataModel queryOneYearBodyPowerWithYear:year macAddr:macAddr]; Swift: //参数：年、Mac地址 IDOSyncBodyPowerDataModel.queryOneYearBreathRate(withYear: year, macAddr: macAddr); 按月查询身体电量 Objc: //参数：年、月、Mac地址、月份内的日期集合 [IDOSyncBodyPowerDataModel queryOneMonthBodyPowerWithYear:year month:month macAddr:macAddr datesOfMonth:&days]; Swift: //参数：年、月、Mac地址、月份内的日期集合 IDOSyncBodyPowerDataModel.queryOneMonthBodyPower(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days); 按周查询身体电量 Objc: //参数: 星期索引、星期开始、Mac地址、星期内日期集合 [IDOSyncBodyPowerDataModel queryOneWeekBodyPowerWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days]; Swift: //参数: 星期索引、星期开始、Mac地址、星期内日期集合 IDOSyncBodyPowerDataModel.queryOneWeekBodyPower(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days); 按日查询身体电量 Objc: //参数: 年、月、日、Mac地址 [IDOSyncBodyPowerDataModel queryOneDayBodyPowerDetailWithMac:macAddr year:year month:month day:day]; Swift: //参数: 年、月、日、Mac地址 IDOSyncBodyPowerDataModel.queryOneDayBodyPowerDetail(withMac:macAddr, year:year, month:month, day:day); 查询所有身体电量 Objc: //参数: Mac地址 [IDOSyncBodyPowerDataModel queryAllBodyPowerWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncBodyPowerDataModel.queryAllBodyPower(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQueryBpFunction_v2.html":{"url":"query/IDOQueryBpFunction_v2.html","title":"v2血压数据查询","keywords":"","body":"v2血压数据查询 参数说明 IDOSyncBpDataItemInfoBluetoothModel 参数 说明 备注 sysBlood 较大收缩压 int diasBlood 较小舒张压 int offset 子时间偏移量 int (分钟) serialNumber 序列号 int dateStr 时间戳 精确到日期 str timeStr 时间戳 精确到分钟 str isLocal 本地设置数据，区分手环同步的数据 bool IDOSyncBpDataInfoBluetoothModel 参数 说明 备注 itemsCount 血压数据包量 int sleepAvgBp 睡眠平均血压 int maxBp 最大血压值 int year 年份 int month 月份 int day 日期 int bloodbPressures 血压集合 array (IDOSyncBpDataItemInfoBluetoothModel) dateStr 时间戳 精确到日期 str minuteOffset 总时间偏移量 int (分钟) isLocal 本地设置数据，区分手环同步的数据 bool 按年查询血压 Objc: //参数: 年、Mac地址、是否查询详情 [IDOSyncBpDataModel queryOneYearBloodPressuresWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //参数: 年、Mac地址、是否查询详情 IDOSyncBpDataModel.queryOneYearBloodPressures(withYear: year, macAddr: macAddr, isQueryItems: false); 按月查询血压 Objc: //参数: 年、月、Mac地址、月内日期集合、是否查询详情 [IDOSyncBpDataModel queryOneMonthBloodPressuresWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //参数: 年、月、Mac地址、月内日期集合、是否查询详情 IDOSyncBpDataModel.queryOneMonthBloodPressures(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); 按周查询血压 Objc: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 [IDOSyncBpDataModel queryOneWeekBloodPressuresWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 IDOSyncBpDataModel.queryOneWeekBloodPressures(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); 按日查询血压 Objc: //参数: 年、月、日、Mac地址 [IDOSyncBpDataModel queryOneDayBloodPressureDetailWithMac:macAddr year:year month:month day:day]; Swift: //参数: 年、月、日、Mac地址 IDOSyncBpDataModel.queryOneDayBloodPressureDetail(withMac:macAddr, year:year, month:month, day:day); 查询所有血压 Objc: //参数: Mac地址 [IDOSyncBpDataModel queryAllBloodPressuresWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncBpDataModel.queryAllBloodPressures(withMac:macAddr); 查询最近一天的血压 Objc: //参数: Mac地址 [IDOSyncBpDataModel queryLastDayBloodPressureDetailWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncBpDataModel.queryLastDayBloodPressureDetail(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQueryBpFunction_v3.html":{"url":"query/IDOQueryBpFunction_v3.html","title":"v3血压数据查询","keywords":"","body":"v3血压数据查询 参数说明 IDOSyncV3BpDataModel 参数 说明 备注 itemsCount 血压数据包量 int sleepAvgBp 睡眠平均血压 int maxBp 最大血压值 int year 年份 int month 月份 int day 日期 int bloodbPressures 血压集合 血压集合 @[{@\"sys_blood\":@(0),@\"dias_blood\":@(0),@\"offset\":@(0)}...] sys_blood ：收缩压 dias_blood ：舒张压 offset ：偏移量 (分钟) dateStr 时间戳 精确到日期 str minuteOffset 总时间偏移量 int (分钟) 按年查询血压 Objc: //参数: 年、Mac地址 [IDOSyncV3BpDataModel queryOneYearBpWithYear:year macAddr:macAddr]; Swift: //参数: 年、Mac地址 IDOSyncV3BpDataModel.queryOneYearBp(withYear: year, macAddr: macAddr); 按月查询血压 Objc: //参数: 年、月、Mac地址、月内日期集合 [IDOSyncV3BpDataModel queryOneMonthBpWithYear:year month:month macAddr:macAddr datesOfMonth:&days]; Swift: //参数: 年、月、Mac地址、月内日期集合 IDOSyncV3BpDataModel.queryOneMonthBp(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days); 按周查询血压 Objc: //参数: 星期索引、星期开始、Mac地址、星期内日期集合 [IDOSyncV3BpDataModel queryOneWeekBpWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days]; Swift: //参数: 星期索引、星期开始、Mac地址、星期内日期集合 IDOSyncV3BpDataModel.queryOneWeekBp(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days); 按日查询血压 Objc: //参数: 年、月、日、Mac地址 [IDOSyncV3BpDataModel queryOneDayBpDetailWithMac:macAddr year:year month:month day:day]; Swift: //参数: 年、月、日、Mac地址 IDOSyncV3BpDataModel.queryOneDayBpDetail(withMac:macAddr, year:year, month:month, day:day); 查询所有血压 Objc: //参数: Mac地址 [IDOSyncV3BpDataModel queryAllBpWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncV3BpDataModel.queryAllBp(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQueryGpsFunction_v2.html":{"url":"query/IDOQueryGpsFunction_v2.html","title":"v2 GPS数据查询","keywords":"","body":"v2 GPS数据查询 参数说明 IDOSyncGpsDataItemInfoBluetoothModel 参数 说明 备注 serialNumber 序列号 int latitudeStr 经度 str longitudeStr 纬度 str timeStr 发起运动时间 时间戳 精确到秒 str dateStr 日期 精确到日期 str IDOSyncGpsDataInfoBluetoothModel 参数 说明 备注 year 年份 int month 月份 int day 日期 int hour 时 int minute 分 int second 秒 int timeStr 发起运动时间 时间戳 精确到秒 str dateStr 日期 精确到日期 str itemsCount gps数据包数量 int interval 间隔时长 int (单位：秒) startFrom 运动发起端 int (1 : 手环发起 0 : app发起) gpsItems GPS 坐标点集合 array (IDOSyncGpsDataItemInfoBluetoothModel) 按时间戳查询GPS信息 Objc: //参数: 时间戳、Mac地址 [IDOSyncGpsDataModel queryOneActivityCoordinatesWithTimeStr:timeStr macAddr:macAddr]; Swift: //参数: 时间戳、Mac地址 IDOSyncGpsDataModel.queryOneActivityCoordinates(withTimeStr:timeStr, macAddr: macAddr); 判断某个活动是否存在轨迹 Objc: //参数: 时间戳、Mac地址 [IDOSyncGpsDataModel queryActivityHasCoordinatesWithTimeStr:timeStr macAddr:macAddr]; Swift: //参数: 时间戳、Mac地址 IDOSyncGpsDataModel.queryActivityHasCoordinates(withTimeStr:timeStr, macAddr: macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQueryGpsFunction_v3.html":{"url":"query/IDOQueryGpsFunction_v3.html","title":"v3 GPS数据查询","keywords":"","body":"v3 GPS数据查询 参数说明 IDOSyncV3GpsDataItemInfoBluetoothModel 参数 说明 备注 serialNumber 序列号 int latitudeStr 经度 str longitudeStr 纬度 str IDOSyncV3GpsDataInfoBluetoothModel 参数 说明 备注 year 年份 int month 月份 int day 日期 int hour 时 int minute 分 int second 秒 int timeStr 发起运动时间 时间戳 精确到秒 str dateStr 日期 精确到日期 str itemsCount gps数据包数量 int interval 间隔时长 int (单位：秒) startFrom 运动发起端 int (1 : 手环发起 0 : app发起) gpsItems GPS 坐标点集合 array (IDOSyncV3GpsDataItemInfoBluetoothModel) 按时间戳查询GPS信息 Objc: //参数: 时间戳、Mac地址 [IDOSyncV3GpsDataModel queryV3GpsCoordinatesWithTimeStr:timeStr macAddr:macAddr]; Swift: //参数: 时间戳、Mac地址 IDOSyncV3GpsDataModel.queryV3GpsCoordinates(withTimeStr:timeStr, macAddr: macAddr); 判断某个活动是否存在轨迹 Objc: //参数: 时间戳、Mac地址 [IDOSyncV3GpsDataModel queryActivityHasCoordinatesWithTimeStr:timeStr macAddr:macAddr]; Swift: //参数: 时间戳、Mac地址 IDOSyncV3GpsDataModel.queryActivityHasCoordinates(withTimeStr:timeStr, macAddr: macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQueryTemperatureFunction.html":{"url":"query/IDOQueryTemperatureFunction.html","title":"皮温数据查询","keywords":"","body":"皮温数据查询 参数说明 IDOSyncTemperatureItemDataModel 参数 说明 备注 offset 子时间偏移量 int (单位:秒) value 皮温值 int dateStr 时间戳 精确到日期 str IDOSyncTemperatureBluetoothDataModel 参数 说明 备注 year 年 int month 月 int day 日 int dateStr 时间戳 精确到日期 str startTime 开始时间 单位秒 intervalMode 数据的间隔 秒钟、分钟 avgTemperature 平均的温度 int maxTemperature 最大的温度 int minTemperature 最小的温度 int itemCount 皮温个数 int items 皮温集合 array (IDOSyncTemperatureItemDataModel) 按年查询皮温 Objc: //参数：年、Mac地址、是否查询详情 [IDOSyncTemperatureDataModel queryOneYearTemperatureWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //参数：年、Mac地址、是否查询详情 IDOSyncNoiseDataModel.queryOneYearTemperature(withYear: year, macAddr: macAddr, isQueryItems: false); 按月查询皮温 Objc: //参数：年、月、Mac地址、月份内的日期集合、是否查询详情 [IDOSyncTemperatureDataModel queryOneMonthTemperatureWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //参数：年、月、Mac地址、月份内的日期集合、是否查询详情 IDOSyncTemperatureDataModel.queryOneMonthTemperature(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); 按周查询皮温 Objc: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 [IDOSyncTemperatureDataModel queryOneWeekTemperatureWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 IDOSyncTemperatureDataModel.queryOneWeekTemperature(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); 按日查询皮温 Objc: //参数: 年、月、日、Mac地址 [IDOSyncTemperatureDataModel queryOneDayTemperatureDetailWithMac:macAddr year:year month:month day:day]; Swift: //参数: 年、月、日、Mac地址 IDOSyncTemperatureDataModel.queryOneDayNoiseDetail(withMac:macAddr, year:year, month:month, day:day); 查询所有皮温 Objc: //参数: Mac地址 [IDOSyncTemperatureDataModel queryAllTemperatureWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncTemperatureDataModel.queryAllNoise(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQueryBreathRateFunction.html":{"url":"query/IDOQueryBreathRateFunction.html","title":"呼吸率数据查询","keywords":"","body":"呼吸率数据查询 参数说明 IDOSyncBreathRateDataModel 参数 说明 备注 year 年 int month 月 int day 日 int dateStr 时间戳 精确到日期 str itemCount item个数 int breathRates 呼吸率集合 @[{@\"offset\":@(0),@\"value\":@(0)}...]value：呼吸率offset ：每一个都基于0点偏移量 (秒钟) 按年查询呼吸率 Objc: //参数：年、Mac地址 [IDOSyncBreathRateDataModel queryOneYearBreathRateWithYear:year macAddr:macAddr]; Swift: //参数：年、Mac地址 IDOSyncBreathRateDataModel.queryOneYearBreathRate(withYear: year, macAddr: macAddr); 按月查询呼吸率 Objc: //参数：年、月、Mac地址、月份内的日期集合 [IDOSyncBreathRateDataModel queryOneMonthBreathRateWithYear:year month:month macAddr:macAddr datesOfMonth:&days]; Swift: //参数：年、月、Mac地址、月份内的日期集合 IDOSyncBreathRateDataModel.queryOneMonthBreathRate(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days); 按周查询呼吸率 Objc: //参数: 星期索引、星期开始、Mac地址、星期内日期集合 [IDOSyncBreathRateDataModel queryOneWeekBreathRateWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days]; Swift: //参数: 星期索引、星期开始、Mac地址、星期内日期集合 IDOSyncBreathRateDataModel.queryOneWeekBreathRate(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days); 按日查询呼吸率 Objc: //参数: 年、月、日、Mac地址 [IDOSyncBreathRateDataModel queryOneDayBreathRateDetailWithMac:macAddr year:year month:month day:day]; Swift: //参数: 年、月、日、Mac地址 IDOSyncBreathRateDataModel.queryOneDayBreathRateDetail(withMac:macAddr, year:year, month:month, day:day); 查询所有呼吸率 Objc: //参数: Mac地址 [IDOSyncBreathRateDataModel queryAllBreathRateWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncBreathRateDataModel.queryAllBreathRate(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQueryHrFunction_v2.html":{"url":"query/IDOQueryHrFunction_v2.html","title":"v2心率数据查询","keywords":"","body":"v2心率数据查询 参数说明 IDOSyncHrDataItemInfoBluetoothModel 参数 说明 备注 offset 子时间偏移量 int (单位:分钟) data 心率值 int dateStr 时间戳 精确到日期 str serialNumber 序列号 int IDOSyncHrDataInfoBluetoothModel 参数 说明 备注 itemsCount 心率数据包数量 int minuteOffset 总时间偏移量 int (单位:分钟) silentHeartRate 静态心率 int burnFatThreshold 燃烧脂肪阀值 int aerobicThreshold 肌肉锻炼阀值 int limitThreshold 极限阀值 int burnFatMins 脂肪燃烧时长 int (单位 ：分钟) aerobicMins 肌肉锻炼时长 int (单位 ：分钟) limitMins 极限运动时长 int (单位 ：分钟) userMaxHr 用户最大心率 int warmUpThreshold 热身运动阈值 int warmUpMins 热身运动时间 int (单位 ：分钟) anaerobicThreshold 无氧运动阈值 int anaerobicMins 无氧运动时间 int (单位 ：分钟) year 年份 int month 月份 int day 日期 int heartRates 心率集合 array (IDOSyncHrDataItemInfoBluetoothModel) dateStr 时间戳 精确到日期 str 按年查询心率 Objc: //参数：年、Mac地址、是否查询详情 [IDOSyncHeartRateDataModel queryOneYearHearRatesWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //参数：年、Mac地址、是否查询详情 IDOSyncHeartRateDataModel.queryOneYearHearRates(withYear: year, macAddr:macAddr, isQueryItems: false); 按月查询心率 Objc: //参数：年、月、Mac地址、是否查询详情 [IDOSyncHeartRateDataModel queryOneMonthHearRatesWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //参数：年、月、Mac地址、是否查询详情 IDOSyncHeartRateDataModel.queryOneMonthHearRates(withYear: year, macAddr:macAddr, isQueryItems: false); 按周查询心率 Objc: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 [IDOSyncHeartRateDataModel queryOneWeekHearRatesWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 IDOSyncHeartRateDataModel.queryOneWeekHearRates(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); 按日查询心率 Objc: //参数: 年、月、日、Mac地址 [IDOSyncHeartRateDataModel queryOneDayHearRatesDetailWithMac:macAddr year:year month:month day:day]; Swift: //参数: 年、月、日、Mac地址 IDOSyncHeartRateDataModel.queryOneDayHearRatesDetail(withMac:macAddr, year:year, month:month, day:day); 查询所有心率 Objc: //参数: Mac地址 [IDOSyncHeartRateDataModel queryAllHearRatesWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncHeartRateDataModel.queryAllHearRates(withMac:macAddr); 查询只包含静心心率 Objc: //参数: Mac地址 [IDOSyncHeartRateDataModel queryAllContractedHearRatesWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncHeartRateDataModel.queryAllContractedHearRates(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQueryHrFunction_v3.html":{"url":"query/IDOQueryHrFunction_v3.html","title":"v3心率数据查询","keywords":"","body":"v3心率数据查询 参数说明 IDOSyncSecHrDataItemInfoBluetoothModel 参数 说明 备注 offset 子时间偏移量 int (单位:分钟) hrValue 心率值 int dateStr 时间戳 精确到日期 str serialNumber 序列号 int IDOSyncSecHrDataInfoBluetoothModel 参数 说明 备注 itemsCount 心率数据包数量 int secondOffset 总时间偏移量 int (单位:秒钟) silentHeartRate 静态心率 int burnFatThreshold 燃烧脂肪阀值 int aerobicThreshold 肌肉锻炼阀值 int limitThreshold 极限阀值 int burnFatMins 脂肪燃烧时长 int (单位 ：分钟) aerobicMins 肌肉锻炼时长 int (单位 ：分钟) limitMins 极限运动时长 int (单位 ：分钟) userMaxHr 用户最大心率 int userAvgHr 用户平均心率 int warmUpThreshold 热身运动阈值 int warmUpMins 热身运动时间 int (单位 ：分钟) anaerobicThreshold 无氧运动阈值 int anaerobicMins 无氧运动时间 int (单位 ：分钟) year 年份 int month 月份 int day 日期 int heartRates 心率集合 array (IDOSyncHrDataItemInfoBluetoothModel) minutesHrDic 5分钟间隔心率集合 @{@\"total_offset\":@(0),@\"heart_rates\":@[@{@\"offset\":@(0),@\"value\":@(0)}...]}; heightLowHrItems 高低心率集合 @[@{@\"hour\":@(hour),@\"minute\":@(minute),@\"type\":@(type:0：心率过低时的心率值 0：心率过高时的心率值),@\"hr_value\":@(hr_value)}]; dateStr 时间戳 精确到日期 str firstOffset 第一次同步开始总偏移 int (废弃) 按年查询心率 Objc: //参数：年、Mac地址、是否查询详情 [IDOSyncHeartRateDataModel queryOneYearSecHearRatesWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //参数：年、Mac地址、是否查询详情 IDOSyncHeartRateDataModel.queryOneYearSecHearRates(withYear: year, macAddr:macAddr, isQueryItems: false); 按月查询心率 Objc: //参数：年、月、Mac地址、是否查询详情 [IDOSyncHeartRateDataModel queryOneMonthSecHearRatesWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //参数：年、月、Mac地址、是否查询详情 IDOSyncHeartRateDataModel.queryOneMonthSecHearRates(withYear: year, macAddr:macAddr, isQueryItems: false); 按周查询心率 Objc: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 [IDOSyncHeartRateDataModel queryOneWeekSecHearRatesWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 IDOSyncHeartRateDataModel.queryOneWeekSecHearRates(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); 按日查询心率 Objc: //参数: 年、月、日、Mac地址 [IDOSyncHeartRateDataModel queryOneDaySecHearRatesDetailWithMac:macAddr year:year month:month day:day]; Swift: //参数: 年、月、日、Mac地址 IDOSyncHeartRateDataModel.queryOneDaySecHearRatesDetail(withMac:macAddr, year:year, month:month, day:day); 查询所有心率 Objc: //参数: Mac地址 [IDOSyncHeartRateDataModel queryAllSecHearRatesWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncHeartRateDataModel.queryAllSecHearRates(withMac:macAddr); 查询只包含静心心率 Objc: //参数: Mac地址 [IDOSyncHeartRateDataModel queryAllContractedSecHearRatesWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncHeartRateDataModel.queryAllContractedSecHearRates(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQueryNoiseFunction.html":{"url":"query/IDOQueryNoiseFunction.html","title":"噪音数据查询","keywords":"","body":"噪音数据查询 参数说明 IDOSyncNoiseBluetoothItemDataModel 参数 说明 备注 offset 子时间偏移量 int (单位:秒) value 噪音值 int dateStr 时间戳 精确到日期 str IDOSyncNoiseBluetoothDataModel 参数 说明 备注 year 年 int month 月 int day 日 int dateStr 时间戳 精确到日期 str startTime 开始时间 单位秒 intervalMode 数据的间隔 秒钟、分钟 avgNoise 平均的噪音 int maxNoise 最大的噪音 int minNoise 最小的噪音 int itemCount 噪音个数 int items 噪音集合 array (IDOSyncNoiseBluetoothItemDataModel) 按年查询噪音 Objc: //参数：年、Mac地址、是否查询详情 [IDOSyncNoiseDataModel queryOneYearNoiseWithYear:year macAddr:macAddr isQueryItems:NO]; Swift: //参数：年、Mac地址、是否查询详情 IDOSyncNoiseDataModel.queryOneYearNoise(withYear: year, macAddr: macAddr, isQueryItems: false); 按月查询噪音 Objc: //参数：年、月、Mac地址、月份内的日期集合、是否查询详情 [IDOSyncNoiseDataModel queryOneMonthNoiseWithYear:year month:month macAddr:macAddr datesOfMonth:&days isQueryItems:NO]; Swift: //参数：年、月、Mac地址、月份内的日期集合、是否查询详情 IDOSyncNoiseDataModel.queryOneMonthNoise(withYear:year, month:month, macAddr:macAddr, datesOfMonth:&days, isQueryItems:false); 按周查询噪音 Objc: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 [IDOSyncNoiseDataModel queryOneWeekNoiseWithWeekIndex:week weekStartDay:0 macAddr:macAddr datesOfWeek:&days isQueryItems:NO]; Swift: //参数: 星期索引、星期开始、Mac地址、星期内日期集合、是否查询详情 IDOSyncNoiseDataModel.queryOneWeekNoise(withWeekIndex:week, weekStartDay:0, macAddr:macAddr, datesOfWeek:&days, isQueryItems: false); 按日查询噪音 Objc: //参数: 年、月、日、Mac地址 [IDOSyncNoiseDataModel queryOneDayNoiseDetailWithMac:macAddr year:year month:month day:day]; Swift: //参数: 年、月、日、Mac地址 IDOSyncNoiseDataModel.queryOneDayNoiseDetail(withMac:macAddr, year:year, month:month, day:day); 查询所有噪音 Objc: //参数: Mac地址 [IDOSyncNoiseDataModel queryAllNoiseWithMac:macAddr]; Swift: //参数: Mac地址 IDOSyncNoiseDataModel.queryAllNoise(withMac:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"query/IDOQuerySwimFunction.html":{"url":"query/IDOQuerySwimFunction.html","title":"游泳数据查询","keywords":"","body":"游泳数据查询 参数说明 IDOSyncSwimItemDataInfoBluetoothModel 参数 说明 备注 timeStr 开始时间 时间戳 精确到秒 duration 持续时间 int activeTime 活跃时间 int (秒) strokesNumber 划水次数 int swolf 评分 int serialNumber 序列号 int swimmingPosture 每一趟的泳姿 0x00 : 混合泳; 0x01 : 自由泳; 0x02 : 蛙泳; 0x03 : 仰泳; 0x04 : 蝶泳; distance 每一趟的距离 单位:米 frequency 频率 int speed 配速 int stopTime 结束时间 int differenceTime 2趟之间的休息时间 int IDOSyncSwimmingDataInfoBluetoothModel 参数 说明 备注 year 年 int month 月 int day 日 int hour 时 int minute 分 int second 秒 int dateStr 时间戳 精确到日期 str timeStr 开始时间 str type 游泳类型 0x00:无效,0x01:室内游泳,0x02:开阔水域游泳 calories 卡路里 int (单 位:大卡) distance 距离 int (单位: 米) trips 游泳趟数 int averageSwolf 平均 swolf int totalStrokesNumber 总划水次数 int swimmingPosture 主泳姿 0x00 : 混合泳; 0x01 : 自由泳; 0x02 : 蛙泳; 0x03 : 仰泳; 0x04 : 蝶泳 poolDistance 泳池距离 int (单位:cm) itemsCount 游泳数据包量 int swimmingItems 游泳集合 array (IDOSyncSwimItemDataInfoBluetoothModel) confirmDistance 用户确认的距离 int duration 游泳持续时长 int (单位:分钟) avgSpeed 平均配速 int avgFrequency 平均划水频率 int swimVersion 游泳数据版本号 int 查询一条游泳数据 Objc: //参数：时间戳、Mac地址 [IDOSyncSwimDataModel querySwimDataWithTimeStr:timeStr macAddr:macAddr]; Swift: //参数：时间戳、Mac地址 IDOSyncSwimDataModel.querySwimData(withTimeStr: timeStr, macAddr: macAddr); 查询一天游泳数据 Objc: //参数：日期时间戳、Mac地址、是否查询详情 [IDOSyncSwimDataModel querySwimDataWithDateStr:dateStr macAddr:macAddr isQueryItems:NO]; Swift: //参数：日期时间戳、Mac地址、是否查询详情 IDOSyncSwimDataModel.querySwimData(withDateStr:dateStr, macAddr:macAddr,isQueryItems:false); 查询所有游泳数据 Objc: //参数：Mac地址 [IDOSyncSwimDataModel queryAllSwimDataWithMacAddr:macAddr]; Swift: //参数：Mac地址 IDOSyncSwimDataModel.queryAllSwimData(withMacAddr:macAddr); Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"IDOWatchDialFunction.html":{"url":"IDOWatchDialFunction.html","title":"表盘设置功能","keywords":"","body":"表盘设置功能 15.1功能概述 表盘功能主要有获取手表屏幕信息功能，获取表盘列表信息功能，设置当前表盘信息功能，传输表盘文件。 15.2 表盘操作属性 参数 说明 备注 filePath 表盘文件传输路径 str colorFormat 颜色格式 int 设备屏幕信息接口获取 blockSize 压缩块大小 int 设备屏幕信息接口获取 15.3 获取屏幕信息 IDOWatchScreenInfoModel 参数 说明 备注 familyName 表盘家族名称 str width 宽度 int height 高度 int colorFormat 颜色格式 int size 尺寸 * 100 int - 获取当前设备屏幕信息 Objc: ```objc initWatchDialManager().getDialScreenInfo(^(IDOWatchScreenInfoModel * _Nullable model, int errorCode) { if (errorCode == 0) { //获取屏幕信息成功 }else if (errorCode == 6) { //不支持此功能 }else { //获取屏幕信息失败 } }); ``` Swift: ```swift initWatchDialManager().getDialListInfo!{(model,errorCode)in if errorCode == 0{ //获取屏幕信息成功 }else if errorCode == 6 { //不支持此功能 }else { //获取屏幕信息失败 } }; ``` ### 15.4 获取V2表盘列表 * IDOWatchDialInfoItemModel 参数 说明 备注 fileName 表盘名称 str（唯一标示） operate 操作 0x00:查询正在使用表盘 0x01:设置表盘 0x02:删除表盘 IDOWatchDialInfoModel 参数 说明 备注 fileCount 文件个数 int remainingSpace 剩余空间 int fileMaxSize 单个文件最大size int currentDialName 当前设置的表盘名称 str dialArray 当前手环所有表盘信息集合 array * 获取v2所有表盘信息 Objc: ```objc initWatchDialManager().getDialListInfo(^(IDOWatchScreenInfoModel * _Nullable model, int errorCode) { if (errorCode == 0) { //获取表盘信息成功 }else if (errorCode == 6) { //不支持此功能 }else { //获取表盘信息失败 } }); ``` Swift: ```swift initWatchDialManager().getDialListInfo!{(model,errorCode)in if errorCode == 0{ //获取屏幕信息成功 }else if errorCode == 6 { //不支持此功能 }else { //获取屏幕信息失败 } }; ``` * 获取v2当前表盘名字 Objc: ```objc initWatchDialManager().getCurrentDialInfo(^(NSString * _Nullable fileName, int errorCode) { if (errorCode == 0) { //获取当前表盘信息成功 }else if (errorCode == 6) { //不支持此功能 }else { //获取当前表盘信息失败 } }); ``` Swift: ```swift initWatchDialManager().getCurrentDialInfo!{(name,errorCode)in if errorCode == 0{ //获取当前表盘信息成功 }else if errorCode == 6 { //不支持此功能 }else { //获取当前表盘信息失败 } }; ``` ### 15.5 v2设置当前表盘 - IDOWatchDialInfoItemModel 参数 说明 备注 fileName 表盘名称 str（唯一标示） operate 操作 0x00:查询正在使用表盘 0x01:设置表盘 0x02:删除表盘 Objc: IDOWatchDialInfoItemModel * model = [[IDOWatchDialInfoItemModel alloc]init]; initWatchDialManager().setCurrentDial(^(int errorCode) { if (errorCode == 0) { //设置当前表盘成功 }else if (errorCode == 6) { //不支持此功能 }else { //设置当前表盘失败 } }, model); Swift: let model = IDOWatchDialInfoItemModel.init() initWatchDialManager().setCurrentDial!{(errorCode)in if errorCode == 0{ //设置当前表盘成功 }else if errorCode == 6 { //不支持此功能 }else { //设置当前表盘失败 } }(model) 15.6 获取V3表盘列表 //获取v3表盘列表功能表 __IDO_FUNCTABLE__.funcTable35Model.getNewWatchList IDOV3WatchDialInfoModel 参数 说明 备注 localWatchNum 本地表盘的总个数 int cloudWatchNum 云端表盘的总个数 int wallpaperWatchNum 壁纸表盘的总个数 int useCloudWatchNum 云端表盘的已经使用个数 int useWallpaperWatchNum 壁纸表盘的已经使用个数 int currentWatchName 当前设置的表盘名称 int watchFrameVersion 框架版本号 从1开始 int fileMaxSize 单个文件最大 KB watchListNum 当前手表所有表盘数量 int watchTotalSize 表盘的总容量 单位：字节 watchUsedSize 表盘的已经使用容量 单位：字节 maxDownloadSpaceSize 最大的可用表盘下载连续空间大小 单位：字节 dialArray 当前手表所有表盘信息 IDOV3WatchDialInfoItemModel 集合 IDOV3WatchDialInfoItemModel 参数 说明 备注 type 表盘类型 1：普通表盘； 2：壁纸表盘； 3：云表盘 watchVersion 表盘版本号 云表盘起作用 sortNumber 表盘排列序号 int 从0开始 size 表盘文件大小 int Objc: initWatchDialManager().getV3WatchListInfo(^(IDOV3WatchDialInfoModel * _Nullable model, int errorCode) { if (errorCode == 0) { //获取v3表盘列表信息成功 }else if (errorCode == 6) { //不支持此功能 }else { //获取v3表盘列表信息失败 } }); Swift: initWatchDialManager().getV3WatchListInfo!((mode,errorCode)in { if errorCode == 0{ //获取v3表盘列表信息成功 }else if errorCode == 6 { //不支持此功能 }else { //获取v3表盘列表信息失败 } }) 15.7 设置表盘排序 //设置表盘排序功能表 __IDO_FUNCTABLE__.funcTable34Model.watchDialSort IDOV3WatchDialInfoModel 参数 说明 备注 watchListNum 当前手表所有表盘数量 int dialArray 当前手表所有表盘信息 IDOV3WatchDialInfoItemModel 集合 IDOV3WatchDialInfoItemModel 参数 说明 备注 type 表盘类型 1：普通表盘； 2：壁纸表盘； 3：云表盘 watchVersion 表盘版本号 云表盘起作用 sortNumber 表盘排列序号 int 从0开始 size 表盘文件大小 int Objc: IDOV3WatchDialInfoModel * dialModel = [IDOV3WatchDialInfoModel currentModel]; initWatchDialManager().setWatchDialSort(^(int errorCode) { if (errorCode == 0) { //设置表盘排序成功 }else if (errorCode == 6) { //不支持此功能 }else { //设置表盘排序失败 } }, dialModel); Swift: initWatchDialManager().setWatchDialSort!((errorCode)in{ if errorCode == 0 { //设置表盘排序成功 }else if errorCode == 6 { //不支持此功能 }else { //设置表盘排序失败 } }) 15.8表盘文件传输功能 Objc: initWatchDialManager().colorFormat = model.colorFormat; initWatchDialManager().blockSize = model.blockSize; initWatchDialManager().addDialProgress(^(int progress) { //表盘传输进度（0-100） }).addDialTransfer(^(int errorCode,int finishingTime) { if (errorCode == 0) { //传输完成 }else if (errorCode == 6) { //不支持传输 }else { //传输失败 } }).filePath = filePath; [IDOWatchDialManager startDialTransfer]; Swift: initWatchDialManager().colorFormat = model.colorFormat; initWatchDialManager().blockSize = model.blockSize; initWatchDialManager().addDialProgress!{(progress)in //表盘传输进度（0-100） }.addDialTransfer!{(errorCode,finishingTime)in if errorCode == 0{ //传输完成 }else if errorCode == 6{ //不支持传输 }else { //传输失败 } }.filePath = filePath; IDOWatchDialManager.startDialTransfer(); 15.9 Demo表盘功能入口 Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "},"IDOMessageIconManager.html":{"url":"IDOMessageIconManager.html","title":"消息图标更新","keywords":"","body":"第三方动态消息图标更新 16.1功能概述 设备和手机配对好之后，如果手机接收到消息通知，通过ANCS协议发送给设备，第一次显示默认图标和名字，此时固件把应用包名传输给app，app通过包名后台获取应用信息和应用图标，并通过协议传输给固件，并实现对应应用图标和名字更新。 16.2属性说明 参数 说明 备注 delegate 代理对象 id(处理消息图标回调方法) handleIconAndNameComplete 处理完成应用图标和名字block回调 block currentModel 缓存的第三方应用信息 模型对象(IDOGetAppPackNameModel)，每次读取本地数据库 baseUrlPath base url 地址 如果未赋值则走Apple 接口 苹果完整的地址: https://itunes.apple.com/lookup?bundleId=XXX&country=XXX 建议后台做缓存处理，加快数据加载 16.3 方法说明 //主动获取图标和名字 - (BOOL)getAppIconAndName; 第一次连接设备时，主动获取一次固件默认缓存的包名信息。其他时候，不需要执行此方法,SDK已经监听固件更新通知。 16.4 代理方法说明 /** 处理应用图标和名字日志回调 */ - (void)handleIconLogMessage:(NSString *)message; /** 处理完成应用图标和名字回调 */ - (void)handleIconAndNameComplete; 代理方法回调是可选执行 Copyright © 2015-2020 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-07-06 15:44:55 "}}